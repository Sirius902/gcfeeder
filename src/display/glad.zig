const std = @import("std");

const GLproc = fn () callconv(.C) void;

const GLvoid = c_void;

const GLbyte = i8;
const GLubyte = u8;
const GLchar = u8;
const GLboolean = bool;

const GLshort = i16;
const GLushort = u16;

const GLint = i32;
const GLuint = u32;
const GLint64 = i64;
const GLuint64 = u64;

const GLintptr = isize;
const GLsizeiptr = usize;
const GLintptrARB = isize;
const GLsizeiptrARB = usize;
const GLint64EXT = i64;
const GLuint64EXT = u64;

const GLsizei = u32;
const GLclampx = i32;
const GLfixed = i32;
const GLhalf = f16;
const GLhalfNV = f16;
const GLhalfARB = f16;

const GLenum = u32;
const GLbitfield = u32;

const GLfloat = f32;
const GLdouble = f64;
const GLclampf = f32;
const GLclampd = f64;

const GLcharARB = u8;

const GLhandleARB = if (std.builtin.os.tag == .macos) *c_void else GLuint;

const __GLsync = enum(GLenum) { _ };

const GLsync = *const __GLsync;

const _cl_context = enum(GLenum) { _ };

const _cl_event = enum(GLenum) { _ };

const GLvdpauSurfaceNV = GLintptr;
const GLeglClientBufferEXT = *const c_void;
const GLeglImageOES = *const c_void;

const GLDEBUGPROC = fn (
    source: GLenum,
    type_: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *c_void,
) callconv(.C) void;
const GLDEBUGPROCARB = fn (
    source: GLenum,
    type_: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *c_void,
) callconv(.C) void;
const GLDEBUGPROCKHR = fn (
    source: GLenum,
    type_: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *GLvoid,
) callconv(.C) void;
const GLDEBUGPROCAMD = fn (
    id: GLuint,
    category: GLenum,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *GLvoid,
) callconv(.C) void;
const GLVULKANPROCNV = fn () callconv(.C) void;

const glAccumxOES = ?fn (op: GLenum, value: GLfixed) callconv(.C) void;
const glAcquireKeyedMutexWin32EXT = ?fn (memory: GLuint, key: GLuint64, timeout: GLuint) callconv(.C) GLboolean;
const glActiveProgramEXT = ?fn (program: GLuint) callconv(.C) void;
const glActiveShaderProgram = ?fn (pipeline: GLuint, program: GLuint) callconv(.C) void;
const glActiveStencilFaceEXT = ?fn (face: GLenum) callconv(.C) void;
const glActiveTexture = ?fn (texture: GLenum) callconv(.C) void;
const glActiveTextureARB = ?fn (texture: GLenum) callconv(.C) void;
const glActiveVaryingNV = ?fn (program: GLuint, name: *const GLchar) callconv(.C) void;
const glAlphaFragmentOp1ATI = ?fn (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) callconv(.C) void;
const glAlphaFragmentOp2ATI = ?fn (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) callconv(.C) void;
const glAlphaFragmentOp3ATI = ?fn (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) callconv(.C) void;
const glAlphaFuncxOES = ?fn (func: GLenum, ref: GLfixed) callconv(.C) void;
const glAlphaToCoverageDitherControlNV = ?fn (mode: GLenum) callconv(.C) void;
const glApplyFramebufferAttachmentCMAAINTEL = ?fn () callconv(.C) void;
const glApplyTextureEXT = ?fn (mode: GLenum) callconv(.C) void;
const glAreProgramsResidentNV = ?fn (n: GLsizei, programs: *const GLuint, residences: *GLboolean) callconv(.C) GLboolean;
const glAreTexturesResidentEXT = ?fn (n: GLsizei, textures: *const GLuint, residences: *GLboolean) callconv(.C) GLboolean;
const glArrayElementEXT = ?fn (i: GLint) callconv(.C) void;
const glArrayObjectATI = ?fn (array: GLenum, size: GLint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) callconv(.C) void;
const glAsyncCopyBufferSubDataNVX = ?fn (waitSemaphoreCount: GLsizei, waitSemaphoreArray: *const GLuint, fenceValueArray: *const GLuint64, readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr, signalSemaphoreCount: GLsizei, signalSemaphoreArray: *const GLuint, signalValueArray: *const GLuint64) callconv(.C) GLuint;
const glAsyncCopyImageSubDataNVX = ?fn (waitSemaphoreCount: GLsizei, waitSemaphoreArray: *const GLuint, waitValueArray: *const GLuint64, srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei, signalSemaphoreCount: GLsizei, signalSemaphoreArray: *const GLuint, signalValueArray: *const GLuint64) callconv(.C) GLuint;
const glAsyncMarkerSGIX = ?fn (marker: GLuint) callconv(.C) void;
const glAttachObjectARB = ?fn (containerObj: GLhandleARB, obj: GLhandleARB) callconv(.C) void;
const glAttachShader = ?fn (program: GLuint, shader: GLuint) callconv(.C) void;
const glBeginConditionalRender = ?fn (id: GLuint, mode: GLenum) callconv(.C) void;
const glBeginConditionalRenderNV = ?fn (id: GLuint, mode: GLenum) callconv(.C) void;
const glBeginConditionalRenderNVX = ?fn (id: GLuint) callconv(.C) void;
const glBeginFragmentShaderATI = ?fn () callconv(.C) void;
const glBeginOcclusionQueryNV = ?fn (id: GLuint) callconv(.C) void;
const glBeginPerfMonitorAMD = ?fn (monitor: GLuint) callconv(.C) void;
const glBeginPerfQueryINTEL = ?fn (queryHandle: GLuint) callconv(.C) void;
const glBeginQuery = ?fn (target: GLenum, id: GLuint) callconv(.C) void;
const glBeginQueryARB = ?fn (target: GLenum, id: GLuint) callconv(.C) void;
const glBeginQueryIndexed = ?fn (target: GLenum, index: GLuint, id: GLuint) callconv(.C) void;
const glBeginTransformFeedback = ?fn (primitiveMode: GLenum) callconv(.C) void;
const glBeginTransformFeedbackEXT = ?fn (primitiveMode: GLenum) callconv(.C) void;
const glBeginTransformFeedbackNV = ?fn (primitiveMode: GLenum) callconv(.C) void;
const glBeginVertexShaderEXT = ?fn () callconv(.C) void;
const glBeginVideoCaptureNV = ?fn (video_capture_slot: GLuint) callconv(.C) void;
const glBindAttribLocation = ?fn (program: GLuint, index: GLuint, name: *const GLchar) callconv(.C) void;
const glBindAttribLocationARB = ?fn (programObj: GLhandleARB, index: GLuint, name: *const GLcharARB) callconv(.C) void;
const glBindBuffer = ?fn (target: GLenum, buffer: GLuint) callconv(.C) void;
const glBindBufferARB = ?fn (target: GLenum, buffer: GLuint) callconv(.C) void;
const glBindBufferBase = ?fn (target: GLenum, index: GLuint, buffer: GLuint) callconv(.C) void;
const glBindBufferBaseEXT = ?fn (target: GLenum, index: GLuint, buffer: GLuint) callconv(.C) void;
const glBindBufferBaseNV = ?fn (target: GLenum, index: GLuint, buffer: GLuint) callconv(.C) void;
const glBindBufferOffsetEXT = ?fn (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) callconv(.C) void;
const glBindBufferOffsetNV = ?fn (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) callconv(.C) void;
const glBindBufferRange = ?fn (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glBindBufferRangeEXT = ?fn (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glBindBufferRangeNV = ?fn (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glBindBuffersBase = ?fn (target: GLenum, first: GLuint, count: GLsizei, buffers: *const GLuint) callconv(.C) void;
const glBindBuffersRange = ?fn (target: GLenum, first: GLuint, count: GLsizei, buffers: *const GLuint, offsets: *const GLintptr, sizes: *const GLsizeiptr) callconv(.C) void;
const glBindFragDataLocation = ?fn (program: GLuint, color: GLuint, name: *const GLchar) callconv(.C) void;
const glBindFragDataLocationEXT = ?fn (program: GLuint, color: GLuint, name: *const GLchar) callconv(.C) void;
const glBindFragDataLocationIndexed = ?fn (program: GLuint, colorNumber: GLuint, index: GLuint, name: *const GLchar) callconv(.C) void;
const glBindFragmentShaderATI = ?fn (id: GLuint) callconv(.C) void;
const glBindFramebuffer = ?fn (target: GLenum, framebuffer: GLuint) callconv(.C) void;
const glBindFramebufferEXT = ?fn (target: GLenum, framebuffer: GLuint) callconv(.C) void;
const glBindImageTexture = ?fn (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) callconv(.C) void;
const glBindImageTextureEXT = ?fn (index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) callconv(.C) void;
const glBindImageTextures = ?fn (first: GLuint, count: GLsizei, textures: *const GLuint) callconv(.C) void;
const glBindLightParameterEXT = ?fn (light: GLenum, value: GLenum) callconv(.C) GLuint;
const glBindMaterialParameterEXT = ?fn (face: GLenum, value: GLenum) callconv(.C) GLuint;
const glBindMultiTextureEXT = ?fn (texunit: GLenum, target: GLenum, texture: GLuint) callconv(.C) void;
const glBindParameterEXT = ?fn (value: GLenum) callconv(.C) GLuint;
const glBindProgramARB = ?fn (target: GLenum, program: GLuint) callconv(.C) void;
const glBindProgramNV = ?fn (target: GLenum, id: GLuint) callconv(.C) void;
const glBindProgramPipeline = ?fn (pipeline: GLuint) callconv(.C) void;
const glBindRenderbuffer = ?fn (target: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glBindRenderbufferEXT = ?fn (target: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glBindSampler = ?fn (unit: GLuint, sampler: GLuint) callconv(.C) void;
const glBindSamplers = ?fn (first: GLuint, count: GLsizei, samplers: *const GLuint) callconv(.C) void;
const glBindShadingRateImageNV = ?fn (texture: GLuint) callconv(.C) void;
const glBindTexGenParameterEXT = ?fn (unit: GLenum, coord: GLenum, value: GLenum) callconv(.C) GLuint;
const glBindTexture = ?fn (target: GLenum, texture: GLuint) callconv(.C) void;
const glBindTextureEXT = ?fn (target: GLenum, texture: GLuint) callconv(.C) void;
const glBindTextureUnit = ?fn (unit: GLuint, texture: GLuint) callconv(.C) void;
const glBindTextureUnitParameterEXT = ?fn (unit: GLenum, value: GLenum) callconv(.C) GLuint;
const glBindTextures = ?fn (first: GLuint, count: GLsizei, textures: *const GLuint) callconv(.C) void;
const glBindTransformFeedback = ?fn (target: GLenum, id: GLuint) callconv(.C) void;
const glBindTransformFeedbackNV = ?fn (target: GLenum, id: GLuint) callconv(.C) void;
const glBindVertexArray = ?fn (array: GLuint) callconv(.C) void;
const glBindVertexArrayAPPLE = ?fn (array: GLuint) callconv(.C) void;
const glBindVertexBuffer = ?fn (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) callconv(.C) void;
const glBindVertexBuffers = ?fn (first: GLuint, count: GLsizei, buffers: *const GLuint, offsets: *const GLintptr, strides: *const GLsizei) callconv(.C) void;
const glBindVertexShaderEXT = ?fn (id: GLuint) callconv(.C) void;
const glBindVideoCaptureStreamBufferNV = ?fn (video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB) callconv(.C) void;
const glBindVideoCaptureStreamTextureNV = ?fn (video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) callconv(.C) void;
const glBinormal3bEXT = ?fn (bx: GLbyte, by: GLbyte, bz: GLbyte) callconv(.C) void;
const glBinormal3bvEXT = ?fn (v: *const GLbyte) callconv(.C) void;
const glBinormal3dEXT = ?fn (bx: GLdouble, by: GLdouble, bz: GLdouble) callconv(.C) void;
const glBinormal3dvEXT = ?fn (v: *const GLdouble) callconv(.C) void;
const glBinormal3fEXT = ?fn (bx: GLfloat, by: GLfloat, bz: GLfloat) callconv(.C) void;
const glBinormal3fvEXT = ?fn (v: *const GLfloat) callconv(.C) void;
const glBinormal3iEXT = ?fn (bx: GLint, by: GLint, bz: GLint) callconv(.C) void;
const glBinormal3ivEXT = ?fn (v: *const GLint) callconv(.C) void;
const glBinormal3sEXT = ?fn (bx: GLshort, by: GLshort, bz: GLshort) callconv(.C) void;
const glBinormal3svEXT = ?fn (v: *const GLshort) callconv(.C) void;
const glBinormalPointerEXT = ?fn (type_: GLenum, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glBitmapxOES = ?fn (width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: *const GLubyte) callconv(.C) void;
const glBlendBarrierKHR = ?fn () callconv(.C) void;
const glBlendBarrierNV = ?fn () callconv(.C) void;
const glBlendColor = ?fn (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) callconv(.C) void;
const glBlendColorEXT = ?fn (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) callconv(.C) void;
const glBlendColorxOES = ?fn (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) callconv(.C) void;
const glBlendEquation = ?fn (mode: GLenum) callconv(.C) void;
const glBlendEquationEXT = ?fn (mode: GLenum) callconv(.C) void;
const glBlendEquationIndexedAMD = ?fn (buf: GLuint, mode: GLenum) callconv(.C) void;
const glBlendEquationSeparate = ?fn (modeRGB: GLenum, modeAlpha: GLenum) callconv(.C) void;
const glBlendEquationSeparateEXT = ?fn (modeRGB: GLenum, modeAlpha: GLenum) callconv(.C) void;
const glBlendEquationSeparateIndexedAMD = ?fn (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) callconv(.C) void;
const glBlendEquationSeparateiARB = ?fn (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) callconv(.C) void;
const glBlendEquationiARB = ?fn (buf: GLuint, mode: GLenum) callconv(.C) void;
const glBlendFunc = ?fn (sfactor: GLenum, dfactor: GLenum) callconv(.C) void;
const glBlendFuncIndexedAMD = ?fn (buf: GLuint, src: GLenum, dst: GLenum) callconv(.C) void;
const glBlendFuncSeparate = ?fn (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) callconv(.C) void;
const glBlendFuncSeparateEXT = ?fn (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) callconv(.C) void;
const glBlendFuncSeparateINGR = ?fn (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) callconv(.C) void;
const glBlendFuncSeparateIndexedAMD = ?fn (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) callconv(.C) void;
const glBlendFuncSeparateiARB = ?fn (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) callconv(.C) void;
const glBlendFunciARB = ?fn (buf: GLuint, src: GLenum, dst: GLenum) callconv(.C) void;
const glBlendParameteriNV = ?fn (pname: GLenum, value: GLint) callconv(.C) void;
const glBlitFramebuffer = ?fn (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) callconv(.C) void;
const glBlitFramebufferEXT = ?fn (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) callconv(.C) void;
const glBlitNamedFramebuffer = ?fn (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) callconv(.C) void;
const glBufferAddressRangeNV = ?fn (pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) callconv(.C) void;
const glBufferAttachMemoryNV = ?fn (target: GLenum, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glBufferData = ?fn (target: GLenum, size: GLsizeiptr, data: *const c_void, usage: GLenum) callconv(.C) void;
const glBufferDataARB = ?fn (target: GLenum, size: GLsizeiptrARB, data: *const c_void, usage: GLenum) callconv(.C) void;
const glBufferPageCommitmentARB = ?fn (target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) callconv(.C) void;
const glBufferPageCommitmentMemNV = ?fn (target: GLenum, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) callconv(.C) void;
const glBufferParameteriAPPLE = ?fn (target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glBufferStorage = ?fn (target: GLenum, size: GLsizeiptr, data: *const c_void, flags: GLbitfield) callconv(.C) void;
const glBufferStorageExternalEXT = ?fn (target: GLenum, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) callconv(.C) void;
const glBufferStorageMemEXT = ?fn (target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glBufferSubData = ?fn (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *const c_void) callconv(.C) void;
const glBufferSubDataARB = ?fn (target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *const c_void) callconv(.C) void;
const glCallCommandListNV = ?fn (list: GLuint) callconv(.C) void;
const glCheckFramebufferStatus = ?fn (target: GLenum) callconv(.C) GLenum;
const glCheckFramebufferStatusEXT = ?fn (target: GLenum) callconv(.C) GLenum;
const glCheckNamedFramebufferStatus = ?fn (framebuffer: GLuint, target: GLenum) callconv(.C) GLenum;
const glCheckNamedFramebufferStatusEXT = ?fn (framebuffer: GLuint, target: GLenum) callconv(.C) GLenum;
const glClampColor = ?fn (target: GLenum, clamp: GLenum) callconv(.C) void;
const glClampColorARB = ?fn (target: GLenum, clamp: GLenum) callconv(.C) void;
const glClear = ?fn (mask: GLbitfield) callconv(.C) void;
const glClearAccumxOES = ?fn (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) callconv(.C) void;
const glClearBufferData = ?fn (target: GLenum, internalformat: GLenum, format: GLenum, type_: GLenum, data: *const c_void) callconv(.C) void;
const glClearBufferSubData = ?fn (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *const c_void) callconv(.C) void;
const glClearBufferfi = ?fn (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) callconv(.C) void;
const glClearBufferfv = ?fn (buffer: GLenum, drawbuffer: GLint, value: *const GLfloat) callconv(.C) void;
const glClearBufferiv = ?fn (buffer: GLenum, drawbuffer: GLint, value: *const GLint) callconv(.C) void;
const glClearBufferuiv = ?fn (buffer: GLenum, drawbuffer: GLint, value: *const GLuint) callconv(.C) void;
const glClearColor = ?fn (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) callconv(.C) void;
const glClearColorIiEXT = ?fn (red: GLint, green: GLint, blue: GLint, alpha: GLint) callconv(.C) void;
const glClearColorIuiEXT = ?fn (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) callconv(.C) void;
const glClearColorxOES = ?fn (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) callconv(.C) void;
const glClearDepth = ?fn (depth: GLdouble) callconv(.C) void;
const glClearDepthdNV = ?fn (depth: GLdouble) callconv(.C) void;
const glClearDepthf = ?fn (d: GLfloat) callconv(.C) void;
const glClearDepthfOES = ?fn (depth: GLclampf) callconv(.C) void;
const glClearDepthxOES = ?fn (depth: GLfixed) callconv(.C) void;
const glClearNamedBufferData = ?fn (buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, data: *const c_void) callconv(.C) void;
const glClearNamedBufferDataEXT = ?fn (buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, data: *const c_void) callconv(.C) void;
const glClearNamedBufferSubData = ?fn (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *const c_void) callconv(.C) void;
const glClearNamedBufferSubDataEXT = ?fn (buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *const c_void) callconv(.C) void;
const glClearNamedFramebufferfi = ?fn (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) callconv(.C) void;
const glClearNamedFramebufferfv = ?fn (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *const GLfloat) callconv(.C) void;
const glClearNamedFramebufferiv = ?fn (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *const GLint) callconv(.C) void;
const glClearNamedFramebufferuiv = ?fn (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *const GLuint) callconv(.C) void;
const glClearStencil = ?fn (s: GLint) callconv(.C) void;
const glClearTexImage = ?fn (texture: GLuint, level: GLint, format: GLenum, type_: GLenum, data: *const c_void) callconv(.C) void;
const glClearTexSubImage = ?fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, data: *const c_void) callconv(.C) void;
const glClientActiveTextureARB = ?fn (texture: GLenum) callconv(.C) void;
const glClientActiveVertexStreamATI = ?fn (stream: GLenum) callconv(.C) void;
const glClientAttribDefaultEXT = ?fn (mask: GLbitfield) callconv(.C) void;
const glClientWaitSemaphoreui64NVX = ?fn (fenceObjectCount: GLsizei, semaphoreArray: *const GLuint, fenceValueArray: *const GLuint64) callconv(.C) void;
const glClientWaitSync = ?fn (sync: GLsync, flags: GLbitfield, timeout: GLuint64) callconv(.C) GLenum;
const glClipControl = ?fn (origin: GLenum, depth: GLenum) callconv(.C) void;
const glClipPlanefOES = ?fn (plane: GLenum, equation: *const GLfloat) callconv(.C) void;
const glClipPlanexOES = ?fn (plane: GLenum, equation: *const GLfixed) callconv(.C) void;
const glColor3fVertex3fSUN = ?fn (r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glColor3fVertex3fvSUN = ?fn (c: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glColor3hNV = ?fn (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) callconv(.C) void;
const glColor3hvNV = ?fn (v: *const GLhalfNV) callconv(.C) void;
const glColor3xOES = ?fn (red: GLfixed, green: GLfixed, blue: GLfixed) callconv(.C) void;
const glColor3xvOES = ?fn (components: *const GLfixed) callconv(.C) void;
const glColor4fNormal3fVertex3fSUN = ?fn (r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glColor4fNormal3fVertex3fvSUN = ?fn (c: *const GLfloat, n: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glColor4hNV = ?fn (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) callconv(.C) void;
const glColor4hvNV = ?fn (v: *const GLhalfNV) callconv(.C) void;
const glColor4ubVertex2fSUN = ?fn (r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) callconv(.C) void;
const glColor4ubVertex2fvSUN = ?fn (c: *const GLubyte, v: *const GLfloat) callconv(.C) void;
const glColor4ubVertex3fSUN = ?fn (r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glColor4ubVertex3fvSUN = ?fn (c: *const GLubyte, v: *const GLfloat) callconv(.C) void;
const glColor4xOES = ?fn (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) callconv(.C) void;
const glColor4xvOES = ?fn (components: *const GLfixed) callconv(.C) void;
const glColorFormatNV = ?fn (size: GLint, type_: GLenum, stride: GLsizei) callconv(.C) void;
const glColorFragmentOp1ATI = ?fn (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) callconv(.C) void;
const glColorFragmentOp2ATI = ?fn (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) callconv(.C) void;
const glColorFragmentOp3ATI = ?fn (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) callconv(.C) void;
const glColorMask = ?fn (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) callconv(.C) void;
const glColorMaskIndexedEXT = ?fn (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) callconv(.C) void;
const glColorMaski = ?fn (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) callconv(.C) void;
const glColorPointerEXT = ?fn (size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *const c_void) callconv(.C) void;
const glColorPointerListIBM = ?fn (size: GLint, type_: GLenum, stride: GLint, pointer: *const *const c_void, ptrstride: GLint) callconv(.C) void;
const glColorPointervINTEL = ?fn (size: GLint, type_: GLenum, pointer: *const *const c_void) callconv(.C) void;
const glColorSubTableEXT = ?fn (target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *const c_void) callconv(.C) void;
const glColorTableEXT = ?fn (target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *const c_void) callconv(.C) void;
const glColorTableParameterfvSGI = ?fn (target: GLenum, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glColorTableParameterivSGI = ?fn (target: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glColorTableSGI = ?fn (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *const c_void) callconv(.C) void;
const glCombinerInputNV = ?fn (stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) callconv(.C) void;
const glCombinerOutputNV = ?fn (stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) callconv(.C) void;
const glCombinerParameterfNV = ?fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glCombinerParameterfvNV = ?fn (pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glCombinerParameteriNV = ?fn (pname: GLenum, param: GLint) callconv(.C) void;
const glCombinerParameterivNV = ?fn (pname: GLenum, params: *const GLint) callconv(.C) void;
const glCombinerStageParameterfvNV = ?fn (stage: GLenum, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glCommandListSegmentsNV = ?fn (list: GLuint, segments: GLuint) callconv(.C) void;
const glCompileCommandListNV = ?fn (list: GLuint) callconv(.C) void;
const glCompileShader = ?fn (shader: GLuint) callconv(.C) void;
const glCompileShaderARB = ?fn (shaderObj: GLhandleARB) callconv(.C) void;
const glCompileShaderIncludeARB = ?fn (shader: GLuint, count: GLsizei, path: *const *const GLchar, length: *const GLint) callconv(.C) void;
const glCompressedMultiTexImage1DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *const c_void) callconv(.C) void;
const glCompressedMultiTexImage2DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *const c_void) callconv(.C) void;
const glCompressedMultiTexImage3DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *const c_void) callconv(.C) void;
const glCompressedMultiTexSubImage1DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *const c_void) callconv(.C) void;
const glCompressedMultiTexSubImage2DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *const c_void) callconv(.C) void;
const glCompressedMultiTexSubImage3DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *const c_void) callconv(.C) void;
const glCompressedTexImage1D = ?fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTexImage1DARB = ?fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTexImage2D = ?fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTexImage2DARB = ?fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTexImage3D = ?fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTexImage3DARB = ?fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTexSubImage1D = ?fn (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTexSubImage1DARB = ?fn (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTexSubImage2D = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTexSubImage2DARB = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTexSubImage3D = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTexSubImage3DARB = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTextureImage1DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *const c_void) callconv(.C) void;
const glCompressedTextureImage2DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *const c_void) callconv(.C) void;
const glCompressedTextureImage3DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *const c_void) callconv(.C) void;
const glCompressedTextureSubImage1D = ?fn (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTextureSubImage1DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *const c_void) callconv(.C) void;
const glCompressedTextureSubImage2D = ?fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTextureSubImage2DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *const c_void) callconv(.C) void;
const glCompressedTextureSubImage3D = ?fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) callconv(.C) void;
const glCompressedTextureSubImage3DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *const c_void) callconv(.C) void;
const glConservativeRasterParameterfNV = ?fn (pname: GLenum, value: GLfloat) callconv(.C) void;
const glConservativeRasterParameteriNV = ?fn (pname: GLenum, param: GLint) callconv(.C) void;
const glConvolutionFilter1DEXT = ?fn (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *const c_void) callconv(.C) void;
const glConvolutionFilter2DEXT = ?fn (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *const c_void) callconv(.C) void;
const glConvolutionParameterfEXT = ?fn (target: GLenum, pname: GLenum, params: GLfloat) callconv(.C) void;
const glConvolutionParameterfvEXT = ?fn (target: GLenum, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glConvolutionParameteriEXT = ?fn (target: GLenum, pname: GLenum, params: GLint) callconv(.C) void;
const glConvolutionParameterivEXT = ?fn (target: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glConvolutionParameterxOES = ?fn (target: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glConvolutionParameterxvOES = ?fn (target: GLenum, pname: GLenum, params: *const GLfixed) callconv(.C) void;
const glCopyBufferSubData = ?fn (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glCopyColorSubTableEXT = ?fn (target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyColorTableSGI = ?fn (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyConvolutionFilter1DEXT = ?fn (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyConvolutionFilter2DEXT = ?fn (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyImageSubData = ?fn (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) callconv(.C) void;
const glCopyImageSubDataNV = ?fn (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) callconv(.C) void;
const glCopyMultiTexImage1DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) callconv(.C) void;
const glCopyMultiTexImage2DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) callconv(.C) void;
const glCopyMultiTexSubImage1DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyMultiTexSubImage2DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyMultiTexSubImage3DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyNamedBufferSubData = ?fn (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glCopyPathNV = ?fn (resultPath: GLuint, srcPath: GLuint) callconv(.C) void;
const glCopyTexImage1D = ?fn (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) callconv(.C) void;
const glCopyTexImage1DEXT = ?fn (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) callconv(.C) void;
const glCopyTexImage2D = ?fn (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) callconv(.C) void;
const glCopyTexImage2DEXT = ?fn (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) callconv(.C) void;
const glCopyTexSubImage1D = ?fn (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyTexSubImage1DEXT = ?fn (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyTexSubImage2D = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTexSubImage2DEXT = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTexSubImage3D = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTexSubImage3DEXT = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTextureImage1DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) callconv(.C) void;
const glCopyTextureImage2DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) callconv(.C) void;
const glCopyTextureSubImage1D = ?fn (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyTextureSubImage1DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyTextureSubImage2D = ?fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTextureSubImage2DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTextureSubImage3D = ?fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTextureSubImage3DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCoverFillPathInstancedNV = ?fn (numPaths: GLsizei, pathNameType: GLenum, paths: *const c_void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *const GLfloat) callconv(.C) void;
const glCoverFillPathNV = ?fn (path: GLuint, coverMode: GLenum) callconv(.C) void;
const glCoverStrokePathInstancedNV = ?fn (numPaths: GLsizei, pathNameType: GLenum, paths: *const c_void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *const GLfloat) callconv(.C) void;
const glCoverStrokePathNV = ?fn (path: GLuint, coverMode: GLenum) callconv(.C) void;
const glCoverageModulationNV = ?fn (components: GLenum) callconv(.C) void;
const glCoverageModulationTableNV = ?fn (n: GLsizei, v: *const GLfloat) callconv(.C) void;
const glCreateBuffers = ?fn (n: GLsizei, buffers: *GLuint) callconv(.C) void;
const glCreateCommandListsNV = ?fn (n: GLsizei, lists: *GLuint) callconv(.C) void;
const glCreateFramebuffers = ?fn (n: GLsizei, framebuffers: *GLuint) callconv(.C) void;
const glCreateMemoryObjectsEXT = ?fn (n: GLsizei, memoryObjects: *GLuint) callconv(.C) void;
const glCreatePerfQueryINTEL = ?fn (queryId: GLuint, queryHandle: *GLuint) callconv(.C) void;
const glCreateProgram = ?fn () callconv(.C) GLuint;
const glCreateProgramObjectARB = ?fn () callconv(.C) GLhandleARB;
const glCreateProgramPipelines = ?fn (n: GLsizei, pipelines: *GLuint) callconv(.C) void;
const glCreateProgressFenceNVX = ?fn () callconv(.C) GLuint;
const glCreateQueries = ?fn (target: GLenum, n: GLsizei, ids: *GLuint) callconv(.C) void;
const glCreateRenderbuffers = ?fn (n: GLsizei, renderbuffers: *GLuint) callconv(.C) void;
const glCreateSamplers = ?fn (n: GLsizei, samplers: *GLuint) callconv(.C) void;
const glCreateSemaphoresNV = ?fn (n: GLsizei, semaphores: *GLuint) callconv(.C) void;
const glCreateShader = ?fn (type_: GLenum) callconv(.C) GLuint;
const glCreateShaderObjectARB = ?fn (shaderType: GLenum) callconv(.C) GLhandleARB;
const glCreateShaderProgramEXT = ?fn (type_: GLenum, string: *const GLchar) callconv(.C) GLuint;
const glCreateShaderProgramv = ?fn (type_: GLenum, count: GLsizei, strings: *const *const GLchar) callconv(.C) GLuint;
const glCreateStatesNV = ?fn (n: GLsizei, states: *GLuint) callconv(.C) void;
const glCreateSyncFromCLeventARB = ?fn (context: *_cl_context, event: *_cl_event, flags: GLbitfield) callconv(.C) GLsync;
const glCreateTextures = ?fn (target: GLenum, n: GLsizei, textures: *GLuint) callconv(.C) void;
const glCreateTransformFeedbacks = ?fn (n: GLsizei, ids: *GLuint) callconv(.C) void;
const glCreateVertexArrays = ?fn (n: GLsizei, arrays: *GLuint) callconv(.C) void;
const glCullFace = ?fn (mode: GLenum) callconv(.C) void;
const glCullParameterdvEXT = ?fn (pname: GLenum, params: *GLdouble) callconv(.C) void;
const glCullParameterfvEXT = ?fn (pname: GLenum, params: *GLfloat) callconv(.C) void;
const glCurrentPaletteMatrixARB = ?fn (index: GLint) callconv(.C) void;
const glDebugMessageCallback = ?fn (callback: GLDEBUGPROC, userParam: *const c_void) callconv(.C) void;
const glDebugMessageCallbackAMD = ?fn (callback: GLDEBUGPROCAMD, userParam: *c_void) callconv(.C) void;
const glDebugMessageCallbackARB = ?fn (callback: GLDEBUGPROCARB, userParam: *const c_void) callconv(.C) void;
const glDebugMessageControl = ?fn (source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *const GLuint, enabled: GLboolean) callconv(.C) void;
const glDebugMessageControlARB = ?fn (source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *const GLuint, enabled: GLboolean) callconv(.C) void;
const glDebugMessageEnableAMD = ?fn (category: GLenum, severity: GLenum, count: GLsizei, ids: *const GLuint, enabled: GLboolean) callconv(.C) void;
const glDebugMessageInsert = ?fn (source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *const GLchar) callconv(.C) void;
const glDebugMessageInsertAMD = ?fn (category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: *const GLchar) callconv(.C) void;
const glDebugMessageInsertARB = ?fn (source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *const GLchar) callconv(.C) void;
const glDeformSGIX = ?fn (mask: GLbitfield) callconv(.C) void;
const glDeformationMap3dSGIX = ?fn (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: *const GLdouble) callconv(.C) void;
const glDeformationMap3fSGIX = ?fn (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: *const GLfloat) callconv(.C) void;
const glDeleteAsyncMarkersSGIX = ?fn (marker: GLuint, range: GLsizei) callconv(.C) void;
const glDeleteBuffers = ?fn (n: GLsizei, buffers: *const GLuint) callconv(.C) void;
const glDeleteBuffersARB = ?fn (n: GLsizei, buffers: *const GLuint) callconv(.C) void;
const glDeleteCommandListsNV = ?fn (n: GLsizei, lists: *const GLuint) callconv(.C) void;
const glDeleteFencesAPPLE = ?fn (n: GLsizei, fences: *const GLuint) callconv(.C) void;
const glDeleteFencesNV = ?fn (n: GLsizei, fences: *const GLuint) callconv(.C) void;
const glDeleteFragmentShaderATI = ?fn (id: GLuint) callconv(.C) void;
const glDeleteFramebuffers = ?fn (n: GLsizei, framebuffers: *const GLuint) callconv(.C) void;
const glDeleteFramebuffersEXT = ?fn (n: GLsizei, framebuffers: *const GLuint) callconv(.C) void;
const glDeleteMemoryObjectsEXT = ?fn (n: GLsizei, memoryObjects: *const GLuint) callconv(.C) void;
const glDeleteNamedStringARB = ?fn (namelen: GLint, name: *const GLchar) callconv(.C) void;
const glDeleteNamesAMD = ?fn (identifier: GLenum, num: GLuint, names: *const GLuint) callconv(.C) void;
const glDeleteObjectARB = ?fn (obj: GLhandleARB) callconv(.C) void;
const glDeleteOcclusionQueriesNV = ?fn (n: GLsizei, ids: *const GLuint) callconv(.C) void;
const glDeletePathsNV = ?fn (path: GLuint, range: GLsizei) callconv(.C) void;
const glDeletePerfMonitorsAMD = ?fn (n: GLsizei, monitors: *GLuint) callconv(.C) void;
const glDeletePerfQueryINTEL = ?fn (queryHandle: GLuint) callconv(.C) void;
const glDeleteProgram = ?fn (program: GLuint) callconv(.C) void;
const glDeleteProgramPipelines = ?fn (n: GLsizei, pipelines: *const GLuint) callconv(.C) void;
const glDeleteProgramsARB = ?fn (n: GLsizei, programs: *const GLuint) callconv(.C) void;
const glDeleteProgramsNV = ?fn (n: GLsizei, programs: *const GLuint) callconv(.C) void;
const glDeleteQueries = ?fn (n: GLsizei, ids: *const GLuint) callconv(.C) void;
const glDeleteQueriesARB = ?fn (n: GLsizei, ids: *const GLuint) callconv(.C) void;
const glDeleteQueryResourceTagNV = ?fn (n: GLsizei, tagIds: *const GLint) callconv(.C) void;
const glDeleteRenderbuffers = ?fn (n: GLsizei, renderbuffers: *const GLuint) callconv(.C) void;
const glDeleteRenderbuffersEXT = ?fn (n: GLsizei, renderbuffers: *const GLuint) callconv(.C) void;
const glDeleteSamplers = ?fn (count: GLsizei, samplers: *const GLuint) callconv(.C) void;
const glDeleteSemaphoresEXT = ?fn (n: GLsizei, semaphores: *const GLuint) callconv(.C) void;
const glDeleteShader = ?fn (shader: GLuint) callconv(.C) void;
const glDeleteStatesNV = ?fn (n: GLsizei, states: *const GLuint) callconv(.C) void;
const glDeleteSync = ?fn (sync: GLsync) callconv(.C) void;
const glDeleteTextures = ?fn (n: GLsizei, textures: *const GLuint) callconv(.C) void;
const glDeleteTexturesEXT = ?fn (n: GLsizei, textures: *const GLuint) callconv(.C) void;
const glDeleteTransformFeedbacks = ?fn (n: GLsizei, ids: *const GLuint) callconv(.C) void;
const glDeleteTransformFeedbacksNV = ?fn (n: GLsizei, ids: *const GLuint) callconv(.C) void;
const glDeleteVertexArrays = ?fn (n: GLsizei, arrays: *const GLuint) callconv(.C) void;
const glDeleteVertexArraysAPPLE = ?fn (n: GLsizei, arrays: *const GLuint) callconv(.C) void;
const glDeleteVertexShaderEXT = ?fn (id: GLuint) callconv(.C) void;
const glDepthBoundsEXT = ?fn (zmin: GLclampd, zmax: GLclampd) callconv(.C) void;
const glDepthBoundsdNV = ?fn (zmin: GLdouble, zmax: GLdouble) callconv(.C) void;
const glDepthFunc = ?fn (func: GLenum) callconv(.C) void;
const glDepthMask = ?fn (flag: GLboolean) callconv(.C) void;
const glDepthRange = ?fn (n: GLdouble, f: GLdouble) callconv(.C) void;
const glDepthRangeArraydvNV = ?fn (first: GLuint, count: GLsizei, v: *const GLdouble) callconv(.C) void;
const glDepthRangeArrayv = ?fn (first: GLuint, count: GLsizei, v: *const GLdouble) callconv(.C) void;
const glDepthRangeIndexed = ?fn (index: GLuint, n: GLdouble, f: GLdouble) callconv(.C) void;
const glDepthRangeIndexeddNV = ?fn (index: GLuint, n: GLdouble, f: GLdouble) callconv(.C) void;
const glDepthRangedNV = ?fn (zNear: GLdouble, zFar: GLdouble) callconv(.C) void;
const glDepthRangef = ?fn (n: GLfloat, f: GLfloat) callconv(.C) void;
const glDepthRangefOES = ?fn (n: GLclampf, f: GLclampf) callconv(.C) void;
const glDepthRangexOES = ?fn (n: GLfixed, f: GLfixed) callconv(.C) void;
const glDetachObjectARB = ?fn (containerObj: GLhandleARB, attachedObj: GLhandleARB) callconv(.C) void;
const glDetachShader = ?fn (program: GLuint, shader: GLuint) callconv(.C) void;
const glDetailTexFuncSGIS = ?fn (target: GLenum, n: GLsizei, points: *const GLfloat) callconv(.C) void;
const glDisable = ?fn (cap: GLenum) callconv(.C) void;
const glDisableClientStateIndexedEXT = ?fn (array: GLenum, index: GLuint) callconv(.C) void;
const glDisableClientStateiEXT = ?fn (array: GLenum, index: GLuint) callconv(.C) void;
const glDisableIndexedEXT = ?fn (target: GLenum, index: GLuint) callconv(.C) void;
const glDisableVariantClientStateEXT = ?fn (id: GLuint) callconv(.C) void;
const glDisableVertexArrayAttrib = ?fn (vaobj: GLuint, index: GLuint) callconv(.C) void;
const glDisableVertexArrayAttribEXT = ?fn (vaobj: GLuint, index: GLuint) callconv(.C) void;
const glDisableVertexArrayEXT = ?fn (vaobj: GLuint, array: GLenum) callconv(.C) void;
const glDisableVertexAttribAPPLE = ?fn (index: GLuint, pname: GLenum) callconv(.C) void;
const glDisableVertexAttribArray = ?fn (index: GLuint) callconv(.C) void;
const glDisableVertexAttribArrayARB = ?fn (index: GLuint) callconv(.C) void;
const glDisablei = ?fn (target: GLenum, index: GLuint) callconv(.C) void;
const glDispatchCompute = ?fn (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) callconv(.C) void;
const glDispatchComputeGroupSizeARB = ?fn (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) callconv(.C) void;
const glDispatchComputeIndirect = ?fn (indirect: GLintptr) callconv(.C) void;
const glDrawArrays = ?fn (mode: GLenum, first: GLint, count: GLsizei) callconv(.C) void;
const glDrawArraysEXT = ?fn (mode: GLenum, first: GLint, count: GLsizei) callconv(.C) void;
const glDrawArraysIndirect = ?fn (mode: GLenum, indirect: *const c_void) callconv(.C) void;
const glDrawArraysInstanced = ?fn (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) callconv(.C) void;
const glDrawArraysInstancedARB = ?fn (mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) callconv(.C) void;
const glDrawArraysInstancedBaseInstance = ?fn (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) callconv(.C) void;
const glDrawArraysInstancedEXT = ?fn (mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) callconv(.C) void;
const glDrawBuffer = ?fn (buf: GLenum) callconv(.C) void;
const glDrawBuffers = ?fn (n: GLsizei, bufs: *const GLenum) callconv(.C) void;
const glDrawBuffersARB = ?fn (n: GLsizei, bufs: *const GLenum) callconv(.C) void;
const glDrawBuffersATI = ?fn (n: GLsizei, bufs: *const GLenum) callconv(.C) void;
const glDrawCommandsAddressNV = ?fn (primitiveMode: GLenum, indirects: *const GLuint64, sizes: *const GLsizei, count: GLuint) callconv(.C) void;
const glDrawCommandsNV = ?fn (primitiveMode: GLenum, buffer: GLuint, indirects: *const GLintptr, sizes: *const GLsizei, count: GLuint) callconv(.C) void;
const glDrawCommandsStatesAddressNV = ?fn (indirects: *const GLuint64, sizes: *const GLsizei, states: *const GLuint, fbos: *const GLuint, count: GLuint) callconv(.C) void;
const glDrawCommandsStatesNV = ?fn (buffer: GLuint, indirects: *const GLintptr, sizes: *const GLsizei, states: *const GLuint, fbos: *const GLuint, count: GLuint) callconv(.C) void;
const glDrawElementArrayAPPLE = ?fn (mode: GLenum, first: GLint, count: GLsizei) callconv(.C) void;
const glDrawElementArrayATI = ?fn (mode: GLenum, count: GLsizei) callconv(.C) void;
const glDrawElements = ?fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: ?*const c_void) callconv(.C) void;
const glDrawElementsBaseVertex = ?fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, basevertex: GLint) callconv(.C) void;
const glDrawElementsIndirect = ?fn (mode: GLenum, type_: GLenum, indirect: *const c_void) callconv(.C) void;
const glDrawElementsInstanced = ?fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, instancecount: GLsizei) callconv(.C) void;
const glDrawElementsInstancedARB = ?fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, primcount: GLsizei) callconv(.C) void;
const glDrawElementsInstancedBaseInstance = ?fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, instancecount: GLsizei, baseinstance: GLuint) callconv(.C) void;
const glDrawElementsInstancedBaseVertex = ?fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, instancecount: GLsizei, basevertex: GLint) callconv(.C) void;
const glDrawElementsInstancedBaseVertexBaseInstance = ?fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) callconv(.C) void;
const glDrawElementsInstancedEXT = ?fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, primcount: GLsizei) callconv(.C) void;
const glDrawMeshArraysSUN = ?fn (mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) callconv(.C) void;
const glDrawMeshTasksIndirectNV = ?fn (indirect: GLintptr) callconv(.C) void;
const glDrawMeshTasksNV = ?fn (first: GLuint, count: GLuint) callconv(.C) void;
const glDrawRangeElementArrayAPPLE = ?fn (mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei) callconv(.C) void;
const glDrawRangeElementArrayATI = ?fn (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei) callconv(.C) void;
const glDrawRangeElements = ?fn (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *const c_void) callconv(.C) void;
const glDrawRangeElementsBaseVertex = ?fn (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *const c_void, basevertex: GLint) callconv(.C) void;
const glDrawRangeElementsEXT = ?fn (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *const c_void) callconv(.C) void;
const glDrawTextureNV = ?fn (texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) callconv(.C) void;
const glDrawTransformFeedback = ?fn (mode: GLenum, id: GLuint) callconv(.C) void;
const glDrawTransformFeedbackInstanced = ?fn (mode: GLenum, id: GLuint, instancecount: GLsizei) callconv(.C) void;
const glDrawTransformFeedbackNV = ?fn (mode: GLenum, id: GLuint) callconv(.C) void;
const glDrawTransformFeedbackStream = ?fn (mode: GLenum, id: GLuint, stream: GLuint) callconv(.C) void;
const glDrawTransformFeedbackStreamInstanced = ?fn (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) callconv(.C) void;
const glDrawVkImageNV = ?fn (vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) callconv(.C) void;
const glEGLImageTargetTexStorageEXT = ?fn (target: GLenum, image: GLeglImageOES, attrib_list: *const GLint) callconv(.C) void;
const glEGLImageTargetTextureStorageEXT = ?fn (texture: GLuint, image: GLeglImageOES, attrib_list: *const GLint) callconv(.C) void;
const glEdgeFlagFormatNV = ?fn (stride: GLsizei) callconv(.C) void;
const glEdgeFlagPointerEXT = ?fn (stride: GLsizei, count: GLsizei, pointer: *const GLboolean) callconv(.C) void;
const glEdgeFlagPointerListIBM = ?fn (stride: GLint, pointer: *const *const GLboolean, ptrstride: GLint) callconv(.C) void;
const glElementPointerAPPLE = ?fn (type_: GLenum, pointer: *const c_void) callconv(.C) void;
const glElementPointerATI = ?fn (type_: GLenum, pointer: *const c_void) callconv(.C) void;
const glEnable = ?fn (cap: GLenum) callconv(.C) void;
const glEnableClientStateIndexedEXT = ?fn (array: GLenum, index: GLuint) callconv(.C) void;
const glEnableClientStateiEXT = ?fn (array: GLenum, index: GLuint) callconv(.C) void;
const glEnableIndexedEXT = ?fn (target: GLenum, index: GLuint) callconv(.C) void;
const glEnableVariantClientStateEXT = ?fn (id: GLuint) callconv(.C) void;
const glEnableVertexArrayAttrib = ?fn (vaobj: GLuint, index: GLuint) callconv(.C) void;
const glEnableVertexArrayAttribEXT = ?fn (vaobj: GLuint, index: GLuint) callconv(.C) void;
const glEnableVertexArrayEXT = ?fn (vaobj: GLuint, array: GLenum) callconv(.C) void;
const glEnableVertexAttribAPPLE = ?fn (index: GLuint, pname: GLenum) callconv(.C) void;
const glEnableVertexAttribArray = ?fn (index: GLuint) callconv(.C) void;
const glEnableVertexAttribArrayARB = ?fn (index: GLuint) callconv(.C) void;
const glEnablei = ?fn (target: GLenum, index: GLuint) callconv(.C) void;
const glEndConditionalRender = ?fn () callconv(.C) void;
const glEndConditionalRenderNV = ?fn () callconv(.C) void;
const glEndConditionalRenderNVX = ?fn () callconv(.C) void;
const glEndFragmentShaderATI = ?fn () callconv(.C) void;
const glEndOcclusionQueryNV = ?fn () callconv(.C) void;
const glEndPerfMonitorAMD = ?fn (monitor: GLuint) callconv(.C) void;
const glEndPerfQueryINTEL = ?fn (queryHandle: GLuint) callconv(.C) void;
const glEndQuery = ?fn (target: GLenum) callconv(.C) void;
const glEndQueryARB = ?fn (target: GLenum) callconv(.C) void;
const glEndQueryIndexed = ?fn (target: GLenum, index: GLuint) callconv(.C) void;
const glEndTransformFeedback = ?fn () callconv(.C) void;
const glEndTransformFeedbackEXT = ?fn () callconv(.C) void;
const glEndTransformFeedbackNV = ?fn () callconv(.C) void;
const glEndVertexShaderEXT = ?fn () callconv(.C) void;
const glEndVideoCaptureNV = ?fn (video_capture_slot: GLuint) callconv(.C) void;
const glEvalCoord1xOES = ?fn (u: GLfixed) callconv(.C) void;
const glEvalCoord1xvOES = ?fn (coords: *const GLfixed) callconv(.C) void;
const glEvalCoord2xOES = ?fn (u: GLfixed, v: GLfixed) callconv(.C) void;
const glEvalCoord2xvOES = ?fn (coords: *const GLfixed) callconv(.C) void;
const glEvalMapsNV = ?fn (target: GLenum, mode: GLenum) callconv(.C) void;
const glEvaluateDepthValuesARB = ?fn () callconv(.C) void;
const glExecuteProgramNV = ?fn (target: GLenum, id: GLuint, params: *const GLfloat) callconv(.C) void;
const glExtractComponentEXT = ?fn (res: GLuint, src: GLuint, num: GLuint) callconv(.C) void;
const glFeedbackBufferxOES = ?fn (n: GLsizei, type_: GLenum, buffer: *const GLfixed) callconv(.C) void;
const glFenceSync = ?fn (condition: GLenum, flags: GLbitfield) callconv(.C) GLsync;
const glFinalCombinerInputNV = ?fn (variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) callconv(.C) void;
const glFinish = ?fn () callconv(.C) void;
const glFinishAsyncSGIX = ?fn (markerp: *GLuint) callconv(.C) GLint;
const glFinishFenceAPPLE = ?fn (fence: GLuint) callconv(.C) void;
const glFinishFenceNV = ?fn (fence: GLuint) callconv(.C) void;
const glFinishObjectAPPLE = ?fn (object: GLenum, name: GLint) callconv(.C) void;
const glFinishTextureSUNX = ?fn () callconv(.C) void;
const glFlush = ?fn () callconv(.C) void;
const glFlushMappedBufferRange = ?fn (target: GLenum, offset: GLintptr, length: GLsizeiptr) callconv(.C) void;
const glFlushMappedBufferRangeAPPLE = ?fn (target: GLenum, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glFlushMappedNamedBufferRange = ?fn (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) callconv(.C) void;
const glFlushMappedNamedBufferRangeEXT = ?fn (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) callconv(.C) void;
const glFlushPixelDataRangeNV = ?fn (target: GLenum) callconv(.C) void;
const glFlushRasterSGIX = ?fn () callconv(.C) void;
const glFlushStaticDataIBM = ?fn (target: GLenum) callconv(.C) void;
const glFlushVertexArrayRangeAPPLE = ?fn (length: GLsizei, pointer: *c_void) callconv(.C) void;
const glFlushVertexArrayRangeNV = ?fn () callconv(.C) void;
const glFogCoordFormatNV = ?fn (type_: GLenum, stride: GLsizei) callconv(.C) void;
const glFogCoordPointerEXT = ?fn (type_: GLenum, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glFogCoordPointerListIBM = ?fn (type_: GLenum, stride: GLint, pointer: *const *const c_void, ptrstride: GLint) callconv(.C) void;
const glFogCoorddEXT = ?fn (coord: GLdouble) callconv(.C) void;
const glFogCoorddvEXT = ?fn (coord: *const GLdouble) callconv(.C) void;
const glFogCoordfEXT = ?fn (coord: GLfloat) callconv(.C) void;
const glFogCoordfvEXT = ?fn (coord: *const GLfloat) callconv(.C) void;
const glFogCoordhNV = ?fn (fog: GLhalfNV) callconv(.C) void;
const glFogCoordhvNV = ?fn (fog: *const GLhalfNV) callconv(.C) void;
const glFogFuncSGIS = ?fn (n: GLsizei, points: *const GLfloat) callconv(.C) void;
const glFogxOES = ?fn (pname: GLenum, param: GLfixed) callconv(.C) void;
const glFogxvOES = ?fn (pname: GLenum, param: *const GLfixed) callconv(.C) void;
const glFragmentColorMaterialSGIX = ?fn (face: GLenum, mode: GLenum) callconv(.C) void;
const glFragmentCoverageColorNV = ?fn (color: GLuint) callconv(.C) void;
const glFragmentLightModelfSGIX = ?fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glFragmentLightModelfvSGIX = ?fn (pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glFragmentLightModeliSGIX = ?fn (pname: GLenum, param: GLint) callconv(.C) void;
const glFragmentLightModelivSGIX = ?fn (pname: GLenum, params: *const GLint) callconv(.C) void;
const glFragmentLightfSGIX = ?fn (light: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glFragmentLightfvSGIX = ?fn (light: GLenum, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glFragmentLightiSGIX = ?fn (light: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glFragmentLightivSGIX = ?fn (light: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glFragmentMaterialfSGIX = ?fn (face: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glFragmentMaterialfvSGIX = ?fn (face: GLenum, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glFragmentMaterialiSGIX = ?fn (face: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glFragmentMaterialivSGIX = ?fn (face: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glFrameTerminatorGREMEDY = ?fn () callconv(.C) void;
const glFrameZoomSGIX = ?fn (factor: GLint) callconv(.C) void;
const glFramebufferDrawBufferEXT = ?fn (framebuffer: GLuint, mode: GLenum) callconv(.C) void;
const glFramebufferDrawBuffersEXT = ?fn (framebuffer: GLuint, n: GLsizei, bufs: *const GLenum) callconv(.C) void;
const glFramebufferFetchBarrierEXT = ?fn () callconv(.C) void;
const glFramebufferParameteri = ?fn (target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glFramebufferParameteriMESA = ?fn (target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glFramebufferReadBufferEXT = ?fn (framebuffer: GLuint, mode: GLenum) callconv(.C) void;
const glFramebufferRenderbuffer = ?fn (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glFramebufferRenderbufferEXT = ?fn (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glFramebufferSampleLocationsfvARB = ?fn (target: GLenum, start: GLuint, count: GLsizei, v: *const GLfloat) callconv(.C) void;
const glFramebufferSampleLocationsfvNV = ?fn (target: GLenum, start: GLuint, count: GLsizei, v: *const GLfloat) callconv(.C) void;
const glFramebufferSamplePositionsfvAMD = ?fn (target: GLenum, numsamples: GLuint, pixelindex: GLuint, values: *const GLfloat) callconv(.C) void;
const glFramebufferTexture = ?fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTexture1D = ?fn (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTexture1DEXT = ?fn (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTexture2D = ?fn (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTexture2DEXT = ?fn (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTexture3D = ?fn (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) callconv(.C) void;
const glFramebufferTexture3DEXT = ?fn (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) callconv(.C) void;
const glFramebufferTextureARB = ?fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTextureEXT = ?fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTextureFaceARB = ?fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) callconv(.C) void;
const glFramebufferTextureFaceEXT = ?fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) callconv(.C) void;
const glFramebufferTextureLayer = ?fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) callconv(.C) void;
const glFramebufferTextureLayerARB = ?fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) callconv(.C) void;
const glFramebufferTextureLayerEXT = ?fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) callconv(.C) void;
const glFramebufferTextureMultiviewOVR = ?fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei) callconv(.C) void;
const glFreeObjectBufferATI = ?fn (buffer: GLuint) callconv(.C) void;
const glFrontFace = ?fn (mode: GLenum) callconv(.C) void;
const glFrustumfOES = ?fn (l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) callconv(.C) void;
const glFrustumxOES = ?fn (l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) callconv(.C) void;
const glGenAsyncMarkersSGIX = ?fn (range: GLsizei) callconv(.C) GLuint;
const glGenBuffers = ?fn (n: GLsizei, buffers: *GLuint) callconv(.C) void;
const glGenBuffersARB = ?fn (n: GLsizei, buffers: *GLuint) callconv(.C) void;
const glGenFencesAPPLE = ?fn (n: GLsizei, fences: *GLuint) callconv(.C) void;
const glGenFencesNV = ?fn (n: GLsizei, fences: *GLuint) callconv(.C) void;
const glGenFragmentShadersATI = ?fn (range: GLuint) callconv(.C) GLuint;
const glGenFramebuffers = ?fn (n: GLsizei, framebuffers: *GLuint) callconv(.C) void;
const glGenFramebuffersEXT = ?fn (n: GLsizei, framebuffers: *GLuint) callconv(.C) void;
const glGenNamesAMD = ?fn (identifier: GLenum, num: GLuint, names: *GLuint) callconv(.C) void;
const glGenOcclusionQueriesNV = ?fn (n: GLsizei, ids: *GLuint) callconv(.C) void;
const glGenPathsNV = ?fn (range: GLsizei) callconv(.C) GLuint;
const glGenPerfMonitorsAMD = ?fn (n: GLsizei, monitors: *GLuint) callconv(.C) void;
const glGenProgramPipelines = ?fn (n: GLsizei, pipelines: *GLuint) callconv(.C) void;
const glGenProgramsARB = ?fn (n: GLsizei, programs: *GLuint) callconv(.C) void;
const glGenProgramsNV = ?fn (n: GLsizei, programs: *GLuint) callconv(.C) void;
const glGenQueries = ?fn (n: GLsizei, ids: *GLuint) callconv(.C) void;
const glGenQueriesARB = ?fn (n: GLsizei, ids: *GLuint) callconv(.C) void;
const glGenQueryResourceTagNV = ?fn (n: GLsizei, tagIds: *GLint) callconv(.C) void;
const glGenRenderbuffers = ?fn (n: GLsizei, renderbuffers: *GLuint) callconv(.C) void;
const glGenRenderbuffersEXT = ?fn (n: GLsizei, renderbuffers: *GLuint) callconv(.C) void;
const glGenSamplers = ?fn (count: GLsizei, samplers: *GLuint) callconv(.C) void;
const glGenSemaphoresEXT = ?fn (n: GLsizei, semaphores: *GLuint) callconv(.C) void;
const glGenSymbolsEXT = ?fn (datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint) callconv(.C) GLuint;
const glGenTextures = ?fn (n: GLsizei, textures: *GLuint) callconv(.C) void;
const glGenTexturesEXT = ?fn (n: GLsizei, textures: *GLuint) callconv(.C) void;
const glGenTransformFeedbacks = ?fn (n: GLsizei, ids: *GLuint) callconv(.C) void;
const glGenTransformFeedbacksNV = ?fn (n: GLsizei, ids: *GLuint) callconv(.C) void;
const glGenVertexArrays = ?fn (n: GLsizei, arrays: *GLuint) callconv(.C) void;
const glGenVertexArraysAPPLE = ?fn (n: GLsizei, arrays: *GLuint) callconv(.C) void;
const glGenVertexShadersEXT = ?fn (range: GLuint) callconv(.C) GLuint;
const glGenerateMipmap = ?fn (target: GLenum) callconv(.C) void;
const glGenerateMipmapEXT = ?fn (target: GLenum) callconv(.C) void;
const glGenerateMultiTexMipmapEXT = ?fn (texunit: GLenum, target: GLenum) callconv(.C) void;
const glGenerateTextureMipmap = ?fn (texture: GLuint) callconv(.C) void;
const glGenerateTextureMipmapEXT = ?fn (texture: GLuint, target: GLenum) callconv(.C) void;
const glGetActiveAtomicCounterBufferiv = ?fn (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetActiveAttrib = ?fn (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) callconv(.C) void;
const glGetActiveAttribARB = ?fn (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) callconv(.C) void;
const glGetActiveSubroutineName = ?fn (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) callconv(.C) void;
const glGetActiveSubroutineUniformName = ?fn (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) callconv(.C) void;
const glGetActiveSubroutineUniformiv = ?fn (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *GLint) callconv(.C) void;
const glGetActiveUniform = ?fn (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) callconv(.C) void;
const glGetActiveUniformARB = ?fn (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) callconv(.C) void;
const glGetActiveUniformBlockName = ?fn (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) callconv(.C) void;
const glGetActiveUniformBlockiv = ?fn (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetActiveUniformName = ?fn (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformName: *GLchar) callconv(.C) void;
const glGetActiveUniformsiv = ?fn (program: GLuint, uniformCount: GLsizei, uniformIndices: *const GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetActiveVaryingNV = ?fn (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) callconv(.C) void;
const glGetArrayObjectfvATI = ?fn (array: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetArrayObjectivATI = ?fn (array: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetAttachedObjectsARB = ?fn (containerObj: GLhandleARB, maxCount: GLsizei, count: *GLsizei, obj: *GLhandleARB) callconv(.C) void;
const glGetAttachedShaders = ?fn (program: GLuint, maxCount: GLsizei, count: *GLsizei, shaders: *GLuint) callconv(.C) void;
const glGetAttribLocation = ?fn (program: GLuint, name: *const GLchar) callconv(.C) GLint;
const glGetAttribLocationARB = ?fn (programObj: GLhandleARB, name: *const GLcharARB) callconv(.C) GLint;
const glGetBooleanIndexedvEXT = ?fn (target: GLenum, index: GLuint, data: *GLboolean) callconv(.C) void;
const glGetBooleani_v = ?fn (target: GLenum, index: GLuint, data: *GLboolean) callconv(.C) void;
const glGetBooleanv = ?fn (pname: GLenum, data: *GLboolean) callconv(.C) void;
const glGetBufferParameteri64v = ?fn (target: GLenum, pname: GLenum, params: *GLint64) callconv(.C) void;
const glGetBufferParameteriv = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetBufferParameterivARB = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetBufferParameterui64vNV = ?fn (target: GLenum, pname: GLenum, params: *GLuint64EXT) callconv(.C) void;
const glGetBufferPointerv = ?fn (target: GLenum, pname: GLenum, params: **c_void) callconv(.C) void;
const glGetBufferPointervARB = ?fn (target: GLenum, pname: GLenum, params: **c_void) callconv(.C) void;
const glGetBufferSubData = ?fn (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *c_void) callconv(.C) void;
const glGetBufferSubDataARB = ?fn (target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *c_void) callconv(.C) void;
const glGetClipPlanefOES = ?fn (plane: GLenum, equation: *GLfloat) callconv(.C) void;
const glGetClipPlanexOES = ?fn (plane: GLenum, equation: *GLfixed) callconv(.C) void;
const glGetColorTableEXT = ?fn (target: GLenum, format: GLenum, type_: GLenum, data: *c_void) callconv(.C) void;
const glGetColorTableParameterfvEXT = ?fn (target: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetColorTableParameterfvSGI = ?fn (target: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetColorTableParameterivEXT = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetColorTableParameterivSGI = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetColorTableSGI = ?fn (target: GLenum, format: GLenum, type_: GLenum, table: *c_void) callconv(.C) void;
const glGetCombinerInputParameterfvNV = ?fn (stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetCombinerInputParameterivNV = ?fn (stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetCombinerOutputParameterfvNV = ?fn (stage: GLenum, portion: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetCombinerOutputParameterivNV = ?fn (stage: GLenum, portion: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetCombinerStageParameterfvNV = ?fn (stage: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetCommandHeaderNV = ?fn (tokenID: GLenum, size: GLuint) callconv(.C) GLuint;
const glGetCompressedMultiTexImageEXT = ?fn (texunit: GLenum, target: GLenum, lod: GLint, img: *c_void) callconv(.C) void;
const glGetCompressedTexImage = ?fn (target: GLenum, level: GLint, img: *c_void) callconv(.C) void;
const glGetCompressedTexImageARB = ?fn (target: GLenum, level: GLint, img: *c_void) callconv(.C) void;
const glGetCompressedTextureImage = ?fn (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: *c_void) callconv(.C) void;
const glGetCompressedTextureImageEXT = ?fn (texture: GLuint, target: GLenum, lod: GLint, img: *c_void) callconv(.C) void;
const glGetCompressedTextureSubImage = ?fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: *c_void) callconv(.C) void;
const glGetConvolutionFilterEXT = ?fn (target: GLenum, format: GLenum, type_: GLenum, image: *c_void) callconv(.C) void;
const glGetConvolutionParameterfvEXT = ?fn (target: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetConvolutionParameterivEXT = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetConvolutionParameterxvOES = ?fn (target: GLenum, pname: GLenum, params: *GLfixed) callconv(.C) void;
const glGetCoverageModulationTableNV = ?fn (bufSize: GLsizei, v: *GLfloat) callconv(.C) void;
const glGetDebugMessageLog = ?fn (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) callconv(.C) GLuint;
const glGetDebugMessageLogAMD = ?fn (count: GLuint, bufSize: GLsizei, categories: *GLenum, severities: *GLuint, ids: *GLuint, lengths: *GLsizei, message: *GLchar) callconv(.C) GLuint;
const glGetDebugMessageLogARB = ?fn (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) callconv(.C) GLuint;
const glGetDetailTexFuncSGIS = ?fn (target: GLenum, points: *GLfloat) callconv(.C) void;
const glGetDoubleIndexedvEXT = ?fn (target: GLenum, index: GLuint, data: *GLdouble) callconv(.C) void;
const glGetDoublei_v = ?fn (target: GLenum, index: GLuint, data: *GLdouble) callconv(.C) void;
const glGetDoublei_vEXT = ?fn (pname: GLenum, index: GLuint, params: *GLdouble) callconv(.C) void;
const glGetDoublev = ?fn (pname: GLenum, data: *GLdouble) callconv(.C) void;
const glGetError = ?fn () callconv(.C) GLenum;
const glGetFenceivNV = ?fn (fence: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetFinalCombinerInputParameterfvNV = ?fn (variable: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetFinalCombinerInputParameterivNV = ?fn (variable: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetFirstPerfQueryIdINTEL = ?fn (queryId: *GLuint) callconv(.C) void;
const glGetFixedvOES = ?fn (pname: GLenum, params: *GLfixed) callconv(.C) void;
const glGetFloatIndexedvEXT = ?fn (target: GLenum, index: GLuint, data: *GLfloat) callconv(.C) void;
const glGetFloati_v = ?fn (target: GLenum, index: GLuint, data: *GLfloat) callconv(.C) void;
const glGetFloati_vEXT = ?fn (pname: GLenum, index: GLuint, params: *GLfloat) callconv(.C) void;
const glGetFloatv = ?fn (pname: GLenum, data: *GLfloat) callconv(.C) void;
const glGetFogFuncSGIS = ?fn (points: *GLfloat) callconv(.C) void;
const glGetFragDataIndex = ?fn (program: GLuint, name: *const GLchar) callconv(.C) GLint;
const glGetFragDataLocation = ?fn (program: GLuint, name: *const GLchar) callconv(.C) GLint;
const glGetFragDataLocationEXT = ?fn (program: GLuint, name: *const GLchar) callconv(.C) GLint;
const glGetFragmentLightfvSGIX = ?fn (light: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetFragmentLightivSGIX = ?fn (light: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetFragmentMaterialfvSGIX = ?fn (face: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetFragmentMaterialivSGIX = ?fn (face: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetFramebufferAttachmentParameteriv = ?fn (target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetFramebufferAttachmentParameterivEXT = ?fn (target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetFramebufferParameterfvAMD = ?fn (target: GLenum, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: *GLfloat) callconv(.C) void;
const glGetFramebufferParameteriv = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetFramebufferParameterivEXT = ?fn (framebuffer: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetFramebufferParameterivMESA = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetGraphicsResetStatus = ?fn () callconv(.C) GLenum;
const glGetGraphicsResetStatusARB = ?fn () callconv(.C) GLenum;
const glGetHandleARB = ?fn (pname: GLenum) callconv(.C) GLhandleARB;
const glGetHistogramEXT = ?fn (target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *c_void) callconv(.C) void;
const glGetHistogramParameterfvEXT = ?fn (target: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetHistogramParameterivEXT = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetHistogramParameterxvOES = ?fn (target: GLenum, pname: GLenum, params: *GLfixed) callconv(.C) void;
const glGetImageHandleARB = ?fn (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) callconv(.C) GLuint64;
const glGetImageHandleNV = ?fn (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) callconv(.C) GLuint64;
const glGetImageTransformParameterfvHP = ?fn (target: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetImageTransformParameterivHP = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetInfoLogARB = ?fn (obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, infoLog: *GLcharARB) callconv(.C) void;
const glGetInstrumentsSGIX = ?fn () callconv(.C) GLint;
const glGetInteger64i_v = ?fn (target: GLenum, index: GLuint, data: *GLint64) callconv(.C) void;
const glGetInteger64v = ?fn (pname: GLenum, data: *GLint64) callconv(.C) void;
const glGetIntegerIndexedvEXT = ?fn (target: GLenum, index: GLuint, data: *GLint) callconv(.C) void;
const glGetIntegeri_v = ?fn (target: GLenum, index: GLuint, data: *GLint) callconv(.C) void;
const glGetIntegerui64i_vNV = ?fn (value: GLenum, index: GLuint, result: *GLuint64EXT) callconv(.C) void;
const glGetIntegerui64vNV = ?fn (value: GLenum, result: *GLuint64EXT) callconv(.C) void;
const glGetIntegerv = ?fn (pname: GLenum, data: *GLint) callconv(.C) void;
const glGetInternalformatSampleivNV = ?fn (target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, count: GLsizei, params: *GLint) callconv(.C) void;
const glGetInternalformati64v = ?fn (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: *GLint64) callconv(.C) void;
const glGetInternalformativ = ?fn (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: *GLint) callconv(.C) void;
const glGetInvariantBooleanvEXT = ?fn (id: GLuint, value: GLenum, data: *GLboolean) callconv(.C) void;
const glGetInvariantFloatvEXT = ?fn (id: GLuint, value: GLenum, data: *GLfloat) callconv(.C) void;
const glGetInvariantIntegervEXT = ?fn (id: GLuint, value: GLenum, data: *GLint) callconv(.C) void;
const glGetLightxOES = ?fn (light: GLenum, pname: GLenum, params: *GLfixed) callconv(.C) void;
const glGetListParameterfvSGIX = ?fn (list: GLuint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetListParameterivSGIX = ?fn (list: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetLocalConstantBooleanvEXT = ?fn (id: GLuint, value: GLenum, data: *GLboolean) callconv(.C) void;
const glGetLocalConstantFloatvEXT = ?fn (id: GLuint, value: GLenum, data: *GLfloat) callconv(.C) void;
const glGetLocalConstantIntegervEXT = ?fn (id: GLuint, value: GLenum, data: *GLint) callconv(.C) void;
const glGetMapAttribParameterfvNV = ?fn (target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetMapAttribParameterivNV = ?fn (target: GLenum, index: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetMapControlPointsNV = ?fn (target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, packed_: GLboolean, points: *c_void) callconv(.C) void;
const glGetMapParameterfvNV = ?fn (target: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetMapParameterivNV = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetMapxvOES = ?fn (target: GLenum, query: GLenum, v: *GLfixed) callconv(.C) void;
const glGetMaterialxOES = ?fn (face: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glGetMemoryObjectDetachedResourcesuivNV = ?fn (memory: GLuint, pname: GLenum, first: GLint, count: GLsizei, params: *GLuint) callconv(.C) void;
const glGetMemoryObjectParameterivEXT = ?fn (memoryObject: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetMinmaxEXT = ?fn (target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *c_void) callconv(.C) void;
const glGetMinmaxParameterfvEXT = ?fn (target: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetMinmaxParameterivEXT = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetMultiTexEnvfvEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetMultiTexEnvivEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetMultiTexGendvEXT = ?fn (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) callconv(.C) void;
const glGetMultiTexGenfvEXT = ?fn (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetMultiTexGenivEXT = ?fn (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetMultiTexImageEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *c_void) callconv(.C) void;
const glGetMultiTexLevelParameterfvEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetMultiTexLevelParameterivEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetMultiTexParameterIivEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetMultiTexParameterIuivEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) callconv(.C) void;
const glGetMultiTexParameterfvEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetMultiTexParameterivEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetMultisamplefv = ?fn (pname: GLenum, index: GLuint, val: *GLfloat) callconv(.C) void;
const glGetMultisamplefvNV = ?fn (pname: GLenum, index: GLuint, val: *GLfloat) callconv(.C) void;
const glGetNamedBufferParameteri64v = ?fn (buffer: GLuint, pname: GLenum, params: *GLint64) callconv(.C) void;
const glGetNamedBufferParameteriv = ?fn (buffer: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetNamedBufferParameterivEXT = ?fn (buffer: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetNamedBufferParameterui64vNV = ?fn (buffer: GLuint, pname: GLenum, params: *GLuint64EXT) callconv(.C) void;
const glGetNamedBufferPointerv = ?fn (buffer: GLuint, pname: GLenum, params: **c_void) callconv(.C) void;
const glGetNamedBufferPointervEXT = ?fn (buffer: GLuint, pname: GLenum, params: **c_void) callconv(.C) void;
const glGetNamedBufferSubData = ?fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *c_void) callconv(.C) void;
const glGetNamedBufferSubDataEXT = ?fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *c_void) callconv(.C) void;
const glGetNamedFramebufferAttachmentParameteriv = ?fn (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetNamedFramebufferAttachmentParameterivEXT = ?fn (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetNamedFramebufferParameterfvAMD = ?fn (framebuffer: GLuint, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: *GLfloat) callconv(.C) void;
const glGetNamedFramebufferParameteriv = ?fn (framebuffer: GLuint, pname: GLenum, param: *GLint) callconv(.C) void;
const glGetNamedFramebufferParameterivEXT = ?fn (framebuffer: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetNamedProgramLocalParameterIivEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, params: *GLint) callconv(.C) void;
const glGetNamedProgramLocalParameterIuivEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, params: *GLuint) callconv(.C) void;
const glGetNamedProgramLocalParameterdvEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) callconv(.C) void;
const glGetNamedProgramLocalParameterfvEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) callconv(.C) void;
const glGetNamedProgramStringEXT = ?fn (program: GLuint, target: GLenum, pname: GLenum, string: *c_void) callconv(.C) void;
const glGetNamedProgramivEXT = ?fn (program: GLuint, target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetNamedRenderbufferParameteriv = ?fn (renderbuffer: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetNamedRenderbufferParameterivEXT = ?fn (renderbuffer: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetNamedStringARB = ?fn (namelen: GLint, name: *const GLchar, bufSize: GLsizei, stringlen: *GLint, string: *GLchar) callconv(.C) void;
const glGetNamedStringivARB = ?fn (namelen: GLint, name: *const GLchar, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetNextPerfQueryIdINTEL = ?fn (queryId: GLuint, nextQueryId: *GLuint) callconv(.C) void;
const glGetObjectBufferfvATI = ?fn (buffer: GLuint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetObjectBufferivATI = ?fn (buffer: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetObjectLabel = ?fn (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) callconv(.C) void;
const glGetObjectLabelEXT = ?fn (type_: GLenum, object: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) callconv(.C) void;
const glGetObjectParameterfvARB = ?fn (obj: GLhandleARB, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetObjectParameterivAPPLE = ?fn (objectType: GLenum, name: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetObjectParameterivARB = ?fn (obj: GLhandleARB, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetObjectPtrLabel = ?fn (ptr: *const c_void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) callconv(.C) void;
const glGetOcclusionQueryivNV = ?fn (id: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetOcclusionQueryuivNV = ?fn (id: GLuint, pname: GLenum, params: *GLuint) callconv(.C) void;
const glGetPathCommandsNV = ?fn (path: GLuint, commands: *GLubyte) callconv(.C) void;
const glGetPathCoordsNV = ?fn (path: GLuint, coords: *GLfloat) callconv(.C) void;
const glGetPathDashArrayNV = ?fn (path: GLuint, dashArray: *GLfloat) callconv(.C) void;
const glGetPathLengthNV = ?fn (path: GLuint, startSegment: GLsizei, numSegments: GLsizei) callconv(.C) GLfloat;
const glGetPathMetricRangeNV = ?fn (metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: *GLfloat) callconv(.C) void;
const glGetPathMetricsNV = ?fn (metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: *const c_void, pathBase: GLuint, stride: GLsizei, metrics: *GLfloat) callconv(.C) void;
const glGetPathParameterfvNV = ?fn (path: GLuint, pname: GLenum, value: *GLfloat) callconv(.C) void;
const glGetPathParameterivNV = ?fn (path: GLuint, pname: GLenum, value: *GLint) callconv(.C) void;
const glGetPathSpacingNV = ?fn (pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: *const c_void, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: *GLfloat) callconv(.C) void;
const glGetPerfCounterInfoINTEL = ?fn (queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: *GLchar, counterDescLength: GLuint, counterDesc: *GLchar, counterOffset: *GLuint, counterDataSize: *GLuint, counterTypeEnum: *GLuint, counterDataTypeEnum: *GLuint, rawCounterMaxValue: *GLuint64) callconv(.C) void;
const glGetPerfMonitorCounterDataAMD = ?fn (monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: *GLuint, bytesWritten: *GLint) callconv(.C) void;
const glGetPerfMonitorCounterInfoAMD = ?fn (group: GLuint, counter: GLuint, pname: GLenum, data: *c_void) callconv(.C) void;
const glGetPerfMonitorCounterStringAMD = ?fn (group: GLuint, counter: GLuint, bufSize: GLsizei, length: *GLsizei, counterString: *GLchar) callconv(.C) void;
const glGetPerfMonitorCountersAMD = ?fn (group: GLuint, numCounters: *GLint, maxActiveCounters: *GLint, counterSize: GLsizei, counters: *GLuint) callconv(.C) void;
const glGetPerfMonitorGroupStringAMD = ?fn (group: GLuint, bufSize: GLsizei, length: *GLsizei, groupString: *GLchar) callconv(.C) void;
const glGetPerfMonitorGroupsAMD = ?fn (numGroups: *GLint, groupsSize: GLsizei, groups: *GLuint) callconv(.C) void;
const glGetPerfQueryDataINTEL = ?fn (queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: *c_void, bytesWritten: *GLuint) callconv(.C) void;
const glGetPerfQueryIdByNameINTEL = ?fn (queryName: *GLchar, queryId: *GLuint) callconv(.C) void;
const glGetPerfQueryInfoINTEL = ?fn (queryId: GLuint, queryNameLength: GLuint, queryName: *GLchar, dataSize: *GLuint, noCounters: *GLuint, noInstances: *GLuint, capsMask: *GLuint) callconv(.C) void;
const glGetPixelMapxv = ?fn (map: GLenum, size: GLint, values: *GLfixed) callconv(.C) void;
const glGetPixelTexGenParameterfvSGIS = ?fn (pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetPixelTexGenParameterivSGIS = ?fn (pname: GLenum, params: *GLint) callconv(.C) void;
const glGetPixelTransformParameterfvEXT = ?fn (target: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetPixelTransformParameterivEXT = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetPointerIndexedvEXT = ?fn (target: GLenum, index: GLuint, data: **c_void) callconv(.C) void;
const glGetPointeri_vEXT = ?fn (pname: GLenum, index: GLuint, params: **c_void) callconv(.C) void;
const glGetPointerv = ?fn (pname: GLenum, params: **c_void) callconv(.C) void;
const glGetPointervEXT = ?fn (pname: GLenum, params: **c_void) callconv(.C) void;
const glGetProgramBinary = ?fn (program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *c_void) callconv(.C) void;
const glGetProgramEnvParameterIivNV = ?fn (target: GLenum, index: GLuint, params: *GLint) callconv(.C) void;
const glGetProgramEnvParameterIuivNV = ?fn (target: GLenum, index: GLuint, params: *GLuint) callconv(.C) void;
const glGetProgramEnvParameterdvARB = ?fn (target: GLenum, index: GLuint, params: *GLdouble) callconv(.C) void;
const glGetProgramEnvParameterfvARB = ?fn (target: GLenum, index: GLuint, params: *GLfloat) callconv(.C) void;
const glGetProgramInfoLog = ?fn (program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) callconv(.C) void;
const glGetProgramInterfaceiv = ?fn (program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetProgramLocalParameterIivNV = ?fn (target: GLenum, index: GLuint, params: *GLint) callconv(.C) void;
const glGetProgramLocalParameterIuivNV = ?fn (target: GLenum, index: GLuint, params: *GLuint) callconv(.C) void;
const glGetProgramLocalParameterdvARB = ?fn (target: GLenum, index: GLuint, params: *GLdouble) callconv(.C) void;
const glGetProgramLocalParameterfvARB = ?fn (target: GLenum, index: GLuint, params: *GLfloat) callconv(.C) void;
const glGetProgramNamedParameterdvNV = ?fn (id: GLuint, len: GLsizei, name: *const GLubyte, params: *GLdouble) callconv(.C) void;
const glGetProgramNamedParameterfvNV = ?fn (id: GLuint, len: GLsizei, name: *const GLubyte, params: *GLfloat) callconv(.C) void;
const glGetProgramParameterdvNV = ?fn (target: GLenum, index: GLuint, pname: GLenum, params: *GLdouble) callconv(.C) void;
const glGetProgramParameterfvNV = ?fn (target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetProgramPipelineInfoLog = ?fn (pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) callconv(.C) void;
const glGetProgramPipelineiv = ?fn (pipeline: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetProgramResourceIndex = ?fn (program: GLuint, programInterface: GLenum, name: *const GLchar) callconv(.C) GLuint;
const glGetProgramResourceLocation = ?fn (program: GLuint, programInterface: GLenum, name: *const GLchar) callconv(.C) GLint;
const glGetProgramResourceLocationIndex = ?fn (program: GLuint, programInterface: GLenum, name: *const GLchar) callconv(.C) GLint;
const glGetProgramResourceName = ?fn (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) callconv(.C) void;
const glGetProgramResourcefvNV = ?fn (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *const GLenum, count: GLsizei, length: *GLsizei, params: *GLfloat) callconv(.C) void;
const glGetProgramResourceiv = ?fn (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *const GLenum, count: GLsizei, length: *GLsizei, params: *GLint) callconv(.C) void;
const glGetProgramStageiv = ?fn (program: GLuint, shadertype: GLenum, pname: GLenum, values: *GLint) callconv(.C) void;
const glGetProgramStringARB = ?fn (target: GLenum, pname: GLenum, string: *c_void) callconv(.C) void;
const glGetProgramStringNV = ?fn (id: GLuint, pname: GLenum, program: *GLubyte) callconv(.C) void;
const glGetProgramSubroutineParameteruivNV = ?fn (target: GLenum, index: GLuint, param: *GLuint) callconv(.C) void;
const glGetProgramiv = ?fn (program: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetProgramivARB = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetProgramivNV = ?fn (id: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetQueryBufferObjecti64v = ?fn (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) callconv(.C) void;
const glGetQueryBufferObjectiv = ?fn (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) callconv(.C) void;
const glGetQueryBufferObjectui64v = ?fn (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) callconv(.C) void;
const glGetQueryBufferObjectuiv = ?fn (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) callconv(.C) void;
const glGetQueryIndexediv = ?fn (target: GLenum, index: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetQueryObjecti64v = ?fn (id: GLuint, pname: GLenum, params: *GLint64) callconv(.C) void;
const glGetQueryObjecti64vEXT = ?fn (id: GLuint, pname: GLenum, params: *GLint64) callconv(.C) void;
const glGetQueryObjectiv = ?fn (id: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetQueryObjectivARB = ?fn (id: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetQueryObjectui64v = ?fn (id: GLuint, pname: GLenum, params: *GLuint64) callconv(.C) void;
const glGetQueryObjectui64vEXT = ?fn (id: GLuint, pname: GLenum, params: *GLuint64) callconv(.C) void;
const glGetQueryObjectuiv = ?fn (id: GLuint, pname: GLenum, params: *GLuint) callconv(.C) void;
const glGetQueryObjectuivARB = ?fn (id: GLuint, pname: GLenum, params: *GLuint) callconv(.C) void;
const glGetQueryiv = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetQueryivARB = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetRenderbufferParameteriv = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetRenderbufferParameterivEXT = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetSamplerParameterIiv = ?fn (sampler: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetSamplerParameterIuiv = ?fn (sampler: GLuint, pname: GLenum, params: *GLuint) callconv(.C) void;
const glGetSamplerParameterfv = ?fn (sampler: GLuint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetSamplerParameteriv = ?fn (sampler: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetSemaphoreParameterivNV = ?fn (semaphore: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetSemaphoreParameterui64vEXT = ?fn (semaphore: GLuint, pname: GLenum, params: *GLuint64) callconv(.C) void;
const glGetSeparableFilterEXT = ?fn (target: GLenum, format: GLenum, type_: GLenum, row: *c_void, column: *c_void, span: *c_void) callconv(.C) void;
const glGetShaderInfoLog = ?fn (shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) callconv(.C) void;
const glGetShaderPrecisionFormat = ?fn (shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) callconv(.C) void;
const glGetShaderSource = ?fn (shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) callconv(.C) void;
const glGetShaderSourceARB = ?fn (obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, source: *GLcharARB) callconv(.C) void;
const glGetShaderiv = ?fn (shader: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetShadingRateImagePaletteNV = ?fn (viewport: GLuint, entry: GLuint, rate: *GLenum) callconv(.C) void;
const glGetShadingRateSampleLocationivNV = ?fn (rate: GLenum, samples: GLuint, index: GLuint, location: *GLint) callconv(.C) void;
const glGetSharpenTexFuncSGIS = ?fn (target: GLenum, points: *GLfloat) callconv(.C) void;
const glGetStageIndexNV = ?fn (shadertype: GLenum) callconv(.C) GLushort;
const glGetString = ?fn (name: GLenum) callconv(.C) *const GLubyte;
const glGetStringi = ?fn (name: GLenum, index: GLuint) callconv(.C) *const GLubyte;
const glGetSubroutineIndex = ?fn (program: GLuint, shadertype: GLenum, name: *const GLchar) callconv(.C) GLuint;
const glGetSubroutineUniformLocation = ?fn (program: GLuint, shadertype: GLenum, name: *const GLchar) callconv(.C) GLint;
const glGetSynciv = ?fn (sync: GLsync, pname: GLenum, count: GLsizei, length: *GLsizei, values: *GLint) callconv(.C) void;
const glGetTexBumpParameterfvATI = ?fn (pname: GLenum, param: *GLfloat) callconv(.C) void;
const glGetTexBumpParameterivATI = ?fn (pname: GLenum, param: *GLint) callconv(.C) void;
const glGetTexEnvxvOES = ?fn (target: GLenum, pname: GLenum, params: *GLfixed) callconv(.C) void;
const glGetTexFilterFuncSGIS = ?fn (target: GLenum, filter: GLenum, weights: *GLfloat) callconv(.C) void;
const glGetTexGenxvOES = ?fn (coord: GLenum, pname: GLenum, params: *GLfixed) callconv(.C) void;
const glGetTexImage = ?fn (target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *c_void) callconv(.C) void;
const glGetTexLevelParameterfv = ?fn (target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetTexLevelParameteriv = ?fn (target: GLenum, level: GLint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetTexLevelParameterxvOES = ?fn (target: GLenum, level: GLint, pname: GLenum, params: *GLfixed) callconv(.C) void;
const glGetTexParameterIiv = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetTexParameterIivEXT = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetTexParameterIuiv = ?fn (target: GLenum, pname: GLenum, params: *GLuint) callconv(.C) void;
const glGetTexParameterIuivEXT = ?fn (target: GLenum, pname: GLenum, params: *GLuint) callconv(.C) void;
const glGetTexParameterPointervAPPLE = ?fn (target: GLenum, pname: GLenum, params: **c_void) callconv(.C) void;
const glGetTexParameterfv = ?fn (target: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetTexParameteriv = ?fn (target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetTexParameterxvOES = ?fn (target: GLenum, pname: GLenum, params: *GLfixed) callconv(.C) void;
const glGetTextureHandleARB = ?fn (texture: GLuint) callconv(.C) GLuint64;
const glGetTextureHandleNV = ?fn (texture: GLuint) callconv(.C) GLuint64;
const glGetTextureImage = ?fn (texture: GLuint, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, pixels: *c_void) callconv(.C) void;
const glGetTextureImageEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *c_void) callconv(.C) void;
const glGetTextureLevelParameterfv = ?fn (texture: GLuint, level: GLint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetTextureLevelParameterfvEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetTextureLevelParameteriv = ?fn (texture: GLuint, level: GLint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetTextureLevelParameterivEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetTextureParameterIiv = ?fn (texture: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetTextureParameterIivEXT = ?fn (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetTextureParameterIuiv = ?fn (texture: GLuint, pname: GLenum, params: *GLuint) callconv(.C) void;
const glGetTextureParameterIuivEXT = ?fn (texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) callconv(.C) void;
const glGetTextureParameterfv = ?fn (texture: GLuint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetTextureParameterfvEXT = ?fn (texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetTextureParameteriv = ?fn (texture: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetTextureParameterivEXT = ?fn (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetTextureSamplerHandleARB = ?fn (texture: GLuint, sampler: GLuint) callconv(.C) GLuint64;
const glGetTextureSamplerHandleNV = ?fn (texture: GLuint, sampler: GLuint) callconv(.C) GLuint64;
const glGetTextureSubImage = ?fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, pixels: *c_void) callconv(.C) void;
const glGetTrackMatrixivNV = ?fn (target: GLenum, address: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetTransformFeedbackVarying = ?fn (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) callconv(.C) void;
const glGetTransformFeedbackVaryingEXT = ?fn (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) callconv(.C) void;
const glGetTransformFeedbackVaryingNV = ?fn (program: GLuint, index: GLuint, location: *GLint) callconv(.C) void;
const glGetTransformFeedbacki64_v = ?fn (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint64) callconv(.C) void;
const glGetTransformFeedbacki_v = ?fn (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint) callconv(.C) void;
const glGetTransformFeedbackiv = ?fn (xfb: GLuint, pname: GLenum, param: *GLint) callconv(.C) void;
const glGetUniformBlockIndex = ?fn (program: GLuint, uniformBlockName: *const GLchar) callconv(.C) GLuint;
const glGetUniformBufferSizeEXT = ?fn (program: GLuint, location: GLint) callconv(.C) GLint;
const glGetUniformIndices = ?fn (program: GLuint, uniformCount: GLsizei, uniformNames: *const *const GLchar, uniformIndices: *GLuint) callconv(.C) void;
const glGetUniformLocation = ?fn (program: GLuint, name: [*c]const GLchar) callconv(.C) GLint;
const glGetUniformLocationARB = ?fn (programObj: GLhandleARB, name: *const GLcharARB) callconv(.C) GLint;
const glGetUniformOffsetEXT = ?fn (program: GLuint, location: GLint) callconv(.C) GLintptr;
const glGetUniformSubroutineuiv = ?fn (shadertype: GLenum, location: GLint, params: *GLuint) callconv(.C) void;
const glGetUniformdv = ?fn (program: GLuint, location: GLint, params: *GLdouble) callconv(.C) void;
const glGetUniformfv = ?fn (program: GLuint, location: GLint, params: *GLfloat) callconv(.C) void;
const glGetUniformfvARB = ?fn (programObj: GLhandleARB, location: GLint, params: *GLfloat) callconv(.C) void;
const glGetUniformi64vARB = ?fn (program: GLuint, location: GLint, params: *GLint64) callconv(.C) void;
const glGetUniformi64vNV = ?fn (program: GLuint, location: GLint, params: *GLint64EXT) callconv(.C) void;
const glGetUniformiv = ?fn (program: GLuint, location: GLint, params: *GLint) callconv(.C) void;
const glGetUniformivARB = ?fn (programObj: GLhandleARB, location: GLint, params: *GLint) callconv(.C) void;
const glGetUniformui64vARB = ?fn (program: GLuint, location: GLint, params: *GLuint64) callconv(.C) void;
const glGetUniformui64vNV = ?fn (program: GLuint, location: GLint, params: *GLuint64EXT) callconv(.C) void;
const glGetUniformuiv = ?fn (program: GLuint, location: GLint, params: *GLuint) callconv(.C) void;
const glGetUniformuivEXT = ?fn (program: GLuint, location: GLint, params: *GLuint) callconv(.C) void;
const glGetUnsignedBytei_vEXT = ?fn (target: GLenum, index: GLuint, data: *GLubyte) callconv(.C) void;
const glGetUnsignedBytevEXT = ?fn (pname: GLenum, data: *GLubyte) callconv(.C) void;
const glGetVariantArrayObjectfvATI = ?fn (id: GLuint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetVariantArrayObjectivATI = ?fn (id: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetVariantBooleanvEXT = ?fn (id: GLuint, value: GLenum, data: *GLboolean) callconv(.C) void;
const glGetVariantFloatvEXT = ?fn (id: GLuint, value: GLenum, data: *GLfloat) callconv(.C) void;
const glGetVariantIntegervEXT = ?fn (id: GLuint, value: GLenum, data: *GLint) callconv(.C) void;
const glGetVariantPointervEXT = ?fn (id: GLuint, value: GLenum, data: **c_void) callconv(.C) void;
const glGetVaryingLocationNV = ?fn (program: GLuint, name: *const GLchar) callconv(.C) GLint;
const glGetVertexArrayIndexed64iv = ?fn (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint64) callconv(.C) void;
const glGetVertexArrayIndexediv = ?fn (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) callconv(.C) void;
const glGetVertexArrayIntegeri_vEXT = ?fn (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) callconv(.C) void;
const glGetVertexArrayIntegervEXT = ?fn (vaobj: GLuint, pname: GLenum, param: *GLint) callconv(.C) void;
const glGetVertexArrayPointeri_vEXT = ?fn (vaobj: GLuint, index: GLuint, pname: GLenum, param: **c_void) callconv(.C) void;
const glGetVertexArrayPointervEXT = ?fn (vaobj: GLuint, pname: GLenum, param: **c_void) callconv(.C) void;
const glGetVertexArrayiv = ?fn (vaobj: GLuint, pname: GLenum, param: *GLint) callconv(.C) void;
const glGetVertexAttribArrayObjectfvATI = ?fn (index: GLuint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetVertexAttribArrayObjectivATI = ?fn (index: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetVertexAttribIiv = ?fn (index: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetVertexAttribIivEXT = ?fn (index: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetVertexAttribIuiv = ?fn (index: GLuint, pname: GLenum, params: *GLuint) callconv(.C) void;
const glGetVertexAttribIuivEXT = ?fn (index: GLuint, pname: GLenum, params: *GLuint) callconv(.C) void;
const glGetVertexAttribLdv = ?fn (index: GLuint, pname: GLenum, params: *GLdouble) callconv(.C) void;
const glGetVertexAttribLdvEXT = ?fn (index: GLuint, pname: GLenum, params: *GLdouble) callconv(.C) void;
const glGetVertexAttribLi64vNV = ?fn (index: GLuint, pname: GLenum, params: *GLint64EXT) callconv(.C) void;
const glGetVertexAttribLui64vARB = ?fn (index: GLuint, pname: GLenum, params: *GLuint64EXT) callconv(.C) void;
const glGetVertexAttribLui64vNV = ?fn (index: GLuint, pname: GLenum, params: *GLuint64EXT) callconv(.C) void;
const glGetVertexAttribPointerv = ?fn (index: GLuint, pname: GLenum, pointer: **c_void) callconv(.C) void;
const glGetVertexAttribPointervARB = ?fn (index: GLuint, pname: GLenum, pointer: **c_void) callconv(.C) void;
const glGetVertexAttribPointervNV = ?fn (index: GLuint, pname: GLenum, pointer: **c_void) callconv(.C) void;
const glGetVertexAttribdv = ?fn (index: GLuint, pname: GLenum, params: *GLdouble) callconv(.C) void;
const glGetVertexAttribdvARB = ?fn (index: GLuint, pname: GLenum, params: *GLdouble) callconv(.C) void;
const glGetVertexAttribdvNV = ?fn (index: GLuint, pname: GLenum, params: *GLdouble) callconv(.C) void;
const glGetVertexAttribfv = ?fn (index: GLuint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetVertexAttribfvARB = ?fn (index: GLuint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetVertexAttribfvNV = ?fn (index: GLuint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetVertexAttribiv = ?fn (index: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetVertexAttribivARB = ?fn (index: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetVertexAttribivNV = ?fn (index: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetVideoCaptureStreamdvNV = ?fn (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) callconv(.C) void;
const glGetVideoCaptureStreamfvNV = ?fn (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) callconv(.C) void;
const glGetVideoCaptureStreamivNV = ?fn (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetVideoCaptureivNV = ?fn (video_capture_slot: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetVideoi64vNV = ?fn (video_slot: GLuint, pname: GLenum, params: *GLint64EXT) callconv(.C) void;
const glGetVideoivNV = ?fn (video_slot: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glGetVideoui64vNV = ?fn (video_slot: GLuint, pname: GLenum, params: *GLuint64EXT) callconv(.C) void;
const glGetVideouivNV = ?fn (video_slot: GLuint, pname: GLenum, params: *GLuint) callconv(.C) void;
const glGetVkProcAddrNV = ?fn (name: *const GLchar) callconv(.C) GLVULKANPROCNV;
const glGetnCompressedTexImageARB = ?fn (target: GLenum, lod: GLint, bufSize: GLsizei, img: *c_void) callconv(.C) void;
const glGetnTexImageARB = ?fn (target: GLenum, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, img: *c_void) callconv(.C) void;
const glGetnUniformdvARB = ?fn (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) callconv(.C) void;
const glGetnUniformfv = ?fn (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) callconv(.C) void;
const glGetnUniformfvARB = ?fn (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) callconv(.C) void;
const glGetnUniformi64vARB = ?fn (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint64) callconv(.C) void;
const glGetnUniformiv = ?fn (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) callconv(.C) void;
const glGetnUniformivARB = ?fn (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) callconv(.C) void;
const glGetnUniformui64vARB = ?fn (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint64) callconv(.C) void;
const glGetnUniformuiv = ?fn (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) callconv(.C) void;
const glGetnUniformuivARB = ?fn (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) callconv(.C) void;
const glGlobalAlphaFactorbSUN = ?fn (factor: GLbyte) callconv(.C) void;
const glGlobalAlphaFactordSUN = ?fn (factor: GLdouble) callconv(.C) void;
const glGlobalAlphaFactorfSUN = ?fn (factor: GLfloat) callconv(.C) void;
const glGlobalAlphaFactoriSUN = ?fn (factor: GLint) callconv(.C) void;
const glGlobalAlphaFactorsSUN = ?fn (factor: GLshort) callconv(.C) void;
const glGlobalAlphaFactorubSUN = ?fn (factor: GLubyte) callconv(.C) void;
const glGlobalAlphaFactoruiSUN = ?fn (factor: GLuint) callconv(.C) void;
const glGlobalAlphaFactorusSUN = ?fn (factor: GLushort) callconv(.C) void;
const glHint = ?fn (target: GLenum, mode: GLenum) callconv(.C) void;
const glHintPGI = ?fn (target: GLenum, mode: GLint) callconv(.C) void;
const glHistogramEXT = ?fn (target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) callconv(.C) void;
const glIglooInterfaceSGIX = ?fn (pname: GLenum, params: *const c_void) callconv(.C) void;
const glImageTransformParameterfHP = ?fn (target: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glImageTransformParameterfvHP = ?fn (target: GLenum, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glImageTransformParameteriHP = ?fn (target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glImageTransformParameterivHP = ?fn (target: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glImportMemoryFdEXT = ?fn (memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint) callconv(.C) void;
const glImportMemoryWin32HandleEXT = ?fn (memory: GLuint, size: GLuint64, handleType: GLenum, handle: *c_void) callconv(.C) void;
const glImportMemoryWin32NameEXT = ?fn (memory: GLuint, size: GLuint64, handleType: GLenum, name: *const c_void) callconv(.C) void;
const glImportSemaphoreFdEXT = ?fn (semaphore: GLuint, handleType: GLenum, fd: GLint) callconv(.C) void;
const glImportSemaphoreWin32HandleEXT = ?fn (semaphore: GLuint, handleType: GLenum, handle: *c_void) callconv(.C) void;
const glImportSemaphoreWin32NameEXT = ?fn (semaphore: GLuint, handleType: GLenum, name: *const c_void) callconv(.C) void;
const glImportSyncEXT = ?fn (external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield) callconv(.C) GLsync;
const glIndexFormatNV = ?fn (type_: GLenum, stride: GLsizei) callconv(.C) void;
const glIndexFuncEXT = ?fn (func: GLenum, ref: GLclampf) callconv(.C) void;
const glIndexMaterialEXT = ?fn (face: GLenum, mode: GLenum) callconv(.C) void;
const glIndexPointerEXT = ?fn (type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *const c_void) callconv(.C) void;
const glIndexPointerListIBM = ?fn (type_: GLenum, stride: GLint, pointer: *const *const c_void, ptrstride: GLint) callconv(.C) void;
const glIndexxOES = ?fn (component: GLfixed) callconv(.C) void;
const glIndexxvOES = ?fn (component: *const GLfixed) callconv(.C) void;
const glInsertComponentEXT = ?fn (res: GLuint, src: GLuint, num: GLuint) callconv(.C) void;
const glInsertEventMarkerEXT = ?fn (length: GLsizei, marker: *const GLchar) callconv(.C) void;
const glInstrumentsBufferSGIX = ?fn (size: GLsizei, buffer: *GLint) callconv(.C) void;
const glInterpolatePathsNV = ?fn (resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) callconv(.C) void;
const glInvalidateBufferData = ?fn (buffer: GLuint) callconv(.C) void;
const glInvalidateBufferSubData = ?fn (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) callconv(.C) void;
const glInvalidateFramebuffer = ?fn (target: GLenum, numAttachments: GLsizei, attachments: *const GLenum) callconv(.C) void;
const glInvalidateNamedFramebufferData = ?fn (framebuffer: GLuint, numAttachments: GLsizei, attachments: *const GLenum) callconv(.C) void;
const glInvalidateNamedFramebufferSubData = ?fn (framebuffer: GLuint, numAttachments: GLsizei, attachments: *const GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glInvalidateSubFramebuffer = ?fn (target: GLenum, numAttachments: GLsizei, attachments: *const GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glInvalidateTexImage = ?fn (texture: GLuint, level: GLint) callconv(.C) void;
const glInvalidateTexSubImage = ?fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) callconv(.C) void;
const glIsAsyncMarkerSGIX = ?fn (marker: GLuint) callconv(.C) GLboolean;
const glIsBuffer = ?fn (buffer: GLuint) callconv(.C) GLboolean;
const glIsBufferARB = ?fn (buffer: GLuint) callconv(.C) GLboolean;
const glIsBufferResidentNV = ?fn (target: GLenum) callconv(.C) GLboolean;
const glIsCommandListNV = ?fn (list: GLuint) callconv(.C) GLboolean;
const glIsEnabled = ?fn (cap: GLenum) callconv(.C) GLboolean;
const glIsEnabledIndexedEXT = ?fn (target: GLenum, index: GLuint) callconv(.C) GLboolean;
const glIsEnabledi = ?fn (target: GLenum, index: GLuint) callconv(.C) GLboolean;
const glIsFenceAPPLE = ?fn (fence: GLuint) callconv(.C) GLboolean;
const glIsFenceNV = ?fn (fence: GLuint) callconv(.C) GLboolean;
const glIsFramebuffer = ?fn (framebuffer: GLuint) callconv(.C) GLboolean;
const glIsFramebufferEXT = ?fn (framebuffer: GLuint) callconv(.C) GLboolean;
const glIsImageHandleResidentARB = ?fn (handle: GLuint64) callconv(.C) GLboolean;
const glIsImageHandleResidentNV = ?fn (handle: GLuint64) callconv(.C) GLboolean;
const glIsMemoryObjectEXT = ?fn (memoryObject: GLuint) callconv(.C) GLboolean;
const glIsNameAMD = ?fn (identifier: GLenum, name: GLuint) callconv(.C) GLboolean;
const glIsNamedBufferResidentNV = ?fn (buffer: GLuint) callconv(.C) GLboolean;
const glIsNamedStringARB = ?fn (namelen: GLint, name: *const GLchar) callconv(.C) GLboolean;
const glIsObjectBufferATI = ?fn (buffer: GLuint) callconv(.C) GLboolean;
const glIsOcclusionQueryNV = ?fn (id: GLuint) callconv(.C) GLboolean;
const glIsPathNV = ?fn (path: GLuint) callconv(.C) GLboolean;
const glIsPointInFillPathNV = ?fn (path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) callconv(.C) GLboolean;
const glIsPointInStrokePathNV = ?fn (path: GLuint, x: GLfloat, y: GLfloat) callconv(.C) GLboolean;
const glIsProgram = ?fn (program: GLuint) callconv(.C) GLboolean;
const glIsProgramARB = ?fn (program: GLuint) callconv(.C) GLboolean;
const glIsProgramNV = ?fn (id: GLuint) callconv(.C) GLboolean;
const glIsProgramPipeline = ?fn (pipeline: GLuint) callconv(.C) GLboolean;
const glIsQuery = ?fn (id: GLuint) callconv(.C) GLboolean;
const glIsQueryARB = ?fn (id: GLuint) callconv(.C) GLboolean;
const glIsRenderbuffer = ?fn (renderbuffer: GLuint) callconv(.C) GLboolean;
const glIsRenderbufferEXT = ?fn (renderbuffer: GLuint) callconv(.C) GLboolean;
const glIsSampler = ?fn (sampler: GLuint) callconv(.C) GLboolean;
const glIsSemaphoreEXT = ?fn (semaphore: GLuint) callconv(.C) GLboolean;
const glIsShader = ?fn (shader: GLuint) callconv(.C) GLboolean;
const glIsStateNV = ?fn (state: GLuint) callconv(.C) GLboolean;
const glIsSync = ?fn (sync: GLsync) callconv(.C) GLboolean;
const glIsTexture = ?fn (texture: GLuint) callconv(.C) GLboolean;
const glIsTextureEXT = ?fn (texture: GLuint) callconv(.C) GLboolean;
const glIsTextureHandleResidentARB = ?fn (handle: GLuint64) callconv(.C) GLboolean;
const glIsTextureHandleResidentNV = ?fn (handle: GLuint64) callconv(.C) GLboolean;
const glIsTransformFeedback = ?fn (id: GLuint) callconv(.C) GLboolean;
const glIsTransformFeedbackNV = ?fn (id: GLuint) callconv(.C) GLboolean;
const glIsVariantEnabledEXT = ?fn (id: GLuint, cap: GLenum) callconv(.C) GLboolean;
const glIsVertexArray = ?fn (array: GLuint) callconv(.C) GLboolean;
const glIsVertexArrayAPPLE = ?fn (array: GLuint) callconv(.C) GLboolean;
const glIsVertexAttribEnabledAPPLE = ?fn (index: GLuint, pname: GLenum) callconv(.C) GLboolean;
const glLGPUCopyImageSubDataNVX = ?fn (sourceGpu: GLuint, destinationGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srxY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) callconv(.C) void;
const glLGPUInterlockNVX = ?fn () callconv(.C) void;
const glLGPUNamedBufferSubDataNVX = ?fn (gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *const c_void) callconv(.C) void;
const glLabelObjectEXT = ?fn (type_: GLenum, object: GLuint, length: GLsizei, label: *const GLchar) callconv(.C) void;
const glLightEnviSGIX = ?fn (pname: GLenum, param: GLint) callconv(.C) void;
const glLightModelxOES = ?fn (pname: GLenum, param: GLfixed) callconv(.C) void;
const glLightModelxvOES = ?fn (pname: GLenum, param: *const GLfixed) callconv(.C) void;
const glLightxOES = ?fn (light: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glLightxvOES = ?fn (light: GLenum, pname: GLenum, params: *const GLfixed) callconv(.C) void;
const glLineWidth = ?fn (width: GLfloat) callconv(.C) void;
const glLineWidthxOES = ?fn (width: GLfixed) callconv(.C) void;
const glLinkProgram = ?fn (program: GLuint) callconv(.C) void;
const glLinkProgramARB = ?fn (programObj: GLhandleARB) callconv(.C) void;
const glListDrawCommandsStatesClientNV = ?fn (list: GLuint, segment: GLuint, indirects: *const *const c_void, sizes: *const GLsizei, states: *const GLuint, fbos: *const GLuint, count: GLuint) callconv(.C) void;
const glListParameterfSGIX = ?fn (list: GLuint, pname: GLenum, param: GLfloat) callconv(.C) void;
const glListParameterfvSGIX = ?fn (list: GLuint, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glListParameteriSGIX = ?fn (list: GLuint, pname: GLenum, param: GLint) callconv(.C) void;
const glListParameterivSGIX = ?fn (list: GLuint, pname: GLenum, params: *const GLint) callconv(.C) void;
const glLoadIdentityDeformationMapSGIX = ?fn (mask: GLbitfield) callconv(.C) void;
const glLoadMatrixxOES = ?fn (m: *const GLfixed) callconv(.C) void;
const glLoadProgramNV = ?fn (target: GLenum, id: GLuint, len: GLsizei, program: *const GLubyte) callconv(.C) void;
const glLoadTransposeMatrixdARB = ?fn (m: *const GLdouble) callconv(.C) void;
const glLoadTransposeMatrixfARB = ?fn (m: *const GLfloat) callconv(.C) void;
const glLoadTransposeMatrixxOES = ?fn (m: *const GLfixed) callconv(.C) void;
const glLockArraysEXT = ?fn (first: GLint, count: GLsizei) callconv(.C) void;
const glLogicOp = ?fn (opcode: GLenum) callconv(.C) void;
const glMakeBufferNonResidentNV = ?fn (target: GLenum) callconv(.C) void;
const glMakeBufferResidentNV = ?fn (target: GLenum, access: GLenum) callconv(.C) void;
const glMakeImageHandleNonResidentARB = ?fn (handle: GLuint64) callconv(.C) void;
const glMakeImageHandleNonResidentNV = ?fn (handle: GLuint64) callconv(.C) void;
const glMakeImageHandleResidentARB = ?fn (handle: GLuint64, access: GLenum) callconv(.C) void;
const glMakeImageHandleResidentNV = ?fn (handle: GLuint64, access: GLenum) callconv(.C) void;
const glMakeNamedBufferNonResidentNV = ?fn (buffer: GLuint) callconv(.C) void;
const glMakeNamedBufferResidentNV = ?fn (buffer: GLuint, access: GLenum) callconv(.C) void;
const glMakeTextureHandleNonResidentARB = ?fn (handle: GLuint64) callconv(.C) void;
const glMakeTextureHandleNonResidentNV = ?fn (handle: GLuint64) callconv(.C) void;
const glMakeTextureHandleResidentARB = ?fn (handle: GLuint64) callconv(.C) void;
const glMakeTextureHandleResidentNV = ?fn (handle: GLuint64) callconv(.C) void;
const glMap1xOES = ?fn (target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) callconv(.C) void;
const glMap2xOES = ?fn (target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) callconv(.C) void;
const glMapBuffer = ?fn (target: GLenum, access: GLenum) callconv(.C) *c_void;
const glMapBufferARB = ?fn (target: GLenum, access: GLenum) callconv(.C) *c_void;
const glMapBufferRange = ?fn (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) callconv(.C) *c_void;
const glMapControlPointsNV = ?fn (target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed_: GLboolean, points: *const c_void) callconv(.C) void;
const glMapGrid1xOES = ?fn (n: GLint, u1: GLfixed, u2: GLfixed) callconv(.C) void;
const glMapGrid2xOES = ?fn (n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) callconv(.C) void;
const glMapNamedBuffer = ?fn (buffer: GLuint, access: GLenum) callconv(.C) *c_void;
const glMapNamedBufferEXT = ?fn (buffer: GLuint, access: GLenum) callconv(.C) *c_void;
const glMapNamedBufferRange = ?fn (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) callconv(.C) *c_void;
const glMapNamedBufferRangeEXT = ?fn (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) callconv(.C) *c_void;
const glMapObjectBufferATI = ?fn (buffer: GLuint) callconv(.C) *c_void;
const glMapParameterfvNV = ?fn (target: GLenum, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glMapParameterivNV = ?fn (target: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glMapTexture2DINTEL = ?fn (texture: GLuint, level: GLint, access: GLbitfield, stride: *GLint, layout: *GLenum) callconv(.C) *c_void;
const glMapVertexAttrib1dAPPLE = ?fn (index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *const GLdouble) callconv(.C) void;
const glMapVertexAttrib1fAPPLE = ?fn (index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *const GLfloat) callconv(.C) void;
const glMapVertexAttrib2dAPPLE = ?fn (index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *const GLdouble) callconv(.C) void;
const glMapVertexAttrib2fAPPLE = ?fn (index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *const GLfloat) callconv(.C) void;
const glMaterialxOES = ?fn (face: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glMaterialxvOES = ?fn (face: GLenum, pname: GLenum, param: *const GLfixed) callconv(.C) void;
const glMatrixFrustumEXT = ?fn (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) callconv(.C) void;
const glMatrixIndexPointerARB = ?fn (size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glMatrixIndexubvARB = ?fn (size: GLint, indices: *const GLubyte) callconv(.C) void;
const glMatrixIndexuivARB = ?fn (size: GLint, indices: *const GLuint) callconv(.C) void;
const glMatrixIndexusvARB = ?fn (size: GLint, indices: *const GLushort) callconv(.C) void;
const glMatrixLoad3x2fNV = ?fn (matrixMode: GLenum, m: *const GLfloat) callconv(.C) void;
const glMatrixLoad3x3fNV = ?fn (matrixMode: GLenum, m: *const GLfloat) callconv(.C) void;
const glMatrixLoadIdentityEXT = ?fn (mode: GLenum) callconv(.C) void;
const glMatrixLoadTranspose3x3fNV = ?fn (matrixMode: GLenum, m: *const GLfloat) callconv(.C) void;
const glMatrixLoadTransposedEXT = ?fn (mode: GLenum, m: *const GLdouble) callconv(.C) void;
const glMatrixLoadTransposefEXT = ?fn (mode: GLenum, m: *const GLfloat) callconv(.C) void;
const glMatrixLoaddEXT = ?fn (mode: GLenum, m: *const GLdouble) callconv(.C) void;
const glMatrixLoadfEXT = ?fn (mode: GLenum, m: *const GLfloat) callconv(.C) void;
const glMatrixMult3x2fNV = ?fn (matrixMode: GLenum, m: *const GLfloat) callconv(.C) void;
const glMatrixMult3x3fNV = ?fn (matrixMode: GLenum, m: *const GLfloat) callconv(.C) void;
const glMatrixMultTranspose3x3fNV = ?fn (matrixMode: GLenum, m: *const GLfloat) callconv(.C) void;
const glMatrixMultTransposedEXT = ?fn (mode: GLenum, m: *const GLdouble) callconv(.C) void;
const glMatrixMultTransposefEXT = ?fn (mode: GLenum, m: *const GLfloat) callconv(.C) void;
const glMatrixMultdEXT = ?fn (mode: GLenum, m: *const GLdouble) callconv(.C) void;
const glMatrixMultfEXT = ?fn (mode: GLenum, m: *const GLfloat) callconv(.C) void;
const glMatrixOrthoEXT = ?fn (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) callconv(.C) void;
const glMatrixPopEXT = ?fn (mode: GLenum) callconv(.C) void;
const glMatrixPushEXT = ?fn (mode: GLenum) callconv(.C) void;
const glMatrixRotatedEXT = ?fn (mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glMatrixRotatefEXT = ?fn (mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glMatrixScaledEXT = ?fn (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glMatrixScalefEXT = ?fn (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glMatrixTranslatedEXT = ?fn (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glMatrixTranslatefEXT = ?fn (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glMaxShaderCompilerThreadsARB = ?fn (count: GLuint) callconv(.C) void;
const glMaxShaderCompilerThreadsKHR = ?fn (count: GLuint) callconv(.C) void;
const glMemoryBarrier = ?fn (barriers: GLbitfield) callconv(.C) void;
const glMemoryBarrierByRegion = ?fn (barriers: GLbitfield) callconv(.C) void;
const glMemoryBarrierEXT = ?fn (barriers: GLbitfield) callconv(.C) void;
const glMemoryObjectParameterivEXT = ?fn (memoryObject: GLuint, pname: GLenum, params: *const GLint) callconv(.C) void;
const glMinSampleShadingARB = ?fn (value: GLfloat) callconv(.C) void;
const glMinmaxEXT = ?fn (target: GLenum, internalformat: GLenum, sink: GLboolean) callconv(.C) void;
const glMultMatrixxOES = ?fn (m: *const GLfixed) callconv(.C) void;
const glMultTransposeMatrixdARB = ?fn (m: *const GLdouble) callconv(.C) void;
const glMultTransposeMatrixfARB = ?fn (m: *const GLfloat) callconv(.C) void;
const glMultTransposeMatrixxOES = ?fn (m: *const GLfixed) callconv(.C) void;
const glMultiDrawArrays = ?fn (mode: GLenum, first: *const GLint, count: *const GLsizei, drawcount: GLsizei) callconv(.C) void;
const glMultiDrawArraysEXT = ?fn (mode: GLenum, first: *const GLint, count: *const GLsizei, primcount: GLsizei) callconv(.C) void;
const glMultiDrawArraysIndirect = ?fn (mode: GLenum, indirect: *const c_void, drawcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawArraysIndirectAMD = ?fn (mode: GLenum, indirect: *const c_void, primcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawArraysIndirectBindlessCountNV = ?fn (mode: GLenum, indirect: *const c_void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) callconv(.C) void;
const glMultiDrawArraysIndirectBindlessNV = ?fn (mode: GLenum, indirect: *const c_void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) callconv(.C) void;
const glMultiDrawArraysIndirectCountARB = ?fn (mode: GLenum, indirect: *const c_void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawElementArrayAPPLE = ?fn (mode: GLenum, first: *const GLint, count: *const GLsizei, primcount: GLsizei) callconv(.C) void;
const glMultiDrawElements = ?fn (mode: GLenum, count: *const GLsizei, type_: GLenum, indices: *const *const c_void, drawcount: GLsizei) callconv(.C) void;
const glMultiDrawElementsBaseVertex = ?fn (mode: GLenum, count: *const GLsizei, type_: GLenum, indices: *const *const c_void, drawcount: GLsizei, basevertex: *const GLint) callconv(.C) void;
const glMultiDrawElementsEXT = ?fn (mode: GLenum, count: *const GLsizei, type_: GLenum, indices: *const *const c_void, primcount: GLsizei) callconv(.C) void;
const glMultiDrawElementsIndirect = ?fn (mode: GLenum, type_: GLenum, indirect: *const c_void, drawcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawElementsIndirectAMD = ?fn (mode: GLenum, type_: GLenum, indirect: *const c_void, primcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawElementsIndirectBindlessCountNV = ?fn (mode: GLenum, type_: GLenum, indirect: *const c_void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) callconv(.C) void;
const glMultiDrawElementsIndirectBindlessNV = ?fn (mode: GLenum, type_: GLenum, indirect: *const c_void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) callconv(.C) void;
const glMultiDrawElementsIndirectCountARB = ?fn (mode: GLenum, type_: GLenum, indirect: *const c_void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawMeshTasksIndirectCountNV = ?fn (indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawMeshTasksIndirectNV = ?fn (indirect: GLintptr, drawcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawRangeElementArrayAPPLE = ?fn (mode: GLenum, start: GLuint, end: GLuint, first: *const GLint, count: *const GLsizei, primcount: GLsizei) callconv(.C) void;
const glMultiModeDrawArraysIBM = ?fn (mode: *const GLenum, first: *const GLint, count: *const GLsizei, primcount: GLsizei, modestride: GLint) callconv(.C) void;
const glMultiModeDrawElementsIBM = ?fn (mode: *const GLenum, count: *const GLsizei, type_: GLenum, indices: *const *const c_void, primcount: GLsizei, modestride: GLint) callconv(.C) void;
const glMultiTexBufferEXT = ?fn (texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) callconv(.C) void;
const glMultiTexCoord1bOES = ?fn (texture: GLenum, s: GLbyte) callconv(.C) void;
const glMultiTexCoord1bvOES = ?fn (texture: GLenum, coords: *const GLbyte) callconv(.C) void;
const glMultiTexCoord1dARB = ?fn (target: GLenum, s: GLdouble) callconv(.C) void;
const glMultiTexCoord1dvARB = ?fn (target: GLenum, v: *const GLdouble) callconv(.C) void;
const glMultiTexCoord1fARB = ?fn (target: GLenum, s: GLfloat) callconv(.C) void;
const glMultiTexCoord1fvARB = ?fn (target: GLenum, v: *const GLfloat) callconv(.C) void;
const glMultiTexCoord1hNV = ?fn (target: GLenum, s: GLhalfNV) callconv(.C) void;
const glMultiTexCoord1hvNV = ?fn (target: GLenum, v: *const GLhalfNV) callconv(.C) void;
const glMultiTexCoord1iARB = ?fn (target: GLenum, s: GLint) callconv(.C) void;
const glMultiTexCoord1ivARB = ?fn (target: GLenum, v: *const GLint) callconv(.C) void;
const glMultiTexCoord1sARB = ?fn (target: GLenum, s: GLshort) callconv(.C) void;
const glMultiTexCoord1svARB = ?fn (target: GLenum, v: *const GLshort) callconv(.C) void;
const glMultiTexCoord1xOES = ?fn (texture: GLenum, s: GLfixed) callconv(.C) void;
const glMultiTexCoord1xvOES = ?fn (texture: GLenum, coords: *const GLfixed) callconv(.C) void;
const glMultiTexCoord2bOES = ?fn (texture: GLenum, s: GLbyte, t: GLbyte) callconv(.C) void;
const glMultiTexCoord2bvOES = ?fn (texture: GLenum, coords: *const GLbyte) callconv(.C) void;
const glMultiTexCoord2dARB = ?fn (target: GLenum, s: GLdouble, t: GLdouble) callconv(.C) void;
const glMultiTexCoord2dvARB = ?fn (target: GLenum, v: *const GLdouble) callconv(.C) void;
const glMultiTexCoord2fARB = ?fn (target: GLenum, s: GLfloat, t: GLfloat) callconv(.C) void;
const glMultiTexCoord2fvARB = ?fn (target: GLenum, v: *const GLfloat) callconv(.C) void;
const glMultiTexCoord2hNV = ?fn (target: GLenum, s: GLhalfNV, t: GLhalfNV) callconv(.C) void;
const glMultiTexCoord2hvNV = ?fn (target: GLenum, v: *const GLhalfNV) callconv(.C) void;
const glMultiTexCoord2iARB = ?fn (target: GLenum, s: GLint, t: GLint) callconv(.C) void;
const glMultiTexCoord2ivARB = ?fn (target: GLenum, v: *const GLint) callconv(.C) void;
const glMultiTexCoord2sARB = ?fn (target: GLenum, s: GLshort, t: GLshort) callconv(.C) void;
const glMultiTexCoord2svARB = ?fn (target: GLenum, v: *const GLshort) callconv(.C) void;
const glMultiTexCoord2xOES = ?fn (texture: GLenum, s: GLfixed, t: GLfixed) callconv(.C) void;
const glMultiTexCoord2xvOES = ?fn (texture: GLenum, coords: *const GLfixed) callconv(.C) void;
const glMultiTexCoord3bOES = ?fn (texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) callconv(.C) void;
const glMultiTexCoord3bvOES = ?fn (texture: GLenum, coords: *const GLbyte) callconv(.C) void;
const glMultiTexCoord3dARB = ?fn (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) callconv(.C) void;
const glMultiTexCoord3dvARB = ?fn (target: GLenum, v: *const GLdouble) callconv(.C) void;
const glMultiTexCoord3fARB = ?fn (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) callconv(.C) void;
const glMultiTexCoord3fvARB = ?fn (target: GLenum, v: *const GLfloat) callconv(.C) void;
const glMultiTexCoord3hNV = ?fn (target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) callconv(.C) void;
const glMultiTexCoord3hvNV = ?fn (target: GLenum, v: *const GLhalfNV) callconv(.C) void;
const glMultiTexCoord3iARB = ?fn (target: GLenum, s: GLint, t: GLint, r: GLint) callconv(.C) void;
const glMultiTexCoord3ivARB = ?fn (target: GLenum, v: *const GLint) callconv(.C) void;
const glMultiTexCoord3sARB = ?fn (target: GLenum, s: GLshort, t: GLshort, r: GLshort) callconv(.C) void;
const glMultiTexCoord3svARB = ?fn (target: GLenum, v: *const GLshort) callconv(.C) void;
const glMultiTexCoord3xOES = ?fn (texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) callconv(.C) void;
const glMultiTexCoord3xvOES = ?fn (texture: GLenum, coords: *const GLfixed) callconv(.C) void;
const glMultiTexCoord4bOES = ?fn (texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) callconv(.C) void;
const glMultiTexCoord4bvOES = ?fn (texture: GLenum, coords: *const GLbyte) callconv(.C) void;
const glMultiTexCoord4dARB = ?fn (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) callconv(.C) void;
const glMultiTexCoord4dvARB = ?fn (target: GLenum, v: *const GLdouble) callconv(.C) void;
const glMultiTexCoord4fARB = ?fn (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) callconv(.C) void;
const glMultiTexCoord4fvARB = ?fn (target: GLenum, v: *const GLfloat) callconv(.C) void;
const glMultiTexCoord4hNV = ?fn (target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) callconv(.C) void;
const glMultiTexCoord4hvNV = ?fn (target: GLenum, v: *const GLhalfNV) callconv(.C) void;
const glMultiTexCoord4iARB = ?fn (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) callconv(.C) void;
const glMultiTexCoord4ivARB = ?fn (target: GLenum, v: *const GLint) callconv(.C) void;
const glMultiTexCoord4sARB = ?fn (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) callconv(.C) void;
const glMultiTexCoord4svARB = ?fn (target: GLenum, v: *const GLshort) callconv(.C) void;
const glMultiTexCoord4xOES = ?fn (texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) callconv(.C) void;
const glMultiTexCoord4xvOES = ?fn (texture: GLenum, coords: *const GLfixed) callconv(.C) void;
const glMultiTexCoordPointerEXT = ?fn (texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glMultiTexEnvfEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glMultiTexEnvfvEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glMultiTexEnviEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glMultiTexEnvivEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glMultiTexGendEXT = ?fn (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) callconv(.C) void;
const glMultiTexGendvEXT = ?fn (texunit: GLenum, coord: GLenum, pname: GLenum, params: *const GLdouble) callconv(.C) void;
const glMultiTexGenfEXT = ?fn (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glMultiTexGenfvEXT = ?fn (texunit: GLenum, coord: GLenum, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glMultiTexGeniEXT = ?fn (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glMultiTexGenivEXT = ?fn (texunit: GLenum, coord: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glMultiTexImage1DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glMultiTexImage2DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glMultiTexImage3DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glMultiTexParameterIivEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glMultiTexParameterIuivEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLuint) callconv(.C) void;
const glMultiTexParameterfEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glMultiTexParameterfvEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glMultiTexParameteriEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glMultiTexParameterivEXT = ?fn (texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glMultiTexRenderbufferEXT = ?fn (texunit: GLenum, target: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glMultiTexSubImage1DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glMultiTexSubImage2DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glMultiTexSubImage3DEXT = ?fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glMulticastBarrierNV = ?fn () callconv(.C) void;
const glMulticastBlitFramebufferNV = ?fn (srcGpu: GLuint, dstGpu: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) callconv(.C) void;
const glMulticastBufferSubDataNV = ?fn (gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *const c_void) callconv(.C) void;
const glMulticastCopyBufferSubDataNV = ?fn (readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glMulticastCopyImageSubDataNV = ?fn (srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) callconv(.C) void;
const glMulticastFramebufferSampleLocationsfvNV = ?fn (gpu: GLuint, framebuffer: GLuint, start: GLuint, count: GLsizei, v: *const GLfloat) callconv(.C) void;
const glMulticastGetQueryObjecti64vNV = ?fn (gpu: GLuint, id: GLuint, pname: GLenum, params: *GLint64) callconv(.C) void;
const glMulticastGetQueryObjectivNV = ?fn (gpu: GLuint, id: GLuint, pname: GLenum, params: *GLint) callconv(.C) void;
const glMulticastGetQueryObjectui64vNV = ?fn (gpu: GLuint, id: GLuint, pname: GLenum, params: *GLuint64) callconv(.C) void;
const glMulticastGetQueryObjectuivNV = ?fn (gpu: GLuint, id: GLuint, pname: GLenum, params: *GLuint) callconv(.C) void;
const glMulticastScissorArrayvNVX = ?fn (gpu: GLuint, first: GLuint, count: GLsizei, v: *const GLint) callconv(.C) void;
const glMulticastViewportArrayvNVX = ?fn (gpu: GLuint, first: GLuint, count: GLsizei, v: *const GLfloat) callconv(.C) void;
const glMulticastViewportPositionWScaleNVX = ?fn (gpu: GLuint, index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) callconv(.C) void;
const glMulticastWaitSyncNV = ?fn (signalGpu: GLuint, waitGpuMask: GLbitfield) callconv(.C) void;
const glNamedBufferAttachMemoryNV = ?fn (buffer: GLuint, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glNamedBufferData = ?fn (buffer: GLuint, size: GLsizeiptr, data: *const c_void, usage: GLenum) callconv(.C) void;
const glNamedBufferDataEXT = ?fn (buffer: GLuint, size: GLsizeiptr, data: *const c_void, usage: GLenum) callconv(.C) void;
const glNamedBufferPageCommitmentARB = ?fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) callconv(.C) void;
const glNamedBufferPageCommitmentEXT = ?fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) callconv(.C) void;
const glNamedBufferPageCommitmentMemNV = ?fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) callconv(.C) void;
const glNamedBufferStorage = ?fn (buffer: GLuint, size: GLsizeiptr, data: *const c_void, flags: GLbitfield) callconv(.C) void;
const glNamedBufferStorageEXT = ?fn (buffer: GLuint, size: GLsizeiptr, data: *const c_void, flags: GLbitfield) callconv(.C) void;
const glNamedBufferStorageExternalEXT = ?fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) callconv(.C) void;
const glNamedBufferStorageMemEXT = ?fn (buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glNamedBufferSubData = ?fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *const c_void) callconv(.C) void;
const glNamedBufferSubDataEXT = ?fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *const c_void) callconv(.C) void;
const glNamedCopyBufferSubDataEXT = ?fn (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glNamedFramebufferDrawBuffer = ?fn (framebuffer: GLuint, buf: GLenum) callconv(.C) void;
const glNamedFramebufferDrawBuffers = ?fn (framebuffer: GLuint, n: GLsizei, bufs: *const GLenum) callconv(.C) void;
const glNamedFramebufferParameteri = ?fn (framebuffer: GLuint, pname: GLenum, param: GLint) callconv(.C) void;
const glNamedFramebufferParameteriEXT = ?fn (framebuffer: GLuint, pname: GLenum, param: GLint) callconv(.C) void;
const glNamedFramebufferReadBuffer = ?fn (framebuffer: GLuint, src: GLenum) callconv(.C) void;
const glNamedFramebufferRenderbuffer = ?fn (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glNamedFramebufferRenderbufferEXT = ?fn (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glNamedFramebufferSampleLocationsfvARB = ?fn (framebuffer: GLuint, start: GLuint, count: GLsizei, v: *const GLfloat) callconv(.C) void;
const glNamedFramebufferSampleLocationsfvNV = ?fn (framebuffer: GLuint, start: GLuint, count: GLsizei, v: *const GLfloat) callconv(.C) void;
const glNamedFramebufferSamplePositionsfvAMD = ?fn (framebuffer: GLuint, numsamples: GLuint, pixelindex: GLuint, values: *const GLfloat) callconv(.C) void;
const glNamedFramebufferTexture = ?fn (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glNamedFramebufferTexture1DEXT = ?fn (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glNamedFramebufferTexture2DEXT = ?fn (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glNamedFramebufferTexture3DEXT = ?fn (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) callconv(.C) void;
const glNamedFramebufferTextureEXT = ?fn (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glNamedFramebufferTextureFaceEXT = ?fn (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) callconv(.C) void;
const glNamedFramebufferTextureLayer = ?fn (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) callconv(.C) void;
const glNamedFramebufferTextureLayerEXT = ?fn (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) callconv(.C) void;
const glNamedProgramLocalParameter4dEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glNamedProgramLocalParameter4dvEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, params: *const GLdouble) callconv(.C) void;
const glNamedProgramLocalParameter4fEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glNamedProgramLocalParameter4fvEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, params: *const GLfloat) callconv(.C) void;
const glNamedProgramLocalParameterI4iEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glNamedProgramLocalParameterI4ivEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, params: *const GLint) callconv(.C) void;
const glNamedProgramLocalParameterI4uiEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) callconv(.C) void;
const glNamedProgramLocalParameterI4uivEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, params: *const GLuint) callconv(.C) void;
const glNamedProgramLocalParameters4fvEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *const GLfloat) callconv(.C) void;
const glNamedProgramLocalParametersI4ivEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *const GLint) callconv(.C) void;
const glNamedProgramLocalParametersI4uivEXT = ?fn (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *const GLuint) callconv(.C) void;
const glNamedProgramStringEXT = ?fn (program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: *const c_void) callconv(.C) void;
const glNamedRenderbufferStorage = ?fn (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glNamedRenderbufferStorageEXT = ?fn (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glNamedRenderbufferStorageMultisample = ?fn (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glNamedRenderbufferStorageMultisampleAdvancedAMD = ?fn (renderbuffer: GLuint, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glNamedRenderbufferStorageMultisampleCoverageEXT = ?fn (renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glNamedRenderbufferStorageMultisampleEXT = ?fn (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glNamedStringARB = ?fn (type_: GLenum, namelen: GLint, name: *const GLchar, stringlen: GLint, string: *const GLchar) callconv(.C) void;
const glNewObjectBufferATI = ?fn (size: GLsizei, pointer: *const c_void, usage: GLenum) callconv(.C) GLuint;
const glNormal3fVertex3fSUN = ?fn (nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glNormal3fVertex3fvSUN = ?fn (n: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glNormal3hNV = ?fn (nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) callconv(.C) void;
const glNormal3hvNV = ?fn (v: *const GLhalfNV) callconv(.C) void;
const glNormal3xOES = ?fn (nx: GLfixed, ny: GLfixed, nz: GLfixed) callconv(.C) void;
const glNormal3xvOES = ?fn (coords: *const GLfixed) callconv(.C) void;
const glNormalFormatNV = ?fn (type_: GLenum, stride: GLsizei) callconv(.C) void;
const glNormalPointerEXT = ?fn (type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *const c_void) callconv(.C) void;
const glNormalPointerListIBM = ?fn (type_: GLenum, stride: GLint, pointer: *const *const c_void, ptrstride: GLint) callconv(.C) void;
const glNormalPointervINTEL = ?fn (type_: GLenum, pointer: *const *const c_void) callconv(.C) void;
const glNormalStream3bATI = ?fn (stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) callconv(.C) void;
const glNormalStream3bvATI = ?fn (stream: GLenum, coords: *const GLbyte) callconv(.C) void;
const glNormalStream3dATI = ?fn (stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) callconv(.C) void;
const glNormalStream3dvATI = ?fn (stream: GLenum, coords: *const GLdouble) callconv(.C) void;
const glNormalStream3fATI = ?fn (stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) callconv(.C) void;
const glNormalStream3fvATI = ?fn (stream: GLenum, coords: *const GLfloat) callconv(.C) void;
const glNormalStream3iATI = ?fn (stream: GLenum, nx: GLint, ny: GLint, nz: GLint) callconv(.C) void;
const glNormalStream3ivATI = ?fn (stream: GLenum, coords: *const GLint) callconv(.C) void;
const glNormalStream3sATI = ?fn (stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) callconv(.C) void;
const glNormalStream3svATI = ?fn (stream: GLenum, coords: *const GLshort) callconv(.C) void;
const glObjectLabel = ?fn (identifier: GLenum, name: GLuint, length: GLsizei, label: *const GLchar) callconv(.C) void;
const glObjectPtrLabel = ?fn (ptr: *const c_void, length: GLsizei, label: *const GLchar) callconv(.C) void;
const glObjectPurgeableAPPLE = ?fn (objectType: GLenum, name: GLuint, option: GLenum) callconv(.C) GLenum;
const glObjectUnpurgeableAPPLE = ?fn (objectType: GLenum, name: GLuint, option: GLenum) callconv(.C) GLenum;
const glOrthofOES = ?fn (l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) callconv(.C) void;
const glOrthoxOES = ?fn (l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) callconv(.C) void;
const glPNTrianglesfATI = ?fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPNTrianglesiATI = ?fn (pname: GLenum, param: GLint) callconv(.C) void;
const glPassTexCoordATI = ?fn (dst: GLuint, coord: GLuint, swizzle: GLenum) callconv(.C) void;
const glPassThroughxOES = ?fn (token: GLfixed) callconv(.C) void;
const glPatchParameterfv = ?fn (pname: GLenum, values: *const GLfloat) callconv(.C) void;
const glPatchParameteri = ?fn (pname: GLenum, value: GLint) callconv(.C) void;
const glPathCommandsNV = ?fn (path: GLuint, numCommands: GLsizei, commands: *const GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *const c_void) callconv(.C) void;
const glPathCoordsNV = ?fn (path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: *const c_void) callconv(.C) void;
const glPathCoverDepthFuncNV = ?fn (func: GLenum) callconv(.C) void;
const glPathDashArrayNV = ?fn (path: GLuint, dashCount: GLsizei, dashArray: *const GLfloat) callconv(.C) void;
const glPathGlyphIndexArrayNV = ?fn (firstPathName: GLuint, fontTarget: GLenum, fontName: *const c_void, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) callconv(.C) GLenum;
const glPathGlyphIndexRangeNV = ?fn (fontTarget: GLenum, fontName: *const c_void, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: [2]GLuint) callconv(.C) GLenum;
const glPathGlyphRangeNV = ?fn (firstPathName: GLuint, fontTarget: GLenum, fontName: *const c_void, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) callconv(.C) void;
const glPathGlyphsNV = ?fn (firstPathName: GLuint, fontTarget: GLenum, fontName: *const c_void, fontStyle: GLbitfield, numGlyphs: GLsizei, type_: GLenum, charcodes: *const c_void, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) callconv(.C) void;
const glPathMemoryGlyphIndexArrayNV = ?fn (firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: *const c_void, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) callconv(.C) GLenum;
const glPathParameterfNV = ?fn (path: GLuint, pname: GLenum, value: GLfloat) callconv(.C) void;
const glPathParameterfvNV = ?fn (path: GLuint, pname: GLenum, value: *const GLfloat) callconv(.C) void;
const glPathParameteriNV = ?fn (path: GLuint, pname: GLenum, value: GLint) callconv(.C) void;
const glPathParameterivNV = ?fn (path: GLuint, pname: GLenum, value: *const GLint) callconv(.C) void;
const glPathStencilDepthOffsetNV = ?fn (factor: GLfloat, units: GLfloat) callconv(.C) void;
const glPathStencilFuncNV = ?fn (func: GLenum, ref: GLint, mask: GLuint) callconv(.C) void;
const glPathStringNV = ?fn (path: GLuint, format: GLenum, length: GLsizei, pathString: *const c_void) callconv(.C) void;
const glPathSubCommandsNV = ?fn (path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: *const GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *const c_void) callconv(.C) void;
const glPathSubCoordsNV = ?fn (path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: *const c_void) callconv(.C) void;
const glPauseTransformFeedback = ?fn () callconv(.C) void;
const glPauseTransformFeedbackNV = ?fn () callconv(.C) void;
const glPixelDataRangeNV = ?fn (target: GLenum, length: GLsizei, pointer: *const c_void) callconv(.C) void;
const glPixelMapx = ?fn (map: GLenum, size: GLint, values: *const GLfixed) callconv(.C) void;
const glPixelStoref = ?fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPixelStorei = ?fn (pname: GLenum, param: GLint) callconv(.C) void;
const glPixelStorex = ?fn (pname: GLenum, param: GLfixed) callconv(.C) void;
const glPixelTexGenParameterfSGIS = ?fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPixelTexGenParameterfvSGIS = ?fn (pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glPixelTexGenParameteriSGIS = ?fn (pname: GLenum, param: GLint) callconv(.C) void;
const glPixelTexGenParameterivSGIS = ?fn (pname: GLenum, params: *const GLint) callconv(.C) void;
const glPixelTexGenSGIX = ?fn (mode: GLenum) callconv(.C) void;
const glPixelTransferxOES = ?fn (pname: GLenum, param: GLfixed) callconv(.C) void;
const glPixelTransformParameterfEXT = ?fn (target: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glPixelTransformParameterfvEXT = ?fn (target: GLenum, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glPixelTransformParameteriEXT = ?fn (target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glPixelTransformParameterivEXT = ?fn (target: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glPixelZoomxOES = ?fn (xfactor: GLfixed, yfactor: GLfixed) callconv(.C) void;
const glPointAlongPathNV = ?fn (path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: *GLfloat, y: *GLfloat, tangentX: *GLfloat, tangentY: *GLfloat) callconv(.C) GLboolean;
const glPointParameterf = ?fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPointParameterfARB = ?fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPointParameterfEXT = ?fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPointParameterfSGIS = ?fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPointParameterfv = ?fn (pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glPointParameterfvARB = ?fn (pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glPointParameterfvEXT = ?fn (pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glPointParameterfvSGIS = ?fn (pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glPointParameteri = ?fn (pname: GLenum, param: GLint) callconv(.C) void;
const glPointParameteriNV = ?fn (pname: GLenum, param: GLint) callconv(.C) void;
const glPointParameteriv = ?fn (pname: GLenum, params: *const GLint) callconv(.C) void;
const glPointParameterivNV = ?fn (pname: GLenum, params: *const GLint) callconv(.C) void;
const glPointParameterxvOES = ?fn (pname: GLenum, params: *const GLfixed) callconv(.C) void;
const glPointSize = ?fn (size: GLfloat) callconv(.C) void;
const glPointSizexOES = ?fn (size: GLfixed) callconv(.C) void;
const glPollAsyncSGIX = ?fn (markerp: *GLuint) callconv(.C) GLint;
const glPollInstrumentsSGIX = ?fn (marker_p: *GLint) callconv(.C) GLint;
const glPolygonMode = ?fn (face: GLenum, mode: GLenum) callconv(.C) void;
const glPolygonOffset = ?fn (factor: GLfloat, units: GLfloat) callconv(.C) void;
const glPolygonOffsetClamp = ?fn (factor: GLfloat, units: GLfloat, clamp: GLfloat) callconv(.C) void;
const glPolygonOffsetClampEXT = ?fn (factor: GLfloat, units: GLfloat, clamp: GLfloat) callconv(.C) void;
const glPolygonOffsetEXT = ?fn (factor: GLfloat, bias: GLfloat) callconv(.C) void;
const glPolygonOffsetxOES = ?fn (factor: GLfixed, units: GLfixed) callconv(.C) void;
const glPopDebugGroup = ?fn () callconv(.C) void;
const glPopGroupMarkerEXT = ?fn () callconv(.C) void;
const glPresentFrameDualFillNV = ?fn (video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) callconv(.C) void;
const glPresentFrameKeyedNV = ?fn (video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) callconv(.C) void;
const glPrimitiveBoundingBoxARB = ?fn (minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) callconv(.C) void;
const glPrimitiveRestartIndex = ?fn (index: GLuint) callconv(.C) void;
const glPrimitiveRestartIndexNV = ?fn (index: GLuint) callconv(.C) void;
const glPrimitiveRestartNV = ?fn () callconv(.C) void;
const glPrioritizeTexturesEXT = ?fn (n: GLsizei, textures: *const GLuint, priorities: *const GLclampf) callconv(.C) void;
const glPrioritizeTexturesxOES = ?fn (n: GLsizei, textures: *const GLuint, priorities: *const GLfixed) callconv(.C) void;
const glProgramBinary = ?fn (program: GLuint, binaryFormat: GLenum, binary: *const c_void, length: GLsizei) callconv(.C) void;
const glProgramBufferParametersIivNV = ?fn (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *const GLint) callconv(.C) void;
const glProgramBufferParametersIuivNV = ?fn (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *const GLuint) callconv(.C) void;
const glProgramBufferParametersfvNV = ?fn (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *const GLfloat) callconv(.C) void;
const glProgramEnvParameter4dARB = ?fn (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glProgramEnvParameter4dvARB = ?fn (target: GLenum, index: GLuint, params: *const GLdouble) callconv(.C) void;
const glProgramEnvParameter4fARB = ?fn (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glProgramEnvParameter4fvARB = ?fn (target: GLenum, index: GLuint, params: *const GLfloat) callconv(.C) void;
const glProgramEnvParameterI4iNV = ?fn (target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glProgramEnvParameterI4ivNV = ?fn (target: GLenum, index: GLuint, params: *const GLint) callconv(.C) void;
const glProgramEnvParameterI4uiNV = ?fn (target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) callconv(.C) void;
const glProgramEnvParameterI4uivNV = ?fn (target: GLenum, index: GLuint, params: *const GLuint) callconv(.C) void;
const glProgramEnvParameters4fvEXT = ?fn (target: GLenum, index: GLuint, count: GLsizei, params: *const GLfloat) callconv(.C) void;
const glProgramEnvParametersI4ivNV = ?fn (target: GLenum, index: GLuint, count: GLsizei, params: *const GLint) callconv(.C) void;
const glProgramEnvParametersI4uivNV = ?fn (target: GLenum, index: GLuint, count: GLsizei, params: *const GLuint) callconv(.C) void;
const glProgramLocalParameter4dARB = ?fn (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glProgramLocalParameter4dvARB = ?fn (target: GLenum, index: GLuint, params: *const GLdouble) callconv(.C) void;
const glProgramLocalParameter4fARB = ?fn (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glProgramLocalParameter4fvARB = ?fn (target: GLenum, index: GLuint, params: *const GLfloat) callconv(.C) void;
const glProgramLocalParameterI4iNV = ?fn (target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glProgramLocalParameterI4ivNV = ?fn (target: GLenum, index: GLuint, params: *const GLint) callconv(.C) void;
const glProgramLocalParameterI4uiNV = ?fn (target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) callconv(.C) void;
const glProgramLocalParameterI4uivNV = ?fn (target: GLenum, index: GLuint, params: *const GLuint) callconv(.C) void;
const glProgramLocalParameters4fvEXT = ?fn (target: GLenum, index: GLuint, count: GLsizei, params: *const GLfloat) callconv(.C) void;
const glProgramLocalParametersI4ivNV = ?fn (target: GLenum, index: GLuint, count: GLsizei, params: *const GLint) callconv(.C) void;
const glProgramLocalParametersI4uivNV = ?fn (target: GLenum, index: GLuint, count: GLsizei, params: *const GLuint) callconv(.C) void;
const glProgramNamedParameter4dNV = ?fn (id: GLuint, len: GLsizei, name: *const GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glProgramNamedParameter4dvNV = ?fn (id: GLuint, len: GLsizei, name: *const GLubyte, v: *const GLdouble) callconv(.C) void;
const glProgramNamedParameter4fNV = ?fn (id: GLuint, len: GLsizei, name: *const GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glProgramNamedParameter4fvNV = ?fn (id: GLuint, len: GLsizei, name: *const GLubyte, v: *const GLfloat) callconv(.C) void;
const glProgramParameter4dNV = ?fn (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glProgramParameter4dvNV = ?fn (target: GLenum, index: GLuint, v: *const GLdouble) callconv(.C) void;
const glProgramParameter4fNV = ?fn (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glProgramParameter4fvNV = ?fn (target: GLenum, index: GLuint, v: *const GLfloat) callconv(.C) void;
const glProgramParameteri = ?fn (program: GLuint, pname: GLenum, value: GLint) callconv(.C) void;
const glProgramParameteriARB = ?fn (program: GLuint, pname: GLenum, value: GLint) callconv(.C) void;
const glProgramParameteriEXT = ?fn (program: GLuint, pname: GLenum, value: GLint) callconv(.C) void;
const glProgramParameters4dvNV = ?fn (target: GLenum, index: GLuint, count: GLsizei, v: *const GLdouble) callconv(.C) void;
const glProgramParameters4fvNV = ?fn (target: GLenum, index: GLuint, count: GLsizei, v: *const GLfloat) callconv(.C) void;
const glProgramPathFragmentInputGenNV = ?fn (program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: *const GLfloat) callconv(.C) void;
const glProgramStringARB = ?fn (target: GLenum, format: GLenum, len: GLsizei, string: *const c_void) callconv(.C) void;
const glProgramSubroutineParametersuivNV = ?fn (target: GLenum, count: GLsizei, params: *const GLuint) callconv(.C) void;
const glProgramUniform1d = ?fn (program: GLuint, location: GLint, v0: GLdouble) callconv(.C) void;
const glProgramUniform1dEXT = ?fn (program: GLuint, location: GLint, x: GLdouble) callconv(.C) void;
const glProgramUniform1dv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) callconv(.C) void;
const glProgramUniform1dvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) callconv(.C) void;
const glProgramUniform1f = ?fn (program: GLuint, location: GLint, v0: GLfloat) callconv(.C) void;
const glProgramUniform1fEXT = ?fn (program: GLuint, location: GLint, v0: GLfloat) callconv(.C) void;
const glProgramUniform1fv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glProgramUniform1fvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glProgramUniform1i = ?fn (program: GLuint, location: GLint, v0: GLint) callconv(.C) void;
const glProgramUniform1i64ARB = ?fn (program: GLuint, location: GLint, x: GLint64) callconv(.C) void;
const glProgramUniform1i64NV = ?fn (program: GLuint, location: GLint, x: GLint64EXT) callconv(.C) void;
const glProgramUniform1i64vARB = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint64) callconv(.C) void;
const glProgramUniform1i64vNV = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint64EXT) callconv(.C) void;
const glProgramUniform1iEXT = ?fn (program: GLuint, location: GLint, v0: GLint) callconv(.C) void;
const glProgramUniform1iv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glProgramUniform1ivEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glProgramUniform1ui = ?fn (program: GLuint, location: GLint, v0: GLuint) callconv(.C) void;
const glProgramUniform1ui64ARB = ?fn (program: GLuint, location: GLint, x: GLuint64) callconv(.C) void;
const glProgramUniform1ui64NV = ?fn (program: GLuint, location: GLint, x: GLuint64EXT) callconv(.C) void;
const glProgramUniform1ui64vARB = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64) callconv(.C) void;
const glProgramUniform1ui64vNV = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64EXT) callconv(.C) void;
const glProgramUniform1uiEXT = ?fn (program: GLuint, location: GLint, v0: GLuint) callconv(.C) void;
const glProgramUniform1uiv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glProgramUniform1uivEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glProgramUniform2d = ?fn (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) callconv(.C) void;
const glProgramUniform2dEXT = ?fn (program: GLuint, location: GLint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glProgramUniform2dv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) callconv(.C) void;
const glProgramUniform2dvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) callconv(.C) void;
const glProgramUniform2f = ?fn (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) callconv(.C) void;
const glProgramUniform2fEXT = ?fn (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) callconv(.C) void;
const glProgramUniform2fv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glProgramUniform2fvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glProgramUniform2i = ?fn (program: GLuint, location: GLint, v0: GLint, v1: GLint) callconv(.C) void;
const glProgramUniform2i64ARB = ?fn (program: GLuint, location: GLint, x: GLint64, y: GLint64) callconv(.C) void;
const glProgramUniform2i64NV = ?fn (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) callconv(.C) void;
const glProgramUniform2i64vARB = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint64) callconv(.C) void;
const glProgramUniform2i64vNV = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint64EXT) callconv(.C) void;
const glProgramUniform2iEXT = ?fn (program: GLuint, location: GLint, v0: GLint, v1: GLint) callconv(.C) void;
const glProgramUniform2iv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glProgramUniform2ivEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glProgramUniform2ui = ?fn (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) callconv(.C) void;
const glProgramUniform2ui64ARB = ?fn (program: GLuint, location: GLint, x: GLuint64, y: GLuint64) callconv(.C) void;
const glProgramUniform2ui64NV = ?fn (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) callconv(.C) void;
const glProgramUniform2ui64vARB = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64) callconv(.C) void;
const glProgramUniform2ui64vNV = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64EXT) callconv(.C) void;
const glProgramUniform2uiEXT = ?fn (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) callconv(.C) void;
const glProgramUniform2uiv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glProgramUniform2uivEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glProgramUniform3d = ?fn (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) callconv(.C) void;
const glProgramUniform3dEXT = ?fn (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glProgramUniform3dv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) callconv(.C) void;
const glProgramUniform3dvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) callconv(.C) void;
const glProgramUniform3f = ?fn (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) callconv(.C) void;
const glProgramUniform3fEXT = ?fn (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) callconv(.C) void;
const glProgramUniform3fv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glProgramUniform3fvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glProgramUniform3i = ?fn (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) callconv(.C) void;
const glProgramUniform3i64ARB = ?fn (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64) callconv(.C) void;
const glProgramUniform3i64NV = ?fn (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) callconv(.C) void;
const glProgramUniform3i64vARB = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint64) callconv(.C) void;
const glProgramUniform3i64vNV = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint64EXT) callconv(.C) void;
const glProgramUniform3iEXT = ?fn (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) callconv(.C) void;
const glProgramUniform3iv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glProgramUniform3ivEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glProgramUniform3ui = ?fn (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) callconv(.C) void;
const glProgramUniform3ui64ARB = ?fn (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) callconv(.C) void;
const glProgramUniform3ui64NV = ?fn (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) callconv(.C) void;
const glProgramUniform3ui64vARB = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64) callconv(.C) void;
const glProgramUniform3ui64vNV = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64EXT) callconv(.C) void;
const glProgramUniform3uiEXT = ?fn (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) callconv(.C) void;
const glProgramUniform3uiv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glProgramUniform3uivEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glProgramUniform4d = ?fn (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) callconv(.C) void;
const glProgramUniform4dEXT = ?fn (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glProgramUniform4dv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) callconv(.C) void;
const glProgramUniform4dvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) callconv(.C) void;
const glProgramUniform4f = ?fn (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) callconv(.C) void;
const glProgramUniform4fEXT = ?fn (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) callconv(.C) void;
const glProgramUniform4fv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glProgramUniform4fvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glProgramUniform4i = ?fn (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) callconv(.C) void;
const glProgramUniform4i64ARB = ?fn (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) callconv(.C) void;
const glProgramUniform4i64NV = ?fn (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) callconv(.C) void;
const glProgramUniform4i64vARB = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint64) callconv(.C) void;
const glProgramUniform4i64vNV = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint64EXT) callconv(.C) void;
const glProgramUniform4iEXT = ?fn (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) callconv(.C) void;
const glProgramUniform4iv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glProgramUniform4ivEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glProgramUniform4ui = ?fn (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) callconv(.C) void;
const glProgramUniform4ui64ARB = ?fn (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) callconv(.C) void;
const glProgramUniform4ui64NV = ?fn (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) callconv(.C) void;
const glProgramUniform4ui64vARB = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64) callconv(.C) void;
const glProgramUniform4ui64vNV = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64EXT) callconv(.C) void;
const glProgramUniform4uiEXT = ?fn (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) callconv(.C) void;
const glProgramUniform4uiv = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glProgramUniform4uivEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glProgramUniformHandleui64ARB = ?fn (program: GLuint, location: GLint, value: GLuint64) callconv(.C) void;
const glProgramUniformHandleui64NV = ?fn (program: GLuint, location: GLint, value: GLuint64) callconv(.C) void;
const glProgramUniformHandleui64vARB = ?fn (program: GLuint, location: GLint, count: GLsizei, values: *const GLuint64) callconv(.C) void;
const glProgramUniformHandleui64vNV = ?fn (program: GLuint, location: GLint, count: GLsizei, values: *const GLuint64) callconv(.C) void;
const glProgramUniformMatrix2dv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix2dvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix2fv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix2fvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix2x3dv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix2x3dvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix2x3fv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix2x3fvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix2x4dv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix2x4dvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix2x4fv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix2x4fvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix3dv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix3dvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix3fv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix3fvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix3x2dv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix3x2dvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix3x2fv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix3x2fvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix3x4dv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix3x4dvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix3x4fv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix3x4fvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix4dv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix4dvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix4fv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix4fvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix4x2dv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix4x2dvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix4x2fv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix4x2fvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix4x3dv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix4x3dvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glProgramUniformMatrix4x3fv = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformMatrix4x3fvEXT = ?fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glProgramUniformui64NV = ?fn (program: GLuint, location: GLint, value: GLuint64EXT) callconv(.C) void;
const glProgramUniformui64vNV = ?fn (program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64EXT) callconv(.C) void;
const glProgramVertexLimitNV = ?fn (target: GLenum, limit: GLint) callconv(.C) void;
const glProvokingVertex = ?fn (mode: GLenum) callconv(.C) void;
const glProvokingVertexEXT = ?fn (mode: GLenum) callconv(.C) void;
const glPushClientAttribDefaultEXT = ?fn (mask: GLbitfield) callconv(.C) void;
const glPushDebugGroup = ?fn (source: GLenum, id: GLuint, length: GLsizei, message: *const GLchar) callconv(.C) void;
const glPushGroupMarkerEXT = ?fn (length: GLsizei, marker: *const GLchar) callconv(.C) void;
const glQueryCounter = ?fn (id: GLuint, target: GLenum) callconv(.C) void;
const glQueryMatrixxOES = ?fn (mantissa: *GLfixed, exponent: *GLint) callconv(.C) GLbitfield;
const glQueryObjectParameteruiAMD = ?fn (target: GLenum, id: GLuint, pname: GLenum, param: GLuint) callconv(.C) void;
const glQueryResourceNV = ?fn (queryType: GLenum, tagId: GLint, count: GLuint, buffer: *GLint) callconv(.C) GLint;
const glQueryResourceTagNV = ?fn (tagId: GLint, tagString: *const GLchar) callconv(.C) void;
const glRasterPos2xOES = ?fn (x: GLfixed, y: GLfixed) callconv(.C) void;
const glRasterPos2xvOES = ?fn (coords: *const GLfixed) callconv(.C) void;
const glRasterPos3xOES = ?fn (x: GLfixed, y: GLfixed, z: GLfixed) callconv(.C) void;
const glRasterPos3xvOES = ?fn (coords: *const GLfixed) callconv(.C) void;
const glRasterPos4xOES = ?fn (x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) callconv(.C) void;
const glRasterPos4xvOES = ?fn (coords: *const GLfixed) callconv(.C) void;
const glRasterSamplesEXT = ?fn (samples: GLuint, fixedsamplelocations: GLboolean) callconv(.C) void;
const glReadBuffer = ?fn (src: GLenum) callconv(.C) void;
const glReadInstrumentsSGIX = ?fn (marker: GLint) callconv(.C) void;
const glReadPixels = ?fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *c_void) callconv(.C) void;
const glReadnPixels = ?fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *c_void) callconv(.C) void;
const glReadnPixelsARB = ?fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *c_void) callconv(.C) void;
const glRectxOES = ?fn (x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) callconv(.C) void;
const glRectxvOES = ?fn (v1: *const GLfixed, v2: *const GLfixed) callconv(.C) void;
const glReferencePlaneSGIX = ?fn (equation: *const GLdouble) callconv(.C) void;
const glReleaseKeyedMutexWin32EXT = ?fn (memory: GLuint, key: GLuint64) callconv(.C) GLboolean;
const glReleaseShaderCompiler = ?fn () callconv(.C) void;
const glRenderGpuMaskNV = ?fn (mask: GLbitfield) callconv(.C) void;
const glRenderbufferStorage = ?fn (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glRenderbufferStorageEXT = ?fn (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glRenderbufferStorageMultisample = ?fn (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glRenderbufferStorageMultisampleAdvancedAMD = ?fn (target: GLenum, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glRenderbufferStorageMultisampleCoverageNV = ?fn (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glRenderbufferStorageMultisampleEXT = ?fn (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glReplacementCodePointerSUN = ?fn (type_: GLenum, stride: GLsizei, pointer: *const *const c_void) callconv(.C) void;
const glReplacementCodeubSUN = ?fn (code: GLubyte) callconv(.C) void;
const glReplacementCodeubvSUN = ?fn (code: *const GLubyte) callconv(.C) void;
const glReplacementCodeuiColor3fVertex3fSUN = ?fn (rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiColor3fVertex3fvSUN = ?fn (rc: *const GLuint, c: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glReplacementCodeuiColor4fNormal3fVertex3fSUN = ?fn (rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiColor4fNormal3fVertex3fvSUN = ?fn (rc: *const GLuint, c: *const GLfloat, n: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glReplacementCodeuiColor4ubVertex3fSUN = ?fn (rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiColor4ubVertex3fvSUN = ?fn (rc: *const GLuint, c: *const GLubyte, v: *const GLfloat) callconv(.C) void;
const glReplacementCodeuiNormal3fVertex3fSUN = ?fn (rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiNormal3fVertex3fvSUN = ?fn (rc: *const GLuint, n: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glReplacementCodeuiSUN = ?fn (code: GLuint) callconv(.C) void;
const glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = ?fn (rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = ?fn (rc: *const GLuint, tc: *const GLfloat, c: *const GLfloat, n: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = ?fn (rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = ?fn (rc: *const GLuint, tc: *const GLfloat, n: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glReplacementCodeuiTexCoord2fVertex3fSUN = ?fn (rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiTexCoord2fVertex3fvSUN = ?fn (rc: *const GLuint, tc: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glReplacementCodeuiVertex3fSUN = ?fn (rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiVertex3fvSUN = ?fn (rc: *const GLuint, v: *const GLfloat) callconv(.C) void;
const glReplacementCodeuivSUN = ?fn (code: *const GLuint) callconv(.C) void;
const glReplacementCodeusSUN = ?fn (code: GLushort) callconv(.C) void;
const glReplacementCodeusvSUN = ?fn (code: *const GLushort) callconv(.C) void;
const glRequestResidentProgramsNV = ?fn (n: GLsizei, programs: *const GLuint) callconv(.C) void;
const glResetHistogramEXT = ?fn (target: GLenum) callconv(.C) void;
const glResetMemoryObjectParameterNV = ?fn (memory: GLuint, pname: GLenum) callconv(.C) void;
const glResetMinmaxEXT = ?fn (target: GLenum) callconv(.C) void;
const glResizeBuffersMESA = ?fn () callconv(.C) void;
const glResolveDepthValuesNV = ?fn () callconv(.C) void;
const glResumeTransformFeedback = ?fn () callconv(.C) void;
const glResumeTransformFeedbackNV = ?fn () callconv(.C) void;
const glRotatexOES = ?fn (angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) callconv(.C) void;
const glSampleCoverage = ?fn (value: GLfloat, invert: GLboolean) callconv(.C) void;
const glSampleCoverageARB = ?fn (value: GLfloat, invert: GLboolean) callconv(.C) void;
const glSampleMapATI = ?fn (dst: GLuint, interp: GLuint, swizzle: GLenum) callconv(.C) void;
const glSampleMaskEXT = ?fn (value: GLclampf, invert: GLboolean) callconv(.C) void;
const glSampleMaskIndexedNV = ?fn (index: GLuint, mask: GLbitfield) callconv(.C) void;
const glSampleMaskSGIS = ?fn (value: GLclampf, invert: GLboolean) callconv(.C) void;
const glSampleMaski = ?fn (maskNumber: GLuint, mask: GLbitfield) callconv(.C) void;
const glSamplePatternEXT = ?fn (pattern: GLenum) callconv(.C) void;
const glSamplePatternSGIS = ?fn (pattern: GLenum) callconv(.C) void;
const glSamplerParameterIiv = ?fn (sampler: GLuint, pname: GLenum, param: *const GLint) callconv(.C) void;
const glSamplerParameterIuiv = ?fn (sampler: GLuint, pname: GLenum, param: *const GLuint) callconv(.C) void;
const glSamplerParameterf = ?fn (sampler: GLuint, pname: GLenum, param: GLfloat) callconv(.C) void;
const glSamplerParameterfv = ?fn (sampler: GLuint, pname: GLenum, param: *const GLfloat) callconv(.C) void;
const glSamplerParameteri = ?fn (sampler: GLuint, pname: GLenum, param: GLint) callconv(.C) void;
const glSamplerParameteriv = ?fn (sampler: GLuint, pname: GLenum, param: *const GLint) callconv(.C) void;
const glScalexOES = ?fn (x: GLfixed, y: GLfixed, z: GLfixed) callconv(.C) void;
const glScissor = ?fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glScissorArrayv = ?fn (first: GLuint, count: GLsizei, v: *const GLint) callconv(.C) void;
const glScissorExclusiveArrayvNV = ?fn (first: GLuint, count: GLsizei, v: *const GLint) callconv(.C) void;
const glScissorExclusiveNV = ?fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glScissorIndexed = ?fn (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glScissorIndexedv = ?fn (index: GLuint, v: *const GLint) callconv(.C) void;
const glSecondaryColor3bEXT = ?fn (red: GLbyte, green: GLbyte, blue: GLbyte) callconv(.C) void;
const glSecondaryColor3bvEXT = ?fn (v: *const GLbyte) callconv(.C) void;
const glSecondaryColor3dEXT = ?fn (red: GLdouble, green: GLdouble, blue: GLdouble) callconv(.C) void;
const glSecondaryColor3dvEXT = ?fn (v: *const GLdouble) callconv(.C) void;
const glSecondaryColor3fEXT = ?fn (red: GLfloat, green: GLfloat, blue: GLfloat) callconv(.C) void;
const glSecondaryColor3fvEXT = ?fn (v: *const GLfloat) callconv(.C) void;
const glSecondaryColor3hNV = ?fn (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) callconv(.C) void;
const glSecondaryColor3hvNV = ?fn (v: *const GLhalfNV) callconv(.C) void;
const glSecondaryColor3iEXT = ?fn (red: GLint, green: GLint, blue: GLint) callconv(.C) void;
const glSecondaryColor3ivEXT = ?fn (v: *const GLint) callconv(.C) void;
const glSecondaryColor3sEXT = ?fn (red: GLshort, green: GLshort, blue: GLshort) callconv(.C) void;
const glSecondaryColor3svEXT = ?fn (v: *const GLshort) callconv(.C) void;
const glSecondaryColor3ubEXT = ?fn (red: GLubyte, green: GLubyte, blue: GLubyte) callconv(.C) void;
const glSecondaryColor3ubvEXT = ?fn (v: *const GLubyte) callconv(.C) void;
const glSecondaryColor3uiEXT = ?fn (red: GLuint, green: GLuint, blue: GLuint) callconv(.C) void;
const glSecondaryColor3uivEXT = ?fn (v: *const GLuint) callconv(.C) void;
const glSecondaryColor3usEXT = ?fn (red: GLushort, green: GLushort, blue: GLushort) callconv(.C) void;
const glSecondaryColor3usvEXT = ?fn (v: *const GLushort) callconv(.C) void;
const glSecondaryColorFormatNV = ?fn (size: GLint, type_: GLenum, stride: GLsizei) callconv(.C) void;
const glSecondaryColorPointerEXT = ?fn (size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glSecondaryColorPointerListIBM = ?fn (size: GLint, type_: GLenum, stride: GLint, pointer: *const *const c_void, ptrstride: GLint) callconv(.C) void;
const glSelectPerfMonitorCountersAMD = ?fn (monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: *GLuint) callconv(.C) void;
const glSemaphoreParameterivNV = ?fn (semaphore: GLuint, pname: GLenum, params: *const GLint) callconv(.C) void;
const glSemaphoreParameterui64vEXT = ?fn (semaphore: GLuint, pname: GLenum, params: *const GLuint64) callconv(.C) void;
const glSeparableFilter2DEXT = ?fn (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *const c_void, column: *const c_void) callconv(.C) void;
const glSetFenceAPPLE = ?fn (fence: GLuint) callconv(.C) void;
const glSetFenceNV = ?fn (fence: GLuint, condition: GLenum) callconv(.C) void;
const glSetFragmentShaderConstantATI = ?fn (dst: GLuint, value: *const GLfloat) callconv(.C) void;
const glSetInvariantEXT = ?fn (id: GLuint, type_: GLenum, addr: *const c_void) callconv(.C) void;
const glSetLocalConstantEXT = ?fn (id: GLuint, type_: GLenum, addr: *const c_void) callconv(.C) void;
const glSetMultisamplefvAMD = ?fn (pname: GLenum, index: GLuint, val: *const GLfloat) callconv(.C) void;
const glShaderBinary = ?fn (count: GLsizei, shaders: *const GLuint, binaryFormat: GLenum, binary: *const c_void, length: GLsizei) callconv(.C) void;
const glShaderOp1EXT = ?fn (op: GLenum, res: GLuint, arg1: GLuint) callconv(.C) void;
const glShaderOp2EXT = ?fn (op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) callconv(.C) void;
const glShaderOp3EXT = ?fn (op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) callconv(.C) void;
const glShaderSource = ?fn (shader: GLuint, count: GLsizei, string: *const [*:0]const GLchar, length: ?*const GLint) callconv(.C) void;
const glShaderSourceARB = ?fn (shaderObj: GLhandleARB, count: GLsizei, string: *const [*:0]const GLchar, length: ?*const GLint) callconv(.C) void;
const glShaderStorageBlockBinding = ?fn (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) callconv(.C) void;
const glShadingRateImageBarrierNV = ?fn (synchronize: GLboolean) callconv(.C) void;
const glShadingRateImagePaletteNV = ?fn (viewport: GLuint, first: GLuint, count: GLsizei, rates: *const GLenum) callconv(.C) void;
const glShadingRateSampleOrderCustomNV = ?fn (rate: GLenum, samples: GLuint, locations: *const GLint) callconv(.C) void;
const glShadingRateSampleOrderNV = ?fn (order: GLenum) callconv(.C) void;
const glSharpenTexFuncSGIS = ?fn (target: GLenum, n: GLsizei, points: *const GLfloat) callconv(.C) void;
const glSignalSemaphoreEXT = ?fn (semaphore: GLuint, numBufferBarriers: GLuint, buffers: *const GLuint, numTextureBarriers: GLuint, textures: *const GLuint, dstLayouts: *const GLenum) callconv(.C) void;
const glSignalSemaphoreui64NVX = ?fn (signalGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: *const GLuint, fenceValueArray: *const GLuint64) callconv(.C) void;
const glSignalVkFenceNV = ?fn (vkFence: GLuint64) callconv(.C) void;
const glSignalVkSemaphoreNV = ?fn (vkSemaphore: GLuint64) callconv(.C) void;
const glSpecializeShaderARB = ?fn (shader: GLuint, pEntryPoint: *const GLchar, numSpecializationConstants: GLuint, pConstantIndex: *const GLuint, pConstantValue: *const GLuint) callconv(.C) void;
const glSpriteParameterfSGIX = ?fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glSpriteParameterfvSGIX = ?fn (pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glSpriteParameteriSGIX = ?fn (pname: GLenum, param: GLint) callconv(.C) void;
const glSpriteParameterivSGIX = ?fn (pname: GLenum, params: *const GLint) callconv(.C) void;
const glStartInstrumentsSGIX = ?fn () callconv(.C) void;
const glStateCaptureNV = ?fn (state: GLuint, mode: GLenum) callconv(.C) void;
const glStencilClearTagEXT = ?fn (stencilTagBits: GLsizei, stencilClearTag: GLuint) callconv(.C) void;
const glStencilFillPathInstancedNV = ?fn (numPaths: GLsizei, pathNameType: GLenum, paths: *const c_void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: *const GLfloat) callconv(.C) void;
const glStencilFillPathNV = ?fn (path: GLuint, fillMode: GLenum, mask: GLuint) callconv(.C) void;
const glStencilFunc = ?fn (func: GLenum, ref: GLint, mask: GLuint) callconv(.C) void;
const glStencilFuncSeparate = ?fn (face: GLenum, func: GLenum, ref: GLint, mask: GLuint) callconv(.C) void;
const glStencilFuncSeparateATI = ?fn (frontfunc: GLenum, backfunc: GLenum, ref: GLint, mask: GLuint) callconv(.C) void;
const glStencilMask = ?fn (mask: GLuint) callconv(.C) void;
const glStencilMaskSeparate = ?fn (face: GLenum, mask: GLuint) callconv(.C) void;
const glStencilOp = ?fn (fail: GLenum, zfail: GLenum, zpass: GLenum) callconv(.C) void;
const glStencilOpSeparate = ?fn (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) callconv(.C) void;
const glStencilOpSeparateATI = ?fn (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) callconv(.C) void;
const glStencilOpValueAMD = ?fn (face: GLenum, value: GLuint) callconv(.C) void;
const glStencilStrokePathInstancedNV = ?fn (numPaths: GLsizei, pathNameType: GLenum, paths: *const c_void, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: *const GLfloat) callconv(.C) void;
const glStencilStrokePathNV = ?fn (path: GLuint, reference: GLint, mask: GLuint) callconv(.C) void;
const glStencilThenCoverFillPathInstancedNV = ?fn (numPaths: GLsizei, pathNameType: GLenum, paths: *const c_void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *const GLfloat) callconv(.C) void;
const glStencilThenCoverFillPathNV = ?fn (path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum) callconv(.C) void;
const glStencilThenCoverStrokePathInstancedNV = ?fn (numPaths: GLsizei, pathNameType: GLenum, paths: *const c_void, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *const GLfloat) callconv(.C) void;
const glStencilThenCoverStrokePathNV = ?fn (path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum) callconv(.C) void;
const glStopInstrumentsSGIX = ?fn (marker: GLint) callconv(.C) void;
const glStringMarkerGREMEDY = ?fn (len: GLsizei, string: *const c_void) callconv(.C) void;
const glSubpixelPrecisionBiasNV = ?fn (xbits: GLuint, ybits: GLuint) callconv(.C) void;
const glSwizzleEXT = ?fn (res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) callconv(.C) void;
const glSyncTextureINTEL = ?fn (texture: GLuint) callconv(.C) void;
const glTagSampleBufferSGIX = ?fn () callconv(.C) void;
const glTangent3bEXT = ?fn (tx: GLbyte, ty: GLbyte, tz: GLbyte) callconv(.C) void;
const glTangent3bvEXT = ?fn (v: *const GLbyte) callconv(.C) void;
const glTangent3dEXT = ?fn (tx: GLdouble, ty: GLdouble, tz: GLdouble) callconv(.C) void;
const glTangent3dvEXT = ?fn (v: *const GLdouble) callconv(.C) void;
const glTangent3fEXT = ?fn (tx: GLfloat, ty: GLfloat, tz: GLfloat) callconv(.C) void;
const glTangent3fvEXT = ?fn (v: *const GLfloat) callconv(.C) void;
const glTangent3iEXT = ?fn (tx: GLint, ty: GLint, tz: GLint) callconv(.C) void;
const glTangent3ivEXT = ?fn (v: *const GLint) callconv(.C) void;
const glTangent3sEXT = ?fn (tx: GLshort, ty: GLshort, tz: GLshort) callconv(.C) void;
const glTangent3svEXT = ?fn (v: *const GLshort) callconv(.C) void;
const glTangentPointerEXT = ?fn (type_: GLenum, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glTbufferMask3DFX = ?fn (mask: GLuint) callconv(.C) void;
const glTessellationFactorAMD = ?fn (factor: GLfloat) callconv(.C) void;
const glTessellationModeAMD = ?fn (mode: GLenum) callconv(.C) void;
const glTestFenceAPPLE = ?fn (fence: GLuint) callconv(.C) GLboolean;
const glTestFenceNV = ?fn (fence: GLuint) callconv(.C) GLboolean;
const glTestObjectAPPLE = ?fn (object: GLenum, name: GLuint) callconv(.C) GLboolean;
const glTexAttachMemoryNV = ?fn (target: GLenum, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTexBuffer = ?fn (target: GLenum, internalformat: GLenum, buffer: GLuint) callconv(.C) void;
const glTexBufferARB = ?fn (target: GLenum, internalformat: GLenum, buffer: GLuint) callconv(.C) void;
const glTexBufferEXT = ?fn (target: GLenum, internalformat: GLenum, buffer: GLuint) callconv(.C) void;
const glTexBufferRange = ?fn (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glTexBumpParameterfvATI = ?fn (pname: GLenum, param: *const GLfloat) callconv(.C) void;
const glTexBumpParameterivATI = ?fn (pname: GLenum, param: *const GLint) callconv(.C) void;
const glTexCoord1bOES = ?fn (s: GLbyte) callconv(.C) void;
const glTexCoord1bvOES = ?fn (coords: *const GLbyte) callconv(.C) void;
const glTexCoord1hNV = ?fn (s: GLhalfNV) callconv(.C) void;
const glTexCoord1hvNV = ?fn (v: *const GLhalfNV) callconv(.C) void;
const glTexCoord1xOES = ?fn (s: GLfixed) callconv(.C) void;
const glTexCoord1xvOES = ?fn (coords: *const GLfixed) callconv(.C) void;
const glTexCoord2bOES = ?fn (s: GLbyte, t: GLbyte) callconv(.C) void;
const glTexCoord2bvOES = ?fn (coords: *const GLbyte) callconv(.C) void;
const glTexCoord2fColor3fVertex3fSUN = ?fn (s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glTexCoord2fColor3fVertex3fvSUN = ?fn (tc: *const GLfloat, c: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glTexCoord2fColor4fNormal3fVertex3fSUN = ?fn (s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glTexCoord2fColor4fNormal3fVertex3fvSUN = ?fn (tc: *const GLfloat, c: *const GLfloat, n: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glTexCoord2fColor4ubVertex3fSUN = ?fn (s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glTexCoord2fColor4ubVertex3fvSUN = ?fn (tc: *const GLfloat, c: *const GLubyte, v: *const GLfloat) callconv(.C) void;
const glTexCoord2fNormal3fVertex3fSUN = ?fn (s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glTexCoord2fNormal3fVertex3fvSUN = ?fn (tc: *const GLfloat, n: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glTexCoord2fVertex3fSUN = ?fn (s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glTexCoord2fVertex3fvSUN = ?fn (tc: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glTexCoord2hNV = ?fn (s: GLhalfNV, t: GLhalfNV) callconv(.C) void;
const glTexCoord2hvNV = ?fn (v: *const GLhalfNV) callconv(.C) void;
const glTexCoord2xOES = ?fn (s: GLfixed, t: GLfixed) callconv(.C) void;
const glTexCoord2xvOES = ?fn (coords: *const GLfixed) callconv(.C) void;
const glTexCoord3bOES = ?fn (s: GLbyte, t: GLbyte, r: GLbyte) callconv(.C) void;
const glTexCoord3bvOES = ?fn (coords: *const GLbyte) callconv(.C) void;
const glTexCoord3hNV = ?fn (s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) callconv(.C) void;
const glTexCoord3hvNV = ?fn (v: *const GLhalfNV) callconv(.C) void;
const glTexCoord3xOES = ?fn (s: GLfixed, t: GLfixed, r: GLfixed) callconv(.C) void;
const glTexCoord3xvOES = ?fn (coords: *const GLfixed) callconv(.C) void;
const glTexCoord4bOES = ?fn (s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) callconv(.C) void;
const glTexCoord4bvOES = ?fn (coords: *const GLbyte) callconv(.C) void;
const glTexCoord4fColor4fNormal3fVertex4fSUN = ?fn (s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glTexCoord4fColor4fNormal3fVertex4fvSUN = ?fn (tc: *const GLfloat, c: *const GLfloat, n: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glTexCoord4fVertex4fSUN = ?fn (s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glTexCoord4fVertex4fvSUN = ?fn (tc: *const GLfloat, v: *const GLfloat) callconv(.C) void;
const glTexCoord4hNV = ?fn (s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) callconv(.C) void;
const glTexCoord4hvNV = ?fn (v: *const GLhalfNV) callconv(.C) void;
const glTexCoord4xOES = ?fn (s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) callconv(.C) void;
const glTexCoord4xvOES = ?fn (coords: *const GLfixed) callconv(.C) void;
const glTexCoordFormatNV = ?fn (size: GLint, type_: GLenum, stride: GLsizei) callconv(.C) void;
const glTexCoordPointerEXT = ?fn (size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *const c_void) callconv(.C) void;
const glTexCoordPointerListIBM = ?fn (size: GLint, type_: GLenum, stride: GLint, pointer: *const *const c_void, ptrstride: GLint) callconv(.C) void;
const glTexCoordPointervINTEL = ?fn (size: GLint, type_: GLenum, pointer: *const *const c_void) callconv(.C) void;
const glTexEnvxOES = ?fn (target: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glTexEnvxvOES = ?fn (target: GLenum, pname: GLenum, params: *const GLfixed) callconv(.C) void;
const glTexFilterFuncSGIS = ?fn (target: GLenum, filter: GLenum, n: GLsizei, weights: *const GLfloat) callconv(.C) void;
const glTexGenxOES = ?fn (coord: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glTexGenxvOES = ?fn (coord: GLenum, pname: GLenum, params: *const GLfixed) callconv(.C) void;
const glTexImage1D = ?fn (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTexImage2D = ?fn (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTexImage2DMultisample = ?fn (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTexImage2DMultisampleCoverageNV = ?fn (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) callconv(.C) void;
const glTexImage3D = ?fn (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTexImage3DEXT = ?fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTexImage3DMultisample = ?fn (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTexImage3DMultisampleCoverageNV = ?fn (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) callconv(.C) void;
const glTexImage4DSGIS = ?fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTexPageCommitmentARB = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) callconv(.C) void;
const glTexPageCommitmentMemNV = ?fn (target: GLenum, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean) callconv(.C) void;
const glTexParameterIiv = ?fn (target: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glTexParameterIivEXT = ?fn (target: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glTexParameterIuiv = ?fn (target: GLenum, pname: GLenum, params: *const GLuint) callconv(.C) void;
const glTexParameterIuivEXT = ?fn (target: GLenum, pname: GLenum, params: *const GLuint) callconv(.C) void;
const glTexParameterf = ?fn (target: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glTexParameterfv = ?fn (target: GLenum, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glTexParameteri = ?fn (target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glTexParameteriv = ?fn (target: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glTexParameterxOES = ?fn (target: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glTexParameterxvOES = ?fn (target: GLenum, pname: GLenum, params: *const GLfixed) callconv(.C) void;
const glTexRenderbufferNV = ?fn (target: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glTexStorage1D = ?fn (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) callconv(.C) void;
const glTexStorage2D = ?fn (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glTexStorage2DMultisample = ?fn (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTexStorage3D = ?fn (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) callconv(.C) void;
const glTexStorage3DMultisample = ?fn (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTexStorageMem1DEXT = ?fn (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTexStorageMem2DEXT = ?fn (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTexStorageMem2DMultisampleEXT = ?fn (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTexStorageMem3DEXT = ?fn (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTexStorageMem3DMultisampleEXT = ?fn (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTexStorageSparseAMD = ?fn (target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) callconv(.C) void;
const glTexSubImage1D = ?fn (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTexSubImage1DEXT = ?fn (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTexSubImage2D = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTexSubImage2DEXT = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTexSubImage3D = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTexSubImage3DEXT = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTexSubImage4DSGIS = ?fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTextureAttachMemoryNV = ?fn (texture: GLuint, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTextureBarrier = ?fn () callconv(.C) void;
const glTextureBarrierNV = ?fn () callconv(.C) void;
const glTextureBuffer = ?fn (texture: GLuint, internalformat: GLenum, buffer: GLuint) callconv(.C) void;
const glTextureBufferEXT = ?fn (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) callconv(.C) void;
const glTextureBufferRange = ?fn (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glTextureBufferRangeEXT = ?fn (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glTextureColorMaskSGIS = ?fn (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) callconv(.C) void;
const glTextureImage1DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTextureImage2DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTextureImage2DMultisampleCoverageNV = ?fn (texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) callconv(.C) void;
const glTextureImage2DMultisampleNV = ?fn (texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) callconv(.C) void;
const glTextureImage3DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTextureImage3DMultisampleCoverageNV = ?fn (texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) callconv(.C) void;
const glTextureImage3DMultisampleNV = ?fn (texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) callconv(.C) void;
const glTextureLightEXT = ?fn (pname: GLenum) callconv(.C) void;
const glTextureMaterialEXT = ?fn (face: GLenum, mode: GLenum) callconv(.C) void;
const glTextureNormalEXT = ?fn (mode: GLenum) callconv(.C) void;
const glTexturePageCommitmentEXT = ?fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) callconv(.C) void;
const glTexturePageCommitmentMemNV = ?fn (texture: GLuint, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean) callconv(.C) void;
const glTextureParameterIiv = ?fn (texture: GLuint, pname: GLenum, params: *const GLint) callconv(.C) void;
const glTextureParameterIivEXT = ?fn (texture: GLuint, target: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glTextureParameterIuiv = ?fn (texture: GLuint, pname: GLenum, params: *const GLuint) callconv(.C) void;
const glTextureParameterIuivEXT = ?fn (texture: GLuint, target: GLenum, pname: GLenum, params: *const GLuint) callconv(.C) void;
const glTextureParameterf = ?fn (texture: GLuint, pname: GLenum, param: GLfloat) callconv(.C) void;
const glTextureParameterfEXT = ?fn (texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glTextureParameterfv = ?fn (texture: GLuint, pname: GLenum, param: *const GLfloat) callconv(.C) void;
const glTextureParameterfvEXT = ?fn (texture: GLuint, target: GLenum, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glTextureParameteri = ?fn (texture: GLuint, pname: GLenum, param: GLint) callconv(.C) void;
const glTextureParameteriEXT = ?fn (texture: GLuint, target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glTextureParameteriv = ?fn (texture: GLuint, pname: GLenum, param: *const GLint) callconv(.C) void;
const glTextureParameterivEXT = ?fn (texture: GLuint, target: GLenum, pname: GLenum, params: *const GLint) callconv(.C) void;
const glTextureRangeAPPLE = ?fn (target: GLenum, length: GLsizei, pointer: *const c_void) callconv(.C) void;
const glTextureRenderbufferEXT = ?fn (texture: GLuint, target: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glTextureStorage1D = ?fn (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) callconv(.C) void;
const glTextureStorage1DEXT = ?fn (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) callconv(.C) void;
const glTextureStorage2D = ?fn (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glTextureStorage2DEXT = ?fn (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glTextureStorage2DMultisample = ?fn (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTextureStorage2DMultisampleEXT = ?fn (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTextureStorage3D = ?fn (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) callconv(.C) void;
const glTextureStorage3DEXT = ?fn (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) callconv(.C) void;
const glTextureStorage3DMultisample = ?fn (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTextureStorage3DMultisampleEXT = ?fn (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTextureStorageMem1DEXT = ?fn (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTextureStorageMem2DEXT = ?fn (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTextureStorageMem2DMultisampleEXT = ?fn (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTextureStorageMem3DEXT = ?fn (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTextureStorageMem3DMultisampleEXT = ?fn (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTextureStorageSparseAMD = ?fn (texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) callconv(.C) void;
const glTextureSubImage1D = ?fn (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTextureSubImage1DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTextureSubImage2D = ?fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTextureSubImage2DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTextureSubImage3D = ?fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTextureSubImage3DEXT = ?fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) callconv(.C) void;
const glTextureView = ?fn (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) callconv(.C) void;
const glTrackMatrixNV = ?fn (target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) callconv(.C) void;
const glTransformFeedbackAttribsNV = ?fn (count: GLsizei, attribs: *const GLint, bufferMode: GLenum) callconv(.C) void;
const glTransformFeedbackBufferBase = ?fn (xfb: GLuint, index: GLuint, buffer: GLuint) callconv(.C) void;
const glTransformFeedbackBufferRange = ?fn (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glTransformFeedbackStreamAttribsNV = ?fn (count: GLsizei, attribs: *const GLint, nbuffers: GLsizei, bufstreams: *const GLint, bufferMode: GLenum) callconv(.C) void;
const glTransformFeedbackVaryings = ?fn (program: GLuint, count: GLsizei, varyings: *const *const GLchar, bufferMode: GLenum) callconv(.C) void;
const glTransformFeedbackVaryingsEXT = ?fn (program: GLuint, count: GLsizei, varyings: *const *const GLchar, bufferMode: GLenum) callconv(.C) void;
const glTransformFeedbackVaryingsNV = ?fn (program: GLuint, count: GLsizei, locations: *const GLint, bufferMode: GLenum) callconv(.C) void;
const glTransformPathNV = ?fn (resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: *const GLfloat) callconv(.C) void;
const glTranslatexOES = ?fn (x: GLfixed, y: GLfixed, z: GLfixed) callconv(.C) void;
const glUniform1d = ?fn (location: GLint, x: GLdouble) callconv(.C) void;
const glUniform1dv = ?fn (location: GLint, count: GLsizei, value: *const GLdouble) callconv(.C) void;
const glUniform1f = ?fn (location: GLint, v0: GLfloat) callconv(.C) void;
const glUniform1fARB = ?fn (location: GLint, v0: GLfloat) callconv(.C) void;
const glUniform1fv = ?fn (location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glUniform1fvARB = ?fn (location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glUniform1i = ?fn (location: GLint, v0: GLint) callconv(.C) void;
const glUniform1i64ARB = ?fn (location: GLint, x: GLint64) callconv(.C) void;
const glUniform1i64NV = ?fn (location: GLint, x: GLint64EXT) callconv(.C) void;
const glUniform1i64vARB = ?fn (location: GLint, count: GLsizei, value: *const GLint64) callconv(.C) void;
const glUniform1i64vNV = ?fn (location: GLint, count: GLsizei, value: *const GLint64EXT) callconv(.C) void;
const glUniform1iARB = ?fn (location: GLint, v0: GLint) callconv(.C) void;
const glUniform1iv = ?fn (location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glUniform1ivARB = ?fn (location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glUniform1ui = ?fn (location: GLint, v0: GLuint) callconv(.C) void;
const glUniform1ui64ARB = ?fn (location: GLint, x: GLuint64) callconv(.C) void;
const glUniform1ui64NV = ?fn (location: GLint, x: GLuint64EXT) callconv(.C) void;
const glUniform1ui64vARB = ?fn (location: GLint, count: GLsizei, value: *const GLuint64) callconv(.C) void;
const glUniform1ui64vNV = ?fn (location: GLint, count: GLsizei, value: *const GLuint64EXT) callconv(.C) void;
const glUniform1uiEXT = ?fn (location: GLint, v0: GLuint) callconv(.C) void;
const glUniform1uiv = ?fn (location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glUniform1uivEXT = ?fn (location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glUniform2d = ?fn (location: GLint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glUniform2dv = ?fn (location: GLint, count: GLsizei, value: *const GLdouble) callconv(.C) void;
const glUniform2f = ?fn (location: GLint, v0: GLfloat, v1: GLfloat) callconv(.C) void;
const glUniform2fARB = ?fn (location: GLint, v0: GLfloat, v1: GLfloat) callconv(.C) void;
const glUniform2fv = ?fn (location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glUniform2fvARB = ?fn (location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glUniform2i = ?fn (location: GLint, v0: GLint, v1: GLint) callconv(.C) void;
const glUniform2i64ARB = ?fn (location: GLint, x: GLint64, y: GLint64) callconv(.C) void;
const glUniform2i64NV = ?fn (location: GLint, x: GLint64EXT, y: GLint64EXT) callconv(.C) void;
const glUniform2i64vARB = ?fn (location: GLint, count: GLsizei, value: *const GLint64) callconv(.C) void;
const glUniform2i64vNV = ?fn (location: GLint, count: GLsizei, value: *const GLint64EXT) callconv(.C) void;
const glUniform2iARB = ?fn (location: GLint, v0: GLint, v1: GLint) callconv(.C) void;
const glUniform2iv = ?fn (location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glUniform2ivARB = ?fn (location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glUniform2ui = ?fn (location: GLint, v0: GLuint, v1: GLuint) callconv(.C) void;
const glUniform2ui64ARB = ?fn (location: GLint, x: GLuint64, y: GLuint64) callconv(.C) void;
const glUniform2ui64NV = ?fn (location: GLint, x: GLuint64EXT, y: GLuint64EXT) callconv(.C) void;
const glUniform2ui64vARB = ?fn (location: GLint, count: GLsizei, value: *const GLuint64) callconv(.C) void;
const glUniform2ui64vNV = ?fn (location: GLint, count: GLsizei, value: *const GLuint64EXT) callconv(.C) void;
const glUniform2uiEXT = ?fn (location: GLint, v0: GLuint, v1: GLuint) callconv(.C) void;
const glUniform2uiv = ?fn (location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glUniform2uivEXT = ?fn (location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glUniform3d = ?fn (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glUniform3dv = ?fn (location: GLint, count: GLsizei, value: *const GLdouble) callconv(.C) void;
const glUniform3f = ?fn (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) callconv(.C) void;
const glUniform3fARB = ?fn (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) callconv(.C) void;
const glUniform3fv = ?fn (location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glUniform3fvARB = ?fn (location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glUniform3i = ?fn (location: GLint, v0: GLint, v1: GLint, v2: GLint) callconv(.C) void;
const glUniform3i64ARB = ?fn (location: GLint, x: GLint64, y: GLint64, z: GLint64) callconv(.C) void;
const glUniform3i64NV = ?fn (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) callconv(.C) void;
const glUniform3i64vARB = ?fn (location: GLint, count: GLsizei, value: *const GLint64) callconv(.C) void;
const glUniform3i64vNV = ?fn (location: GLint, count: GLsizei, value: *const GLint64EXT) callconv(.C) void;
const glUniform3iARB = ?fn (location: GLint, v0: GLint, v1: GLint, v2: GLint) callconv(.C) void;
const glUniform3iv = ?fn (location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glUniform3ivARB = ?fn (location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glUniform3ui = ?fn (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) callconv(.C) void;
const glUniform3ui64ARB = ?fn (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) callconv(.C) void;
const glUniform3ui64NV = ?fn (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) callconv(.C) void;
const glUniform3ui64vARB = ?fn (location: GLint, count: GLsizei, value: *const GLuint64) callconv(.C) void;
const glUniform3ui64vNV = ?fn (location: GLint, count: GLsizei, value: *const GLuint64EXT) callconv(.C) void;
const glUniform3uiEXT = ?fn (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) callconv(.C) void;
const glUniform3uiv = ?fn (location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glUniform3uivEXT = ?fn (location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glUniform4d = ?fn (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glUniform4dv = ?fn (location: GLint, count: GLsizei, value: *const GLdouble) callconv(.C) void;
const glUniform4f = ?fn (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) callconv(.C) void;
const glUniform4fARB = ?fn (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) callconv(.C) void;
const glUniform4fv = ?fn (location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glUniform4fvARB = ?fn (location: GLint, count: GLsizei, value: *const GLfloat) callconv(.C) void;
const glUniform4i = ?fn (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) callconv(.C) void;
const glUniform4i64ARB = ?fn (location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) callconv(.C) void;
const glUniform4i64NV = ?fn (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) callconv(.C) void;
const glUniform4i64vARB = ?fn (location: GLint, count: GLsizei, value: *const GLint64) callconv(.C) void;
const glUniform4i64vNV = ?fn (location: GLint, count: GLsizei, value: *const GLint64EXT) callconv(.C) void;
const glUniform4iARB = ?fn (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) callconv(.C) void;
const glUniform4iv = ?fn (location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glUniform4ivARB = ?fn (location: GLint, count: GLsizei, value: *const GLint) callconv(.C) void;
const glUniform4ui = ?fn (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) callconv(.C) void;
const glUniform4ui64ARB = ?fn (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) callconv(.C) void;
const glUniform4ui64NV = ?fn (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) callconv(.C) void;
const glUniform4ui64vARB = ?fn (location: GLint, count: GLsizei, value: *const GLuint64) callconv(.C) void;
const glUniform4ui64vNV = ?fn (location: GLint, count: GLsizei, value: *const GLuint64EXT) callconv(.C) void;
const glUniform4uiEXT = ?fn (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) callconv(.C) void;
const glUniform4uiv = ?fn (location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glUniform4uivEXT = ?fn (location: GLint, count: GLsizei, value: *const GLuint) callconv(.C) void;
const glUniformBlockBinding = ?fn (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) callconv(.C) void;
const glUniformBufferEXT = ?fn (program: GLuint, location: GLint, buffer: GLuint) callconv(.C) void;
const glUniformHandleui64ARB = ?fn (location: GLint, value: GLuint64) callconv(.C) void;
const glUniformHandleui64NV = ?fn (location: GLint, value: GLuint64) callconv(.C) void;
const glUniformHandleui64vARB = ?fn (location: GLint, count: GLsizei, value: *const GLuint64) callconv(.C) void;
const glUniformHandleui64vNV = ?fn (location: GLint, count: GLsizei, value: *const GLuint64) callconv(.C) void;
const glUniformMatrix2dv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glUniformMatrix2fv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glUniformMatrix2fvARB = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glUniformMatrix2x3dv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glUniformMatrix2x3fv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glUniformMatrix2x4dv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glUniformMatrix2x4fv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glUniformMatrix3dv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glUniformMatrix3fv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glUniformMatrix3fvARB = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glUniformMatrix3x2dv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glUniformMatrix3x2fv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glUniformMatrix3x4dv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glUniformMatrix3x4fv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glUniformMatrix4dv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glUniformMatrix4fv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glUniformMatrix4fvARB = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glUniformMatrix4x2dv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glUniformMatrix4x2fv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glUniformMatrix4x3dv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) callconv(.C) void;
const glUniformMatrix4x3fv = ?fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) callconv(.C) void;
const glUniformSubroutinesuiv = ?fn (shadertype: GLenum, count: GLsizei, indices: *const GLuint) callconv(.C) void;
const glUniformui64NV = ?fn (location: GLint, value: GLuint64EXT) callconv(.C) void;
const glUniformui64vNV = ?fn (location: GLint, count: GLsizei, value: *const GLuint64EXT) callconv(.C) void;
const glUnlockArraysEXT = ?fn () callconv(.C) void;
const glUnmapBuffer = ?fn (target: GLenum) callconv(.C) GLboolean;
const glUnmapBufferARB = ?fn (target: GLenum) callconv(.C) GLboolean;
const glUnmapNamedBuffer = ?fn (buffer: GLuint) callconv(.C) GLboolean;
const glUnmapNamedBufferEXT = ?fn (buffer: GLuint) callconv(.C) GLboolean;
const glUnmapObjectBufferATI = ?fn (buffer: GLuint) callconv(.C) void;
const glUnmapTexture2DINTEL = ?fn (texture: GLuint, level: GLint) callconv(.C) void;
const glUpdateObjectBufferATI = ?fn (buffer: GLuint, offset: GLuint, size: GLsizei, pointer: *const c_void, preserve: GLenum) callconv(.C) void;
const glUploadGpuMaskNVX = ?fn (mask: GLbitfield) callconv(.C) void;
const glUseProgram = ?fn (program: GLuint) callconv(.C) void;
const glUseProgramObjectARB = ?fn (programObj: GLhandleARB) callconv(.C) void;
const glUseProgramStages = ?fn (pipeline: GLuint, stages: GLbitfield, program: GLuint) callconv(.C) void;
const glUseShaderProgramEXT = ?fn (type_: GLenum, program: GLuint) callconv(.C) void;
const glVDPAUFiniNV = ?fn () callconv(.C) void;
const glVDPAUGetSurfaceivNV = ?fn (surface: GLvdpauSurfaceNV, pname: GLenum, count: GLsizei, length: *GLsizei, values: *GLint) callconv(.C) void;
const glVDPAUInitNV = ?fn (vdpDevice: *const c_void, getProcAddress: *const c_void) callconv(.C) void;
const glVDPAUIsSurfaceNV = ?fn (surface: GLvdpauSurfaceNV) callconv(.C) GLboolean;
const glVDPAUMapSurfacesNV = ?fn (numSurfaces: GLsizei, surfaces: *const GLvdpauSurfaceNV) callconv(.C) void;
const glVDPAURegisterOutputSurfaceNV = ?fn (vdpSurface: *const c_void, target: GLenum, numTextureNames: GLsizei, textureNames: *const GLuint) callconv(.C) GLvdpauSurfaceNV;
const glVDPAURegisterVideoSurfaceNV = ?fn (vdpSurface: *const c_void, target: GLenum, numTextureNames: GLsizei, textureNames: *const GLuint) callconv(.C) GLvdpauSurfaceNV;
const glVDPAURegisterVideoSurfaceWithPictureStructureNV = ?fn (vdpSurface: *const c_void, target: GLenum, numTextureNames: GLsizei, textureNames: *const GLuint, isFrameStructure: GLboolean) callconv(.C) GLvdpauSurfaceNV;
const glVDPAUSurfaceAccessNV = ?fn (surface: GLvdpauSurfaceNV, access: GLenum) callconv(.C) void;
const glVDPAUUnmapSurfacesNV = ?fn (numSurface: GLsizei, surfaces: *const GLvdpauSurfaceNV) callconv(.C) void;
const glVDPAUUnregisterSurfaceNV = ?fn (surface: GLvdpauSurfaceNV) callconv(.C) void;
const glValidateProgram = ?fn (program: GLuint) callconv(.C) void;
const glValidateProgramARB = ?fn (programObj: GLhandleARB) callconv(.C) void;
const glValidateProgramPipeline = ?fn (pipeline: GLuint) callconv(.C) void;
const glVariantArrayObjectATI = ?fn (id: GLuint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) callconv(.C) void;
const glVariantPointerEXT = ?fn (id: GLuint, type_: GLenum, stride: GLuint, addr: *const c_void) callconv(.C) void;
const glVariantbvEXT = ?fn (id: GLuint, addr: *const GLbyte) callconv(.C) void;
const glVariantdvEXT = ?fn (id: GLuint, addr: *const GLdouble) callconv(.C) void;
const glVariantfvEXT = ?fn (id: GLuint, addr: *const GLfloat) callconv(.C) void;
const glVariantivEXT = ?fn (id: GLuint, addr: *const GLint) callconv(.C) void;
const glVariantsvEXT = ?fn (id: GLuint, addr: *const GLshort) callconv(.C) void;
const glVariantubvEXT = ?fn (id: GLuint, addr: *const GLubyte) callconv(.C) void;
const glVariantuivEXT = ?fn (id: GLuint, addr: *const GLuint) callconv(.C) void;
const glVariantusvEXT = ?fn (id: GLuint, addr: *const GLushort) callconv(.C) void;
const glVertex2bOES = ?fn (x: GLbyte, y: GLbyte) callconv(.C) void;
const glVertex2bvOES = ?fn (coords: *const GLbyte) callconv(.C) void;
const glVertex2hNV = ?fn (x: GLhalfNV, y: GLhalfNV) callconv(.C) void;
const glVertex2hvNV = ?fn (v: *const GLhalfNV) callconv(.C) void;
const glVertex2xOES = ?fn (x: GLfixed) callconv(.C) void;
const glVertex2xvOES = ?fn (coords: *const GLfixed) callconv(.C) void;
const glVertex3bOES = ?fn (x: GLbyte, y: GLbyte, z: GLbyte) callconv(.C) void;
const glVertex3bvOES = ?fn (coords: *const GLbyte) callconv(.C) void;
const glVertex3hNV = ?fn (x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) callconv(.C) void;
const glVertex3hvNV = ?fn (v: *const GLhalfNV) callconv(.C) void;
const glVertex3xOES = ?fn (x: GLfixed, y: GLfixed) callconv(.C) void;
const glVertex3xvOES = ?fn (coords: *const GLfixed) callconv(.C) void;
const glVertex4bOES = ?fn (x: GLbyte, y: GLbyte, z: GLbyte, w: GLbyte) callconv(.C) void;
const glVertex4bvOES = ?fn (coords: *const GLbyte) callconv(.C) void;
const glVertex4hNV = ?fn (x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) callconv(.C) void;
const glVertex4hvNV = ?fn (v: *const GLhalfNV) callconv(.C) void;
const glVertex4xOES = ?fn (x: GLfixed, y: GLfixed, z: GLfixed) callconv(.C) void;
const glVertex4xvOES = ?fn (coords: *const GLfixed) callconv(.C) void;
const glVertexArrayAttribBinding = ?fn (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) callconv(.C) void;
const glVertexArrayAttribFormat = ?fn (vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) callconv(.C) void;
const glVertexArrayAttribIFormat = ?fn (vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) callconv(.C) void;
const glVertexArrayAttribLFormat = ?fn (vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) callconv(.C) void;
const glVertexArrayBindVertexBufferEXT = ?fn (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) callconv(.C) void;
const glVertexArrayBindingDivisor = ?fn (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) callconv(.C) void;
const glVertexArrayColorOffsetEXT = ?fn (vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayEdgeFlagOffsetEXT = ?fn (vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayElementBuffer = ?fn (vaobj: GLuint, buffer: GLuint) callconv(.C) void;
const glVertexArrayFogCoordOffsetEXT = ?fn (vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayIndexOffsetEXT = ?fn (vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayMultiTexCoordOffsetEXT = ?fn (vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayNormalOffsetEXT = ?fn (vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayParameteriAPPLE = ?fn (pname: GLenum, param: GLint) callconv(.C) void;
const glVertexArrayRangeAPPLE = ?fn (length: GLsizei, pointer: *c_void) callconv(.C) void;
const glVertexArrayRangeNV = ?fn (length: GLsizei, pointer: *const c_void) callconv(.C) void;
const glVertexArraySecondaryColorOffsetEXT = ?fn (vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayTexCoordOffsetEXT = ?fn (vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayVertexAttribBindingEXT = ?fn (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) callconv(.C) void;
const glVertexArrayVertexAttribDivisorEXT = ?fn (vaobj: GLuint, index: GLuint, divisor: GLuint) callconv(.C) void;
const glVertexArrayVertexAttribFormatEXT = ?fn (vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) callconv(.C) void;
const glVertexArrayVertexAttribIFormatEXT = ?fn (vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) callconv(.C) void;
const glVertexArrayVertexAttribIOffsetEXT = ?fn (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayVertexAttribLFormatEXT = ?fn (vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) callconv(.C) void;
const glVertexArrayVertexAttribLOffsetEXT = ?fn (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayVertexAttribOffsetEXT = ?fn (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayVertexBindingDivisorEXT = ?fn (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) callconv(.C) void;
const glVertexArrayVertexBuffer = ?fn (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) callconv(.C) void;
const glVertexArrayVertexBuffers = ?fn (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: *const GLuint, offsets: *const GLintptr, strides: *const GLsizei) callconv(.C) void;
const glVertexArrayVertexOffsetEXT = ?fn (vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexAttrib1d = ?fn (index: GLuint, x: GLdouble) callconv(.C) void;
const glVertexAttrib1dARB = ?fn (index: GLuint, x: GLdouble) callconv(.C) void;
const glVertexAttrib1dNV = ?fn (index: GLuint, x: GLdouble) callconv(.C) void;
const glVertexAttrib1dv = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttrib1dvARB = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttrib1dvNV = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttrib1f = ?fn (index: GLuint, x: GLfloat) callconv(.C) void;
const glVertexAttrib1fARB = ?fn (index: GLuint, x: GLfloat) callconv(.C) void;
const glVertexAttrib1fNV = ?fn (index: GLuint, x: GLfloat) callconv(.C) void;
const glVertexAttrib1fv = ?fn (index: GLuint, v: *const GLfloat) callconv(.C) void;
const glVertexAttrib1fvARB = ?fn (index: GLuint, v: *const GLfloat) callconv(.C) void;
const glVertexAttrib1fvNV = ?fn (index: GLuint, v: *const GLfloat) callconv(.C) void;
const glVertexAttrib1hNV = ?fn (index: GLuint, x: GLhalfNV) callconv(.C) void;
const glVertexAttrib1hvNV = ?fn (index: GLuint, v: *const GLhalfNV) callconv(.C) void;
const glVertexAttrib1s = ?fn (index: GLuint, x: GLshort) callconv(.C) void;
const glVertexAttrib1sARB = ?fn (index: GLuint, x: GLshort) callconv(.C) void;
const glVertexAttrib1sNV = ?fn (index: GLuint, x: GLshort) callconv(.C) void;
const glVertexAttrib1sv = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib1svARB = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib1svNV = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib2d = ?fn (index: GLuint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glVertexAttrib2dARB = ?fn (index: GLuint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glVertexAttrib2dNV = ?fn (index: GLuint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glVertexAttrib2dv = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttrib2dvARB = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttrib2dvNV = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttrib2f = ?fn (index: GLuint, x: GLfloat, y: GLfloat) callconv(.C) void;
const glVertexAttrib2fARB = ?fn (index: GLuint, x: GLfloat, y: GLfloat) callconv(.C) void;
const glVertexAttrib2fNV = ?fn (index: GLuint, x: GLfloat, y: GLfloat) callconv(.C) void;
const glVertexAttrib2fv = ?fn (index: GLuint, v: *const GLfloat) callconv(.C) void;
const glVertexAttrib2fvARB = ?fn (index: GLuint, v: *const GLfloat) callconv(.C) void;
const glVertexAttrib2fvNV = ?fn (index: GLuint, v: *const GLfloat) callconv(.C) void;
const glVertexAttrib2hNV = ?fn (index: GLuint, x: GLhalfNV, y: GLhalfNV) callconv(.C) void;
const glVertexAttrib2hvNV = ?fn (index: GLuint, v: *const GLhalfNV) callconv(.C) void;
const glVertexAttrib2s = ?fn (index: GLuint, x: GLshort, y: GLshort) callconv(.C) void;
const glVertexAttrib2sARB = ?fn (index: GLuint, x: GLshort, y: GLshort) callconv(.C) void;
const glVertexAttrib2sNV = ?fn (index: GLuint, x: GLshort, y: GLshort) callconv(.C) void;
const glVertexAttrib2sv = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib2svARB = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib2svNV = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib3d = ?fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glVertexAttrib3dARB = ?fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glVertexAttrib3dNV = ?fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glVertexAttrib3dv = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttrib3dvARB = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttrib3dvNV = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttrib3f = ?fn (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glVertexAttrib3fARB = ?fn (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glVertexAttrib3fNV = ?fn (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glVertexAttrib3fv = ?fn (index: GLuint, v: *const GLfloat) callconv(.C) void;
const glVertexAttrib3fvARB = ?fn (index: GLuint, v: *const GLfloat) callconv(.C) void;
const glVertexAttrib3fvNV = ?fn (index: GLuint, v: *const GLfloat) callconv(.C) void;
const glVertexAttrib3hNV = ?fn (index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) callconv(.C) void;
const glVertexAttrib3hvNV = ?fn (index: GLuint, v: *const GLhalfNV) callconv(.C) void;
const glVertexAttrib3s = ?fn (index: GLuint, x: GLshort, y: GLshort, z: GLshort) callconv(.C) void;
const glVertexAttrib3sARB = ?fn (index: GLuint, x: GLshort, y: GLshort, z: GLshort) callconv(.C) void;
const glVertexAttrib3sNV = ?fn (index: GLuint, x: GLshort, y: GLshort, z: GLshort) callconv(.C) void;
const glVertexAttrib3sv = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib3svARB = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib3svNV = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib4Nbv = ?fn (index: GLuint, v: *const GLbyte) callconv(.C) void;
const glVertexAttrib4NbvARB = ?fn (index: GLuint, v: *const GLbyte) callconv(.C) void;
const glVertexAttrib4Niv = ?fn (index: GLuint, v: *const GLint) callconv(.C) void;
const glVertexAttrib4NivARB = ?fn (index: GLuint, v: *const GLint) callconv(.C) void;
const glVertexAttrib4Nsv = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib4NsvARB = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib4Nub = ?fn (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) callconv(.C) void;
const glVertexAttrib4NubARB = ?fn (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) callconv(.C) void;
const glVertexAttrib4Nubv = ?fn (index: GLuint, v: *const GLubyte) callconv(.C) void;
const glVertexAttrib4NubvARB = ?fn (index: GLuint, v: *const GLubyte) callconv(.C) void;
const glVertexAttrib4Nuiv = ?fn (index: GLuint, v: *const GLuint) callconv(.C) void;
const glVertexAttrib4NuivARB = ?fn (index: GLuint, v: *const GLuint) callconv(.C) void;
const glVertexAttrib4Nusv = ?fn (index: GLuint, v: *const GLushort) callconv(.C) void;
const glVertexAttrib4NusvARB = ?fn (index: GLuint, v: *const GLushort) callconv(.C) void;
const glVertexAttrib4bv = ?fn (index: GLuint, v: *const GLbyte) callconv(.C) void;
const glVertexAttrib4bvARB = ?fn (index: GLuint, v: *const GLbyte) callconv(.C) void;
const glVertexAttrib4d = ?fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glVertexAttrib4dARB = ?fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glVertexAttrib4dNV = ?fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glVertexAttrib4dv = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttrib4dvARB = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttrib4dvNV = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttrib4f = ?fn (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glVertexAttrib4fARB = ?fn (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glVertexAttrib4fNV = ?fn (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glVertexAttrib4fv = ?fn (index: GLuint, v: *const GLfloat) callconv(.C) void;
const glVertexAttrib4fvARB = ?fn (index: GLuint, v: *const GLfloat) callconv(.C) void;
const glVertexAttrib4fvNV = ?fn (index: GLuint, v: *const GLfloat) callconv(.C) void;
const glVertexAttrib4hNV = ?fn (index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) callconv(.C) void;
const glVertexAttrib4hvNV = ?fn (index: GLuint, v: *const GLhalfNV) callconv(.C) void;
const glVertexAttrib4iv = ?fn (index: GLuint, v: *const GLint) callconv(.C) void;
const glVertexAttrib4ivARB = ?fn (index: GLuint, v: *const GLint) callconv(.C) void;
const glVertexAttrib4s = ?fn (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) callconv(.C) void;
const glVertexAttrib4sARB = ?fn (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) callconv(.C) void;
const glVertexAttrib4sNV = ?fn (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) callconv(.C) void;
const glVertexAttrib4sv = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib4svARB = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib4svNV = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttrib4ubNV = ?fn (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) callconv(.C) void;
const glVertexAttrib4ubv = ?fn (index: GLuint, v: *const GLubyte) callconv(.C) void;
const glVertexAttrib4ubvARB = ?fn (index: GLuint, v: *const GLubyte) callconv(.C) void;
const glVertexAttrib4ubvNV = ?fn (index: GLuint, v: *const GLubyte) callconv(.C) void;
const glVertexAttrib4uiv = ?fn (index: GLuint, v: *const GLuint) callconv(.C) void;
const glVertexAttrib4uivARB = ?fn (index: GLuint, v: *const GLuint) callconv(.C) void;
const glVertexAttrib4usv = ?fn (index: GLuint, v: *const GLushort) callconv(.C) void;
const glVertexAttrib4usvARB = ?fn (index: GLuint, v: *const GLushort) callconv(.C) void;
const glVertexAttribArrayObjectATI = ?fn (index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint) callconv(.C) void;
const glVertexAttribBinding = ?fn (attribindex: GLuint, bindingindex: GLuint) callconv(.C) void;
const glVertexAttribDivisor = ?fn (index: GLuint, divisor: GLuint) callconv(.C) void;
const glVertexAttribDivisorARB = ?fn (index: GLuint, divisor: GLuint) callconv(.C) void;
const glVertexAttribFormat = ?fn (attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) callconv(.C) void;
const glVertexAttribFormatNV = ?fn (index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei) callconv(.C) void;
const glVertexAttribI1i = ?fn (index: GLuint, x: GLint) callconv(.C) void;
const glVertexAttribI1iEXT = ?fn (index: GLuint, x: GLint) callconv(.C) void;
const glVertexAttribI1iv = ?fn (index: GLuint, v: *const GLint) callconv(.C) void;
const glVertexAttribI1ivEXT = ?fn (index: GLuint, v: *const GLint) callconv(.C) void;
const glVertexAttribI1ui = ?fn (index: GLuint, x: GLuint) callconv(.C) void;
const glVertexAttribI1uiEXT = ?fn (index: GLuint, x: GLuint) callconv(.C) void;
const glVertexAttribI1uiv = ?fn (index: GLuint, v: *const GLuint) callconv(.C) void;
const glVertexAttribI1uivEXT = ?fn (index: GLuint, v: *const GLuint) callconv(.C) void;
const glVertexAttribI2i = ?fn (index: GLuint, x: GLint, y: GLint) callconv(.C) void;
const glVertexAttribI2iEXT = ?fn (index: GLuint, x: GLint, y: GLint) callconv(.C) void;
const glVertexAttribI2iv = ?fn (index: GLuint, v: *const GLint) callconv(.C) void;
const glVertexAttribI2ivEXT = ?fn (index: GLuint, v: *const GLint) callconv(.C) void;
const glVertexAttribI2ui = ?fn (index: GLuint, x: GLuint, y: GLuint) callconv(.C) void;
const glVertexAttribI2uiEXT = ?fn (index: GLuint, x: GLuint, y: GLuint) callconv(.C) void;
const glVertexAttribI2uiv = ?fn (index: GLuint, v: *const GLuint) callconv(.C) void;
const glVertexAttribI2uivEXT = ?fn (index: GLuint, v: *const GLuint) callconv(.C) void;
const glVertexAttribI3i = ?fn (index: GLuint, x: GLint, y: GLint, z: GLint) callconv(.C) void;
const glVertexAttribI3iEXT = ?fn (index: GLuint, x: GLint, y: GLint, z: GLint) callconv(.C) void;
const glVertexAttribI3iv = ?fn (index: GLuint, v: *const GLint) callconv(.C) void;
const glVertexAttribI3ivEXT = ?fn (index: GLuint, v: *const GLint) callconv(.C) void;
const glVertexAttribI3ui = ?fn (index: GLuint, x: GLuint, y: GLuint, z: GLuint) callconv(.C) void;
const glVertexAttribI3uiEXT = ?fn (index: GLuint, x: GLuint, y: GLuint, z: GLuint) callconv(.C) void;
const glVertexAttribI3uiv = ?fn (index: GLuint, v: *const GLuint) callconv(.C) void;
const glVertexAttribI3uivEXT = ?fn (index: GLuint, v: *const GLuint) callconv(.C) void;
const glVertexAttribI4bv = ?fn (index: GLuint, v: *const GLbyte) callconv(.C) void;
const glVertexAttribI4bvEXT = ?fn (index: GLuint, v: *const GLbyte) callconv(.C) void;
const glVertexAttribI4i = ?fn (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glVertexAttribI4iEXT = ?fn (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glVertexAttribI4iv = ?fn (index: GLuint, v: *const GLint) callconv(.C) void;
const glVertexAttribI4ivEXT = ?fn (index: GLuint, v: *const GLint) callconv(.C) void;
const glVertexAttribI4sv = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttribI4svEXT = ?fn (index: GLuint, v: *const GLshort) callconv(.C) void;
const glVertexAttribI4ubv = ?fn (index: GLuint, v: *const GLubyte) callconv(.C) void;
const glVertexAttribI4ubvEXT = ?fn (index: GLuint, v: *const GLubyte) callconv(.C) void;
const glVertexAttribI4ui = ?fn (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) callconv(.C) void;
const glVertexAttribI4uiEXT = ?fn (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) callconv(.C) void;
const glVertexAttribI4uiv = ?fn (index: GLuint, v: *const GLuint) callconv(.C) void;
const glVertexAttribI4uivEXT = ?fn (index: GLuint, v: *const GLuint) callconv(.C) void;
const glVertexAttribI4usv = ?fn (index: GLuint, v: *const GLushort) callconv(.C) void;
const glVertexAttribI4usvEXT = ?fn (index: GLuint, v: *const GLushort) callconv(.C) void;
const glVertexAttribIFormat = ?fn (attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) callconv(.C) void;
const glVertexAttribIFormatNV = ?fn (index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) callconv(.C) void;
const glVertexAttribIPointer = ?fn (index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glVertexAttribIPointerEXT = ?fn (index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glVertexAttribL1d = ?fn (index: GLuint, x: GLdouble) callconv(.C) void;
const glVertexAttribL1dEXT = ?fn (index: GLuint, x: GLdouble) callconv(.C) void;
const glVertexAttribL1dv = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttribL1dvEXT = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttribL1i64NV = ?fn (index: GLuint, x: GLint64EXT) callconv(.C) void;
const glVertexAttribL1i64vNV = ?fn (index: GLuint, v: *const GLint64EXT) callconv(.C) void;
const glVertexAttribL1ui64ARB = ?fn (index: GLuint, x: GLuint64EXT) callconv(.C) void;
const glVertexAttribL1ui64NV = ?fn (index: GLuint, x: GLuint64EXT) callconv(.C) void;
const glVertexAttribL1ui64vARB = ?fn (index: GLuint, v: *const GLuint64EXT) callconv(.C) void;
const glVertexAttribL1ui64vNV = ?fn (index: GLuint, v: *const GLuint64EXT) callconv(.C) void;
const glVertexAttribL2d = ?fn (index: GLuint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glVertexAttribL2dEXT = ?fn (index: GLuint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glVertexAttribL2dv = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttribL2dvEXT = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttribL2i64NV = ?fn (index: GLuint, x: GLint64EXT, y: GLint64EXT) callconv(.C) void;
const glVertexAttribL2i64vNV = ?fn (index: GLuint, v: *const GLint64EXT) callconv(.C) void;
const glVertexAttribL2ui64NV = ?fn (index: GLuint, x: GLuint64EXT, y: GLuint64EXT) callconv(.C) void;
const glVertexAttribL2ui64vNV = ?fn (index: GLuint, v: *const GLuint64EXT) callconv(.C) void;
const glVertexAttribL3d = ?fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glVertexAttribL3dEXT = ?fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glVertexAttribL3dv = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttribL3dvEXT = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttribL3i64NV = ?fn (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) callconv(.C) void;
const glVertexAttribL3i64vNV = ?fn (index: GLuint, v: *const GLint64EXT) callconv(.C) void;
const glVertexAttribL3ui64NV = ?fn (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) callconv(.C) void;
const glVertexAttribL3ui64vNV = ?fn (index: GLuint, v: *const GLuint64EXT) callconv(.C) void;
const glVertexAttribL4d = ?fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glVertexAttribL4dEXT = ?fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glVertexAttribL4dv = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttribL4dvEXT = ?fn (index: GLuint, v: *const GLdouble) callconv(.C) void;
const glVertexAttribL4i64NV = ?fn (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) callconv(.C) void;
const glVertexAttribL4i64vNV = ?fn (index: GLuint, v: *const GLint64EXT) callconv(.C) void;
const glVertexAttribL4ui64NV = ?fn (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) callconv(.C) void;
const glVertexAttribL4ui64vNV = ?fn (index: GLuint, v: *const GLuint64EXT) callconv(.C) void;
const glVertexAttribLFormat = ?fn (attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) callconv(.C) void;
const glVertexAttribLFormatNV = ?fn (index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) callconv(.C) void;
const glVertexAttribLPointer = ?fn (index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glVertexAttribLPointerEXT = ?fn (index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glVertexAttribP1ui = ?fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) callconv(.C) void;
const glVertexAttribP1uiv = ?fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint) callconv(.C) void;
const glVertexAttribP2ui = ?fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) callconv(.C) void;
const glVertexAttribP2uiv = ?fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint) callconv(.C) void;
const glVertexAttribP3ui = ?fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) callconv(.C) void;
const glVertexAttribP3uiv = ?fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint) callconv(.C) void;
const glVertexAttribP4ui = ?fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) callconv(.C) void;
const glVertexAttribP4uiv = ?fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint) callconv(.C) void;
const glVertexAttribParameteriAMD = ?fn (index: GLuint, pname: GLenum, param: GLint) callconv(.C) void;
const glVertexAttribPointer = ?fn (index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glVertexAttribPointerARB = ?fn (index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glVertexAttribPointerNV = ?fn (index: GLuint, fsize: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glVertexAttribs1dvNV = ?fn (index: GLuint, count: GLsizei, v: *const GLdouble) callconv(.C) void;
const glVertexAttribs1fvNV = ?fn (index: GLuint, count: GLsizei, v: *const GLfloat) callconv(.C) void;
const glVertexAttribs1hvNV = ?fn (index: GLuint, n: GLsizei, v: *const GLhalfNV) callconv(.C) void;
const glVertexAttribs1svNV = ?fn (index: GLuint, count: GLsizei, v: *const GLshort) callconv(.C) void;
const glVertexAttribs2dvNV = ?fn (index: GLuint, count: GLsizei, v: *const GLdouble) callconv(.C) void;
const glVertexAttribs2fvNV = ?fn (index: GLuint, count: GLsizei, v: *const GLfloat) callconv(.C) void;
const glVertexAttribs2hvNV = ?fn (index: GLuint, n: GLsizei, v: *const GLhalfNV) callconv(.C) void;
const glVertexAttribs2svNV = ?fn (index: GLuint, count: GLsizei, v: *const GLshort) callconv(.C) void;
const glVertexAttribs3dvNV = ?fn (index: GLuint, count: GLsizei, v: *const GLdouble) callconv(.C) void;
const glVertexAttribs3fvNV = ?fn (index: GLuint, count: GLsizei, v: *const GLfloat) callconv(.C) void;
const glVertexAttribs3hvNV = ?fn (index: GLuint, n: GLsizei, v: *const GLhalfNV) callconv(.C) void;
const glVertexAttribs3svNV = ?fn (index: GLuint, count: GLsizei, v: *const GLshort) callconv(.C) void;
const glVertexAttribs4dvNV = ?fn (index: GLuint, count: GLsizei, v: *const GLdouble) callconv(.C) void;
const glVertexAttribs4fvNV = ?fn (index: GLuint, count: GLsizei, v: *const GLfloat) callconv(.C) void;
const glVertexAttribs4hvNV = ?fn (index: GLuint, n: GLsizei, v: *const GLhalfNV) callconv(.C) void;
const glVertexAttribs4svNV = ?fn (index: GLuint, count: GLsizei, v: *const GLshort) callconv(.C) void;
const glVertexAttribs4ubvNV = ?fn (index: GLuint, count: GLsizei, v: *const GLubyte) callconv(.C) void;
const glVertexBindingDivisor = ?fn (bindingindex: GLuint, divisor: GLuint) callconv(.C) void;
const glVertexBlendARB = ?fn (count: GLint) callconv(.C) void;
const glVertexBlendEnvfATI = ?fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glVertexBlendEnviATI = ?fn (pname: GLenum, param: GLint) callconv(.C) void;
const glVertexFormatNV = ?fn (size: GLint, type_: GLenum, stride: GLsizei) callconv(.C) void;
const glVertexPointerEXT = ?fn (size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *const c_void) callconv(.C) void;
const glVertexPointerListIBM = ?fn (size: GLint, type_: GLenum, stride: GLint, pointer: *const *const c_void, ptrstride: GLint) callconv(.C) void;
const glVertexPointervINTEL = ?fn (size: GLint, type_: GLenum, pointer: *const *const c_void) callconv(.C) void;
const glVertexStream1dATI = ?fn (stream: GLenum, x: GLdouble) callconv(.C) void;
const glVertexStream1dvATI = ?fn (stream: GLenum, coords: *const GLdouble) callconv(.C) void;
const glVertexStream1fATI = ?fn (stream: GLenum, x: GLfloat) callconv(.C) void;
const glVertexStream1fvATI = ?fn (stream: GLenum, coords: *const GLfloat) callconv(.C) void;
const glVertexStream1iATI = ?fn (stream: GLenum, x: GLint) callconv(.C) void;
const glVertexStream1ivATI = ?fn (stream: GLenum, coords: *const GLint) callconv(.C) void;
const glVertexStream1sATI = ?fn (stream: GLenum, x: GLshort) callconv(.C) void;
const glVertexStream1svATI = ?fn (stream: GLenum, coords: *const GLshort) callconv(.C) void;
const glVertexStream2dATI = ?fn (stream: GLenum, x: GLdouble, y: GLdouble) callconv(.C) void;
const glVertexStream2dvATI = ?fn (stream: GLenum, coords: *const GLdouble) callconv(.C) void;
const glVertexStream2fATI = ?fn (stream: GLenum, x: GLfloat, y: GLfloat) callconv(.C) void;
const glVertexStream2fvATI = ?fn (stream: GLenum, coords: *const GLfloat) callconv(.C) void;
const glVertexStream2iATI = ?fn (stream: GLenum, x: GLint, y: GLint) callconv(.C) void;
const glVertexStream2ivATI = ?fn (stream: GLenum, coords: *const GLint) callconv(.C) void;
const glVertexStream2sATI = ?fn (stream: GLenum, x: GLshort, y: GLshort) callconv(.C) void;
const glVertexStream2svATI = ?fn (stream: GLenum, coords: *const GLshort) callconv(.C) void;
const glVertexStream3dATI = ?fn (stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glVertexStream3dvATI = ?fn (stream: GLenum, coords: *const GLdouble) callconv(.C) void;
const glVertexStream3fATI = ?fn (stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glVertexStream3fvATI = ?fn (stream: GLenum, coords: *const GLfloat) callconv(.C) void;
const glVertexStream3iATI = ?fn (stream: GLenum, x: GLint, y: GLint, z: GLint) callconv(.C) void;
const glVertexStream3ivATI = ?fn (stream: GLenum, coords: *const GLint) callconv(.C) void;
const glVertexStream3sATI = ?fn (stream: GLenum, x: GLshort, y: GLshort, z: GLshort) callconv(.C) void;
const glVertexStream3svATI = ?fn (stream: GLenum, coords: *const GLshort) callconv(.C) void;
const glVertexStream4dATI = ?fn (stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glVertexStream4dvATI = ?fn (stream: GLenum, coords: *const GLdouble) callconv(.C) void;
const glVertexStream4fATI = ?fn (stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glVertexStream4fvATI = ?fn (stream: GLenum, coords: *const GLfloat) callconv(.C) void;
const glVertexStream4iATI = ?fn (stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glVertexStream4ivATI = ?fn (stream: GLenum, coords: *const GLint) callconv(.C) void;
const glVertexStream4sATI = ?fn (stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) callconv(.C) void;
const glVertexStream4svATI = ?fn (stream: GLenum, coords: *const GLshort) callconv(.C) void;
const glVertexWeightPointerEXT = ?fn (size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glVertexWeightfEXT = ?fn (weight: GLfloat) callconv(.C) void;
const glVertexWeightfvEXT = ?fn (weight: *const GLfloat) callconv(.C) void;
const glVertexWeighthNV = ?fn (weight: GLhalfNV) callconv(.C) void;
const glVertexWeighthvNV = ?fn (weight: *const GLhalfNV) callconv(.C) void;
const glVideoCaptureNV = ?fn (video_capture_slot: GLuint, sequence_num: *GLuint, capture_time: *GLuint64EXT) callconv(.C) GLenum;
const glVideoCaptureStreamParameterdvNV = ?fn (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *const GLdouble) callconv(.C) void;
const glVideoCaptureStreamParameterfvNV = ?fn (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *const GLfloat) callconv(.C) void;
const glVideoCaptureStreamParameterivNV = ?fn (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *const GLint) callconv(.C) void;
const glViewport = ?fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glViewportArrayv = ?fn (first: GLuint, count: GLsizei, v: *const GLfloat) callconv(.C) void;
const glViewportIndexedf = ?fn (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) callconv(.C) void;
const glViewportIndexedfv = ?fn (index: GLuint, v: *const GLfloat) callconv(.C) void;
const glViewportPositionWScaleNV = ?fn (index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) callconv(.C) void;
const glViewportSwizzleNV = ?fn (index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum) callconv(.C) void;
const glWaitSemaphoreEXT = ?fn (semaphore: GLuint, numBufferBarriers: GLuint, buffers: *const GLuint, numTextureBarriers: GLuint, textures: *const GLuint, srcLayouts: *const GLenum) callconv(.C) void;
const glWaitSemaphoreui64NVX = ?fn (waitGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: *const GLuint, fenceValueArray: *const GLuint64) callconv(.C) void;
const glWaitSync = ?fn (sync: GLsync, flags: GLbitfield, timeout: GLuint64) callconv(.C) void;
const glWaitVkSemaphoreNV = ?fn (vkSemaphore: GLuint64) callconv(.C) void;
const glWeightPathsNV = ?fn (resultPath: GLuint, numPaths: GLsizei, paths: *const GLuint, weights: *const GLfloat) callconv(.C) void;
const glWeightPointerARB = ?fn (size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) callconv(.C) void;
const glWeightbvARB = ?fn (size: GLint, weights: *const GLbyte) callconv(.C) void;
const glWeightdvARB = ?fn (size: GLint, weights: *const GLdouble) callconv(.C) void;
const glWeightfvARB = ?fn (size: GLint, weights: *const GLfloat) callconv(.C) void;
const glWeightivARB = ?fn (size: GLint, weights: *const GLint) callconv(.C) void;
const glWeightsvARB = ?fn (size: GLint, weights: *const GLshort) callconv(.C) void;
const glWeightubvARB = ?fn (size: GLint, weights: *const GLubyte) callconv(.C) void;
const glWeightuivARB = ?fn (size: GLint, weights: *const GLuint) callconv(.C) void;
const glWeightusvARB = ?fn (size: GLint, weights: *const GLushort) callconv(.C) void;
const glWindowPos2dARB = ?fn (x: GLdouble, y: GLdouble) callconv(.C) void;
const glWindowPos2dMESA = ?fn (x: GLdouble, y: GLdouble) callconv(.C) void;
const glWindowPos2dvARB = ?fn (v: *const GLdouble) callconv(.C) void;
const glWindowPos2dvMESA = ?fn (v: *const GLdouble) callconv(.C) void;
const glWindowPos2fARB = ?fn (x: GLfloat, y: GLfloat) callconv(.C) void;
const glWindowPos2fMESA = ?fn (x: GLfloat, y: GLfloat) callconv(.C) void;
const glWindowPos2fvARB = ?fn (v: *const GLfloat) callconv(.C) void;
const glWindowPos2fvMESA = ?fn (v: *const GLfloat) callconv(.C) void;
const glWindowPos2iARB = ?fn (x: GLint, y: GLint) callconv(.C) void;
const glWindowPos2iMESA = ?fn (x: GLint, y: GLint) callconv(.C) void;
const glWindowPos2ivARB = ?fn (v: *const GLint) callconv(.C) void;
const glWindowPos2ivMESA = ?fn (v: *const GLint) callconv(.C) void;
const glWindowPos2sARB = ?fn (x: GLshort, y: GLshort) callconv(.C) void;
const glWindowPos2sMESA = ?fn (x: GLshort, y: GLshort) callconv(.C) void;
const glWindowPos2svARB = ?fn (v: *const GLshort) callconv(.C) void;
const glWindowPos2svMESA = ?fn (v: *const GLshort) callconv(.C) void;
const glWindowPos3dARB = ?fn (x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glWindowPos3dMESA = ?fn (x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glWindowPos3dvARB = ?fn (v: *const GLdouble) callconv(.C) void;
const glWindowPos3dvMESA = ?fn (v: *const GLdouble) callconv(.C) void;
const glWindowPos3fARB = ?fn (x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glWindowPos3fMESA = ?fn (x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glWindowPos3fvARB = ?fn (v: *const GLfloat) callconv(.C) void;
const glWindowPos3fvMESA = ?fn (v: *const GLfloat) callconv(.C) void;
const glWindowPos3iARB = ?fn (x: GLint, y: GLint, z: GLint) callconv(.C) void;
const glWindowPos3iMESA = ?fn (x: GLint, y: GLint, z: GLint) callconv(.C) void;
const glWindowPos3ivARB = ?fn (v: *const GLint) callconv(.C) void;
const glWindowPos3ivMESA = ?fn (v: *const GLint) callconv(.C) void;
const glWindowPos3sARB = ?fn (x: GLshort, y: GLshort, z: GLshort) callconv(.C) void;
const glWindowPos3sMESA = ?fn (x: GLshort, y: GLshort, z: GLshort) callconv(.C) void;
const glWindowPos3svARB = ?fn (v: *const GLshort) callconv(.C) void;
const glWindowPos3svMESA = ?fn (v: *const GLshort) callconv(.C) void;
const glWindowPos4dMESA = ?fn (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glWindowPos4dvMESA = ?fn (v: *const GLdouble) callconv(.C) void;
const glWindowPos4fMESA = ?fn (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glWindowPos4fvMESA = ?fn (v: *const GLfloat) callconv(.C) void;
const glWindowPos4iMESA = ?fn (x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glWindowPos4ivMESA = ?fn (v: *const GLint) callconv(.C) void;
const glWindowPos4sMESA = ?fn (x: GLshort, y: GLshort, z: GLshort, w: GLshort) callconv(.C) void;
const glWindowPos4svMESA = ?fn (v: *const GLshort) callconv(.C) void;
const glWindowRectanglesEXT = ?fn (mode: GLenum, count: GLsizei, box: *const GLint) callconv(.C) void;
const glWriteMaskEXT = ?fn (res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) callconv(.C) void;

pub const GL_1PASS_EXT: u32 = 0x80A1;
pub const GL_1PASS_SGIS: u32 = 0x80A1;
pub const GL_2PASS_0_EXT: u32 = 0x80A2;
pub const GL_2PASS_0_SGIS: u32 = 0x80A2;
pub const GL_2PASS_1_EXT: u32 = 0x80A3;
pub const GL_2PASS_1_SGIS: u32 = 0x80A3;
pub const GL_2X_BIT_ATI: u32 = 0x00000001;
pub const GL_422_AVERAGE_EXT: u32 = 0x80CE;
pub const GL_422_EXT: u32 = 0x80CC;
pub const GL_422_REV_AVERAGE_EXT: u32 = 0x80CF;
pub const GL_422_REV_EXT: u32 = 0x80CD;
pub const GL_4PASS_0_EXT: u32 = 0x80A4;
pub const GL_4PASS_0_SGIS: u32 = 0x80A4;
pub const GL_4PASS_1_EXT: u32 = 0x80A5;
pub const GL_4PASS_1_SGIS: u32 = 0x80A5;
pub const GL_4PASS_2_EXT: u32 = 0x80A6;
pub const GL_4PASS_2_SGIS: u32 = 0x80A6;
pub const GL_4PASS_3_EXT: u32 = 0x80A7;
pub const GL_4PASS_3_SGIS: u32 = 0x80A7;
pub const GL_4X_BIT_ATI: u32 = 0x00000002;
pub const GL_8X_BIT_ATI: u32 = 0x00000004;
pub const GL_ABGR_EXT: u32 = 0x8000;
pub const GL_ACCUM_ADJACENT_PAIRS_NV: u32 = 0x90AD;
pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS: u32 = 0x92D9;
pub const GL_ACTIVE_ATTRIBUTES: u32 = 0x8B89;
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: u32 = 0x8B8A;
pub const GL_ACTIVE_PROGRAM: u32 = 0x8259;
pub const GL_ACTIVE_PROGRAM_EXT: u32 = 0x8B8D;
pub const GL_ACTIVE_RESOURCES: u32 = 0x92F5;
pub const GL_ACTIVE_STENCIL_FACE_EXT: u32 = 0x8911;
pub const GL_ACTIVE_SUBROUTINES: u32 = 0x8DE5;
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH: u32 = 0x8E48;
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS: u32 = 0x8DE6;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS: u32 = 0x8E47;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH: u32 = 0x8E49;
pub const GL_ACTIVE_TEXTURE: u32 = 0x84E0;
pub const GL_ACTIVE_TEXTURE_ARB: u32 = 0x84E0;
pub const GL_ACTIVE_UNIFORMS: u32 = 0x8B86;
pub const GL_ACTIVE_UNIFORM_BLOCKS: u32 = 0x8A36;
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: u32 = 0x8A35;
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH: u32 = 0x8B87;
pub const GL_ACTIVE_VARIABLES: u32 = 0x9305;
pub const GL_ACTIVE_VARYINGS_NV: u32 = 0x8C81;
pub const GL_ACTIVE_VARYING_MAX_LENGTH_NV: u32 = 0x8C82;
pub const GL_ACTIVE_VERTEX_UNITS_ARB: u32 = 0x86A5;
pub const GL_ADD_ATI: u32 = 0x8963;
pub const GL_ADD_SIGNED_ARB: u32 = 0x8574;
pub const GL_ADD_SIGNED_EXT: u32 = 0x8574;
pub const GL_ADJACENT_PAIRS_NV: u32 = 0x90AE;
pub const GL_AFFINE_2D_NV: u32 = 0x9092;
pub const GL_AFFINE_3D_NV: u32 = 0x9094;
pub const GL_ALIASED_LINE_WIDTH_RANGE: u32 = 0x846E;
pub const GL_ALLOW_DRAW_FRG_HINT_PGI: u32 = 0x1A210;
pub const GL_ALLOW_DRAW_MEM_HINT_PGI: u32 = 0x1A211;
pub const GL_ALLOW_DRAW_OBJ_HINT_PGI: u32 = 0x1A20E;
pub const GL_ALLOW_DRAW_WIN_HINT_PGI: u32 = 0x1A20F;
pub const GL_ALL_BARRIER_BITS: u32 = 0xFFFFFFFF;
pub const GL_ALL_BARRIER_BITS_EXT: u32 = 0xFFFFFFFF;
pub const GL_ALL_COMPLETED_NV: u32 = 0x84F2;
pub const GL_ALL_PIXELS_AMD: u32 = 0xFFFFFFFF;
pub const GL_ALL_SHADER_BITS: u32 = 0xFFFFFFFF;
pub const GL_ALL_STATIC_DATA_IBM: u32 = 103060;
pub const GL_ALPHA: u32 = 0x1906;
pub const GL_ALPHA12_EXT: u32 = 0x803D;
pub const GL_ALPHA16F_ARB: u32 = 0x881C;
pub const GL_ALPHA16I_EXT: u32 = 0x8D8A;
pub const GL_ALPHA16UI_EXT: u32 = 0x8D78;
pub const GL_ALPHA16_EXT: u32 = 0x803E;
pub const GL_ALPHA16_SNORM: u32 = 0x9018;
pub const GL_ALPHA32F_ARB: u32 = 0x8816;
pub const GL_ALPHA32I_EXT: u32 = 0x8D84;
pub const GL_ALPHA32UI_EXT: u32 = 0x8D72;
pub const GL_ALPHA4_EXT: u32 = 0x803B;
pub const GL_ALPHA8I_EXT: u32 = 0x8D90;
pub const GL_ALPHA8UI_EXT: u32 = 0x8D7E;
pub const GL_ALPHA8_EXT: u32 = 0x803C;
pub const GL_ALPHA8_SNORM: u32 = 0x9014;
pub const GL_ALPHA_FLOAT16_APPLE: u32 = 0x881C;
pub const GL_ALPHA_FLOAT16_ATI: u32 = 0x881C;
pub const GL_ALPHA_FLOAT32_APPLE: u32 = 0x8816;
pub const GL_ALPHA_FLOAT32_ATI: u32 = 0x8816;
pub const GL_ALPHA_INTEGER_EXT: u32 = 0x8D97;
pub const GL_ALPHA_MAX_CLAMP_INGR: u32 = 0x8567;
pub const GL_ALPHA_MAX_SGIX: u32 = 0x8321;
pub const GL_ALPHA_MIN_CLAMP_INGR: u32 = 0x8563;
pub const GL_ALPHA_MIN_SGIX: u32 = 0x8320;
pub const GL_ALPHA_REF_COMMAND_NV: u32 = 0x000F;
pub const GL_ALPHA_SNORM: u32 = 0x9010;
pub const GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV: u32 = 0x934D;
pub const GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV: u32 = 0x934F;
pub const GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV: u32 = 0x934E;
pub const GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV: u32 = 0x92BF;
pub const GL_ALREADY_SIGNALED: u32 = 0x911A;
pub const GL_ALWAYS: u32 = 0x0207;
pub const GL_ALWAYS_FAST_HINT_PGI: u32 = 0x1A20C;
pub const GL_ALWAYS_SOFT_HINT_PGI: u32 = 0x1A20D;
pub const GL_AND: u32 = 0x1501;
pub const GL_AND_INVERTED: u32 = 0x1504;
pub const GL_AND_REVERSE: u32 = 0x1502;
pub const GL_ANY_SAMPLES_PASSED: u32 = 0x8C2F;
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE: u32 = 0x8D6A;
pub const GL_ARC_TO_NV: u32 = 0xFE;
pub const GL_ARRAY_BUFFER: u32 = 0x8892;
pub const GL_ARRAY_BUFFER_ARB: u32 = 0x8892;
pub const GL_ARRAY_BUFFER_BINDING: u32 = 0x8894;
pub const GL_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8894;
pub const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT: u32 = 0x81A9;
pub const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT: u32 = 0x81A8;
pub const GL_ARRAY_OBJECT_BUFFER_ATI: u32 = 0x8766;
pub const GL_ARRAY_OBJECT_OFFSET_ATI: u32 = 0x8767;
pub const GL_ARRAY_SIZE: u32 = 0x92FB;
pub const GL_ARRAY_STRIDE: u32 = 0x92FE;
pub const GL_ASYNC_DRAW_PIXELS_SGIX: u32 = 0x835D;
pub const GL_ASYNC_HISTOGRAM_SGIX: u32 = 0x832C;
pub const GL_ASYNC_MARKER_SGIX: u32 = 0x8329;
pub const GL_ASYNC_READ_PIXELS_SGIX: u32 = 0x835E;
pub const GL_ASYNC_TEX_IMAGE_SGIX: u32 = 0x835C;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT: u32 = 0x00001000;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT: u32 = 0x00001000;
pub const GL_ATOMIC_COUNTER_BUFFER: u32 = 0x92C0;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS: u32 = 0x92C5;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES: u32 = 0x92C6;
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING: u32 = 0x92C1;
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE: u32 = 0x92C4;
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX: u32 = 0x9301;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER: u32 = 0x90ED;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER: u32 = 0x92CB;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER: u32 = 0x92CA;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV: u32 = 0x959E;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV: u32 = 0x959F;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 0x92C8;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 0x92C9;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER: u32 = 0x92C7;
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE: u32 = 0x92C3;
pub const GL_ATOMIC_COUNTER_BUFFER_START: u32 = 0x92C2;
pub const GL_ATTACHED_MEMORY_OBJECT_NV: u32 = 0x95A4;
pub const GL_ATTACHED_MEMORY_OFFSET_NV: u32 = 0x95A5;
pub const GL_ATTACHED_SHADERS: u32 = 0x8B85;
pub const GL_ATTENUATION_EXT: u32 = 0x834D;
pub const GL_ATTRIBUTE_ADDRESS_COMMAND_NV: u32 = 0x0009;
pub const GL_ATTRIB_ARRAY_POINTER_NV: u32 = 0x8645;
pub const GL_ATTRIB_ARRAY_SIZE_NV: u32 = 0x8623;
pub const GL_ATTRIB_ARRAY_STRIDE_NV: u32 = 0x8624;
pub const GL_ATTRIB_ARRAY_TYPE_NV: u32 = 0x8625;
pub const GL_AUTO_GENERATE_MIPMAP: u32 = 0x8295;
pub const GL_AUX_DEPTH_STENCIL_APPLE: u32 = 0x8A14;
pub const GL_AVERAGE_EXT: u32 = 0x8335;
pub const GL_AVERAGE_HP: u32 = 0x8160;
pub const GL_BACK: u32 = 0x0405;
pub const GL_BACK_LEFT: u32 = 0x0402;
pub const GL_BACK_NORMALS_HINT_PGI: u32 = 0x1A223;
pub const GL_BACK_PRIMARY_COLOR_NV: u32 = 0x8C77;
pub const GL_BACK_RIGHT: u32 = 0x0403;
pub const GL_BACK_SECONDARY_COLOR_NV: u32 = 0x8C78;
pub const GL_BEVEL_NV: u32 = 0x90A6;
pub const GL_BGR: u32 = 0x80E0;
pub const GL_BGRA: u32 = 0x80E1;
pub const GL_BGRA_EXT: u32 = 0x80E1;
pub const GL_BGRA_INTEGER: u32 = 0x8D9B;
pub const GL_BGRA_INTEGER_EXT: u32 = 0x8D9B;
pub const GL_BGR_EXT: u32 = 0x80E0;
pub const GL_BGR_INTEGER: u32 = 0x8D9A;
pub const GL_BGR_INTEGER_EXT: u32 = 0x8D9A;
pub const GL_BIAS_BIT_ATI: u32 = 0x00000008;
pub const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV: u32 = 0x8541;
pub const GL_BINORMAL_ARRAY_EXT: u32 = 0x843A;
pub const GL_BINORMAL_ARRAY_POINTER_EXT: u32 = 0x8443;
pub const GL_BINORMAL_ARRAY_STRIDE_EXT: u32 = 0x8441;
pub const GL_BINORMAL_ARRAY_TYPE_EXT: u32 = 0x8440;
pub const GL_BLACKHOLE_RENDER_INTEL: u32 = 0x83FC;
pub const GL_BLEND: u32 = 0x0BE2;
pub const GL_BLEND_ADVANCED_COHERENT_KHR: u32 = 0x9285;
pub const GL_BLEND_ADVANCED_COHERENT_NV: u32 = 0x9285;
pub const GL_BLEND_COLOR: u32 = 0x8005;
pub const GL_BLEND_COLOR_COMMAND_NV: u32 = 0x000B;
pub const GL_BLEND_COLOR_EXT: u32 = 0x8005;
pub const GL_BLEND_DST: u32 = 0x0BE0;
pub const GL_BLEND_DST_ALPHA: u32 = 0x80CA;
pub const GL_BLEND_DST_ALPHA_EXT: u32 = 0x80CA;
pub const GL_BLEND_DST_RGB: u32 = 0x80C8;
pub const GL_BLEND_DST_RGB_EXT: u32 = 0x80C8;
pub const GL_BLEND_EQUATION: u32 = 0x8009;
pub const GL_BLEND_EQUATION_ALPHA: u32 = 0x883D;
pub const GL_BLEND_EQUATION_ALPHA_EXT: u32 = 0x883D;
pub const GL_BLEND_EQUATION_EXT: u32 = 0x8009;
pub const GL_BLEND_EQUATION_RGB: u32 = 0x8009;
pub const GL_BLEND_EQUATION_RGB_EXT: u32 = 0x8009;
pub const GL_BLEND_OVERLAP_NV: u32 = 0x9281;
pub const GL_BLEND_PREMULTIPLIED_SRC_NV: u32 = 0x9280;
pub const GL_BLEND_SRC: u32 = 0x0BE1;
pub const GL_BLEND_SRC_ALPHA: u32 = 0x80CB;
pub const GL_BLEND_SRC_ALPHA_EXT: u32 = 0x80CB;
pub const GL_BLEND_SRC_RGB: u32 = 0x80C9;
pub const GL_BLEND_SRC_RGB_EXT: u32 = 0x80C9;
pub const GL_BLOCK_INDEX: u32 = 0x92FD;
pub const GL_BLUE: u32 = 0x1905;
pub const GL_BLUE_BIT_ATI: u32 = 0x00000004;
pub const GL_BLUE_INTEGER: u32 = 0x8D96;
pub const GL_BLUE_INTEGER_EXT: u32 = 0x8D96;
pub const GL_BLUE_MAX_CLAMP_INGR: u32 = 0x8566;
pub const GL_BLUE_MIN_CLAMP_INGR: u32 = 0x8562;
pub const GL_BLUE_NV: u32 = 0x1905;
pub const GL_BOLD_BIT_NV: u32 = 0x01;
pub const GL_BOOL: u32 = 0x8B56;
pub const GL_BOOL_ARB: u32 = 0x8B56;
pub const GL_BOOL_VEC2: u32 = 0x8B57;
pub const GL_BOOL_VEC2_ARB: u32 = 0x8B57;
pub const GL_BOOL_VEC3: u32 = 0x8B58;
pub const GL_BOOL_VEC3_ARB: u32 = 0x8B58;
pub const GL_BOOL_VEC4: u32 = 0x8B59;
pub const GL_BOOL_VEC4_ARB: u32 = 0x8B59;
pub const GL_BOUNDING_BOX_NV: u32 = 0x908D;
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV: u32 = 0x909C;
pub const GL_BUFFER: u32 = 0x82E0;
pub const GL_BUFFER_ACCESS: u32 = 0x88BB;
pub const GL_BUFFER_ACCESS_ARB: u32 = 0x88BB;
pub const GL_BUFFER_ACCESS_FLAGS: u32 = 0x911F;
pub const GL_BUFFER_BINDING: u32 = 0x9302;
pub const GL_BUFFER_DATA_SIZE: u32 = 0x9303;
pub const GL_BUFFER_FLUSHING_UNMAP_APPLE: u32 = 0x8A13;
pub const GL_BUFFER_GPU_ADDRESS_NV: u32 = 0x8F1D;
pub const GL_BUFFER_IMMUTABLE_STORAGE: u32 = 0x821F;
pub const GL_BUFFER_MAPPED: u32 = 0x88BC;
pub const GL_BUFFER_MAPPED_ARB: u32 = 0x88BC;
pub const GL_BUFFER_MAP_LENGTH: u32 = 0x9120;
pub const GL_BUFFER_MAP_OFFSET: u32 = 0x9121;
pub const GL_BUFFER_MAP_POINTER: u32 = 0x88BD;
pub const GL_BUFFER_MAP_POINTER_ARB: u32 = 0x88BD;
pub const GL_BUFFER_OBJECT_APPLE: u32 = 0x85B3;
pub const GL_BUFFER_OBJECT_EXT: u32 = 0x9151;
pub const GL_BUFFER_SERIALIZED_MODIFY_APPLE: u32 = 0x8A12;
pub const GL_BUFFER_SIZE: u32 = 0x8764;
pub const GL_BUFFER_SIZE_ARB: u32 = 0x8764;
pub const GL_BUFFER_STORAGE_FLAGS: u32 = 0x8220;
pub const GL_BUFFER_UPDATE_BARRIER_BIT: u32 = 0x00000200;
pub const GL_BUFFER_UPDATE_BARRIER_BIT_EXT: u32 = 0x00000200;
pub const GL_BUFFER_USAGE: u32 = 0x8765;
pub const GL_BUFFER_USAGE_ARB: u32 = 0x8765;
pub const GL_BUFFER_VARIABLE: u32 = 0x92E5;
pub const GL_BUMP_ENVMAP_ATI: u32 = 0x877B;
pub const GL_BUMP_NUM_TEX_UNITS_ATI: u32 = 0x8777;
pub const GL_BUMP_ROT_MATRIX_ATI: u32 = 0x8775;
pub const GL_BUMP_ROT_MATRIX_SIZE_ATI: u32 = 0x8776;
pub const GL_BUMP_TARGET_ATI: u32 = 0x877C;
pub const GL_BUMP_TEX_UNITS_ATI: u32 = 0x8778;
pub const GL_BYTE: u32 = 0x1400;
pub const GL_CALLIGRAPHIC_FRAGMENT_SGIX: u32 = 0x8183;
pub const GL_CAVEAT_SUPPORT: u32 = 0x82B8;
pub const GL_CCW: u32 = 0x0901;
pub const GL_CIRCULAR_CCW_ARC_TO_NV: u32 = 0xF8;
pub const GL_CIRCULAR_CW_ARC_TO_NV: u32 = 0xFA;
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV: u32 = 0xFC;
pub const GL_CLAMP_FRAGMENT_COLOR_ARB: u32 = 0x891B;
pub const GL_CLAMP_READ_COLOR: u32 = 0x891C;
pub const GL_CLAMP_READ_COLOR_ARB: u32 = 0x891C;
pub const GL_CLAMP_TO_BORDER: u32 = 0x812D;
pub const GL_CLAMP_TO_BORDER_ARB: u32 = 0x812D;
pub const GL_CLAMP_TO_BORDER_SGIS: u32 = 0x812D;
pub const GL_CLAMP_TO_EDGE: u32 = 0x812F;
pub const GL_CLAMP_TO_EDGE_SGIS: u32 = 0x812F;
pub const GL_CLAMP_VERTEX_COLOR_ARB: u32 = 0x891A;
pub const GL_CLEAR: u32 = 0x1500;
pub const GL_CLEAR_BUFFER: u32 = 0x82B4;
pub const GL_CLEAR_TEXTURE: u32 = 0x9365;
pub const GL_CLIENT_ACTIVE_TEXTURE_ARB: u32 = 0x84E1;
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT: u32 = 0x00004000;
pub const GL_CLIENT_STORAGE_BIT: u32 = 0x0200;
pub const GL_CLIPPING_INPUT_PRIMITIVES: u32 = 0x82F6;
pub const GL_CLIPPING_INPUT_PRIMITIVES_ARB: u32 = 0x82F6;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES: u32 = 0x82F7;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB: u32 = 0x82F7;
pub const GL_CLIP_DEPTH_MODE: u32 = 0x935D;
pub const GL_CLIP_DISTANCE0: u32 = 0x3000;
pub const GL_CLIP_DISTANCE1: u32 = 0x3001;
pub const GL_CLIP_DISTANCE2: u32 = 0x3002;
pub const GL_CLIP_DISTANCE3: u32 = 0x3003;
pub const GL_CLIP_DISTANCE4: u32 = 0x3004;
pub const GL_CLIP_DISTANCE5: u32 = 0x3005;
pub const GL_CLIP_DISTANCE6: u32 = 0x3006;
pub const GL_CLIP_DISTANCE7: u32 = 0x3007;
pub const GL_CLIP_DISTANCE_NV: u32 = 0x8C7A;
pub const GL_CLIP_FAR_HINT_PGI: u32 = 0x1A221;
pub const GL_CLIP_NEAR_HINT_PGI: u32 = 0x1A220;
pub const GL_CLIP_ORIGIN: u32 = 0x935C;
pub const GL_CLIP_VOLUME_CLIPPING_HINT_EXT: u32 = 0x80F0;
pub const GL_CLOSE_PATH_NV: u32 = 0x00;
pub const GL_CMYKA_EXT: u32 = 0x800D;
pub const GL_CMYK_EXT: u32 = 0x800C;
pub const GL_CND0_ATI: u32 = 0x896B;
pub const GL_CND_ATI: u32 = 0x896A;
pub const GL_COLOR: u32 = 0x1800;
pub const GL_COLOR3_BIT_PGI: u32 = 0x00010000;
pub const GL_COLOR4_BIT_PGI: u32 = 0x00020000;
pub const GL_COLORBURN_KHR: u32 = 0x929A;
pub const GL_COLORBURN_NV: u32 = 0x929A;
pub const GL_COLORDODGE_KHR: u32 = 0x9299;
pub const GL_COLORDODGE_NV: u32 = 0x9299;
pub const GL_COLOR_ALPHA_PAIRING_ATI: u32 = 0x8975;
pub const GL_COLOR_ARRAY_ADDRESS_NV: u32 = 0x8F23;
pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8898;
pub const GL_COLOR_ARRAY_COUNT_EXT: u32 = 0x8084;
pub const GL_COLOR_ARRAY_EXT: u32 = 0x8076;
pub const GL_COLOR_ARRAY_LENGTH_NV: u32 = 0x8F2D;
pub const GL_COLOR_ARRAY_LIST_IBM: u32 = 103072;
pub const GL_COLOR_ARRAY_LIST_STRIDE_IBM: u32 = 103082;
pub const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL: u32 = 0x83F7;
pub const GL_COLOR_ARRAY_POINTER_EXT: u32 = 0x8090;
pub const GL_COLOR_ARRAY_SIZE_EXT: u32 = 0x8081;
pub const GL_COLOR_ARRAY_STRIDE_EXT: u32 = 0x8083;
pub const GL_COLOR_ARRAY_TYPE_EXT: u32 = 0x8082;
pub const GL_COLOR_ATTACHMENT0: u32 = 0x8CE0;
pub const GL_COLOR_ATTACHMENT0_EXT: u32 = 0x8CE0;
pub const GL_COLOR_ATTACHMENT1: u32 = 0x8CE1;
pub const GL_COLOR_ATTACHMENT10: u32 = 0x8CEA;
pub const GL_COLOR_ATTACHMENT10_EXT: u32 = 0x8CEA;
pub const GL_COLOR_ATTACHMENT11: u32 = 0x8CEB;
pub const GL_COLOR_ATTACHMENT11_EXT: u32 = 0x8CEB;
pub const GL_COLOR_ATTACHMENT12: u32 = 0x8CEC;
pub const GL_COLOR_ATTACHMENT12_EXT: u32 = 0x8CEC;
pub const GL_COLOR_ATTACHMENT13: u32 = 0x8CED;
pub const GL_COLOR_ATTACHMENT13_EXT: u32 = 0x8CED;
pub const GL_COLOR_ATTACHMENT14: u32 = 0x8CEE;
pub const GL_COLOR_ATTACHMENT14_EXT: u32 = 0x8CEE;
pub const GL_COLOR_ATTACHMENT15: u32 = 0x8CEF;
pub const GL_COLOR_ATTACHMENT15_EXT: u32 = 0x8CEF;
pub const GL_COLOR_ATTACHMENT16: u32 = 0x8CF0;
pub const GL_COLOR_ATTACHMENT17: u32 = 0x8CF1;
pub const GL_COLOR_ATTACHMENT18: u32 = 0x8CF2;
pub const GL_COLOR_ATTACHMENT19: u32 = 0x8CF3;
pub const GL_COLOR_ATTACHMENT1_EXT: u32 = 0x8CE1;
pub const GL_COLOR_ATTACHMENT2: u32 = 0x8CE2;
pub const GL_COLOR_ATTACHMENT20: u32 = 0x8CF4;
pub const GL_COLOR_ATTACHMENT21: u32 = 0x8CF5;
pub const GL_COLOR_ATTACHMENT22: u32 = 0x8CF6;
pub const GL_COLOR_ATTACHMENT23: u32 = 0x8CF7;
pub const GL_COLOR_ATTACHMENT24: u32 = 0x8CF8;
pub const GL_COLOR_ATTACHMENT25: u32 = 0x8CF9;
pub const GL_COLOR_ATTACHMENT26: u32 = 0x8CFA;
pub const GL_COLOR_ATTACHMENT27: u32 = 0x8CFB;
pub const GL_COLOR_ATTACHMENT28: u32 = 0x8CFC;
pub const GL_COLOR_ATTACHMENT29: u32 = 0x8CFD;
pub const GL_COLOR_ATTACHMENT2_EXT: u32 = 0x8CE2;
pub const GL_COLOR_ATTACHMENT3: u32 = 0x8CE3;
pub const GL_COLOR_ATTACHMENT30: u32 = 0x8CFE;
pub const GL_COLOR_ATTACHMENT31: u32 = 0x8CFF;
pub const GL_COLOR_ATTACHMENT3_EXT: u32 = 0x8CE3;
pub const GL_COLOR_ATTACHMENT4: u32 = 0x8CE4;
pub const GL_COLOR_ATTACHMENT4_EXT: u32 = 0x8CE4;
pub const GL_COLOR_ATTACHMENT5: u32 = 0x8CE5;
pub const GL_COLOR_ATTACHMENT5_EXT: u32 = 0x8CE5;
pub const GL_COLOR_ATTACHMENT6: u32 = 0x8CE6;
pub const GL_COLOR_ATTACHMENT6_EXT: u32 = 0x8CE6;
pub const GL_COLOR_ATTACHMENT7: u32 = 0x8CE7;
pub const GL_COLOR_ATTACHMENT7_EXT: u32 = 0x8CE7;
pub const GL_COLOR_ATTACHMENT8: u32 = 0x8CE8;
pub const GL_COLOR_ATTACHMENT8_EXT: u32 = 0x8CE8;
pub const GL_COLOR_ATTACHMENT9: u32 = 0x8CE9;
pub const GL_COLOR_ATTACHMENT9_EXT: u32 = 0x8CE9;
pub const GL_COLOR_BUFFER_BIT: u32 = 0x00004000;
pub const GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI: u32 = 0x8835;
pub const GL_COLOR_CLEAR_VALUE: u32 = 0x0C22;
pub const GL_COLOR_COMPONENTS: u32 = 0x8283;
pub const GL_COLOR_ENCODING: u32 = 0x8296;
pub const GL_COLOR_FLOAT_APPLE: u32 = 0x8A0F;
pub const GL_COLOR_INDEX12_EXT: u32 = 0x80E6;
pub const GL_COLOR_INDEX16_EXT: u32 = 0x80E7;
pub const GL_COLOR_INDEX1_EXT: u32 = 0x80E2;
pub const GL_COLOR_INDEX2_EXT: u32 = 0x80E3;
pub const GL_COLOR_INDEX4_EXT: u32 = 0x80E4;
pub const GL_COLOR_INDEX8_EXT: u32 = 0x80E5;
pub const GL_COLOR_LOGIC_OP: u32 = 0x0BF2;
pub const GL_COLOR_MATRIX_SGI: u32 = 0x80B1;
pub const GL_COLOR_MATRIX_STACK_DEPTH_SGI: u32 = 0x80B2;
pub const GL_COLOR_RENDERABLE: u32 = 0x8286;
pub const GL_COLOR_SAMPLES_NV: u32 = 0x8E20;
pub const GL_COLOR_SUM_ARB: u32 = 0x8458;
pub const GL_COLOR_SUM_CLAMP_NV: u32 = 0x854F;
pub const GL_COLOR_SUM_EXT: u32 = 0x8458;
pub const GL_COLOR_TABLE_ALPHA_SIZE_SGI: u32 = 0x80DD;
pub const GL_COLOR_TABLE_BIAS_SGI: u32 = 0x80D7;
pub const GL_COLOR_TABLE_BLUE_SIZE_SGI: u32 = 0x80DC;
pub const GL_COLOR_TABLE_FORMAT_SGI: u32 = 0x80D8;
pub const GL_COLOR_TABLE_GREEN_SIZE_SGI: u32 = 0x80DB;
pub const GL_COLOR_TABLE_INTENSITY_SIZE_SGI: u32 = 0x80DF;
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI: u32 = 0x80DE;
pub const GL_COLOR_TABLE_RED_SIZE_SGI: u32 = 0x80DA;
pub const GL_COLOR_TABLE_SCALE_SGI: u32 = 0x80D6;
pub const GL_COLOR_TABLE_SGI: u32 = 0x80D0;
pub const GL_COLOR_TABLE_WIDTH_SGI: u32 = 0x80D9;
pub const GL_COLOR_WRITEMASK: u32 = 0x0C23;
pub const GL_COMBINE4_NV: u32 = 0x8503;
pub const GL_COMBINER0_NV: u32 = 0x8550;
pub const GL_COMBINER1_NV: u32 = 0x8551;
pub const GL_COMBINER2_NV: u32 = 0x8552;
pub const GL_COMBINER3_NV: u32 = 0x8553;
pub const GL_COMBINER4_NV: u32 = 0x8554;
pub const GL_COMBINER5_NV: u32 = 0x8555;
pub const GL_COMBINER6_NV: u32 = 0x8556;
pub const GL_COMBINER7_NV: u32 = 0x8557;
pub const GL_COMBINER_AB_DOT_PRODUCT_NV: u32 = 0x8545;
pub const GL_COMBINER_AB_OUTPUT_NV: u32 = 0x854A;
pub const GL_COMBINER_BIAS_NV: u32 = 0x8549;
pub const GL_COMBINER_CD_DOT_PRODUCT_NV: u32 = 0x8546;
pub const GL_COMBINER_CD_OUTPUT_NV: u32 = 0x854B;
pub const GL_COMBINER_COMPONENT_USAGE_NV: u32 = 0x8544;
pub const GL_COMBINER_INPUT_NV: u32 = 0x8542;
pub const GL_COMBINER_MAPPING_NV: u32 = 0x8543;
pub const GL_COMBINER_MUX_SUM_NV: u32 = 0x8547;
pub const GL_COMBINER_SCALE_NV: u32 = 0x8548;
pub const GL_COMBINER_SUM_OUTPUT_NV: u32 = 0x854C;
pub const GL_COMBINE_ALPHA_ARB: u32 = 0x8572;
pub const GL_COMBINE_ALPHA_EXT: u32 = 0x8572;
pub const GL_COMBINE_ARB: u32 = 0x8570;
pub const GL_COMBINE_EXT: u32 = 0x8570;
pub const GL_COMBINE_RGB_ARB: u32 = 0x8571;
pub const GL_COMBINE_RGB_EXT: u32 = 0x8571;
pub const GL_COMMAND_BARRIER_BIT: u32 = 0x00000040;
pub const GL_COMMAND_BARRIER_BIT_EXT: u32 = 0x00000040;
pub const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT: u32 = 0x884E;
pub const GL_COMPARE_REF_TO_TEXTURE: u32 = 0x884E;
pub const GL_COMPARE_R_TO_TEXTURE_ARB: u32 = 0x884E;
pub const GL_COMPATIBLE_SUBROUTINES: u32 = 0x8E4B;
pub const GL_COMPILE_STATUS: u32 = 0x8B81;
pub const GL_COMPLETION_STATUS_ARB: u32 = 0x91B1;
pub const GL_COMPLETION_STATUS_KHR: u32 = 0x91B1;
pub const GL_COMPRESSED_ALPHA_ARB: u32 = 0x84E9;
pub const GL_COMPRESSED_INTENSITY_ARB: u32 = 0x84EC;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB: u32 = 0x84EB;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT: u32 = 0x8C72;
pub const GL_COMPRESSED_LUMINANCE_ARB: u32 = 0x84EA;
pub const GL_COMPRESSED_LUMINANCE_LATC1_EXT: u32 = 0x8C70;
pub const GL_COMPRESSED_R11_EAC: u32 = 0x9270;
pub const GL_COMPRESSED_RED: u32 = 0x8225;
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT: u32 = 0x8DBD;
pub const GL_COMPRESSED_RED_RGTC1: u32 = 0x8DBB;
pub const GL_COMPRESSED_RED_RGTC1_EXT: u32 = 0x8DBB;
pub const GL_COMPRESSED_RG: u32 = 0x8226;
pub const GL_COMPRESSED_RG11_EAC: u32 = 0x9272;
pub const GL_COMPRESSED_RGB: u32 = 0x84ED;
pub const GL_COMPRESSED_RGB8_ETC2: u32 = 0x9274;
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: u32 = 0x9276;
pub const GL_COMPRESSED_RGBA: u32 = 0x84EE;
pub const GL_COMPRESSED_RGBA8_ETC2_EAC: u32 = 0x9278;
pub const GL_COMPRESSED_RGBA_ARB: u32 = 0x84EE;
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR: u32 = 0x93BB;
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR: u32 = 0x93B8;
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR: u32 = 0x93B9;
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR: u32 = 0x93BA;
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR: u32 = 0x93BC;
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR: u32 = 0x93BD;
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR: u32 = 0x93B0;
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR: u32 = 0x93B1;
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR: u32 = 0x93B2;
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR: u32 = 0x93B3;
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR: u32 = 0x93B4;
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR: u32 = 0x93B5;
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR: u32 = 0x93B6;
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR: u32 = 0x93B7;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB: u32 = 0x8E8C;
pub const GL_COMPRESSED_RGBA_FXT1_3DFX: u32 = 0x86B1;
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT: u32 = 0x83F1;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT: u32 = 0x83F2;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT: u32 = 0x83F3;
pub const GL_COMPRESSED_RGB_ARB: u32 = 0x84ED;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB: u32 = 0x8E8E;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB: u32 = 0x8E8F;
pub const GL_COMPRESSED_RGB_FXT1_3DFX: u32 = 0x86B0;
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT: u32 = 0x83F0;
pub const GL_COMPRESSED_RG_RGTC2: u32 = 0x8DBD;
pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT: u32 = 0x8C73;
pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT: u32 = 0x8C71;
pub const GL_COMPRESSED_SIGNED_R11_EAC: u32 = 0x9271;
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: u32 = 0x8DBE;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1: u32 = 0x8DBC;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT: u32 = 0x8DBC;
pub const GL_COMPRESSED_SIGNED_RG11_EAC: u32 = 0x9273;
pub const GL_COMPRESSED_SIGNED_RG_RGTC2: u32 = 0x8DBE;
pub const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT: u32 = 0x8C4B;
pub const GL_COMPRESSED_SLUMINANCE_EXT: u32 = 0x8C4A;
pub const GL_COMPRESSED_SRGB: u32 = 0x8C48;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: u32 = 0x93DB;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: u32 = 0x93D8;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: u32 = 0x93D9;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: u32 = 0x93DA;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: u32 = 0x93DC;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: u32 = 0x93DD;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: u32 = 0x93D0;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: u32 = 0x93D1;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: u32 = 0x93D2;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: u32 = 0x93D3;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: u32 = 0x93D4;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: u32 = 0x93D5;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: u32 = 0x93D6;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: u32 = 0x93D7;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: u32 = 0x9279;
pub const GL_COMPRESSED_SRGB8_ETC2: u32 = 0x9275;
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: u32 = 0x9277;
pub const GL_COMPRESSED_SRGB_ALPHA: u32 = 0x8C49;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB: u32 = 0x8E8D;
pub const GL_COMPRESSED_SRGB_ALPHA_EXT: u32 = 0x8C49;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: u32 = 0x8C4D;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: u32 = 0x8C4E;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: u32 = 0x8C4F;
pub const GL_COMPRESSED_SRGB_EXT: u32 = 0x8C48;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT: u32 = 0x8C4C;
pub const GL_COMPRESSED_TEXTURE_FORMATS: u32 = 0x86A3;
pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB: u32 = 0x86A3;
pub const GL_COMPUTE_PROGRAM_NV: u32 = 0x90FB;
pub const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV: u32 = 0x90FC;
pub const GL_COMPUTE_SHADER: u32 = 0x91B9;
pub const GL_COMPUTE_SHADER_BIT: u32 = 0x00000020;
pub const GL_COMPUTE_SHADER_INVOCATIONS: u32 = 0x82F5;
pub const GL_COMPUTE_SHADER_INVOCATIONS_ARB: u32 = 0x82F5;
pub const GL_COMPUTE_SUBROUTINE: u32 = 0x92ED;
pub const GL_COMPUTE_SUBROUTINE_UNIFORM: u32 = 0x92F3;
pub const GL_COMPUTE_TEXTURE: u32 = 0x82A0;
pub const GL_COMPUTE_WORK_GROUP_SIZE: u32 = 0x8267;
pub const GL_COMP_BIT_ATI: u32 = 0x00000002;
pub const GL_CONDITION_SATISFIED: u32 = 0x911C;
pub const GL_CONFORMANT_NV: u32 = 0x9374;
pub const GL_CONIC_CURVE_TO_NV: u32 = 0x1A;
pub const GL_CONJOINT_NV: u32 = 0x9284;
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL: u32 = 0x83FE;
pub const GL_CONSERVATIVE_RASTERIZATION_NV: u32 = 0x9346;
pub const GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV: u32 = 0x937B;
pub const GL_CONSERVATIVE_RASTER_DILATE_NV: u32 = 0x9379;
pub const GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV: u32 = 0x937A;
pub const GL_CONSERVATIVE_RASTER_MODE_NV: u32 = 0x954D;
pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV: u32 = 0x954E;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV: u32 = 0x9550;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV: u32 = 0x954F;
pub const GL_CONSERVE_MEMORY_HINT_PGI: u32 = 0x1A1FD;
pub const GL_CONSTANT_ALPHA: u32 = 0x8003;
pub const GL_CONSTANT_ALPHA_EXT: u32 = 0x8003;
pub const GL_CONSTANT_ARB: u32 = 0x8576;
pub const GL_CONSTANT_BORDER_HP: u32 = 0x8151;
pub const GL_CONSTANT_COLOR: u32 = 0x8001;
pub const GL_CONSTANT_COLOR0_NV: u32 = 0x852A;
pub const GL_CONSTANT_COLOR1_NV: u32 = 0x852B;
pub const GL_CONSTANT_COLOR_EXT: u32 = 0x8001;
pub const GL_CONSTANT_EXT: u32 = 0x8576;
pub const GL_CONST_EYE_NV: u32 = 0x86E5;
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT: u32 = 0x00000002;
pub const GL_CONTEXT_CORE_PROFILE_BIT: u32 = 0x00000001;
pub const GL_CONTEXT_FLAGS: u32 = 0x821E;
pub const GL_CONTEXT_FLAG_DEBUG_BIT: u32 = 0x00000002;
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: u32 = 0x00000001;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT: u32 = 0x00000008;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR: u32 = 0x00000008;
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB: u32 = 0x00000004;
pub const GL_CONTEXT_LOST: u32 = 0x0507;
pub const GL_CONTEXT_PROFILE_MASK: u32 = 0x9126;
pub const GL_CONTEXT_RELEASE_BEHAVIOR: u32 = 0x82FB;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: u32 = 0x82FC;
pub const GL_CONTEXT_ROBUST_ACCESS: u32 = 0x90F3;
pub const GL_CONTINUOUS_AMD: u32 = 0x9007;
pub const GL_CONTRAST_NV: u32 = 0x92A1;
pub const GL_CONVEX_HULL_NV: u32 = 0x908B;
pub const GL_CONVOLUTION_1D_EXT: u32 = 0x8010;
pub const GL_CONVOLUTION_2D_EXT: u32 = 0x8011;
pub const GL_CONVOLUTION_BORDER_COLOR_HP: u32 = 0x8154;
pub const GL_CONVOLUTION_BORDER_MODE_EXT: u32 = 0x8013;
pub const GL_CONVOLUTION_FILTER_BIAS_EXT: u32 = 0x8015;
pub const GL_CONVOLUTION_FILTER_SCALE_EXT: u32 = 0x8014;
pub const GL_CONVOLUTION_FORMAT_EXT: u32 = 0x8017;
pub const GL_CONVOLUTION_HEIGHT_EXT: u32 = 0x8019;
pub const GL_CONVOLUTION_HINT_SGIX: u32 = 0x8316;
pub const GL_CONVOLUTION_WIDTH_EXT: u32 = 0x8018;
pub const GL_CON_0_ATI: u32 = 0x8941;
pub const GL_CON_10_ATI: u32 = 0x894B;
pub const GL_CON_11_ATI: u32 = 0x894C;
pub const GL_CON_12_ATI: u32 = 0x894D;
pub const GL_CON_13_ATI: u32 = 0x894E;
pub const GL_CON_14_ATI: u32 = 0x894F;
pub const GL_CON_15_ATI: u32 = 0x8950;
pub const GL_CON_16_ATI: u32 = 0x8951;
pub const GL_CON_17_ATI: u32 = 0x8952;
pub const GL_CON_18_ATI: u32 = 0x8953;
pub const GL_CON_19_ATI: u32 = 0x8954;
pub const GL_CON_1_ATI: u32 = 0x8942;
pub const GL_CON_20_ATI: u32 = 0x8955;
pub const GL_CON_21_ATI: u32 = 0x8956;
pub const GL_CON_22_ATI: u32 = 0x8957;
pub const GL_CON_23_ATI: u32 = 0x8958;
pub const GL_CON_24_ATI: u32 = 0x8959;
pub const GL_CON_25_ATI: u32 = 0x895A;
pub const GL_CON_26_ATI: u32 = 0x895B;
pub const GL_CON_27_ATI: u32 = 0x895C;
pub const GL_CON_28_ATI: u32 = 0x895D;
pub const GL_CON_29_ATI: u32 = 0x895E;
pub const GL_CON_2_ATI: u32 = 0x8943;
pub const GL_CON_30_ATI: u32 = 0x895F;
pub const GL_CON_31_ATI: u32 = 0x8960;
pub const GL_CON_3_ATI: u32 = 0x8944;
pub const GL_CON_4_ATI: u32 = 0x8945;
pub const GL_CON_5_ATI: u32 = 0x8946;
pub const GL_CON_6_ATI: u32 = 0x8947;
pub const GL_CON_7_ATI: u32 = 0x8948;
pub const GL_CON_8_ATI: u32 = 0x8949;
pub const GL_CON_9_ATI: u32 = 0x894A;
pub const GL_COORD_REPLACE_ARB: u32 = 0x8862;
pub const GL_COORD_REPLACE_NV: u32 = 0x8862;
pub const GL_COPY: u32 = 0x1503;
pub const GL_COPY_INVERTED: u32 = 0x150C;
pub const GL_COPY_READ_BUFFER: u32 = 0x8F36;
pub const GL_COPY_WRITE_BUFFER: u32 = 0x8F37;
pub const GL_COUNTER_RANGE_AMD: u32 = 0x8BC1;
pub const GL_COUNTER_TYPE_AMD: u32 = 0x8BC0;
pub const GL_COUNT_DOWN_NV: u32 = 0x9089;
pub const GL_COUNT_UP_NV: u32 = 0x9088;
pub const GL_COVERAGE_MODULATION_NV: u32 = 0x9332;
pub const GL_COVERAGE_MODULATION_TABLE_NV: u32 = 0x9331;
pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV: u32 = 0x9333;
pub const GL_CUBIC_CURVE_TO_NV: u32 = 0x0C;
pub const GL_CUBIC_EXT: u32 = 0x8334;
pub const GL_CUBIC_HP: u32 = 0x815F;
pub const GL_CULL_FACE: u32 = 0x0B44;
pub const GL_CULL_FACE_MODE: u32 = 0x0B45;
pub const GL_CULL_FRAGMENT_NV: u32 = 0x86E7;
pub const GL_CULL_MODES_NV: u32 = 0x86E0;
pub const GL_CULL_VERTEX_EXT: u32 = 0x81AA;
pub const GL_CULL_VERTEX_EYE_POSITION_EXT: u32 = 0x81AB;
pub const GL_CULL_VERTEX_IBM: u32 = 103050;
pub const GL_CULL_VERTEX_OBJECT_POSITION_EXT: u32 = 0x81AC;
pub const GL_CURRENT_ATTRIB_NV: u32 = 0x8626;
pub const GL_CURRENT_BINORMAL_EXT: u32 = 0x843C;
pub const GL_CURRENT_FOG_COORDINATE_EXT: u32 = 0x8453;
pub const GL_CURRENT_MATRIX_ARB: u32 = 0x8641;
pub const GL_CURRENT_MATRIX_INDEX_ARB: u32 = 0x8845;
pub const GL_CURRENT_MATRIX_NV: u32 = 0x8641;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB: u32 = 0x8640;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_NV: u32 = 0x8640;
pub const GL_CURRENT_OCCLUSION_QUERY_ID_NV: u32 = 0x8865;
pub const GL_CURRENT_PALETTE_MATRIX_ARB: u32 = 0x8843;
pub const GL_CURRENT_PROGRAM: u32 = 0x8B8D;
pub const GL_CURRENT_QUERY: u32 = 0x8865;
pub const GL_CURRENT_QUERY_ARB: u32 = 0x8865;
pub const GL_CURRENT_RASTER_NORMAL_SGIX: u32 = 0x8406;
pub const GL_CURRENT_SECONDARY_COLOR_EXT: u32 = 0x8459;
pub const GL_CURRENT_TANGENT_EXT: u32 = 0x843B;
pub const GL_CURRENT_TIME_NV: u32 = 0x8E28;
pub const GL_CURRENT_VERTEX_ATTRIB: u32 = 0x8626;
pub const GL_CURRENT_VERTEX_ATTRIB_ARB: u32 = 0x8626;
pub const GL_CURRENT_VERTEX_EXT: u32 = 0x87E2;
pub const GL_CURRENT_VERTEX_WEIGHT_EXT: u32 = 0x850B;
pub const GL_CURRENT_WEIGHT_ARB: u32 = 0x86A8;
pub const GL_CW: u32 = 0x0900;
pub const GL_D3D12_FENCE_VALUE_EXT: u32 = 0x9595;
pub const GL_DARKEN_KHR: u32 = 0x9297;
pub const GL_DARKEN_NV: u32 = 0x9297;
pub const GL_DATA_BUFFER_AMD: u32 = 0x9151;
pub const GL_DEBUG_CALLBACK_FUNCTION: u32 = 0x8244;
pub const GL_DEBUG_CALLBACK_FUNCTION_ARB: u32 = 0x8244;
pub const GL_DEBUG_CALLBACK_USER_PARAM: u32 = 0x8245;
pub const GL_DEBUG_CALLBACK_USER_PARAM_ARB: u32 = 0x8245;
pub const GL_DEBUG_CATEGORY_API_ERROR_AMD: u32 = 0x9149;
pub const GL_DEBUG_CATEGORY_APPLICATION_AMD: u32 = 0x914F;
pub const GL_DEBUG_CATEGORY_DEPRECATION_AMD: u32 = 0x914B;
pub const GL_DEBUG_CATEGORY_OTHER_AMD: u32 = 0x9150;
pub const GL_DEBUG_CATEGORY_PERFORMANCE_AMD: u32 = 0x914D;
pub const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD: u32 = 0x914E;
pub const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD: u32 = 0x914C;
pub const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD: u32 = 0x914A;
pub const GL_DEBUG_GROUP_STACK_DEPTH: u32 = 0x826D;
pub const GL_DEBUG_LOGGED_MESSAGES: u32 = 0x9145;
pub const GL_DEBUG_LOGGED_MESSAGES_AMD: u32 = 0x9145;
pub const GL_DEBUG_LOGGED_MESSAGES_ARB: u32 = 0x9145;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: u32 = 0x8243;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB: u32 = 0x8243;
pub const GL_DEBUG_OUTPUT: u32 = 0x92E0;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS: u32 = 0x8242;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB: u32 = 0x8242;
pub const GL_DEBUG_SEVERITY_HIGH: u32 = 0x9146;
pub const GL_DEBUG_SEVERITY_HIGH_AMD: u32 = 0x9146;
pub const GL_DEBUG_SEVERITY_HIGH_ARB: u32 = 0x9146;
pub const GL_DEBUG_SEVERITY_LOW: u32 = 0x9148;
pub const GL_DEBUG_SEVERITY_LOW_AMD: u32 = 0x9148;
pub const GL_DEBUG_SEVERITY_LOW_ARB: u32 = 0x9148;
pub const GL_DEBUG_SEVERITY_MEDIUM: u32 = 0x9147;
pub const GL_DEBUG_SEVERITY_MEDIUM_AMD: u32 = 0x9147;
pub const GL_DEBUG_SEVERITY_MEDIUM_ARB: u32 = 0x9147;
pub const GL_DEBUG_SEVERITY_NOTIFICATION: u32 = 0x826B;
pub const GL_DEBUG_SOURCE_API: u32 = 0x8246;
pub const GL_DEBUG_SOURCE_API_ARB: u32 = 0x8246;
pub const GL_DEBUG_SOURCE_APPLICATION: u32 = 0x824A;
pub const GL_DEBUG_SOURCE_APPLICATION_ARB: u32 = 0x824A;
pub const GL_DEBUG_SOURCE_OTHER: u32 = 0x824B;
pub const GL_DEBUG_SOURCE_OTHER_ARB: u32 = 0x824B;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER: u32 = 0x8248;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB: u32 = 0x8248;
pub const GL_DEBUG_SOURCE_THIRD_PARTY: u32 = 0x8249;
pub const GL_DEBUG_SOURCE_THIRD_PARTY_ARB: u32 = 0x8249;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM: u32 = 0x8247;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB: u32 = 0x8247;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: u32 = 0x824D;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB: u32 = 0x824D;
pub const GL_DEBUG_TYPE_ERROR: u32 = 0x824C;
pub const GL_DEBUG_TYPE_ERROR_ARB: u32 = 0x824C;
pub const GL_DEBUG_TYPE_MARKER: u32 = 0x8268;
pub const GL_DEBUG_TYPE_OTHER: u32 = 0x8251;
pub const GL_DEBUG_TYPE_OTHER_ARB: u32 = 0x8251;
pub const GL_DEBUG_TYPE_PERFORMANCE: u32 = 0x8250;
pub const GL_DEBUG_TYPE_PERFORMANCE_ARB: u32 = 0x8250;
pub const GL_DEBUG_TYPE_POP_GROUP: u32 = 0x826A;
pub const GL_DEBUG_TYPE_PORTABILITY: u32 = 0x824F;
pub const GL_DEBUG_TYPE_PORTABILITY_ARB: u32 = 0x824F;
pub const GL_DEBUG_TYPE_PUSH_GROUP: u32 = 0x8269;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: u32 = 0x824E;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB: u32 = 0x824E;
pub const GL_DECODE_EXT: u32 = 0x8A49;
pub const GL_DECR: u32 = 0x1E03;
pub const GL_DECR_WRAP: u32 = 0x8508;
pub const GL_DECR_WRAP_EXT: u32 = 0x8508;
pub const GL_DEDICATED_MEMORY_OBJECT_EXT: u32 = 0x9581;
pub const GL_DEFORMATIONS_MASK_SGIX: u32 = 0x8196;
pub const GL_DELETE_STATUS: u32 = 0x8B80;
pub const GL_DEPENDENT_AR_TEXTURE_2D_NV: u32 = 0x86E9;
pub const GL_DEPENDENT_GB_TEXTURE_2D_NV: u32 = 0x86EA;
pub const GL_DEPENDENT_HILO_TEXTURE_2D_NV: u32 = 0x8858;
pub const GL_DEPENDENT_RGB_TEXTURE_3D_NV: u32 = 0x8859;
pub const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV: u32 = 0x885A;
pub const GL_DEPTH: u32 = 0x1801;
pub const GL_DEPTH24_STENCIL8: u32 = 0x88F0;
pub const GL_DEPTH24_STENCIL8_EXT: u32 = 0x88F0;
pub const GL_DEPTH32F_STENCIL8: u32 = 0x8CAD;
pub const GL_DEPTH32F_STENCIL8_NV: u32 = 0x8DAC;
pub const GL_DEPTH_ATTACHMENT: u32 = 0x8D00;
pub const GL_DEPTH_ATTACHMENT_EXT: u32 = 0x8D00;
pub const GL_DEPTH_BOUNDS_EXT: u32 = 0x8891;
pub const GL_DEPTH_BOUNDS_TEST_EXT: u32 = 0x8890;
pub const GL_DEPTH_BUFFER_BIT: u32 = 0x00000100;
pub const GL_DEPTH_BUFFER_FLOAT_MODE_NV: u32 = 0x8DAF;
pub const GL_DEPTH_CLAMP: u32 = 0x864F;
pub const GL_DEPTH_CLAMP_FAR_AMD: u32 = 0x901F;
pub const GL_DEPTH_CLAMP_NEAR_AMD: u32 = 0x901E;
pub const GL_DEPTH_CLAMP_NV: u32 = 0x864F;
pub const GL_DEPTH_CLEAR_VALUE: u32 = 0x0B73;
pub const GL_DEPTH_COMPONENT: u32 = 0x1902;
pub const GL_DEPTH_COMPONENT16: u32 = 0x81A5;
pub const GL_DEPTH_COMPONENT16_ARB: u32 = 0x81A5;
pub const GL_DEPTH_COMPONENT16_SGIX: u32 = 0x81A5;
pub const GL_DEPTH_COMPONENT24: u32 = 0x81A6;
pub const GL_DEPTH_COMPONENT24_ARB: u32 = 0x81A6;
pub const GL_DEPTH_COMPONENT24_SGIX: u32 = 0x81A6;
pub const GL_DEPTH_COMPONENT32: u32 = 0x81A7;
pub const GL_DEPTH_COMPONENT32F: u32 = 0x8CAC;
pub const GL_DEPTH_COMPONENT32F_NV: u32 = 0x8DAB;
pub const GL_DEPTH_COMPONENT32_ARB: u32 = 0x81A7;
pub const GL_DEPTH_COMPONENT32_SGIX: u32 = 0x81A7;
pub const GL_DEPTH_COMPONENTS: u32 = 0x8284;
pub const GL_DEPTH_FUNC: u32 = 0x0B74;
pub const GL_DEPTH_RANGE: u32 = 0x0B70;
pub const GL_DEPTH_RENDERABLE: u32 = 0x8287;
pub const GL_DEPTH_SAMPLES_NV: u32 = 0x932D;
pub const GL_DEPTH_STENCIL: u32 = 0x84F9;
pub const GL_DEPTH_STENCIL_ATTACHMENT: u32 = 0x821A;
pub const GL_DEPTH_STENCIL_EXT: u32 = 0x84F9;
pub const GL_DEPTH_STENCIL_NV: u32 = 0x84F9;
pub const GL_DEPTH_STENCIL_TEXTURE_MODE: u32 = 0x90EA;
pub const GL_DEPTH_STENCIL_TO_BGRA_NV: u32 = 0x886F;
pub const GL_DEPTH_STENCIL_TO_RGBA_NV: u32 = 0x886E;
pub const GL_DEPTH_TEST: u32 = 0x0B71;
pub const GL_DEPTH_TEXTURE_MODE_ARB: u32 = 0x884B;
pub const GL_DEPTH_WRITEMASK: u32 = 0x0B72;
pub const GL_DETACHED_BUFFERS_NV: u32 = 0x95AB;
pub const GL_DETACHED_MEMORY_INCARNATION_NV: u32 = 0x95A9;
pub const GL_DETACHED_TEXTURES_NV: u32 = 0x95AA;
pub const GL_DETAIL_TEXTURE_2D_BINDING_SGIS: u32 = 0x8096;
pub const GL_DETAIL_TEXTURE_2D_SGIS: u32 = 0x8095;
pub const GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS: u32 = 0x809C;
pub const GL_DETAIL_TEXTURE_LEVEL_SGIS: u32 = 0x809A;
pub const GL_DETAIL_TEXTURE_MODE_SGIS: u32 = 0x809B;
pub const GL_DEVICE_LUID_EXT: u32 = 0x9599;
pub const GL_DEVICE_NODE_MASK_EXT: u32 = 0x959A;
pub const GL_DEVICE_UUID_EXT: u32 = 0x9597;
pub const GL_DIFFERENCE_KHR: u32 = 0x929E;
pub const GL_DIFFERENCE_NV: u32 = 0x929E;
pub const GL_DISCARD_ATI: u32 = 0x8763;
pub const GL_DISCARD_NV: u32 = 0x8530;
pub const GL_DISCRETE_AMD: u32 = 0x9006;
pub const GL_DISJOINT_NV: u32 = 0x9283;
pub const GL_DISPATCH_INDIRECT_BUFFER: u32 = 0x90EE;
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING: u32 = 0x90EF;
pub const GL_DISTANCE_ATTENUATION_EXT: u32 = 0x8129;
pub const GL_DISTANCE_ATTENUATION_SGIS: u32 = 0x8129;
pub const GL_DITHER: u32 = 0x0BD0;
pub const GL_DONT_CARE: u32 = 0x1100;
pub const GL_DOT2_ADD_ATI: u32 = 0x896C;
pub const GL_DOT3_ATI: u32 = 0x8966;
pub const GL_DOT3_RGBA_ARB: u32 = 0x86AF;
pub const GL_DOT3_RGBA_EXT: u32 = 0x8741;
pub const GL_DOT3_RGB_ARB: u32 = 0x86AE;
pub const GL_DOT3_RGB_EXT: u32 = 0x8740;
pub const GL_DOT4_ATI: u32 = 0x8967;
pub const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV: u32 = 0x885D;
pub const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV: u32 = 0x86F3;
pub const GL_DOT_PRODUCT_DEPTH_REPLACE_NV: u32 = 0x86ED;
pub const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV: u32 = 0x86F1;
pub const GL_DOT_PRODUCT_NV: u32 = 0x86EC;
pub const GL_DOT_PRODUCT_PASS_THROUGH_NV: u32 = 0x885B;
pub const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV: u32 = 0x86F2;
pub const GL_DOT_PRODUCT_TEXTURE_1D_NV: u32 = 0x885C;
pub const GL_DOT_PRODUCT_TEXTURE_2D_NV: u32 = 0x86EE;
pub const GL_DOT_PRODUCT_TEXTURE_3D_NV: u32 = 0x86EF;
pub const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV: u32 = 0x86F0;
pub const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV: u32 = 0x864E;
pub const GL_DOUBLE: u32 = 0x140A;
pub const GL_DOUBLEBUFFER: u32 = 0x0C32;
pub const GL_DOUBLE_MAT2: u32 = 0x8F46;
pub const GL_DOUBLE_MAT2_EXT: u32 = 0x8F46;
pub const GL_DOUBLE_MAT2x3: u32 = 0x8F49;
pub const GL_DOUBLE_MAT2x3_EXT: u32 = 0x8F49;
pub const GL_DOUBLE_MAT2x4: u32 = 0x8F4A;
pub const GL_DOUBLE_MAT2x4_EXT: u32 = 0x8F4A;
pub const GL_DOUBLE_MAT3: u32 = 0x8F47;
pub const GL_DOUBLE_MAT3_EXT: u32 = 0x8F47;
pub const GL_DOUBLE_MAT3x2: u32 = 0x8F4B;
pub const GL_DOUBLE_MAT3x2_EXT: u32 = 0x8F4B;
pub const GL_DOUBLE_MAT3x4: u32 = 0x8F4C;
pub const GL_DOUBLE_MAT3x4_EXT: u32 = 0x8F4C;
pub const GL_DOUBLE_MAT4: u32 = 0x8F48;
pub const GL_DOUBLE_MAT4_EXT: u32 = 0x8F48;
pub const GL_DOUBLE_MAT4x2: u32 = 0x8F4D;
pub const GL_DOUBLE_MAT4x2_EXT: u32 = 0x8F4D;
pub const GL_DOUBLE_MAT4x3: u32 = 0x8F4E;
pub const GL_DOUBLE_MAT4x3_EXT: u32 = 0x8F4E;
pub const GL_DOUBLE_VEC2: u32 = 0x8FFC;
pub const GL_DOUBLE_VEC2_EXT: u32 = 0x8FFC;
pub const GL_DOUBLE_VEC3: u32 = 0x8FFD;
pub const GL_DOUBLE_VEC3_EXT: u32 = 0x8FFD;
pub const GL_DOUBLE_VEC4: u32 = 0x8FFE;
pub const GL_DOUBLE_VEC4_EXT: u32 = 0x8FFE;
pub const GL_DRAW_ARRAYS_COMMAND_NV: u32 = 0x0003;
pub const GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV: u32 = 0x0007;
pub const GL_DRAW_ARRAYS_STRIP_COMMAND_NV: u32 = 0x0005;
pub const GL_DRAW_BUFFER: u32 = 0x0C01;
pub const GL_DRAW_BUFFER0: u32 = 0x8825;
pub const GL_DRAW_BUFFER0_ARB: u32 = 0x8825;
pub const GL_DRAW_BUFFER0_ATI: u32 = 0x8825;
pub const GL_DRAW_BUFFER1: u32 = 0x8826;
pub const GL_DRAW_BUFFER10: u32 = 0x882F;
pub const GL_DRAW_BUFFER10_ARB: u32 = 0x882F;
pub const GL_DRAW_BUFFER10_ATI: u32 = 0x882F;
pub const GL_DRAW_BUFFER11: u32 = 0x8830;
pub const GL_DRAW_BUFFER11_ARB: u32 = 0x8830;
pub const GL_DRAW_BUFFER11_ATI: u32 = 0x8830;
pub const GL_DRAW_BUFFER12: u32 = 0x8831;
pub const GL_DRAW_BUFFER12_ARB: u32 = 0x8831;
pub const GL_DRAW_BUFFER12_ATI: u32 = 0x8831;
pub const GL_DRAW_BUFFER13: u32 = 0x8832;
pub const GL_DRAW_BUFFER13_ARB: u32 = 0x8832;
pub const GL_DRAW_BUFFER13_ATI: u32 = 0x8832;
pub const GL_DRAW_BUFFER14: u32 = 0x8833;
pub const GL_DRAW_BUFFER14_ARB: u32 = 0x8833;
pub const GL_DRAW_BUFFER14_ATI: u32 = 0x8833;
pub const GL_DRAW_BUFFER15: u32 = 0x8834;
pub const GL_DRAW_BUFFER15_ARB: u32 = 0x8834;
pub const GL_DRAW_BUFFER15_ATI: u32 = 0x8834;
pub const GL_DRAW_BUFFER1_ARB: u32 = 0x8826;
pub const GL_DRAW_BUFFER1_ATI: u32 = 0x8826;
pub const GL_DRAW_BUFFER2: u32 = 0x8827;
pub const GL_DRAW_BUFFER2_ARB: u32 = 0x8827;
pub const GL_DRAW_BUFFER2_ATI: u32 = 0x8827;
pub const GL_DRAW_BUFFER3: u32 = 0x8828;
pub const GL_DRAW_BUFFER3_ARB: u32 = 0x8828;
pub const GL_DRAW_BUFFER3_ATI: u32 = 0x8828;
pub const GL_DRAW_BUFFER4: u32 = 0x8829;
pub const GL_DRAW_BUFFER4_ARB: u32 = 0x8829;
pub const GL_DRAW_BUFFER4_ATI: u32 = 0x8829;
pub const GL_DRAW_BUFFER5: u32 = 0x882A;
pub const GL_DRAW_BUFFER5_ARB: u32 = 0x882A;
pub const GL_DRAW_BUFFER5_ATI: u32 = 0x882A;
pub const GL_DRAW_BUFFER6: u32 = 0x882B;
pub const GL_DRAW_BUFFER6_ARB: u32 = 0x882B;
pub const GL_DRAW_BUFFER6_ATI: u32 = 0x882B;
pub const GL_DRAW_BUFFER7: u32 = 0x882C;
pub const GL_DRAW_BUFFER7_ARB: u32 = 0x882C;
pub const GL_DRAW_BUFFER7_ATI: u32 = 0x882C;
pub const GL_DRAW_BUFFER8: u32 = 0x882D;
pub const GL_DRAW_BUFFER8_ARB: u32 = 0x882D;
pub const GL_DRAW_BUFFER8_ATI: u32 = 0x882D;
pub const GL_DRAW_BUFFER9: u32 = 0x882E;
pub const GL_DRAW_BUFFER9_ARB: u32 = 0x882E;
pub const GL_DRAW_BUFFER9_ATI: u32 = 0x882E;
pub const GL_DRAW_ELEMENTS_COMMAND_NV: u32 = 0x0002;
pub const GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV: u32 = 0x0006;
pub const GL_DRAW_ELEMENTS_STRIP_COMMAND_NV: u32 = 0x0004;
pub const GL_DRAW_FRAMEBUFFER: u32 = 0x8CA9;
pub const GL_DRAW_FRAMEBUFFER_BINDING: u32 = 0x8CA6;
pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT: u32 = 0x8CA6;
pub const GL_DRAW_FRAMEBUFFER_EXT: u32 = 0x8CA9;
pub const GL_DRAW_INDIRECT_ADDRESS_NV: u32 = 0x8F41;
pub const GL_DRAW_INDIRECT_BUFFER: u32 = 0x8F3F;
pub const GL_DRAW_INDIRECT_BUFFER_BINDING: u32 = 0x8F43;
pub const GL_DRAW_INDIRECT_LENGTH_NV: u32 = 0x8F42;
pub const GL_DRAW_INDIRECT_UNIFIED_NV: u32 = 0x8F40;
pub const GL_DRAW_PIXELS_APPLE: u32 = 0x8A0A;
pub const GL_DRIVER_UUID_EXT: u32 = 0x9598;
pub const GL_DSDT8_MAG8_INTENSITY8_NV: u32 = 0x870B;
pub const GL_DSDT8_MAG8_NV: u32 = 0x870A;
pub const GL_DSDT8_NV: u32 = 0x8709;
pub const GL_DSDT_MAG_INTENSITY_NV: u32 = 0x86DC;
pub const GL_DSDT_MAG_NV: u32 = 0x86F6;
pub const GL_DSDT_MAG_VIB_NV: u32 = 0x86F7;
pub const GL_DSDT_NV: u32 = 0x86F5;
pub const GL_DST_ALPHA: u32 = 0x0304;
pub const GL_DST_ATOP_NV: u32 = 0x928F;
pub const GL_DST_COLOR: u32 = 0x0306;
pub const GL_DST_IN_NV: u32 = 0x928B;
pub const GL_DST_NV: u32 = 0x9287;
pub const GL_DST_OUT_NV: u32 = 0x928D;
pub const GL_DST_OVER_NV: u32 = 0x9289;
pub const GL_DS_BIAS_NV: u32 = 0x8716;
pub const GL_DS_SCALE_NV: u32 = 0x8710;
pub const GL_DT_BIAS_NV: u32 = 0x8717;
pub const GL_DT_SCALE_NV: u32 = 0x8711;
pub const GL_DU8DV8_ATI: u32 = 0x877A;
pub const GL_DUAL_ALPHA12_SGIS: u32 = 0x8112;
pub const GL_DUAL_ALPHA16_SGIS: u32 = 0x8113;
pub const GL_DUAL_ALPHA4_SGIS: u32 = 0x8110;
pub const GL_DUAL_ALPHA8_SGIS: u32 = 0x8111;
pub const GL_DUAL_INTENSITY12_SGIS: u32 = 0x811A;
pub const GL_DUAL_INTENSITY16_SGIS: u32 = 0x811B;
pub const GL_DUAL_INTENSITY4_SGIS: u32 = 0x8118;
pub const GL_DUAL_INTENSITY8_SGIS: u32 = 0x8119;
pub const GL_DUAL_LUMINANCE12_SGIS: u32 = 0x8116;
pub const GL_DUAL_LUMINANCE16_SGIS: u32 = 0x8117;
pub const GL_DUAL_LUMINANCE4_SGIS: u32 = 0x8114;
pub const GL_DUAL_LUMINANCE8_SGIS: u32 = 0x8115;
pub const GL_DUAL_LUMINANCE_ALPHA4_SGIS: u32 = 0x811C;
pub const GL_DUAL_LUMINANCE_ALPHA8_SGIS: u32 = 0x811D;
pub const GL_DUAL_TEXTURE_SELECT_SGIS: u32 = 0x8124;
pub const GL_DUDV_ATI: u32 = 0x8779;
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV: u32 = 0xF2;
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV: u32 = 0xF4;
pub const GL_DYNAMIC_ATI: u32 = 0x8761;
pub const GL_DYNAMIC_COPY: u32 = 0x88EA;
pub const GL_DYNAMIC_COPY_ARB: u32 = 0x88EA;
pub const GL_DYNAMIC_DRAW: u32 = 0x88E8;
pub const GL_DYNAMIC_DRAW_ARB: u32 = 0x88E8;
pub const GL_DYNAMIC_READ: u32 = 0x88E9;
pub const GL_DYNAMIC_READ_ARB: u32 = 0x88E9;
pub const GL_DYNAMIC_STORAGE_BIT: u32 = 0x0100;
pub const GL_EDGEFLAG_BIT_PGI: u32 = 0x00040000;
pub const GL_EDGE_FLAG_ARRAY_ADDRESS_NV: u32 = 0x8F26;
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889B;
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT: u32 = 0x808D;
pub const GL_EDGE_FLAG_ARRAY_EXT: u32 = 0x8079;
pub const GL_EDGE_FLAG_ARRAY_LENGTH_NV: u32 = 0x8F30;
pub const GL_EDGE_FLAG_ARRAY_LIST_IBM: u32 = 103075;
pub const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM: u32 = 103085;
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT: u32 = 0x8093;
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT: u32 = 0x808C;
pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT: u32 = 0x932C;
pub const GL_EIGHTH_BIT_ATI: u32 = 0x00000020;
pub const GL_ELEMENT_ADDRESS_COMMAND_NV: u32 = 0x0008;
pub const GL_ELEMENT_ARRAY_ADDRESS_NV: u32 = 0x8F29;
pub const GL_ELEMENT_ARRAY_APPLE: u32 = 0x8A0C;
pub const GL_ELEMENT_ARRAY_ATI: u32 = 0x8768;
pub const GL_ELEMENT_ARRAY_BARRIER_BIT: u32 = 0x00000002;
pub const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT: u32 = 0x00000002;
pub const GL_ELEMENT_ARRAY_BUFFER: u32 = 0x8893;
pub const GL_ELEMENT_ARRAY_BUFFER_ARB: u32 = 0x8893;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING: u32 = 0x8895;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8895;
pub const GL_ELEMENT_ARRAY_LENGTH_NV: u32 = 0x8F33;
pub const GL_ELEMENT_ARRAY_POINTER_APPLE: u32 = 0x8A0E;
pub const GL_ELEMENT_ARRAY_POINTER_ATI: u32 = 0x876A;
pub const GL_ELEMENT_ARRAY_TYPE_APPLE: u32 = 0x8A0D;
pub const GL_ELEMENT_ARRAY_TYPE_ATI: u32 = 0x8769;
pub const GL_ELEMENT_ARRAY_UNIFIED_NV: u32 = 0x8F1F;
pub const GL_EMBOSS_CONSTANT_NV: u32 = 0x855E;
pub const GL_EMBOSS_LIGHT_NV: u32 = 0x855D;
pub const GL_EMBOSS_MAP_NV: u32 = 0x855F;
pub const GL_EQUAL: u32 = 0x0202;
pub const GL_EQUIV: u32 = 0x1509;
pub const GL_EVAL_2D_NV: u32 = 0x86C0;
pub const GL_EVAL_FRACTIONAL_TESSELLATION_NV: u32 = 0x86C5;
pub const GL_EVAL_TRIANGULAR_2D_NV: u32 = 0x86C1;
pub const GL_EVAL_VERTEX_ATTRIB0_NV: u32 = 0x86C6;
pub const GL_EVAL_VERTEX_ATTRIB10_NV: u32 = 0x86D0;
pub const GL_EVAL_VERTEX_ATTRIB11_NV: u32 = 0x86D1;
pub const GL_EVAL_VERTEX_ATTRIB12_NV: u32 = 0x86D2;
pub const GL_EVAL_VERTEX_ATTRIB13_NV: u32 = 0x86D3;
pub const GL_EVAL_VERTEX_ATTRIB14_NV: u32 = 0x86D4;
pub const GL_EVAL_VERTEX_ATTRIB15_NV: u32 = 0x86D5;
pub const GL_EVAL_VERTEX_ATTRIB1_NV: u32 = 0x86C7;
pub const GL_EVAL_VERTEX_ATTRIB2_NV: u32 = 0x86C8;
pub const GL_EVAL_VERTEX_ATTRIB3_NV: u32 = 0x86C9;
pub const GL_EVAL_VERTEX_ATTRIB4_NV: u32 = 0x86CA;
pub const GL_EVAL_VERTEX_ATTRIB5_NV: u32 = 0x86CB;
pub const GL_EVAL_VERTEX_ATTRIB6_NV: u32 = 0x86CC;
pub const GL_EVAL_VERTEX_ATTRIB7_NV: u32 = 0x86CD;
pub const GL_EVAL_VERTEX_ATTRIB8_NV: u32 = 0x86CE;
pub const GL_EVAL_VERTEX_ATTRIB9_NV: u32 = 0x86CF;
pub const GL_EXCLUSION_KHR: u32 = 0x92A0;
pub const GL_EXCLUSION_NV: u32 = 0x92A0;
pub const GL_EXCLUSIVE_EXT: u32 = 0x8F11;
pub const GL_EXPAND_NEGATE_NV: u32 = 0x8539;
pub const GL_EXPAND_NORMAL_NV: u32 = 0x8538;
pub const GL_EXTENSIONS: u32 = 0x1F03;
pub const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD: u32 = 0x9160;
pub const GL_EYE_DISTANCE_TO_LINE_SGIS: u32 = 0x81F2;
pub const GL_EYE_DISTANCE_TO_POINT_SGIS: u32 = 0x81F0;
pub const GL_EYE_LINE_SGIS: u32 = 0x81F6;
pub const GL_EYE_PLANE: u32 = 0x2502;
pub const GL_EYE_PLANE_ABSOLUTE_NV: u32 = 0x855C;
pub const GL_EYE_POINT_SGIS: u32 = 0x81F4;
pub const GL_EYE_RADIAL_NV: u32 = 0x855B;
pub const GL_E_TIMES_F_NV: u32 = 0x8531;
pub const GL_FACTOR_MAX_AMD: u32 = 0x901D;
pub const GL_FACTOR_MIN_AMD: u32 = 0x901C;
pub const GL_FAILURE_NV: u32 = 0x9030;
pub const GL_FALSE: GLboolean = false;
pub const GL_FASTEST: u32 = 0x1101;
pub const GL_FENCE_APPLE: u32 = 0x8A0B;
pub const GL_FENCE_CONDITION_NV: u32 = 0x84F4;
pub const GL_FENCE_STATUS_NV: u32 = 0x84F3;
pub const GL_FIELDS_NV: u32 = 0x8E27;
pub const GL_FIELD_LOWER_NV: u32 = 0x9023;
pub const GL_FIELD_UPPER_NV: u32 = 0x9022;
pub const GL_FILE_NAME_NV: u32 = 0x9074;
pub const GL_FILL: u32 = 0x1B02;
pub const GL_FILL_RECTANGLE_NV: u32 = 0x933C;
pub const GL_FILTER: u32 = 0x829A;
pub const GL_FILTER4_SGIS: u32 = 0x8146;
pub const GL_FIRST_TO_REST_NV: u32 = 0x90AF;
pub const GL_FIRST_VERTEX_CONVENTION: u32 = 0x8E4D;
pub const GL_FIRST_VERTEX_CONVENTION_EXT: u32 = 0x8E4D;
pub const GL_FIXED: u32 = 0x140C;
pub const GL_FIXED_OES: u32 = 0x140C;
pub const GL_FIXED_ONLY: u32 = 0x891D;
pub const GL_FIXED_ONLY_ARB: u32 = 0x891D;
pub const GL_FLOAT: u32 = 0x1406;
pub const GL_FLOAT16_MAT2_AMD: u32 = 0x91C5;
pub const GL_FLOAT16_MAT2x3_AMD: u32 = 0x91C8;
pub const GL_FLOAT16_MAT2x4_AMD: u32 = 0x91C9;
pub const GL_FLOAT16_MAT3_AMD: u32 = 0x91C6;
pub const GL_FLOAT16_MAT3x2_AMD: u32 = 0x91CA;
pub const GL_FLOAT16_MAT3x4_AMD: u32 = 0x91CB;
pub const GL_FLOAT16_MAT4_AMD: u32 = 0x91C7;
pub const GL_FLOAT16_MAT4x2_AMD: u32 = 0x91CC;
pub const GL_FLOAT16_MAT4x3_AMD: u32 = 0x91CD;
pub const GL_FLOAT16_NV: u32 = 0x8FF8;
pub const GL_FLOAT16_VEC2_NV: u32 = 0x8FF9;
pub const GL_FLOAT16_VEC3_NV: u32 = 0x8FFA;
pub const GL_FLOAT16_VEC4_NV: u32 = 0x8FFB;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV: u32 = 0x8DAD;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV: u32 = 0x8DAD;
pub const GL_FLOAT_CLEAR_COLOR_VALUE_NV: u32 = 0x888D;
pub const GL_FLOAT_MAT2: u32 = 0x8B5A;
pub const GL_FLOAT_MAT2_ARB: u32 = 0x8B5A;
pub const GL_FLOAT_MAT2x3: u32 = 0x8B65;
pub const GL_FLOAT_MAT2x4: u32 = 0x8B66;
pub const GL_FLOAT_MAT3: u32 = 0x8B5B;
pub const GL_FLOAT_MAT3_ARB: u32 = 0x8B5B;
pub const GL_FLOAT_MAT3x2: u32 = 0x8B67;
pub const GL_FLOAT_MAT3x4: u32 = 0x8B68;
pub const GL_FLOAT_MAT4: u32 = 0x8B5C;
pub const GL_FLOAT_MAT4_ARB: u32 = 0x8B5C;
pub const GL_FLOAT_MAT4x2: u32 = 0x8B69;
pub const GL_FLOAT_MAT4x3: u32 = 0x8B6A;
pub const GL_FLOAT_R16_NV: u32 = 0x8884;
pub const GL_FLOAT_R32_NV: u32 = 0x8885;
pub const GL_FLOAT_RG16_NV: u32 = 0x8886;
pub const GL_FLOAT_RG32_NV: u32 = 0x8887;
pub const GL_FLOAT_RGB16_NV: u32 = 0x8888;
pub const GL_FLOAT_RGB32_NV: u32 = 0x8889;
pub const GL_FLOAT_RGBA16_NV: u32 = 0x888A;
pub const GL_FLOAT_RGBA32_NV: u32 = 0x888B;
pub const GL_FLOAT_RGBA_MODE_NV: u32 = 0x888E;
pub const GL_FLOAT_RGBA_NV: u32 = 0x8883;
pub const GL_FLOAT_RGB_NV: u32 = 0x8882;
pub const GL_FLOAT_RG_NV: u32 = 0x8881;
pub const GL_FLOAT_R_NV: u32 = 0x8880;
pub const GL_FLOAT_VEC2: u32 = 0x8B50;
pub const GL_FLOAT_VEC2_ARB: u32 = 0x8B50;
pub const GL_FLOAT_VEC3: u32 = 0x8B51;
pub const GL_FLOAT_VEC3_ARB: u32 = 0x8B51;
pub const GL_FLOAT_VEC4: u32 = 0x8B52;
pub const GL_FLOAT_VEC4_ARB: u32 = 0x8B52;
pub const GL_FOG: u32 = 0x0B60;
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889D;
pub const GL_FOG_COORDINATE_ARRAY_EXT: u32 = 0x8457;
pub const GL_FOG_COORDINATE_ARRAY_LIST_IBM: u32 = 103076;
pub const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM: u32 = 103086;
pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT: u32 = 0x8456;
pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT: u32 = 0x8455;
pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT: u32 = 0x8454;
pub const GL_FOG_COORDINATE_EXT: u32 = 0x8451;
pub const GL_FOG_COORDINATE_SOURCE_EXT: u32 = 0x8450;
pub const GL_FOG_COORD_ARRAY_ADDRESS_NV: u32 = 0x8F28;
pub const GL_FOG_COORD_ARRAY_LENGTH_NV: u32 = 0x8F32;
pub const GL_FOG_DISTANCE_MODE_NV: u32 = 0x855A;
pub const GL_FOG_FUNC_POINTS_SGIS: u32 = 0x812B;
pub const GL_FOG_FUNC_SGIS: u32 = 0x812A;
pub const GL_FOG_OFFSET_SGIX: u32 = 0x8198;
pub const GL_FOG_OFFSET_VALUE_SGIX: u32 = 0x8199;
pub const GL_FOG_SPECULAR_TEXTURE_WIN: u32 = 0x80EC;
pub const GL_FONT_ASCENDER_BIT_NV: u32 = 0x00200000;
pub const GL_FONT_DESCENDER_BIT_NV: u32 = 0x00400000;
pub const GL_FONT_GLYPHS_AVAILABLE_NV: u32 = 0x9368;
pub const GL_FONT_HAS_KERNING_BIT_NV: u32 = 0x10000000;
pub const GL_FONT_HEIGHT_BIT_NV: u32 = 0x00800000;
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV: u32 = 0x02000000;
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV: u32 = 0x01000000;
pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV: u32 = 0x20000000;
pub const GL_FONT_TARGET_UNAVAILABLE_NV: u32 = 0x9369;
pub const GL_FONT_UNAVAILABLE_NV: u32 = 0x936A;
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV: u32 = 0x04000000;
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV: u32 = 0x08000000;
pub const GL_FONT_UNINTELLIGIBLE_NV: u32 = 0x936B;
pub const GL_FONT_UNITS_PER_EM_BIT_NV: u32 = 0x00100000;
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV: u32 = 0x00040000;
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV: u32 = 0x00010000;
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV: u32 = 0x00080000;
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV: u32 = 0x00020000;
pub const GL_FORCE_BLUE_TO_ONE_NV: u32 = 0x8860;
pub const GL_FORMAT_SUBSAMPLE_244_244_OML: u32 = 0x8983;
pub const GL_FORMAT_SUBSAMPLE_24_24_OML: u32 = 0x8982;
pub const GL_FRACTIONAL_EVEN: u32 = 0x8E7C;
pub const GL_FRACTIONAL_ODD: u32 = 0x8E7B;
pub const GL_FRAGMENT_COLOR_EXT: u32 = 0x834C;
pub const GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX: u32 = 0x8402;
pub const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX: u32 = 0x8403;
pub const GL_FRAGMENT_COLOR_MATERIAL_SGIX: u32 = 0x8401;
pub const GL_FRAGMENT_COVERAGE_COLOR_NV: u32 = 0x92DE;
pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV: u32 = 0x92DD;
pub const GL_FRAGMENT_DEPTH_EXT: u32 = 0x8452;
pub const GL_FRAGMENT_INPUT_NV: u32 = 0x936D;
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS: u32 = 0x8E5D;
pub const GL_FRAGMENT_LIGHT0_SGIX: u32 = 0x840C;
pub const GL_FRAGMENT_LIGHT1_SGIX: u32 = 0x840D;
pub const GL_FRAGMENT_LIGHT2_SGIX: u32 = 0x840E;
pub const GL_FRAGMENT_LIGHT3_SGIX: u32 = 0x840F;
pub const GL_FRAGMENT_LIGHT4_SGIX: u32 = 0x8410;
pub const GL_FRAGMENT_LIGHT5_SGIX: u32 = 0x8411;
pub const GL_FRAGMENT_LIGHT6_SGIX: u32 = 0x8412;
pub const GL_FRAGMENT_LIGHT7_SGIX: u32 = 0x8413;
pub const GL_FRAGMENT_LIGHTING_SGIX: u32 = 0x8400;
pub const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX: u32 = 0x840A;
pub const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX: u32 = 0x8408;
pub const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX: u32 = 0x840B;
pub const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX: u32 = 0x8409;
pub const GL_FRAGMENT_MATERIAL_EXT: u32 = 0x8349;
pub const GL_FRAGMENT_NORMAL_EXT: u32 = 0x834A;
pub const GL_FRAGMENT_PROGRAM_ARB: u32 = 0x8804;
pub const GL_FRAGMENT_PROGRAM_BINDING_NV: u32 = 0x8873;
pub const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV: u32 = 0x8E5D;
pub const GL_FRAGMENT_PROGRAM_NV: u32 = 0x8870;
pub const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV: u32 = 0x8DA4;
pub const GL_FRAGMENT_SHADER: u32 = 0x8B30;
pub const GL_FRAGMENT_SHADER_ARB: u32 = 0x8B30;
pub const GL_FRAGMENT_SHADER_ATI: u32 = 0x8920;
pub const GL_FRAGMENT_SHADER_BIT: u32 = 0x00000002;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT: u32 = 0x8B8B;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB: u32 = 0x8B8B;
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT: u32 = 0x8A52;
pub const GL_FRAGMENT_SHADER_INVOCATIONS: u32 = 0x82F4;
pub const GL_FRAGMENT_SHADER_INVOCATIONS_ARB: u32 = 0x82F4;
pub const GL_FRAGMENT_SUBROUTINE: u32 = 0x92EC;
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM: u32 = 0x92F2;
pub const GL_FRAGMENT_TEXTURE: u32 = 0x829F;
pub const GL_FRAMEBUFFER: u32 = 0x8D40;
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: u32 = 0x8215;
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: u32 = 0x8214;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: u32 = 0x8210;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: u32 = 0x8211;
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: u32 = 0x8216;
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: u32 = 0x8213;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED: u32 = 0x8DA7;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB: u32 = 0x8DA7;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT: u32 = 0x8DA7;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: u32 = 0x8CD1;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT: u32 = 0x8CD1;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: u32 = 0x8CD0;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT: u32 = 0x8CD0;
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE: u32 = 0x8212;
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: u32 = 0x8217;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT: u32 = 0x8CD4;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: u32 = 0x9632;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: u32 = 0x8CD3;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT: u32 = 0x8CD3;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: u32 = 0x8CD4;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT: u32 = 0x8CD4;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: u32 = 0x8CD2;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT: u32 = 0x8CD2;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: u32 = 0x9630;
pub const GL_FRAMEBUFFER_BARRIER_BIT: u32 = 0x00000400;
pub const GL_FRAMEBUFFER_BARRIER_BIT_EXT: u32 = 0x00000400;
pub const GL_FRAMEBUFFER_BINDING: u32 = 0x8CA6;
pub const GL_FRAMEBUFFER_BINDING_EXT: u32 = 0x8CA6;
pub const GL_FRAMEBUFFER_BLEND: u32 = 0x828B;
pub const GL_FRAMEBUFFER_COMPLETE: u32 = 0x8CD5;
pub const GL_FRAMEBUFFER_COMPLETE_EXT: u32 = 0x8CD5;
pub const GL_FRAMEBUFFER_DEFAULT: u32 = 0x8218;
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS: u32 = 0x9314;
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT: u32 = 0x9311;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS: u32 = 0x9312;
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES: u32 = 0x9313;
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH: u32 = 0x9310;
pub const GL_FRAMEBUFFER_EXT: u32 = 0x8D40;
pub const GL_FRAMEBUFFER_FLIP_X_MESA: u32 = 0x8BBC;
pub const GL_FRAMEBUFFER_FLIP_Y_MESA: u32 = 0x8BBB;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: u32 = 0x8CD6;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT: u32 = 0x8CD6;
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT: u32 = 0x8CD9;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: u32 = 0x8CDB;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT: u32 = 0x8CDB;
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT: u32 = 0x8CDA;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB: u32 = 0x8DA9;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT: u32 = 0x8DA9;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: u32 = 0x8DA8;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB: u32 = 0x8DA8;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT: u32 = 0x8DA8;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: u32 = 0x8CD7;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT: u32 = 0x8CD7;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: u32 = 0x8D56;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT: u32 = 0x8D56;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER: u32 = 0x8CDC;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT: u32 = 0x8CDC;
pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: u32 = 0x9633;
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB: u32 = 0x9342;
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV: u32 = 0x9342;
pub const GL_FRAMEBUFFER_RENDERABLE: u32 = 0x8289;
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED: u32 = 0x828A;
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB: u32 = 0x9343;
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV: u32 = 0x9343;
pub const GL_FRAMEBUFFER_SRGB: u32 = 0x8DB9;
pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT: u32 = 0x8DBA;
pub const GL_FRAMEBUFFER_SRGB_EXT: u32 = 0x8DB9;
pub const GL_FRAMEBUFFER_SWAP_XY_MESA: u32 = 0x8BBD;
pub const GL_FRAMEBUFFER_UNDEFINED: u32 = 0x8219;
pub const GL_FRAMEBUFFER_UNSUPPORTED: u32 = 0x8CDD;
pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT: u32 = 0x8CDD;
pub const GL_FRAMEZOOM_FACTOR_SGIX: u32 = 0x818C;
pub const GL_FRAMEZOOM_SGIX: u32 = 0x818B;
pub const GL_FRAME_NV: u32 = 0x8E26;
pub const GL_FRONT: u32 = 0x0404;
pub const GL_FRONT_AND_BACK: u32 = 0x0408;
pub const GL_FRONT_FACE: u32 = 0x0B46;
pub const GL_FRONT_FACE_COMMAND_NV: u32 = 0x0012;
pub const GL_FRONT_LEFT: u32 = 0x0400;
pub const GL_FRONT_RIGHT: u32 = 0x0401;
pub const GL_FULL_RANGE_EXT: u32 = 0x87E1;
pub const GL_FULL_STIPPLE_HINT_PGI: u32 = 0x1A219;
pub const GL_FULL_SUPPORT: u32 = 0x82B7;
pub const GL_FUNC_ADD: u32 = 0x8006;
pub const GL_FUNC_ADD_EXT: u32 = 0x8006;
pub const GL_FUNC_REVERSE_SUBTRACT: u32 = 0x800B;
pub const GL_FUNC_REVERSE_SUBTRACT_EXT: u32 = 0x800B;
pub const GL_FUNC_SUBTRACT: u32 = 0x800A;
pub const GL_FUNC_SUBTRACT_EXT: u32 = 0x800A;
pub const GL_GENERATE_MIPMAP_HINT_SGIS: u32 = 0x8192;
pub const GL_GENERATE_MIPMAP_SGIS: u32 = 0x8191;
pub const GL_GENERIC_ATTRIB_NV: u32 = 0x8C7D;
pub const GL_GEOMETRY_DEFORMATION_BIT_SGIX: u32 = 0x00000002;
pub const GL_GEOMETRY_DEFORMATION_SGIX: u32 = 0x8194;
pub const GL_GEOMETRY_INPUT_TYPE: u32 = 0x8917;
pub const GL_GEOMETRY_INPUT_TYPE_ARB: u32 = 0x8DDB;
pub const GL_GEOMETRY_INPUT_TYPE_EXT: u32 = 0x8DDB;
pub const GL_GEOMETRY_OUTPUT_TYPE: u32 = 0x8918;
pub const GL_GEOMETRY_OUTPUT_TYPE_ARB: u32 = 0x8DDC;
pub const GL_GEOMETRY_OUTPUT_TYPE_EXT: u32 = 0x8DDC;
pub const GL_GEOMETRY_PROGRAM_NV: u32 = 0x8C26;
pub const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV: u32 = 0x8DA3;
pub const GL_GEOMETRY_SHADER: u32 = 0x8DD9;
pub const GL_GEOMETRY_SHADER_ARB: u32 = 0x8DD9;
pub const GL_GEOMETRY_SHADER_BIT: u32 = 0x00000004;
pub const GL_GEOMETRY_SHADER_EXT: u32 = 0x8DD9;
pub const GL_GEOMETRY_SHADER_INVOCATIONS: u32 = 0x887F;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED: u32 = 0x82F3;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB: u32 = 0x82F3;
pub const GL_GEOMETRY_SUBROUTINE: u32 = 0x92EB;
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM: u32 = 0x92F1;
pub const GL_GEOMETRY_TEXTURE: u32 = 0x829E;
pub const GL_GEOMETRY_VERTICES_OUT: u32 = 0x8916;
pub const GL_GEOMETRY_VERTICES_OUT_ARB: u32 = 0x8DDA;
pub const GL_GEOMETRY_VERTICES_OUT_EXT: u32 = 0x8DDA;
pub const GL_GEQUAL: u32 = 0x0206;
pub const GL_GET_TEXTURE_IMAGE_FORMAT: u32 = 0x8291;
pub const GL_GET_TEXTURE_IMAGE_TYPE: u32 = 0x8292;
pub const GL_GLOBAL_ALPHA_FACTOR_SUN: u32 = 0x81DA;
pub const GL_GLOBAL_ALPHA_SUN: u32 = 0x81D9;
pub const GL_GLYPH_HAS_KERNING_BIT_NV: u32 = 0x100;
pub const GL_GLYPH_HEIGHT_BIT_NV: u32 = 0x02;
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV: u32 = 0x10;
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV: u32 = 0x04;
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV: u32 = 0x08;
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV: u32 = 0x80;
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV: u32 = 0x20;
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV: u32 = 0x40;
pub const GL_GLYPH_WIDTH_BIT_NV: u32 = 0x01;
pub const GL_GPU_ADDRESS_NV: u32 = 0x8F34;
pub const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX: u32 = 0x9049;
pub const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX: u32 = 0x9047;
pub const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX: u32 = 0x904B;
pub const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX: u32 = 0x904A;
pub const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX: u32 = 0x9048;
pub const GL_GREATER: u32 = 0x0204;
pub const GL_GREEN: u32 = 0x1904;
pub const GL_GREEN_BIT_ATI: u32 = 0x00000002;
pub const GL_GREEN_INTEGER: u32 = 0x8D95;
pub const GL_GREEN_INTEGER_EXT: u32 = 0x8D95;
pub const GL_GREEN_MAX_CLAMP_INGR: u32 = 0x8565;
pub const GL_GREEN_MIN_CLAMP_INGR: u32 = 0x8561;
pub const GL_GREEN_NV: u32 = 0x1904;
pub const GL_GUILTY_CONTEXT_RESET: u32 = 0x8253;
pub const GL_GUILTY_CONTEXT_RESET_ARB: u32 = 0x8253;
pub const GL_HALF_APPLE: u32 = 0x140B;
pub const GL_HALF_BIAS_NEGATE_NV: u32 = 0x853B;
pub const GL_HALF_BIAS_NORMAL_NV: u32 = 0x853A;
pub const GL_HALF_BIT_ATI: u32 = 0x00000008;
pub const GL_HALF_FLOAT: u32 = 0x140B;
pub const GL_HALF_FLOAT_ARB: u32 = 0x140B;
pub const GL_HALF_FLOAT_NV: u32 = 0x140B;
pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT: u32 = 0x958B;
pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT: u32 = 0x958C;
pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT: u32 = 0x9594;
pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT: u32 = 0x958A;
pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT: u32 = 0x9589;
pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT: u32 = 0x9586;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT: u32 = 0x9587;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT: u32 = 0x9588;
pub const GL_HARDLIGHT_KHR: u32 = 0x929B;
pub const GL_HARDLIGHT_NV: u32 = 0x929B;
pub const GL_HARDMIX_NV: u32 = 0x92A9;
pub const GL_HIGH_FLOAT: u32 = 0x8DF2;
pub const GL_HIGH_INT: u32 = 0x8DF5;
pub const GL_HILO16_NV: u32 = 0x86F8;
pub const GL_HILO8_NV: u32 = 0x885E;
pub const GL_HILO_NV: u32 = 0x86F4;
pub const GL_HISTOGRAM_ALPHA_SIZE_EXT: u32 = 0x802B;
pub const GL_HISTOGRAM_BLUE_SIZE_EXT: u32 = 0x802A;
pub const GL_HISTOGRAM_EXT: u32 = 0x8024;
pub const GL_HISTOGRAM_FORMAT_EXT: u32 = 0x8027;
pub const GL_HISTOGRAM_GREEN_SIZE_EXT: u32 = 0x8029;
pub const GL_HISTOGRAM_LUMINANCE_SIZE_EXT: u32 = 0x802C;
pub const GL_HISTOGRAM_RED_SIZE_EXT: u32 = 0x8028;
pub const GL_HISTOGRAM_SINK_EXT: u32 = 0x802D;
pub const GL_HISTOGRAM_WIDTH_EXT: u32 = 0x8026;
pub const GL_HI_BIAS_NV: u32 = 0x8714;
pub const GL_HI_SCALE_NV: u32 = 0x870E;
pub const GL_HORIZONTAL_LINE_TO_NV: u32 = 0x06;
pub const GL_HSL_COLOR_KHR: u32 = 0x92AF;
pub const GL_HSL_COLOR_NV: u32 = 0x92AF;
pub const GL_HSL_HUE_KHR: u32 = 0x92AD;
pub const GL_HSL_HUE_NV: u32 = 0x92AD;
pub const GL_HSL_LUMINOSITY_KHR: u32 = 0x92B0;
pub const GL_HSL_LUMINOSITY_NV: u32 = 0x92B0;
pub const GL_HSL_SATURATION_KHR: u32 = 0x92AE;
pub const GL_HSL_SATURATION_NV: u32 = 0x92AE;
pub const GL_IDENTITY_NV: u32 = 0x862A;
pub const GL_IGNORE_BORDER_HP: u32 = 0x8150;
pub const GL_IMAGE_1D: u32 = 0x904C;
pub const GL_IMAGE_1D_ARRAY: u32 = 0x9052;
pub const GL_IMAGE_1D_ARRAY_EXT: u32 = 0x9052;
pub const GL_IMAGE_1D_EXT: u32 = 0x904C;
pub const GL_IMAGE_2D: u32 = 0x904D;
pub const GL_IMAGE_2D_ARRAY: u32 = 0x9053;
pub const GL_IMAGE_2D_ARRAY_EXT: u32 = 0x9053;
pub const GL_IMAGE_2D_EXT: u32 = 0x904D;
pub const GL_IMAGE_2D_MULTISAMPLE: u32 = 0x9055;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 0x9056;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: u32 = 0x9056;
pub const GL_IMAGE_2D_MULTISAMPLE_EXT: u32 = 0x9055;
pub const GL_IMAGE_2D_RECT: u32 = 0x904F;
pub const GL_IMAGE_2D_RECT_EXT: u32 = 0x904F;
pub const GL_IMAGE_3D: u32 = 0x904E;
pub const GL_IMAGE_3D_EXT: u32 = 0x904E;
pub const GL_IMAGE_BINDING_ACCESS: u32 = 0x8F3E;
pub const GL_IMAGE_BINDING_ACCESS_EXT: u32 = 0x8F3E;
pub const GL_IMAGE_BINDING_FORMAT: u32 = 0x906E;
pub const GL_IMAGE_BINDING_FORMAT_EXT: u32 = 0x906E;
pub const GL_IMAGE_BINDING_LAYER: u32 = 0x8F3D;
pub const GL_IMAGE_BINDING_LAYERED: u32 = 0x8F3C;
pub const GL_IMAGE_BINDING_LAYERED_EXT: u32 = 0x8F3C;
pub const GL_IMAGE_BINDING_LAYER_EXT: u32 = 0x8F3D;
pub const GL_IMAGE_BINDING_LEVEL: u32 = 0x8F3B;
pub const GL_IMAGE_BINDING_LEVEL_EXT: u32 = 0x8F3B;
pub const GL_IMAGE_BINDING_NAME: u32 = 0x8F3A;
pub const GL_IMAGE_BINDING_NAME_EXT: u32 = 0x8F3A;
pub const GL_IMAGE_BUFFER: u32 = 0x9051;
pub const GL_IMAGE_BUFFER_EXT: u32 = 0x9051;
pub const GL_IMAGE_CLASS_10_10_10_2: u32 = 0x82C3;
pub const GL_IMAGE_CLASS_11_11_10: u32 = 0x82C2;
pub const GL_IMAGE_CLASS_1_X_16: u32 = 0x82BE;
pub const GL_IMAGE_CLASS_1_X_32: u32 = 0x82BB;
pub const GL_IMAGE_CLASS_1_X_8: u32 = 0x82C1;
pub const GL_IMAGE_CLASS_2_X_16: u32 = 0x82BD;
pub const GL_IMAGE_CLASS_2_X_32: u32 = 0x82BA;
pub const GL_IMAGE_CLASS_2_X_8: u32 = 0x82C0;
pub const GL_IMAGE_CLASS_4_X_16: u32 = 0x82BC;
pub const GL_IMAGE_CLASS_4_X_32: u32 = 0x82B9;
pub const GL_IMAGE_CLASS_4_X_8: u32 = 0x82BF;
pub const GL_IMAGE_COMPATIBILITY_CLASS: u32 = 0x82A8;
pub const GL_IMAGE_CUBE: u32 = 0x9050;
pub const GL_IMAGE_CUBE_EXT: u32 = 0x9050;
pub const GL_IMAGE_CUBE_MAP_ARRAY: u32 = 0x9054;
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 0x9054;
pub const GL_IMAGE_CUBIC_WEIGHT_HP: u32 = 0x815E;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS: u32 = 0x90C9;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE: u32 = 0x90C8;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE: u32 = 0x90C7;
pub const GL_IMAGE_MAG_FILTER_HP: u32 = 0x815C;
pub const GL_IMAGE_MIN_FILTER_HP: u32 = 0x815D;
pub const GL_IMAGE_PIXEL_FORMAT: u32 = 0x82A9;
pub const GL_IMAGE_PIXEL_TYPE: u32 = 0x82AA;
pub const GL_IMAGE_ROTATE_ANGLE_HP: u32 = 0x8159;
pub const GL_IMAGE_ROTATE_ORIGIN_X_HP: u32 = 0x815A;
pub const GL_IMAGE_ROTATE_ORIGIN_Y_HP: u32 = 0x815B;
pub const GL_IMAGE_SCALE_X_HP: u32 = 0x8155;
pub const GL_IMAGE_SCALE_Y_HP: u32 = 0x8156;
pub const GL_IMAGE_TEXEL_SIZE: u32 = 0x82A7;
pub const GL_IMAGE_TRANSFORM_2D_HP: u32 = 0x8161;
pub const GL_IMAGE_TRANSLATE_X_HP: u32 = 0x8157;
pub const GL_IMAGE_TRANSLATE_Y_HP: u32 = 0x8158;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT: u32 = 0x8B9B;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES: u32 = 0x8B9B;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE: u32 = 0x8B9A;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES: u32 = 0x8B9A;
pub const GL_INCLUSIVE_EXT: u32 = 0x8F10;
pub const GL_INCR: u32 = 0x1E02;
pub const GL_INCR_WRAP: u32 = 0x8507;
pub const GL_INCR_WRAP_EXT: u32 = 0x8507;
pub const GL_INDEX_ARRAY_ADDRESS_NV: u32 = 0x8F24;
pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8899;
pub const GL_INDEX_ARRAY_COUNT_EXT: u32 = 0x8087;
pub const GL_INDEX_ARRAY_EXT: u32 = 0x8077;
pub const GL_INDEX_ARRAY_LENGTH_NV: u32 = 0x8F2E;
pub const GL_INDEX_ARRAY_LIST_IBM: u32 = 103073;
pub const GL_INDEX_ARRAY_LIST_STRIDE_IBM: u32 = 103083;
pub const GL_INDEX_ARRAY_POINTER_EXT: u32 = 0x8091;
pub const GL_INDEX_ARRAY_STRIDE_EXT: u32 = 0x8086;
pub const GL_INDEX_ARRAY_TYPE_EXT: u32 = 0x8085;
pub const GL_INDEX_BIT_PGI: u32 = 0x00080000;
pub const GL_INDEX_MATERIAL_EXT: u32 = 0x81B8;
pub const GL_INDEX_MATERIAL_FACE_EXT: u32 = 0x81BA;
pub const GL_INDEX_MATERIAL_PARAMETER_EXT: u32 = 0x81B9;
pub const GL_INDEX_TEST_EXT: u32 = 0x81B5;
pub const GL_INDEX_TEST_FUNC_EXT: u32 = 0x81B6;
pub const GL_INDEX_TEST_REF_EXT: u32 = 0x81B7;
pub const GL_INFO_LOG_LENGTH: u32 = 0x8B84;
pub const GL_INNOCENT_CONTEXT_RESET: u32 = 0x8254;
pub const GL_INNOCENT_CONTEXT_RESET_ARB: u32 = 0x8254;
pub const GL_INSTRUMENT_BUFFER_POINTER_SGIX: u32 = 0x8180;
pub const GL_INSTRUMENT_MEASUREMENTS_SGIX: u32 = 0x8181;
pub const GL_INT: u32 = 0x1404;
pub const GL_INT16_NV: u32 = 0x8FE4;
pub const GL_INT16_VEC2_NV: u32 = 0x8FE5;
pub const GL_INT16_VEC3_NV: u32 = 0x8FE6;
pub const GL_INT16_VEC4_NV: u32 = 0x8FE7;
pub const GL_INT64_ARB: u32 = 0x140E;
pub const GL_INT64_NV: u32 = 0x140E;
pub const GL_INT64_VEC2_ARB: u32 = 0x8FE9;
pub const GL_INT64_VEC2_NV: u32 = 0x8FE9;
pub const GL_INT64_VEC3_ARB: u32 = 0x8FEA;
pub const GL_INT64_VEC3_NV: u32 = 0x8FEA;
pub const GL_INT64_VEC4_ARB: u32 = 0x8FEB;
pub const GL_INT64_VEC4_NV: u32 = 0x8FEB;
pub const GL_INT8_NV: u32 = 0x8FE0;
pub const GL_INT8_VEC2_NV: u32 = 0x8FE1;
pub const GL_INT8_VEC3_NV: u32 = 0x8FE2;
pub const GL_INT8_VEC4_NV: u32 = 0x8FE3;
pub const GL_INTENSITY12_EXT: u32 = 0x804C;
pub const GL_INTENSITY16F_ARB: u32 = 0x881D;
pub const GL_INTENSITY16I_EXT: u32 = 0x8D8B;
pub const GL_INTENSITY16UI_EXT: u32 = 0x8D79;
pub const GL_INTENSITY16_EXT: u32 = 0x804D;
pub const GL_INTENSITY16_SNORM: u32 = 0x901B;
pub const GL_INTENSITY32F_ARB: u32 = 0x8817;
pub const GL_INTENSITY32I_EXT: u32 = 0x8D85;
pub const GL_INTENSITY32UI_EXT: u32 = 0x8D73;
pub const GL_INTENSITY4_EXT: u32 = 0x804A;
pub const GL_INTENSITY8I_EXT: u32 = 0x8D91;
pub const GL_INTENSITY8UI_EXT: u32 = 0x8D7F;
pub const GL_INTENSITY8_EXT: u32 = 0x804B;
pub const GL_INTENSITY8_SNORM: u32 = 0x9017;
pub const GL_INTENSITY_EXT: u32 = 0x8049;
pub const GL_INTENSITY_FLOAT16_APPLE: u32 = 0x881D;
pub const GL_INTENSITY_FLOAT16_ATI: u32 = 0x881D;
pub const GL_INTENSITY_FLOAT32_APPLE: u32 = 0x8817;
pub const GL_INTENSITY_FLOAT32_ATI: u32 = 0x8817;
pub const GL_INTENSITY_SNORM: u32 = 0x9013;
pub const GL_INTERLACE_OML: u32 = 0x8980;
pub const GL_INTERLACE_READ_INGR: u32 = 0x8568;
pub const GL_INTERLACE_READ_OML: u32 = 0x8981;
pub const GL_INTERLACE_SGIX: u32 = 0x8094;
pub const GL_INTERLEAVED_ATTRIBS: u32 = 0x8C8C;
pub const GL_INTERLEAVED_ATTRIBS_EXT: u32 = 0x8C8C;
pub const GL_INTERLEAVED_ATTRIBS_NV: u32 = 0x8C8C;
pub const GL_INTERNALFORMAT_ALPHA_SIZE: u32 = 0x8274;
pub const GL_INTERNALFORMAT_ALPHA_TYPE: u32 = 0x827B;
pub const GL_INTERNALFORMAT_BLUE_SIZE: u32 = 0x8273;
pub const GL_INTERNALFORMAT_BLUE_TYPE: u32 = 0x827A;
pub const GL_INTERNALFORMAT_DEPTH_SIZE: u32 = 0x8275;
pub const GL_INTERNALFORMAT_DEPTH_TYPE: u32 = 0x827C;
pub const GL_INTERNALFORMAT_GREEN_SIZE: u32 = 0x8272;
pub const GL_INTERNALFORMAT_GREEN_TYPE: u32 = 0x8279;
pub const GL_INTERNALFORMAT_PREFERRED: u32 = 0x8270;
pub const GL_INTERNALFORMAT_RED_SIZE: u32 = 0x8271;
pub const GL_INTERNALFORMAT_RED_TYPE: u32 = 0x8278;
pub const GL_INTERNALFORMAT_SHARED_SIZE: u32 = 0x8277;
pub const GL_INTERNALFORMAT_STENCIL_SIZE: u32 = 0x8276;
pub const GL_INTERNALFORMAT_STENCIL_TYPE: u32 = 0x827D;
pub const GL_INTERNALFORMAT_SUPPORTED: u32 = 0x826F;
pub const GL_INTERPOLATE_ARB: u32 = 0x8575;
pub const GL_INTERPOLATE_EXT: u32 = 0x8575;
pub const GL_INT_2_10_10_10_REV: u32 = 0x8D9F;
pub const GL_INT_IMAGE_1D: u32 = 0x9057;
pub const GL_INT_IMAGE_1D_ARRAY: u32 = 0x905D;
pub const GL_INT_IMAGE_1D_ARRAY_EXT: u32 = 0x905D;
pub const GL_INT_IMAGE_1D_EXT: u32 = 0x9057;
pub const GL_INT_IMAGE_2D: u32 = 0x9058;
pub const GL_INT_IMAGE_2D_ARRAY: u32 = 0x905E;
pub const GL_INT_IMAGE_2D_ARRAY_EXT: u32 = 0x905E;
pub const GL_INT_IMAGE_2D_EXT: u32 = 0x9058;
pub const GL_INT_IMAGE_2D_MULTISAMPLE: u32 = 0x9060;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 0x9061;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: u32 = 0x9061;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_EXT: u32 = 0x9060;
pub const GL_INT_IMAGE_2D_RECT: u32 = 0x905A;
pub const GL_INT_IMAGE_2D_RECT_EXT: u32 = 0x905A;
pub const GL_INT_IMAGE_3D: u32 = 0x9059;
pub const GL_INT_IMAGE_3D_EXT: u32 = 0x9059;
pub const GL_INT_IMAGE_BUFFER: u32 = 0x905C;
pub const GL_INT_IMAGE_BUFFER_EXT: u32 = 0x905C;
pub const GL_INT_IMAGE_CUBE: u32 = 0x905B;
pub const GL_INT_IMAGE_CUBE_EXT: u32 = 0x905B;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY: u32 = 0x905F;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 0x905F;
pub const GL_INT_SAMPLER_1D: u32 = 0x8DC9;
pub const GL_INT_SAMPLER_1D_ARRAY: u32 = 0x8DCE;
pub const GL_INT_SAMPLER_1D_ARRAY_EXT: u32 = 0x8DCE;
pub const GL_INT_SAMPLER_1D_EXT: u32 = 0x8DC9;
pub const GL_INT_SAMPLER_2D: u32 = 0x8DCA;
pub const GL_INT_SAMPLER_2D_ARRAY: u32 = 0x8DCF;
pub const GL_INT_SAMPLER_2D_ARRAY_EXT: u32 = 0x8DCF;
pub const GL_INT_SAMPLER_2D_EXT: u32 = 0x8DCA;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE: u32 = 0x9109;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 0x910C;
pub const GL_INT_SAMPLER_2D_RECT: u32 = 0x8DCD;
pub const GL_INT_SAMPLER_2D_RECT_EXT: u32 = 0x8DCD;
pub const GL_INT_SAMPLER_3D: u32 = 0x8DCB;
pub const GL_INT_SAMPLER_3D_EXT: u32 = 0x8DCB;
pub const GL_INT_SAMPLER_BUFFER: u32 = 0x8DD0;
pub const GL_INT_SAMPLER_BUFFER_AMD: u32 = 0x9002;
pub const GL_INT_SAMPLER_BUFFER_EXT: u32 = 0x8DD0;
pub const GL_INT_SAMPLER_CUBE: u32 = 0x8DCC;
pub const GL_INT_SAMPLER_CUBE_EXT: u32 = 0x8DCC;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 0x900E;
pub const GL_INT_SAMPLER_RENDERBUFFER_NV: u32 = 0x8E57;
pub const GL_INT_VEC2: u32 = 0x8B53;
pub const GL_INT_VEC2_ARB: u32 = 0x8B53;
pub const GL_INT_VEC3: u32 = 0x8B54;
pub const GL_INT_VEC3_ARB: u32 = 0x8B54;
pub const GL_INT_VEC4: u32 = 0x8B55;
pub const GL_INT_VEC4_ARB: u32 = 0x8B55;
pub const GL_INVALID_ENUM: u32 = 0x0500;
pub const GL_INVALID_FRAMEBUFFER_OPERATION: u32 = 0x0506;
pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT: u32 = 0x0506;
pub const GL_INVALID_INDEX: u32 = 0xFFFFFFFF;
pub const GL_INVALID_OPERATION: u32 = 0x0502;
pub const GL_INVALID_VALUE: u32 = 0x0501;
pub const GL_INVARIANT_DATATYPE_EXT: u32 = 0x87EB;
pub const GL_INVARIANT_EXT: u32 = 0x87C2;
pub const GL_INVARIANT_VALUE_EXT: u32 = 0x87EA;
pub const GL_INVERSE_NV: u32 = 0x862B;
pub const GL_INVERSE_TRANSPOSE_NV: u32 = 0x862D;
pub const GL_INVERT: u32 = 0x150A;
pub const GL_INVERTED_SCREEN_W_REND: u32 = 0x8491;
pub const GL_INVERT_OVG_NV: u32 = 0x92B4;
pub const GL_INVERT_RGB_NV: u32 = 0x92A3;
pub const GL_IR_INSTRUMENT1_SGIX: u32 = 0x817F;
pub const GL_ISOLINES: u32 = 0x8E7A;
pub const GL_IS_PER_PATCH: u32 = 0x92E7;
pub const GL_IS_ROW_MAJOR: u32 = 0x9300;
pub const GL_ITALIC_BIT_NV: u32 = 0x02;
pub const GL_IUI_N3F_V2F_EXT: u32 = 0x81AF;
pub const GL_IUI_N3F_V3F_EXT: u32 = 0x81B0;
pub const GL_IUI_V2F_EXT: u32 = 0x81AD;
pub const GL_IUI_V3F_EXT: u32 = 0x81AE;
pub const GL_KEEP: u32 = 0x1E00;
pub const GL_LARGE_CCW_ARC_TO_NV: u32 = 0x16;
pub const GL_LARGE_CW_ARC_TO_NV: u32 = 0x18;
pub const GL_LAST_VERTEX_CONVENTION: u32 = 0x8E4E;
pub const GL_LAST_VERTEX_CONVENTION_EXT: u32 = 0x8E4E;
pub const GL_LAST_VIDEO_CAPTURE_STATUS_NV: u32 = 0x9027;
pub const GL_LAYER_NV: u32 = 0x8DAA;
pub const GL_LAYER_PROVOKING_VERTEX: u32 = 0x825E;
pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT: u32 = 0x958E;
pub const GL_LAYOUT_DEFAULT_INTEL: u32 = 0;
pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT: u32 = 0x9531;
pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT: u32 = 0x9530;
pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT: u32 = 0x958F;
pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT: u32 = 0x9590;
pub const GL_LAYOUT_GENERAL_EXT: u32 = 0x958D;
pub const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL: u32 = 2;
pub const GL_LAYOUT_LINEAR_INTEL: u32 = 1;
pub const GL_LAYOUT_SHADER_READ_ONLY_EXT: u32 = 0x9591;
pub const GL_LAYOUT_TRANSFER_DST_EXT: u32 = 0x9593;
pub const GL_LAYOUT_TRANSFER_SRC_EXT: u32 = 0x9592;
pub const GL_LEFT: u32 = 0x0406;
pub const GL_LEQUAL: u32 = 0x0203;
pub const GL_LERP_ATI: u32 = 0x8969;
pub const GL_LESS: u32 = 0x0201;
pub const GL_LGPU_SEPARATE_STORAGE_BIT_NVX: u32 = 0x0800;
pub const GL_LIGHTEN_KHR: u32 = 0x9298;
pub const GL_LIGHTEN_NV: u32 = 0x9298;
pub const GL_LIGHT_ENV_MODE_SGIX: u32 = 0x8407;
pub const GL_LIGHT_MODEL_COLOR_CONTROL_EXT: u32 = 0x81F8;
pub const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE: u32 = 0x85B0;
pub const GL_LINE: u32 = 0x1B01;
pub const GL_LINEAR: u32 = 0x2601;
pub const GL_LINEARBURN_NV: u32 = 0x92A5;
pub const GL_LINEARDODGE_NV: u32 = 0x92A4;
pub const GL_LINEARLIGHT_NV: u32 = 0x92A7;
pub const GL_LINEAR_CLIPMAP_LINEAR_SGIX: u32 = 0x8170;
pub const GL_LINEAR_CLIPMAP_NEAREST_SGIX: u32 = 0x844F;
pub const GL_LINEAR_DETAIL_ALPHA_SGIS: u32 = 0x8098;
pub const GL_LINEAR_DETAIL_COLOR_SGIS: u32 = 0x8099;
pub const GL_LINEAR_DETAIL_SGIS: u32 = 0x8097;
pub const GL_LINEAR_MIPMAP_LINEAR: u32 = 0x2703;
pub const GL_LINEAR_MIPMAP_NEAREST: u32 = 0x2701;
pub const GL_LINEAR_SHARPEN_ALPHA_SGIS: u32 = 0x80AE;
pub const GL_LINEAR_SHARPEN_COLOR_SGIS: u32 = 0x80AF;
pub const GL_LINEAR_SHARPEN_SGIS: u32 = 0x80AD;
pub const GL_LINEAR_TILING_EXT: u32 = 0x9585;
pub const GL_LINES: u32 = 0x0001;
pub const GL_LINES_ADJACENCY: u32 = 0x000A;
pub const GL_LINES_ADJACENCY_ARB: u32 = 0x000A;
pub const GL_LINES_ADJACENCY_EXT: u32 = 0x000A;
pub const GL_LINE_LOOP: u32 = 0x0002;
pub const GL_LINE_SMOOTH: u32 = 0x0B20;
pub const GL_LINE_SMOOTH_HINT: u32 = 0x0C52;
pub const GL_LINE_STRIP: u32 = 0x0003;
pub const GL_LINE_STRIP_ADJACENCY: u32 = 0x000B;
pub const GL_LINE_STRIP_ADJACENCY_ARB: u32 = 0x000B;
pub const GL_LINE_STRIP_ADJACENCY_EXT: u32 = 0x000B;
pub const GL_LINE_TO_NV: u32 = 0x04;
pub const GL_LINE_WIDTH: u32 = 0x0B21;
pub const GL_LINE_WIDTH_COMMAND_NV: u32 = 0x000D;
pub const GL_LINE_WIDTH_GRANULARITY: u32 = 0x0B23;
pub const GL_LINE_WIDTH_RANGE: u32 = 0x0B22;
pub const GL_LINK_STATUS: u32 = 0x8B82;
pub const GL_LIST_PRIORITY_SGIX: u32 = 0x8182;
pub const GL_LOCAL_CONSTANT_DATATYPE_EXT: u32 = 0x87ED;
pub const GL_LOCAL_CONSTANT_EXT: u32 = 0x87C3;
pub const GL_LOCAL_CONSTANT_VALUE_EXT: u32 = 0x87EC;
pub const GL_LOCAL_EXT: u32 = 0x87C4;
pub const GL_LOCATION: u32 = 0x930E;
pub const GL_LOCATION_COMPONENT: u32 = 0x934A;
pub const GL_LOCATION_INDEX: u32 = 0x930F;
pub const GL_LOGIC_OP_MODE: u32 = 0x0BF0;
pub const GL_LOSE_CONTEXT_ON_RESET: u32 = 0x8252;
pub const GL_LOSE_CONTEXT_ON_RESET_ARB: u32 = 0x8252;
pub const GL_LOWER_LEFT: u32 = 0x8CA1;
pub const GL_LOW_FLOAT: u32 = 0x8DF0;
pub const GL_LOW_INT: u32 = 0x8DF3;
pub const GL_LO_BIAS_NV: u32 = 0x8715;
pub const GL_LO_SCALE_NV: u32 = 0x870F;
pub const GL_LUID_SIZE_EXT: u32 = 8;
pub const GL_LUMINANCE12_ALPHA12_EXT: u32 = 0x8047;
pub const GL_LUMINANCE12_ALPHA4_EXT: u32 = 0x8046;
pub const GL_LUMINANCE12_EXT: u32 = 0x8041;
pub const GL_LUMINANCE16F_ARB: u32 = 0x881E;
pub const GL_LUMINANCE16I_EXT: u32 = 0x8D8C;
pub const GL_LUMINANCE16UI_EXT: u32 = 0x8D7A;
pub const GL_LUMINANCE16_ALPHA16_EXT: u32 = 0x8048;
pub const GL_LUMINANCE16_ALPHA16_SNORM: u32 = 0x901A;
pub const GL_LUMINANCE16_EXT: u32 = 0x8042;
pub const GL_LUMINANCE16_SNORM: u32 = 0x9019;
pub const GL_LUMINANCE32F_ARB: u32 = 0x8818;
pub const GL_LUMINANCE32I_EXT: u32 = 0x8D86;
pub const GL_LUMINANCE32UI_EXT: u32 = 0x8D74;
pub const GL_LUMINANCE4_ALPHA4_EXT: u32 = 0x8043;
pub const GL_LUMINANCE4_EXT: u32 = 0x803F;
pub const GL_LUMINANCE6_ALPHA2_EXT: u32 = 0x8044;
pub const GL_LUMINANCE8I_EXT: u32 = 0x8D92;
pub const GL_LUMINANCE8UI_EXT: u32 = 0x8D80;
pub const GL_LUMINANCE8_ALPHA8_EXT: u32 = 0x8045;
pub const GL_LUMINANCE8_ALPHA8_SNORM: u32 = 0x9016;
pub const GL_LUMINANCE8_EXT: u32 = 0x8040;
pub const GL_LUMINANCE8_SNORM: u32 = 0x9015;
pub const GL_LUMINANCE_ALPHA16F_ARB: u32 = 0x881F;
pub const GL_LUMINANCE_ALPHA16I_EXT: u32 = 0x8D8D;
pub const GL_LUMINANCE_ALPHA16UI_EXT: u32 = 0x8D7B;
pub const GL_LUMINANCE_ALPHA32F_ARB: u32 = 0x8819;
pub const GL_LUMINANCE_ALPHA32I_EXT: u32 = 0x8D87;
pub const GL_LUMINANCE_ALPHA32UI_EXT: u32 = 0x8D75;
pub const GL_LUMINANCE_ALPHA8I_EXT: u32 = 0x8D93;
pub const GL_LUMINANCE_ALPHA8UI_EXT: u32 = 0x8D81;
pub const GL_LUMINANCE_ALPHA_FLOAT16_APPLE: u32 = 0x881F;
pub const GL_LUMINANCE_ALPHA_FLOAT16_ATI: u32 = 0x881F;
pub const GL_LUMINANCE_ALPHA_FLOAT32_APPLE: u32 = 0x8819;
pub const GL_LUMINANCE_ALPHA_FLOAT32_ATI: u32 = 0x8819;
pub const GL_LUMINANCE_ALPHA_INTEGER_EXT: u32 = 0x8D9D;
pub const GL_LUMINANCE_ALPHA_SNORM: u32 = 0x9012;
pub const GL_LUMINANCE_FLOAT16_APPLE: u32 = 0x881E;
pub const GL_LUMINANCE_FLOAT16_ATI: u32 = 0x881E;
pub const GL_LUMINANCE_FLOAT32_APPLE: u32 = 0x8818;
pub const GL_LUMINANCE_FLOAT32_ATI: u32 = 0x8818;
pub const GL_LUMINANCE_INTEGER_EXT: u32 = 0x8D9C;
pub const GL_LUMINANCE_SNORM: u32 = 0x9011;
pub const GL_MAD_ATI: u32 = 0x8968;
pub const GL_MAGNITUDE_BIAS_NV: u32 = 0x8718;
pub const GL_MAGNITUDE_SCALE_NV: u32 = 0x8712;
pub const GL_MAJOR_VERSION: u32 = 0x821B;
pub const GL_MANUAL_GENERATE_MIPMAP: u32 = 0x8294;
pub const GL_MAP1_BINORMAL_EXT: u32 = 0x8446;
pub const GL_MAP1_TANGENT_EXT: u32 = 0x8444;
pub const GL_MAP1_VERTEX_ATTRIB0_4_NV: u32 = 0x8660;
pub const GL_MAP1_VERTEX_ATTRIB10_4_NV: u32 = 0x866A;
pub const GL_MAP1_VERTEX_ATTRIB11_4_NV: u32 = 0x866B;
pub const GL_MAP1_VERTEX_ATTRIB12_4_NV: u32 = 0x866C;
pub const GL_MAP1_VERTEX_ATTRIB13_4_NV: u32 = 0x866D;
pub const GL_MAP1_VERTEX_ATTRIB14_4_NV: u32 = 0x866E;
pub const GL_MAP1_VERTEX_ATTRIB15_4_NV: u32 = 0x866F;
pub const GL_MAP1_VERTEX_ATTRIB1_4_NV: u32 = 0x8661;
pub const GL_MAP1_VERTEX_ATTRIB2_4_NV: u32 = 0x8662;
pub const GL_MAP1_VERTEX_ATTRIB3_4_NV: u32 = 0x8663;
pub const GL_MAP1_VERTEX_ATTRIB4_4_NV: u32 = 0x8664;
pub const GL_MAP1_VERTEX_ATTRIB5_4_NV: u32 = 0x8665;
pub const GL_MAP1_VERTEX_ATTRIB6_4_NV: u32 = 0x8666;
pub const GL_MAP1_VERTEX_ATTRIB7_4_NV: u32 = 0x8667;
pub const GL_MAP1_VERTEX_ATTRIB8_4_NV: u32 = 0x8668;
pub const GL_MAP1_VERTEX_ATTRIB9_4_NV: u32 = 0x8669;
pub const GL_MAP2_BINORMAL_EXT: u32 = 0x8447;
pub const GL_MAP2_TANGENT_EXT: u32 = 0x8445;
pub const GL_MAP2_VERTEX_ATTRIB0_4_NV: u32 = 0x8670;
pub const GL_MAP2_VERTEX_ATTRIB10_4_NV: u32 = 0x867A;
pub const GL_MAP2_VERTEX_ATTRIB11_4_NV: u32 = 0x867B;
pub const GL_MAP2_VERTEX_ATTRIB12_4_NV: u32 = 0x867C;
pub const GL_MAP2_VERTEX_ATTRIB13_4_NV: u32 = 0x867D;
pub const GL_MAP2_VERTEX_ATTRIB14_4_NV: u32 = 0x867E;
pub const GL_MAP2_VERTEX_ATTRIB15_4_NV: u32 = 0x867F;
pub const GL_MAP2_VERTEX_ATTRIB1_4_NV: u32 = 0x8671;
pub const GL_MAP2_VERTEX_ATTRIB2_4_NV: u32 = 0x8672;
pub const GL_MAP2_VERTEX_ATTRIB3_4_NV: u32 = 0x8673;
pub const GL_MAP2_VERTEX_ATTRIB4_4_NV: u32 = 0x8674;
pub const GL_MAP2_VERTEX_ATTRIB5_4_NV: u32 = 0x8675;
pub const GL_MAP2_VERTEX_ATTRIB6_4_NV: u32 = 0x8676;
pub const GL_MAP2_VERTEX_ATTRIB7_4_NV: u32 = 0x8677;
pub const GL_MAP2_VERTEX_ATTRIB8_4_NV: u32 = 0x8678;
pub const GL_MAP2_VERTEX_ATTRIB9_4_NV: u32 = 0x8679;
pub const GL_MAP_ATTRIB_U_ORDER_NV: u32 = 0x86C3;
pub const GL_MAP_ATTRIB_V_ORDER_NV: u32 = 0x86C4;
pub const GL_MAP_COHERENT_BIT: u32 = 0x0080;
pub const GL_MAP_FLUSH_EXPLICIT_BIT: u32 = 0x0010;
pub const GL_MAP_INVALIDATE_BUFFER_BIT: u32 = 0x0008;
pub const GL_MAP_INVALIDATE_RANGE_BIT: u32 = 0x0004;
pub const GL_MAP_PERSISTENT_BIT: u32 = 0x0040;
pub const GL_MAP_READ_BIT: u32 = 0x0001;
pub const GL_MAP_TESSELLATION_NV: u32 = 0x86C2;
pub const GL_MAP_UNSYNCHRONIZED_BIT: u32 = 0x0020;
pub const GL_MAP_WRITE_BIT: u32 = 0x0002;
pub const GL_MATERIAL_SIDE_HINT_PGI: u32 = 0x1A22C;
pub const GL_MATRIX0_ARB: u32 = 0x88C0;
pub const GL_MATRIX0_NV: u32 = 0x8630;
pub const GL_MATRIX10_ARB: u32 = 0x88CA;
pub const GL_MATRIX11_ARB: u32 = 0x88CB;
pub const GL_MATRIX12_ARB: u32 = 0x88CC;
pub const GL_MATRIX13_ARB: u32 = 0x88CD;
pub const GL_MATRIX14_ARB: u32 = 0x88CE;
pub const GL_MATRIX15_ARB: u32 = 0x88CF;
pub const GL_MATRIX16_ARB: u32 = 0x88D0;
pub const GL_MATRIX17_ARB: u32 = 0x88D1;
pub const GL_MATRIX18_ARB: u32 = 0x88D2;
pub const GL_MATRIX19_ARB: u32 = 0x88D3;
pub const GL_MATRIX1_ARB: u32 = 0x88C1;
pub const GL_MATRIX1_NV: u32 = 0x8631;
pub const GL_MATRIX20_ARB: u32 = 0x88D4;
pub const GL_MATRIX21_ARB: u32 = 0x88D5;
pub const GL_MATRIX22_ARB: u32 = 0x88D6;
pub const GL_MATRIX23_ARB: u32 = 0x88D7;
pub const GL_MATRIX24_ARB: u32 = 0x88D8;
pub const GL_MATRIX25_ARB: u32 = 0x88D9;
pub const GL_MATRIX26_ARB: u32 = 0x88DA;
pub const GL_MATRIX27_ARB: u32 = 0x88DB;
pub const GL_MATRIX28_ARB: u32 = 0x88DC;
pub const GL_MATRIX29_ARB: u32 = 0x88DD;
pub const GL_MATRIX2_ARB: u32 = 0x88C2;
pub const GL_MATRIX2_NV: u32 = 0x8632;
pub const GL_MATRIX30_ARB: u32 = 0x88DE;
pub const GL_MATRIX31_ARB: u32 = 0x88DF;
pub const GL_MATRIX3_ARB: u32 = 0x88C3;
pub const GL_MATRIX3_NV: u32 = 0x8633;
pub const GL_MATRIX4_ARB: u32 = 0x88C4;
pub const GL_MATRIX4_NV: u32 = 0x8634;
pub const GL_MATRIX5_ARB: u32 = 0x88C5;
pub const GL_MATRIX5_NV: u32 = 0x8635;
pub const GL_MATRIX6_ARB: u32 = 0x88C6;
pub const GL_MATRIX6_NV: u32 = 0x8636;
pub const GL_MATRIX7_ARB: u32 = 0x88C7;
pub const GL_MATRIX7_NV: u32 = 0x8637;
pub const GL_MATRIX8_ARB: u32 = 0x88C8;
pub const GL_MATRIX9_ARB: u32 = 0x88C9;
pub const GL_MATRIX_EXT: u32 = 0x87C0;
pub const GL_MATRIX_INDEX_ARRAY_ARB: u32 = 0x8844;
pub const GL_MATRIX_INDEX_ARRAY_POINTER_ARB: u32 = 0x8849;
pub const GL_MATRIX_INDEX_ARRAY_SIZE_ARB: u32 = 0x8846;
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB: u32 = 0x8848;
pub const GL_MATRIX_INDEX_ARRAY_TYPE_ARB: u32 = 0x8847;
pub const GL_MATRIX_PALETTE_ARB: u32 = 0x8840;
pub const GL_MATRIX_STRIDE: u32 = 0x92FF;
pub const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI: u32 = 0x00200000;
pub const GL_MAT_AMBIENT_BIT_PGI: u32 = 0x00100000;
pub const GL_MAT_COLOR_INDEXES_BIT_PGI: u32 = 0x01000000;
pub const GL_MAT_DIFFUSE_BIT_PGI: u32 = 0x00400000;
pub const GL_MAT_EMISSION_BIT_PGI: u32 = 0x00800000;
pub const GL_MAT_SHININESS_BIT_PGI: u32 = 0x02000000;
pub const GL_MAT_SPECULAR_BIT_PGI: u32 = 0x04000000;
pub const GL_MAX: u32 = 0x8008;
pub const GL_MAX_3D_TEXTURE_SIZE: u32 = 0x8073;
pub const GL_MAX_3D_TEXTURE_SIZE_EXT: u32 = 0x8073;
pub const GL_MAX_4D_TEXTURE_SIZE_SGIS: u32 = 0x8138;
pub const GL_MAX_ACTIVE_LIGHTS_SGIX: u32 = 0x8405;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS: u32 = 0x88FF;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT: u32 = 0x88FF;
pub const GL_MAX_ASYNC_DRAW_PIXELS_SGIX: u32 = 0x8360;
pub const GL_MAX_ASYNC_HISTOGRAM_SGIX: u32 = 0x832D;
pub const GL_MAX_ASYNC_READ_PIXELS_SGIX: u32 = 0x8361;
pub const GL_MAX_ASYNC_TEX_IMAGE_SGIX: u32 = 0x835F;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS: u32 = 0x92DC;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE: u32 = 0x92D8;
pub const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT: u32 = 0x8DED;
pub const GL_MAX_CLIPMAP_DEPTH_SGIX: u32 = 0x8177;
pub const GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX: u32 = 0x8178;
pub const GL_MAX_CLIP_DISTANCES: u32 = 0x0D32;
pub const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV: u32 = 0x955F;
pub const GL_MAX_COLOR_ATTACHMENTS: u32 = 0x8CDF;
pub const GL_MAX_COLOR_ATTACHMENTS_EXT: u32 = 0x8CDF;
pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD: u32 = 0x91B3;
pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD: u32 = 0x91B4;
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI: u32 = 0x80B3;
pub const GL_MAX_COLOR_TEXTURE_SAMPLES: u32 = 0x910E;
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS: u32 = 0x92D7;
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS: u32 = 0x92D1;
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES: u32 = 0x82FA;
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS: u32 = 0x8266;
pub const GL_MAX_COMBINED_DIMENSIONS: u32 = 0x8282;
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: u32 = 0x8A33;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: u32 = 0x8A32;
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS: u32 = 0x90CF;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS: u32 = 0x8F39;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT: u32 = 0x8F39;
pub const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV: u32 = 0x8E67;
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES: u32 = 0x8F39;
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS: u32 = 0x90DC;
pub const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV: u32 = 0x8E6F;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: u32 = 0x8E1E;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: u32 = 0x8E1F;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: u32 = 0x8B4D;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB: u32 = 0x8B4D;
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS: u32 = 0x8A2E;
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: u32 = 0x8A31;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS: u32 = 0x8265;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS: u32 = 0x8264;
pub const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB: u32 = 0x90EB;
pub const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB: u32 = 0x91BF;
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS: u32 = 0x91BD;
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS: u32 = 0x90DB;
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE: u32 = 0x8262;
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS: u32 = 0x91BC;
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS: u32 = 0x91BB;
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS: u32 = 0x8263;
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB: u32 = 0x9344;
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB: u32 = 0x9345;
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT: u32 = 0x91BE;
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS: u32 = 0x90EB;
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE: u32 = 0x91BF;
pub const GL_MAX_CONVOLUTION_HEIGHT_EXT: u32 = 0x801B;
pub const GL_MAX_CONVOLUTION_WIDTH_EXT: u32 = 0x801A;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE: u32 = 0x851C;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB: u32 = 0x851C;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT: u32 = 0x851C;
pub const GL_MAX_CULL_DISTANCES: u32 = 0x82F9;
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH: u32 = 0x826C;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES: u32 = 0x9144;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD: u32 = 0x9144;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB: u32 = 0x9144;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH: u32 = 0x9143;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD: u32 = 0x9143;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB: u32 = 0x9143;
pub const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV: u32 = 0x90D1;
pub const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV: u32 = 0x90D0;
pub const GL_MAX_DEFORMATION_ORDER_SGIX: u32 = 0x8197;
pub const GL_MAX_DEPTH: u32 = 0x8280;
pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD: u32 = 0x91B5;
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES: u32 = 0x910F;
pub const GL_MAX_DETACHED_BUFFERS_NV: u32 = 0x95AD;
pub const GL_MAX_DETACHED_TEXTURES_NV: u32 = 0x95AC;
pub const GL_MAX_DRAW_BUFFERS: u32 = 0x8824;
pub const GL_MAX_DRAW_BUFFERS_ARB: u32 = 0x8824;
pub const GL_MAX_DRAW_BUFFERS_ATI: u32 = 0x8824;
pub const GL_MAX_DRAW_MESH_TASKS_COUNT_NV: u32 = 0x953D;
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS: u32 = 0x88FC;
pub const GL_MAX_ELEMENTS_INDICES: u32 = 0x80E9;
pub const GL_MAX_ELEMENTS_INDICES_EXT: u32 = 0x80E9;
pub const GL_MAX_ELEMENTS_VERTICES: u32 = 0x80E8;
pub const GL_MAX_ELEMENTS_VERTICES_EXT: u32 = 0x80E8;
pub const GL_MAX_ELEMENT_INDEX: u32 = 0x8D6B;
pub const GL_MAX_EXT: u32 = 0x8008;
pub const GL_MAX_FOG_FUNC_POINTS_SGIS: u32 = 0x812C;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS: u32 = 0x92D6;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS: u32 = 0x92D0;
pub const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT: u32 = 0x8DE3;
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS: u32 = 0x90CE;
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS: u32 = 0x9125;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET: u32 = 0x8E5C;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV: u32 = 0x8E5C;
pub const GL_MAX_FRAGMENT_LIGHTS_SGIX: u32 = 0x8404;
pub const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV: u32 = 0x8868;
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS: u32 = 0x90DA;
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS: u32 = 0x8A2D;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: u32 = 0x8B49;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB: u32 = 0x8B49;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS: u32 = 0x8DFD;
pub const GL_MAX_FRAMEBUFFER_HEIGHT: u32 = 0x9316;
pub const GL_MAX_FRAMEBUFFER_LAYERS: u32 = 0x9317;
pub const GL_MAX_FRAMEBUFFER_SAMPLES: u32 = 0x9318;
pub const GL_MAX_FRAMEBUFFER_WIDTH: u32 = 0x9315;
pub const GL_MAX_FRAMEZOOM_FACTOR_SGIX: u32 = 0x818D;
pub const GL_MAX_GENERAL_COMBINERS_NV: u32 = 0x854D;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS: u32 = 0x92D5;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS: u32 = 0x92CF;
pub const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT: u32 = 0x8DE4;
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS: u32 = 0x90CD;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS: u32 = 0x9123;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS: u32 = 0x9124;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES: u32 = 0x8DE0;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB: u32 = 0x8DE0;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT: u32 = 0x8DE0;
pub const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV: u32 = 0x8E5A;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS: u32 = 0x8E5A;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS: u32 = 0x90D7;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: u32 = 0x8C29;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB: u32 = 0x8C29;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT: u32 = 0x8C29;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: u32 = 0x8DE1;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB: u32 = 0x8DE1;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT: u32 = 0x8DE1;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS: u32 = 0x8A2C;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS: u32 = 0x8DDF;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB: u32 = 0x8DDF;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT: u32 = 0x8DDF;
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB: u32 = 0x8DDD;
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT: u32 = 0x8DDD;
pub const GL_MAX_HEIGHT: u32 = 0x827F;
pub const GL_MAX_IMAGE_SAMPLES: u32 = 0x906D;
pub const GL_MAX_IMAGE_SAMPLES_EXT: u32 = 0x906D;
pub const GL_MAX_IMAGE_UNITS: u32 = 0x8F38;
pub const GL_MAX_IMAGE_UNITS_EXT: u32 = 0x8F38;
pub const GL_MAX_INTEGER_SAMPLES: u32 = 0x9110;
pub const GL_MAX_LABEL_LENGTH: u32 = 0x82E8;
pub const GL_MAX_LAYERS: u32 = 0x8281;
pub const GL_MAX_LGPU_GPUS_NVX: u32 = 0x92BA;
pub const GL_MAX_MAP_TESSELLATION_NV: u32 = 0x86D6;
pub const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB: u32 = 0x8841;
pub const GL_MAX_MESH_ATOMIC_COUNTERS_NV: u32 = 0x8E65;
pub const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV: u32 = 0x8E64;
pub const GL_MAX_MESH_IMAGE_UNIFORMS_NV: u32 = 0x8E62;
pub const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV: u32 = 0x9539;
pub const GL_MAX_MESH_OUTPUT_VERTICES_NV: u32 = 0x9538;
pub const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV: u32 = 0x8E66;
pub const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV: u32 = 0x8E61;
pub const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV: u32 = 0x9536;
pub const GL_MAX_MESH_UNIFORM_BLOCKS_NV: u32 = 0x8E60;
pub const GL_MAX_MESH_UNIFORM_COMPONENTS_NV: u32 = 0x8E63;
pub const GL_MAX_MESH_VIEWS_NV: u32 = 0x9557;
pub const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV: u32 = 0x95A2;
pub const GL_MAX_MESH_WORK_GROUP_SIZE_NV: u32 = 0x953B;
pub const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV: u32 = 0x8E11;
pub const GL_MAX_NAME_LENGTH: u32 = 0x92F6;
pub const GL_MAX_NUM_ACTIVE_VARIABLES: u32 = 0x92F7;
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES: u32 = 0x92F8;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT: u32 = 0x87CA;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT: u32 = 0x87CD;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT: u32 = 0x87CE;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: u32 = 0x87CC;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT: u32 = 0x87CB;
pub const GL_MAX_PALETTE_MATRICES_ARB: u32 = 0x8842;
pub const GL_MAX_PATCH_VERTICES: u32 = 0x8E7D;
pub const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: u32 = 0x8337;
pub const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI: u32 = 0x87F1;
pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB: u32 = 0x88B1;
pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB: u32 = 0x880B;
pub const GL_MAX_PROGRAM_ATTRIBS_ARB: u32 = 0x88AD;
pub const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV: u32 = 0x8908;
pub const GL_MAX_PROGRAM_CALL_DEPTH_NV: u32 = 0x88F5;
pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB: u32 = 0x88B5;
pub const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV: u32 = 0x88F4;
pub const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV: u32 = 0x8DA5;
pub const GL_MAX_PROGRAM_GENERIC_RESULTS_NV: u32 = 0x8DA6;
pub const GL_MAX_PROGRAM_IF_DEPTH_NV: u32 = 0x88F6;
pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB: u32 = 0x88A1;
pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB: u32 = 0x88B4;
pub const GL_MAX_PROGRAM_LOOP_COUNT_NV: u32 = 0x88F8;
pub const GL_MAX_PROGRAM_LOOP_DEPTH_NV: u32 = 0x88F7;
pub const GL_MAX_PROGRAM_MATRICES_ARB: u32 = 0x862F;
pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB: u32 = 0x862E;
pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: u32 = 0x88B3;
pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: u32 = 0x880E;
pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB: u32 = 0x88AF;
pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB: u32 = 0x88A3;
pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB: u32 = 0x88AB;
pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB: u32 = 0x88A7;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: u32 = 0x8810;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: u32 = 0x880F;
pub const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV: u32 = 0x8C27;
pub const GL_MAX_PROGRAM_PARAMETERS_ARB: u32 = 0x88A9;
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV: u32 = 0x8DA0;
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV: u32 = 0x8DA1;
pub const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV: u32 = 0x86D8;
pub const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV: u32 = 0x8909;
pub const GL_MAX_PROGRAM_SUBROUTINE_NUM_NV: u32 = 0x8F45;
pub const GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV: u32 = 0x8F44;
pub const GL_MAX_PROGRAM_TEMPORARIES_ARB: u32 = 0x88A5;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET: u32 = 0x8905;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_EXT: u32 = 0x8905;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_NV: u32 = 0x8905;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB: u32 = 0x8F9F;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: u32 = 0x8E5F;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV: u32 = 0x8E5F;
pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB: u32 = 0x880D;
pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB: u32 = 0x880C;
pub const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV: u32 = 0x8C28;
pub const GL_MAX_RASTER_SAMPLES_EXT: u32 = 0x9329;
pub const GL_MAX_RATIONAL_EVAL_ORDER_NV: u32 = 0x86D7;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE: u32 = 0x84F8;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB: u32 = 0x84F8;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV: u32 = 0x84F8;
pub const GL_MAX_RENDERBUFFER_SIZE: u32 = 0x84E8;
pub const GL_MAX_RENDERBUFFER_SIZE_EXT: u32 = 0x84E8;
pub const GL_MAX_SAMPLES: u32 = 0x8D57;
pub const GL_MAX_SAMPLES_EXT: u32 = 0x8D57;
pub const GL_MAX_SAMPLE_MASK_WORDS: u32 = 0x8E59;
pub const GL_MAX_SAMPLE_MASK_WORDS_NV: u32 = 0x8E59;
pub const GL_MAX_SERVER_WAIT_TIMEOUT: u32 = 0x9111;
pub const GL_MAX_SHADER_BUFFER_ADDRESS_NV: u32 = 0x8F35;
pub const GL_MAX_SHADER_COMPILER_THREADS_ARB: u32 = 0x91B0;
pub const GL_MAX_SHADER_COMPILER_THREADS_KHR: u32 = 0x91B0;
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE: u32 = 0x90DE;
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS: u32 = 0x90DD;
pub const GL_MAX_SHININESS_NV: u32 = 0x8504;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD: u32 = 0x9199;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB: u32 = 0x9199;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS: u32 = 0x919A;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB: u32 = 0x919A;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_AMD: u32 = 0x9198;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_ARB: u32 = 0x9198;
pub const GL_MAX_SPOT_EXPONENT_NV: u32 = 0x8505;
pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV: u32 = 0x9349;
pub const GL_MAX_SUBROUTINES: u32 = 0x8DE7;
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS: u32 = 0x8DE8;
pub const GL_MAX_TASK_ATOMIC_COUNTERS_NV: u32 = 0x8E6D;
pub const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV: u32 = 0x8E6C;
pub const GL_MAX_TASK_IMAGE_UNIFORMS_NV: u32 = 0x8E6A;
pub const GL_MAX_TASK_OUTPUT_COUNT_NV: u32 = 0x953A;
pub const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV: u32 = 0x8E6E;
pub const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV: u32 = 0x8E69;
pub const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV: u32 = 0x9537;
pub const GL_MAX_TASK_UNIFORM_BLOCKS_NV: u32 = 0x8E68;
pub const GL_MAX_TASK_UNIFORM_COMPONENTS_NV: u32 = 0x8E6B;
pub const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV: u32 = 0x95A3;
pub const GL_MAX_TASK_WORK_GROUP_SIZE_NV: u32 = 0x953C;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS: u32 = 0x92D3;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS: u32 = 0x92CD;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS: u32 = 0x90CB;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS: u32 = 0x886C;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS: u32 = 0x8E83;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS: u32 = 0x90D8;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: u32 = 0x8E81;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: u32 = 0x8E85;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS: u32 = 0x8E89;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS: u32 = 0x8E7F;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS: u32 = 0x92D4;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS: u32 = 0x92CE;
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS: u32 = 0x90CC;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS: u32 = 0x886D;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: u32 = 0x8E86;
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS: u32 = 0x90D9;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: u32 = 0x8E82;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS: u32 = 0x8E8A;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: u32 = 0x8E80;
pub const GL_MAX_TESS_GEN_LEVEL: u32 = 0x8E7E;
pub const GL_MAX_TESS_PATCH_COMPONENTS: u32 = 0x8E84;
pub const GL_MAX_TEXTURE_BUFFER_SIZE: u32 = 0x8C2B;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_ARB: u32 = 0x8C2B;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT: u32 = 0x8C2B;
pub const GL_MAX_TEXTURE_COORDS_ARB: u32 = 0x8871;
pub const GL_MAX_TEXTURE_COORDS_NV: u32 = 0x8871;
pub const GL_MAX_TEXTURE_IMAGE_UNITS: u32 = 0x8872;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB: u32 = 0x8872;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_NV: u32 = 0x8872;
pub const GL_MAX_TEXTURE_LOD_BIAS: u32 = 0x84FD;
pub const GL_MAX_TEXTURE_LOD_BIAS_EXT: u32 = 0x84FD;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY: u32 = 0x84FF;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 0x84FF;
pub const GL_MAX_TEXTURE_SIZE: u32 = 0x0D33;
pub const GL_MAX_TEXTURE_UNITS_ARB: u32 = 0x84E2;
pub const GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV: u32 = 0x95B6;
pub const GL_MAX_TRACK_MATRICES_NV: u32 = 0x862F;
pub const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV: u32 = 0x862E;
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS: u32 = 0x8E70;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: u32 = 0x8C8A;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT: u32 = 0x8C8A;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV: u32 = 0x8C8A;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: u32 = 0x8C8B;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT: u32 = 0x8C8B;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV: u32 = 0x8C8B;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: u32 = 0x8C80;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT: u32 = 0x8C80;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV: u32 = 0x8C80;
pub const GL_MAX_UNIFORM_BLOCK_SIZE: u32 = 0x8A30;
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS: u32 = 0x8A2F;
pub const GL_MAX_UNIFORM_LOCATIONS: u32 = 0x826E;
pub const GL_MAX_VARYING_COMPONENTS: u32 = 0x8B4B;
pub const GL_MAX_VARYING_COMPONENTS_EXT: u32 = 0x8B4B;
pub const GL_MAX_VARYING_FLOATS: u32 = 0x8B4B;
pub const GL_MAX_VARYING_FLOATS_ARB: u32 = 0x8B4B;
pub const GL_MAX_VARYING_VECTORS: u32 = 0x8DFC;
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV: u32 = 0x8520;
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS: u32 = 0x92D2;
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS: u32 = 0x92CC;
pub const GL_MAX_VERTEX_ATTRIBS: u32 = 0x8869;
pub const GL_MAX_VERTEX_ATTRIBS_ARB: u32 = 0x8869;
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS: u32 = 0x82DA;
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET: u32 = 0x82D9;
pub const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT: u32 = 0x8DE2;
pub const GL_MAX_VERTEX_HINT_PGI: u32 = 0x1A22D;
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS: u32 = 0x90CA;
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS: u32 = 0x9122;
pub const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT: u32 = 0x87C5;
pub const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT: u32 = 0x87C7;
pub const GL_MAX_VERTEX_SHADER_LOCALS_EXT: u32 = 0x87C9;
pub const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: u32 = 0x87C8;
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS: u32 = 0x90D6;
pub const GL_MAX_VERTEX_SHADER_VARIANTS_EXT: u32 = 0x87C6;
pub const GL_MAX_VERTEX_STREAMS: u32 = 0x8E71;
pub const GL_MAX_VERTEX_STREAMS_ATI: u32 = 0x876B;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: u32 = 0x8B4C;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB: u32 = 0x8B4C;
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS: u32 = 0x8A2B;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS: u32 = 0x8B4A;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB: u32 = 0x8B4A;
pub const GL_MAX_VERTEX_UNIFORM_VECTORS: u32 = 0x8DFB;
pub const GL_MAX_VERTEX_UNITS_ARB: u32 = 0x86A4;
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB: u32 = 0x8DDE;
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT: u32 = 0x8DDE;
pub const GL_MAX_VIEWPORTS: u32 = 0x825B;
pub const GL_MAX_VIEWPORT_DIMS: u32 = 0x0D3A;
pub const GL_MAX_VIEWS_OVR: u32 = 0x9631;
pub const GL_MAX_WIDTH: u32 = 0x827E;
pub const GL_MAX_WINDOW_RECTANGLES_EXT: u32 = 0x8F14;
pub const GL_MEDIUM_FLOAT: u32 = 0x8DF1;
pub const GL_MEDIUM_INT: u32 = 0x8DF4;
pub const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV: u32 = 0x95A6;
pub const GL_MEMORY_ATTACHABLE_NV: u32 = 0x95A8;
pub const GL_MEMORY_ATTACHABLE_SIZE_NV: u32 = 0x95A7;
pub const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV: u32 = 0x9543;
pub const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV: u32 = 0x92DF;
pub const GL_MESH_OUTPUT_TYPE_NV: u32 = 0x957B;
pub const GL_MESH_PRIMITIVES_OUT_NV: u32 = 0x957A;
pub const GL_MESH_SHADER_BIT_NV: u32 = 0x00000040;
pub const GL_MESH_SHADER_NV: u32 = 0x9559;
pub const GL_MESH_SUBROUTINE_NV: u32 = 0x957C;
pub const GL_MESH_SUBROUTINE_UNIFORM_NV: u32 = 0x957E;
pub const GL_MESH_VERTICES_OUT_NV: u32 = 0x9579;
pub const GL_MESH_WORK_GROUP_SIZE_NV: u32 = 0x953E;
pub const GL_MIN: u32 = 0x8007;
pub const GL_MINMAX_EXT: u32 = 0x802E;
pub const GL_MINMAX_FORMAT_EXT: u32 = 0x802F;
pub const GL_MINMAX_SINK_EXT: u32 = 0x8030;
pub const GL_MINOR_VERSION: u32 = 0x821C;
pub const GL_MINUS_CLAMPED_NV: u32 = 0x92B3;
pub const GL_MINUS_NV: u32 = 0x929F;
pub const GL_MIN_EXT: u32 = 0x8007;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET: u32 = 0x8E5B;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV: u32 = 0x8E5B;
pub const GL_MIN_LOD_WARNING_AMD: u32 = 0x919C;
pub const GL_MIN_MAP_BUFFER_ALIGNMENT: u32 = 0x90BC;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET: u32 = 0x8904;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_EXT: u32 = 0x8904;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_NV: u32 = 0x8904;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: u32 = 0x8E5E;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV: u32 = 0x8E5E;
pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB: u32 = 0x8C37;
pub const GL_MIN_SPARSE_LEVEL_AMD: u32 = 0x919B;
pub const GL_MIPMAP: u32 = 0x8293;
pub const GL_MIRRORED_REPEAT: u32 = 0x8370;
pub const GL_MIRRORED_REPEAT_ARB: u32 = 0x8370;
pub const GL_MIRRORED_REPEAT_IBM: u32 = 0x8370;
pub const GL_MIRROR_CLAMP_ATI: u32 = 0x8742;
pub const GL_MIRROR_CLAMP_EXT: u32 = 0x8742;
pub const GL_MIRROR_CLAMP_TO_BORDER_EXT: u32 = 0x8912;
pub const GL_MIRROR_CLAMP_TO_EDGE: u32 = 0x8743;
pub const GL_MIRROR_CLAMP_TO_EDGE_ATI: u32 = 0x8743;
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT: u32 = 0x8743;
pub const GL_MITER_REVERT_NV: u32 = 0x90A7;
pub const GL_MITER_TRUNCATE_NV: u32 = 0x90A8;
pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV: u32 = 0x932F;
pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV: u32 = 0x9330;
pub const GL_MODELVIEW0_ARB: u32 = 0x1700;
pub const GL_MODELVIEW0_EXT: u32 = 0x1700;
pub const GL_MODELVIEW0_MATRIX_EXT: u32 = 0x0BA6;
pub const GL_MODELVIEW0_STACK_DEPTH_EXT: u32 = 0x0BA3;
pub const GL_MODELVIEW10_ARB: u32 = 0x872A;
pub const GL_MODELVIEW11_ARB: u32 = 0x872B;
pub const GL_MODELVIEW12_ARB: u32 = 0x872C;
pub const GL_MODELVIEW13_ARB: u32 = 0x872D;
pub const GL_MODELVIEW14_ARB: u32 = 0x872E;
pub const GL_MODELVIEW15_ARB: u32 = 0x872F;
pub const GL_MODELVIEW16_ARB: u32 = 0x8730;
pub const GL_MODELVIEW17_ARB: u32 = 0x8731;
pub const GL_MODELVIEW18_ARB: u32 = 0x8732;
pub const GL_MODELVIEW19_ARB: u32 = 0x8733;
pub const GL_MODELVIEW1_ARB: u32 = 0x850A;
pub const GL_MODELVIEW1_EXT: u32 = 0x850A;
pub const GL_MODELVIEW1_MATRIX_EXT: u32 = 0x8506;
pub const GL_MODELVIEW1_STACK_DEPTH_EXT: u32 = 0x8502;
pub const GL_MODELVIEW20_ARB: u32 = 0x8734;
pub const GL_MODELVIEW21_ARB: u32 = 0x8735;
pub const GL_MODELVIEW22_ARB: u32 = 0x8736;
pub const GL_MODELVIEW23_ARB: u32 = 0x8737;
pub const GL_MODELVIEW24_ARB: u32 = 0x8738;
pub const GL_MODELVIEW25_ARB: u32 = 0x8739;
pub const GL_MODELVIEW26_ARB: u32 = 0x873A;
pub const GL_MODELVIEW27_ARB: u32 = 0x873B;
pub const GL_MODELVIEW28_ARB: u32 = 0x873C;
pub const GL_MODELVIEW29_ARB: u32 = 0x873D;
pub const GL_MODELVIEW2_ARB: u32 = 0x8722;
pub const GL_MODELVIEW30_ARB: u32 = 0x873E;
pub const GL_MODELVIEW31_ARB: u32 = 0x873F;
pub const GL_MODELVIEW3_ARB: u32 = 0x8723;
pub const GL_MODELVIEW4_ARB: u32 = 0x8724;
pub const GL_MODELVIEW5_ARB: u32 = 0x8725;
pub const GL_MODELVIEW6_ARB: u32 = 0x8726;
pub const GL_MODELVIEW7_ARB: u32 = 0x8727;
pub const GL_MODELVIEW8_ARB: u32 = 0x8728;
pub const GL_MODELVIEW9_ARB: u32 = 0x8729;
pub const GL_MODELVIEW_PROJECTION_NV: u32 = 0x8629;
pub const GL_MODULATE_ADD_ATI: u32 = 0x8744;
pub const GL_MODULATE_SIGNED_ADD_ATI: u32 = 0x8745;
pub const GL_MODULATE_SUBTRACT_ATI: u32 = 0x8746;
pub const GL_MOVE_TO_CONTINUES_NV: u32 = 0x90B6;
pub const GL_MOVE_TO_NV: u32 = 0x02;
pub const GL_MOVE_TO_RESETS_NV: u32 = 0x90B5;
pub const GL_MOV_ATI: u32 = 0x8961;
pub const GL_MULTICAST_GPUS_NV: u32 = 0x92BA;
pub const GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV: u32 = 0x9549;
pub const GL_MULTIPLY_KHR: u32 = 0x9294;
pub const GL_MULTIPLY_NV: u32 = 0x9294;
pub const GL_MULTISAMPLE: u32 = 0x809D;
pub const GL_MULTISAMPLES_NV: u32 = 0x9371;
pub const GL_MULTISAMPLE_3DFX: u32 = 0x86B2;
pub const GL_MULTISAMPLE_ARB: u32 = 0x809D;
pub const GL_MULTISAMPLE_BIT_3DFX: u32 = 0x20000000;
pub const GL_MULTISAMPLE_BIT_ARB: u32 = 0x20000000;
pub const GL_MULTISAMPLE_BIT_EXT: u32 = 0x20000000;
pub const GL_MULTISAMPLE_COVERAGE_MODES_NV: u32 = 0x8E12;
pub const GL_MULTISAMPLE_EXT: u32 = 0x809D;
pub const GL_MULTISAMPLE_FILTER_HINT_NV: u32 = 0x8534;
pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB: u32 = 0x9382;
pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB: u32 = 0x9381;
pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT: u32 = 0x932B;
pub const GL_MULTISAMPLE_SGIS: u32 = 0x809D;
pub const GL_MUL_ATI: u32 = 0x8964;
pub const GL_MVP_MATRIX_EXT: u32 = 0x87E3;
pub const GL_NAMED_STRING_LENGTH_ARB: u32 = 0x8DE9;
pub const GL_NAMED_STRING_TYPE_ARB: u32 = 0x8DEA;
pub const GL_NAME_LENGTH: u32 = 0x92F9;
pub const GL_NAND: u32 = 0x150E;
pub const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI: u32 = 0x1A203;
pub const GL_NATIVE_GRAPHICS_END_HINT_PGI: u32 = 0x1A204;
pub const GL_NATIVE_GRAPHICS_HANDLE_PGI: u32 = 0x1A202;
pub const GL_NEAREST: u32 = 0x2600;
pub const GL_NEAREST_CLIPMAP_LINEAR_SGIX: u32 = 0x844E;
pub const GL_NEAREST_CLIPMAP_NEAREST_SGIX: u32 = 0x844D;
pub const GL_NEAREST_MIPMAP_LINEAR: u32 = 0x2702;
pub const GL_NEAREST_MIPMAP_NEAREST: u32 = 0x2700;
pub const GL_NEGATE_BIT_ATI: u32 = 0x00000004;
pub const GL_NEGATIVE_ONE_EXT: u32 = 0x87DF;
pub const GL_NEGATIVE_ONE_TO_ONE: u32 = 0x935E;
pub const GL_NEGATIVE_W_EXT: u32 = 0x87DC;
pub const GL_NEGATIVE_X_EXT: u32 = 0x87D9;
pub const GL_NEGATIVE_Y_EXT: u32 = 0x87DA;
pub const GL_NEGATIVE_Z_EXT: u32 = 0x87DB;
pub const GL_NEVER: u32 = 0x0200;
pub const GL_NEXT_BUFFER_NV: i32 = -2;
pub const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV: u32 = 0x9025;
pub const GL_NICEST: u32 = 0x1102;
pub const GL_NONE: u32 = 0;
pub const GL_NOOP: u32 = 0x1505;
pub const GL_NOP_COMMAND_NV: u32 = 0x0001;
pub const GL_NOR: u32 = 0x1508;
pub const GL_NORMALIZED_RANGE_EXT: u32 = 0x87E0;
pub const GL_NORMAL_ARRAY_ADDRESS_NV: u32 = 0x8F22;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8897;
pub const GL_NORMAL_ARRAY_COUNT_EXT: u32 = 0x8080;
pub const GL_NORMAL_ARRAY_EXT: u32 = 0x8075;
pub const GL_NORMAL_ARRAY_LENGTH_NV: u32 = 0x8F2C;
pub const GL_NORMAL_ARRAY_LIST_IBM: u32 = 103071;
pub const GL_NORMAL_ARRAY_LIST_STRIDE_IBM: u32 = 103081;
pub const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL: u32 = 0x83F6;
pub const GL_NORMAL_ARRAY_POINTER_EXT: u32 = 0x808F;
pub const GL_NORMAL_ARRAY_STRIDE_EXT: u32 = 0x807F;
pub const GL_NORMAL_ARRAY_TYPE_EXT: u32 = 0x807E;
pub const GL_NORMAL_BIT_PGI: u32 = 0x08000000;
pub const GL_NORMAL_MAP_ARB: u32 = 0x8511;
pub const GL_NORMAL_MAP_EXT: u32 = 0x8511;
pub const GL_NORMAL_MAP_NV: u32 = 0x8511;
pub const GL_NOTEQUAL: u32 = 0x0205;
pub const GL_NO_ERROR: u32 = 0;
pub const GL_NO_RESET_NOTIFICATION: u32 = 0x8261;
pub const GL_NO_RESET_NOTIFICATION_ARB: u32 = 0x8261;
pub const GL_NUM_ACTIVE_VARIABLES: u32 = 0x9304;
pub const GL_NUM_COMPATIBLE_SUBROUTINES: u32 = 0x8E4A;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS: u32 = 0x86A2;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB: u32 = 0x86A2;
pub const GL_NUM_DEVICE_UUIDS_EXT: u32 = 0x9596;
pub const GL_NUM_EXTENSIONS: u32 = 0x821D;
pub const GL_NUM_FILL_STREAMS_NV: u32 = 0x8E29;
pub const GL_NUM_FRAGMENT_CONSTANTS_ATI: u32 = 0x896F;
pub const GL_NUM_FRAGMENT_REGISTERS_ATI: u32 = 0x896E;
pub const GL_NUM_GENERAL_COMBINERS_NV: u32 = 0x854E;
pub const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI: u32 = 0x8973;
pub const GL_NUM_INSTRUCTIONS_PER_PASS_ATI: u32 = 0x8971;
pub const GL_NUM_INSTRUCTIONS_TOTAL_ATI: u32 = 0x8972;
pub const GL_NUM_LOOPBACK_COMPONENTS_ATI: u32 = 0x8974;
pub const GL_NUM_PASSES_ATI: u32 = 0x8970;
pub const GL_NUM_PROGRAM_BINARY_FORMATS: u32 = 0x87FE;
pub const GL_NUM_SAMPLE_COUNTS: u32 = 0x9380;
pub const GL_NUM_SHADER_BINARY_FORMATS: u32 = 0x8DF9;
pub const GL_NUM_SPARSE_LEVELS_ARB: u32 = 0x91AA;
pub const GL_NUM_SPIR_V_EXTENSIONS: u32 = 0x9554;
pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD: u32 = 0x91B6;
pub const GL_NUM_TILING_TYPES_EXT: u32 = 0x9582;
pub const GL_NUM_VIDEO_CAPTURE_STREAMS_NV: u32 = 0x9024;
pub const GL_NUM_VIRTUAL_PAGE_SIZES_ARB: u32 = 0x91A8;
pub const GL_NUM_WINDOW_RECTANGLES_EXT: u32 = 0x8F15;
pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB: u32 = 0x8B89;
pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB: u32 = 0x8B8A;
pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB: u32 = 0x8B86;
pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB: u32 = 0x8B87;
pub const GL_OBJECT_ATTACHED_OBJECTS_ARB: u32 = 0x8B85;
pub const GL_OBJECT_BUFFER_SIZE_ATI: u32 = 0x8764;
pub const GL_OBJECT_BUFFER_USAGE_ATI: u32 = 0x8765;
pub const GL_OBJECT_COMPILE_STATUS_ARB: u32 = 0x8B81;
pub const GL_OBJECT_DELETE_STATUS_ARB: u32 = 0x8B80;
pub const GL_OBJECT_DISTANCE_TO_LINE_SGIS: u32 = 0x81F3;
pub const GL_OBJECT_DISTANCE_TO_POINT_SGIS: u32 = 0x81F1;
pub const GL_OBJECT_INFO_LOG_LENGTH_ARB: u32 = 0x8B84;
pub const GL_OBJECT_LINE_SGIS: u32 = 0x81F7;
pub const GL_OBJECT_LINK_STATUS_ARB: u32 = 0x8B82;
pub const GL_OBJECT_POINT_SGIS: u32 = 0x81F5;
pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB: u32 = 0x8B88;
pub const GL_OBJECT_SUBTYPE_ARB: u32 = 0x8B4F;
pub const GL_OBJECT_TYPE: u32 = 0x9112;
pub const GL_OBJECT_TYPE_ARB: u32 = 0x8B4E;
pub const GL_OBJECT_VALIDATE_STATUS_ARB: u32 = 0x8B83;
pub const GL_OCCLUSION_QUERY_EVENT_MASK_AMD: u32 = 0x874F;
pub const GL_OCCLUSION_TEST_HP: u32 = 0x8165;
pub const GL_OCCLUSION_TEST_RESULT_HP: u32 = 0x8166;
pub const GL_OFFSET: u32 = 0x92FC;
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV: u32 = 0x8856;
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV: u32 = 0x8857;
pub const GL_OFFSET_HILO_TEXTURE_2D_NV: u32 = 0x8854;
pub const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV: u32 = 0x8855;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV: u32 = 0x8850;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV: u32 = 0x8851;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV: u32 = 0x8852;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV: u32 = 0x8853;
pub const GL_OFFSET_TEXTURE_2D_BIAS_NV: u32 = 0x86E3;
pub const GL_OFFSET_TEXTURE_2D_MATRIX_NV: u32 = 0x86E1;
pub const GL_OFFSET_TEXTURE_2D_NV: u32 = 0x86E8;
pub const GL_OFFSET_TEXTURE_2D_SCALE_NV: u32 = 0x86E2;
pub const GL_OFFSET_TEXTURE_BIAS_NV: u32 = 0x86E3;
pub const GL_OFFSET_TEXTURE_MATRIX_NV: u32 = 0x86E1;
pub const GL_OFFSET_TEXTURE_RECTANGLE_NV: u32 = 0x864C;
pub const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV: u32 = 0x864D;
pub const GL_OFFSET_TEXTURE_SCALE_NV: u32 = 0x86E2;
pub const GL_ONE: u32 = 1;
pub const GL_ONE_EXT: u32 = 0x87DE;
pub const GL_ONE_MINUS_CONSTANT_ALPHA: u32 = 0x8004;
pub const GL_ONE_MINUS_CONSTANT_ALPHA_EXT: u32 = 0x8004;
pub const GL_ONE_MINUS_CONSTANT_COLOR: u32 = 0x8002;
pub const GL_ONE_MINUS_CONSTANT_COLOR_EXT: u32 = 0x8002;
pub const GL_ONE_MINUS_DST_ALPHA: u32 = 0x0305;
pub const GL_ONE_MINUS_DST_COLOR: u32 = 0x0307;
pub const GL_ONE_MINUS_SRC1_ALPHA: u32 = 0x88FB;
pub const GL_ONE_MINUS_SRC1_COLOR: u32 = 0x88FA;
pub const GL_ONE_MINUS_SRC_ALPHA: u32 = 0x0303;
pub const GL_ONE_MINUS_SRC_COLOR: u32 = 0x0301;
pub const GL_OPERAND0_ALPHA_ARB: u32 = 0x8598;
pub const GL_OPERAND0_ALPHA_EXT: u32 = 0x8598;
pub const GL_OPERAND0_RGB_ARB: u32 = 0x8590;
pub const GL_OPERAND0_RGB_EXT: u32 = 0x8590;
pub const GL_OPERAND1_ALPHA_ARB: u32 = 0x8599;
pub const GL_OPERAND1_ALPHA_EXT: u32 = 0x8599;
pub const GL_OPERAND1_RGB_ARB: u32 = 0x8591;
pub const GL_OPERAND1_RGB_EXT: u32 = 0x8591;
pub const GL_OPERAND2_ALPHA_ARB: u32 = 0x859A;
pub const GL_OPERAND2_ALPHA_EXT: u32 = 0x859A;
pub const GL_OPERAND2_RGB_ARB: u32 = 0x8592;
pub const GL_OPERAND2_RGB_EXT: u32 = 0x8592;
pub const GL_OPERAND3_ALPHA_NV: u32 = 0x859B;
pub const GL_OPERAND3_RGB_NV: u32 = 0x8593;
pub const GL_OPTIMAL_TILING_EXT: u32 = 0x9584;
pub const GL_OP_ADD_EXT: u32 = 0x8787;
pub const GL_OP_CLAMP_EXT: u32 = 0x878E;
pub const GL_OP_CROSS_PRODUCT_EXT: u32 = 0x8797;
pub const GL_OP_DOT3_EXT: u32 = 0x8784;
pub const GL_OP_DOT4_EXT: u32 = 0x8785;
pub const GL_OP_EXP_BASE_2_EXT: u32 = 0x8791;
pub const GL_OP_FLOOR_EXT: u32 = 0x878F;
pub const GL_OP_FRAC_EXT: u32 = 0x8789;
pub const GL_OP_INDEX_EXT: u32 = 0x8782;
pub const GL_OP_LOG_BASE_2_EXT: u32 = 0x8792;
pub const GL_OP_MADD_EXT: u32 = 0x8788;
pub const GL_OP_MAX_EXT: u32 = 0x878A;
pub const GL_OP_MIN_EXT: u32 = 0x878B;
pub const GL_OP_MOV_EXT: u32 = 0x8799;
pub const GL_OP_MULTIPLY_MATRIX_EXT: u32 = 0x8798;
pub const GL_OP_MUL_EXT: u32 = 0x8786;
pub const GL_OP_NEGATE_EXT: u32 = 0x8783;
pub const GL_OP_POWER_EXT: u32 = 0x8793;
pub const GL_OP_RECIP_EXT: u32 = 0x8794;
pub const GL_OP_RECIP_SQRT_EXT: u32 = 0x8795;
pub const GL_OP_ROUND_EXT: u32 = 0x8790;
pub const GL_OP_SET_GE_EXT: u32 = 0x878C;
pub const GL_OP_SET_LT_EXT: u32 = 0x878D;
pub const GL_OP_SUB_EXT: u32 = 0x8796;
pub const GL_OR: u32 = 0x1507;
pub const GL_OR_INVERTED: u32 = 0x150D;
pub const GL_OR_REVERSE: u32 = 0x150B;
pub const GL_OUTPUT_COLOR0_EXT: u32 = 0x879B;
pub const GL_OUTPUT_COLOR1_EXT: u32 = 0x879C;
pub const GL_OUTPUT_FOG_EXT: u32 = 0x87BD;
pub const GL_OUTPUT_TEXTURE_COORD0_EXT: u32 = 0x879D;
pub const GL_OUTPUT_TEXTURE_COORD10_EXT: u32 = 0x87A7;
pub const GL_OUTPUT_TEXTURE_COORD11_EXT: u32 = 0x87A8;
pub const GL_OUTPUT_TEXTURE_COORD12_EXT: u32 = 0x87A9;
pub const GL_OUTPUT_TEXTURE_COORD13_EXT: u32 = 0x87AA;
pub const GL_OUTPUT_TEXTURE_COORD14_EXT: u32 = 0x87AB;
pub const GL_OUTPUT_TEXTURE_COORD15_EXT: u32 = 0x87AC;
pub const GL_OUTPUT_TEXTURE_COORD16_EXT: u32 = 0x87AD;
pub const GL_OUTPUT_TEXTURE_COORD17_EXT: u32 = 0x87AE;
pub const GL_OUTPUT_TEXTURE_COORD18_EXT: u32 = 0x87AF;
pub const GL_OUTPUT_TEXTURE_COORD19_EXT: u32 = 0x87B0;
pub const GL_OUTPUT_TEXTURE_COORD1_EXT: u32 = 0x879E;
pub const GL_OUTPUT_TEXTURE_COORD20_EXT: u32 = 0x87B1;
pub const GL_OUTPUT_TEXTURE_COORD21_EXT: u32 = 0x87B2;
pub const GL_OUTPUT_TEXTURE_COORD22_EXT: u32 = 0x87B3;
pub const GL_OUTPUT_TEXTURE_COORD23_EXT: u32 = 0x87B4;
pub const GL_OUTPUT_TEXTURE_COORD24_EXT: u32 = 0x87B5;
pub const GL_OUTPUT_TEXTURE_COORD25_EXT: u32 = 0x87B6;
pub const GL_OUTPUT_TEXTURE_COORD26_EXT: u32 = 0x87B7;
pub const GL_OUTPUT_TEXTURE_COORD27_EXT: u32 = 0x87B8;
pub const GL_OUTPUT_TEXTURE_COORD28_EXT: u32 = 0x87B9;
pub const GL_OUTPUT_TEXTURE_COORD29_EXT: u32 = 0x87BA;
pub const GL_OUTPUT_TEXTURE_COORD2_EXT: u32 = 0x879F;
pub const GL_OUTPUT_TEXTURE_COORD30_EXT: u32 = 0x87BB;
pub const GL_OUTPUT_TEXTURE_COORD31_EXT: u32 = 0x87BC;
pub const GL_OUTPUT_TEXTURE_COORD3_EXT: u32 = 0x87A0;
pub const GL_OUTPUT_TEXTURE_COORD4_EXT: u32 = 0x87A1;
pub const GL_OUTPUT_TEXTURE_COORD5_EXT: u32 = 0x87A2;
pub const GL_OUTPUT_TEXTURE_COORD6_EXT: u32 = 0x87A3;
pub const GL_OUTPUT_TEXTURE_COORD7_EXT: u32 = 0x87A4;
pub const GL_OUTPUT_TEXTURE_COORD8_EXT: u32 = 0x87A5;
pub const GL_OUTPUT_TEXTURE_COORD9_EXT: u32 = 0x87A6;
pub const GL_OUTPUT_VERTEX_EXT: u32 = 0x879A;
pub const GL_OUT_OF_MEMORY: u32 = 0x0505;
pub const GL_OVERLAY_KHR: u32 = 0x9296;
pub const GL_OVERLAY_NV: u32 = 0x9296;
pub const GL_PACK_ALIGNMENT: u32 = 0x0D05;
pub const GL_PACK_CMYK_HINT_EXT: u32 = 0x800E;
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH: u32 = 0x912D;
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT: u32 = 0x912C;
pub const GL_PACK_COMPRESSED_BLOCK_SIZE: u32 = 0x912E;
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH: u32 = 0x912B;
pub const GL_PACK_IMAGE_DEPTH_SGIS: u32 = 0x8131;
pub const GL_PACK_IMAGE_HEIGHT: u32 = 0x806C;
pub const GL_PACK_IMAGE_HEIGHT_EXT: u32 = 0x806C;
pub const GL_PACK_INVERT_MESA: u32 = 0x8758;
pub const GL_PACK_LSB_FIRST: u32 = 0x0D01;
pub const GL_PACK_RESAMPLE_OML: u32 = 0x8984;
pub const GL_PACK_RESAMPLE_SGIX: u32 = 0x842E;
pub const GL_PACK_ROW_BYTES_APPLE: u32 = 0x8A15;
pub const GL_PACK_ROW_LENGTH: u32 = 0x0D02;
pub const GL_PACK_SKIP_IMAGES: u32 = 0x806B;
pub const GL_PACK_SKIP_IMAGES_EXT: u32 = 0x806B;
pub const GL_PACK_SKIP_PIXELS: u32 = 0x0D04;
pub const GL_PACK_SKIP_ROWS: u32 = 0x0D03;
pub const GL_PACK_SKIP_VOLUMES_SGIS: u32 = 0x8130;
pub const GL_PACK_SUBSAMPLE_RATE_SGIX: u32 = 0x85A0;
pub const GL_PACK_SWAP_BYTES: u32 = 0x0D00;
pub const GL_PALETTE4_R5_G6_B5_OES: u32 = 0x8B92;
pub const GL_PALETTE4_RGB5_A1_OES: u32 = 0x8B94;
pub const GL_PALETTE4_RGB8_OES: u32 = 0x8B90;
pub const GL_PALETTE4_RGBA4_OES: u32 = 0x8B93;
pub const GL_PALETTE4_RGBA8_OES: u32 = 0x8B91;
pub const GL_PALETTE8_R5_G6_B5_OES: u32 = 0x8B97;
pub const GL_PALETTE8_RGB5_A1_OES: u32 = 0x8B99;
pub const GL_PALETTE8_RGB8_OES: u32 = 0x8B95;
pub const GL_PALETTE8_RGBA4_OES: u32 = 0x8B98;
pub const GL_PALETTE8_RGBA8_OES: u32 = 0x8B96;
pub const GL_PARALLEL_ARRAYS_INTEL: u32 = 0x83F4;
pub const GL_PARAMETER_BUFFER: u32 = 0x80EE;
pub const GL_PARAMETER_BUFFER_ARB: u32 = 0x80EE;
pub const GL_PARAMETER_BUFFER_BINDING: u32 = 0x80EF;
pub const GL_PARAMETER_BUFFER_BINDING_ARB: u32 = 0x80EF;
pub const GL_PARTIAL_SUCCESS_NV: u32 = 0x902E;
pub const GL_PASS_THROUGH_NV: u32 = 0x86E6;
pub const GL_PATCHES: u32 = 0x000E;
pub const GL_PATCH_DEFAULT_INNER_LEVEL: u32 = 0x8E73;
pub const GL_PATCH_DEFAULT_OUTER_LEVEL: u32 = 0x8E74;
pub const GL_PATCH_VERTICES: u32 = 0x8E72;
pub const GL_PATH_CLIENT_LENGTH_NV: u32 = 0x907F;
pub const GL_PATH_COMMAND_COUNT_NV: u32 = 0x909D;
pub const GL_PATH_COMPUTED_LENGTH_NV: u32 = 0x90A0;
pub const GL_PATH_COORD_COUNT_NV: u32 = 0x909E;
pub const GL_PATH_COVER_DEPTH_FUNC_NV: u32 = 0x90BF;
pub const GL_PATH_DASH_ARRAY_COUNT_NV: u32 = 0x909F;
pub const GL_PATH_DASH_CAPS_NV: u32 = 0x907B;
pub const GL_PATH_DASH_OFFSET_NV: u32 = 0x907E;
pub const GL_PATH_DASH_OFFSET_RESET_NV: u32 = 0x90B4;
pub const GL_PATH_END_CAPS_NV: u32 = 0x9076;
pub const GL_PATH_ERROR_POSITION_NV: u32 = 0x90AB;
pub const GL_PATH_FILL_BOUNDING_BOX_NV: u32 = 0x90A1;
pub const GL_PATH_FILL_COVER_MODE_NV: u32 = 0x9082;
pub const GL_PATH_FILL_MASK_NV: u32 = 0x9081;
pub const GL_PATH_FILL_MODE_NV: u32 = 0x9080;
pub const GL_PATH_FORMAT_PS_NV: u32 = 0x9071;
pub const GL_PATH_FORMAT_SVG_NV: u32 = 0x9070;
pub const GL_PATH_GEN_COEFF_NV: u32 = 0x90B1;
pub const GL_PATH_GEN_COMPONENTS_NV: u32 = 0x90B3;
pub const GL_PATH_GEN_MODE_NV: u32 = 0x90B0;
pub const GL_PATH_INITIAL_DASH_CAP_NV: u32 = 0x907C;
pub const GL_PATH_INITIAL_END_CAP_NV: u32 = 0x9077;
pub const GL_PATH_JOIN_STYLE_NV: u32 = 0x9079;
pub const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV: u32 = 0x0D36;
pub const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV: u32 = 0x0D38;
pub const GL_PATH_MITER_LIMIT_NV: u32 = 0x907A;
pub const GL_PATH_MODELVIEW_MATRIX_NV: u32 = 0x0BA6;
pub const GL_PATH_MODELVIEW_NV: u32 = 0x1700;
pub const GL_PATH_MODELVIEW_STACK_DEPTH_NV: u32 = 0x0BA3;
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV: u32 = 0x908A;
pub const GL_PATH_PROJECTION_MATRIX_NV: u32 = 0x0BA7;
pub const GL_PATH_PROJECTION_NV: u32 = 0x1701;
pub const GL_PATH_PROJECTION_STACK_DEPTH_NV: u32 = 0x0BA4;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV: u32 = 0x90BD;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV: u32 = 0x90BE;
pub const GL_PATH_STENCIL_FUNC_NV: u32 = 0x90B7;
pub const GL_PATH_STENCIL_REF_NV: u32 = 0x90B8;
pub const GL_PATH_STENCIL_VALUE_MASK_NV: u32 = 0x90B9;
pub const GL_PATH_STROKE_BOUNDING_BOX_NV: u32 = 0x90A2;
pub const GL_PATH_STROKE_COVER_MODE_NV: u32 = 0x9083;
pub const GL_PATH_STROKE_MASK_NV: u32 = 0x9084;
pub const GL_PATH_STROKE_WIDTH_NV: u32 = 0x9075;
pub const GL_PATH_TERMINAL_DASH_CAP_NV: u32 = 0x907D;
pub const GL_PATH_TERMINAL_END_CAP_NV: u32 = 0x9078;
pub const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV: u32 = 0x84E3;
pub const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV: u32 = 0x84E4;
pub const GL_PERCENTAGE_AMD: u32 = 0x8BC3;
pub const GL_PERFMON_RESULT_AMD: u32 = 0x8BC6;
pub const GL_PERFMON_RESULT_AVAILABLE_AMD: u32 = 0x8BC4;
pub const GL_PERFMON_RESULT_SIZE_AMD: u32 = 0x8BC5;
pub const GL_PERFORMANCE_MONITOR_AMD: u32 = 0x9152;
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL: u32 = 0x94FC;
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL: u32 = 0x94FB;
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL: u32 = 0x94FA;
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL: u32 = 0x94F8;
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL: u32 = 0x94F9;
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL: u32 = 0x94FF;
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL: u32 = 0x94F1;
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL: u32 = 0x94F2;
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL: u32 = 0x94F0;
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL: u32 = 0x94FE;
pub const GL_PERFQUERY_COUNTER_RAW_INTEL: u32 = 0x94F4;
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL: u32 = 0x94F3;
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL: u32 = 0x94F5;
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL: u32 = 0x83F9;
pub const GL_PERFQUERY_FLUSH_INTEL: u32 = 0x83FA;
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL: u32 = 0x00000001;
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL: u32 = 0x9500;
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL: u32 = 0x94FD;
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL: u32 = 0x00000000;
pub const GL_PERFQUERY_WAIT_INTEL: u32 = 0x83FB;
pub const GL_PERTURB_EXT: u32 = 0x85AE;
pub const GL_PER_GPU_STORAGE_BIT_NV: u32 = 0x0800;
pub const GL_PER_GPU_STORAGE_NV: u32 = 0x9548;
pub const GL_PER_STAGE_CONSTANTS_NV: u32 = 0x8535;
pub const GL_PHONG_HINT_WIN: u32 = 0x80EB;
pub const GL_PHONG_WIN: u32 = 0x80EA;
pub const GL_PINLIGHT_NV: u32 = 0x92A8;
pub const GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD: u32 = 0x91AE;
pub const GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD: u32 = 0x91AF;
pub const GL_PIXEL_BUFFER_BARRIER_BIT: u32 = 0x00000080;
pub const GL_PIXEL_BUFFER_BARRIER_BIT_EXT: u32 = 0x00000080;
pub const GL_PIXEL_COUNTER_BITS_NV: u32 = 0x8864;
pub const GL_PIXEL_COUNT_AVAILABLE_NV: u32 = 0x8867;
pub const GL_PIXEL_COUNT_NV: u32 = 0x8866;
pub const GL_PIXEL_CUBIC_WEIGHT_EXT: u32 = 0x8333;
pub const GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS: u32 = 0x8355;
pub const GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS: u32 = 0x8354;
pub const GL_PIXEL_GROUP_COLOR_SGIS: u32 = 0x8356;
pub const GL_PIXEL_MAG_FILTER_EXT: u32 = 0x8331;
pub const GL_PIXEL_MIN_FILTER_EXT: u32 = 0x8332;
pub const GL_PIXEL_PACK_BUFFER: u32 = 0x88EB;
pub const GL_PIXEL_PACK_BUFFER_ARB: u32 = 0x88EB;
pub const GL_PIXEL_PACK_BUFFER_BINDING: u32 = 0x88ED;
pub const GL_PIXEL_PACK_BUFFER_BINDING_ARB: u32 = 0x88ED;
pub const GL_PIXEL_PACK_BUFFER_BINDING_EXT: u32 = 0x88ED;
pub const GL_PIXEL_PACK_BUFFER_EXT: u32 = 0x88EB;
pub const GL_PIXEL_SUBSAMPLE_2424_SGIX: u32 = 0x85A3;
pub const GL_PIXEL_SUBSAMPLE_4242_SGIX: u32 = 0x85A4;
pub const GL_PIXEL_SUBSAMPLE_4444_SGIX: u32 = 0x85A2;
pub const GL_PIXEL_TEXTURE_SGIS: u32 = 0x8353;
pub const GL_PIXEL_TEX_GEN_MODE_SGIX: u32 = 0x832B;
pub const GL_PIXEL_TEX_GEN_SGIX: u32 = 0x8139;
pub const GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX: u32 = 0x813E;
pub const GL_PIXEL_TILE_CACHE_INCREMENT_SGIX: u32 = 0x813F;
pub const GL_PIXEL_TILE_CACHE_SIZE_SGIX: u32 = 0x8145;
pub const GL_PIXEL_TILE_GRID_DEPTH_SGIX: u32 = 0x8144;
pub const GL_PIXEL_TILE_GRID_HEIGHT_SGIX: u32 = 0x8143;
pub const GL_PIXEL_TILE_GRID_WIDTH_SGIX: u32 = 0x8142;
pub const GL_PIXEL_TILE_HEIGHT_SGIX: u32 = 0x8141;
pub const GL_PIXEL_TILE_WIDTH_SGIX: u32 = 0x8140;
pub const GL_PIXEL_TRANSFORM_2D_EXT: u32 = 0x8330;
pub const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT: u32 = 0x8338;
pub const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: u32 = 0x8336;
pub const GL_PIXEL_UNPACK_BUFFER: u32 = 0x88EC;
pub const GL_PIXEL_UNPACK_BUFFER_ARB: u32 = 0x88EC;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING: u32 = 0x88EF;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB: u32 = 0x88EF;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT: u32 = 0x88EF;
pub const GL_PIXEL_UNPACK_BUFFER_EXT: u32 = 0x88EC;
pub const GL_PLUS_CLAMPED_ALPHA_NV: u32 = 0x92B2;
pub const GL_PLUS_CLAMPED_NV: u32 = 0x92B1;
pub const GL_PLUS_DARKER_NV: u32 = 0x9292;
pub const GL_PLUS_NV: u32 = 0x9291;
pub const GL_PN_TRIANGLES_ATI: u32 = 0x87F0;
pub const GL_PN_TRIANGLES_NORMAL_MODE_ATI: u32 = 0x87F3;
pub const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI: u32 = 0x87F7;
pub const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI: u32 = 0x87F8;
pub const GL_PN_TRIANGLES_POINT_MODE_ATI: u32 = 0x87F2;
pub const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI: u32 = 0x87F6;
pub const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI: u32 = 0x87F5;
pub const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI: u32 = 0x87F4;
pub const GL_POINT: u32 = 0x1B00;
pub const GL_POINTS: u32 = 0x0000;
pub const GL_POINT_DISTANCE_ATTENUATION_ARB: u32 = 0x8129;
pub const GL_POINT_FADE_THRESHOLD_SIZE: u32 = 0x8128;
pub const GL_POINT_FADE_THRESHOLD_SIZE_ARB: u32 = 0x8128;
pub const GL_POINT_FADE_THRESHOLD_SIZE_EXT: u32 = 0x8128;
pub const GL_POINT_FADE_THRESHOLD_SIZE_SGIS: u32 = 0x8128;
pub const GL_POINT_SIZE: u32 = 0x0B11;
pub const GL_POINT_SIZE_GRANULARITY: u32 = 0x0B13;
pub const GL_POINT_SIZE_MAX_ARB: u32 = 0x8127;
pub const GL_POINT_SIZE_MAX_EXT: u32 = 0x8127;
pub const GL_POINT_SIZE_MAX_SGIS: u32 = 0x8127;
pub const GL_POINT_SIZE_MIN_ARB: u32 = 0x8126;
pub const GL_POINT_SIZE_MIN_EXT: u32 = 0x8126;
pub const GL_POINT_SIZE_MIN_SGIS: u32 = 0x8126;
pub const GL_POINT_SIZE_RANGE: u32 = 0x0B12;
pub const GL_POINT_SPRITE_ARB: u32 = 0x8861;
pub const GL_POINT_SPRITE_COORD_ORIGIN: u32 = 0x8CA0;
pub const GL_POINT_SPRITE_NV: u32 = 0x8861;
pub const GL_POINT_SPRITE_R_MODE_NV: u32 = 0x8863;
pub const GL_POLYGON_MODE: u32 = 0x0B40;
pub const GL_POLYGON_OFFSET_BIAS_EXT: u32 = 0x8039;
pub const GL_POLYGON_OFFSET_CLAMP: u32 = 0x8E1B;
pub const GL_POLYGON_OFFSET_CLAMP_EXT: u32 = 0x8E1B;
pub const GL_POLYGON_OFFSET_COMMAND_NV: u32 = 0x000E;
pub const GL_POLYGON_OFFSET_EXT: u32 = 0x8037;
pub const GL_POLYGON_OFFSET_FACTOR: u32 = 0x8038;
pub const GL_POLYGON_OFFSET_FACTOR_EXT: u32 = 0x8038;
pub const GL_POLYGON_OFFSET_FILL: u32 = 0x8037;
pub const GL_POLYGON_OFFSET_LINE: u32 = 0x2A02;
pub const GL_POLYGON_OFFSET_POINT: u32 = 0x2A01;
pub const GL_POLYGON_OFFSET_UNITS: u32 = 0x2A00;
pub const GL_POLYGON_SMOOTH: u32 = 0x0B41;
pub const GL_POLYGON_SMOOTH_HINT: u32 = 0x0C53;
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI: u32 = 0x80BB;
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI: u32 = 0x80B7;
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI: u32 = 0x80BA;
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI: u32 = 0x80B6;
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI: u32 = 0x80D2;
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI: u32 = 0x80B9;
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI: u32 = 0x80B5;
pub const GL_POST_COLOR_MATRIX_RED_BIAS_SGI: u32 = 0x80B8;
pub const GL_POST_COLOR_MATRIX_RED_SCALE_SGI: u32 = 0x80B4;
pub const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT: u32 = 0x8023;
pub const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT: u32 = 0x801F;
pub const GL_POST_CONVOLUTION_BLUE_BIAS_EXT: u32 = 0x8022;
pub const GL_POST_CONVOLUTION_BLUE_SCALE_EXT: u32 = 0x801E;
pub const GL_POST_CONVOLUTION_COLOR_TABLE_SGI: u32 = 0x80D1;
pub const GL_POST_CONVOLUTION_GREEN_BIAS_EXT: u32 = 0x8021;
pub const GL_POST_CONVOLUTION_GREEN_SCALE_EXT: u32 = 0x801D;
pub const GL_POST_CONVOLUTION_RED_BIAS_EXT: u32 = 0x8020;
pub const GL_POST_CONVOLUTION_RED_SCALE_EXT: u32 = 0x801C;
pub const GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: u32 = 0x8162;
pub const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX: u32 = 0x817B;
pub const GL_POST_TEXTURE_FILTER_BIAS_SGIX: u32 = 0x8179;
pub const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX: u32 = 0x817C;
pub const GL_POST_TEXTURE_FILTER_SCALE_SGIX: u32 = 0x817A;
pub const GL_PREFER_DOUBLEBUFFER_HINT_PGI: u32 = 0x1A1F8;
pub const GL_PRESENT_DURATION_NV: u32 = 0x8E2B;
pub const GL_PRESENT_TIME_NV: u32 = 0x8E2A;
pub const GL_PRESERVE_ATI: u32 = 0x8762;
pub const GL_PREVIOUS_ARB: u32 = 0x8578;
pub const GL_PREVIOUS_EXT: u32 = 0x8578;
pub const GL_PREVIOUS_TEXTURE_INPUT_NV: u32 = 0x86E4;
pub const GL_PRIMARY_COLOR_ARB: u32 = 0x8577;
pub const GL_PRIMARY_COLOR_EXT: u32 = 0x8577;
pub const GL_PRIMARY_COLOR_NV: u32 = 0x852C;
pub const GL_PRIMITIVES_GENERATED: u32 = 0x8C87;
pub const GL_PRIMITIVES_GENERATED_EXT: u32 = 0x8C87;
pub const GL_PRIMITIVES_GENERATED_NV: u32 = 0x8C87;
pub const GL_PRIMITIVES_SUBMITTED: u32 = 0x82EF;
pub const GL_PRIMITIVES_SUBMITTED_ARB: u32 = 0x82EF;
pub const GL_PRIMITIVE_BOUNDING_BOX_ARB: u32 = 0x92BE;
pub const GL_PRIMITIVE_ID_NV: u32 = 0x8C7C;
pub const GL_PRIMITIVE_RESTART: u32 = 0x8F9D;
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX: u32 = 0x8D69;
pub const GL_PRIMITIVE_RESTART_INDEX: u32 = 0x8F9E;
pub const GL_PRIMITIVE_RESTART_INDEX_NV: u32 = 0x8559;
pub const GL_PRIMITIVE_RESTART_NV: u32 = 0x8558;
pub const GL_PROGRAM: u32 = 0x82E2;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB: u32 = 0x9341;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV: u32 = 0x9341;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB: u32 = 0x9340;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV: u32 = 0x9340;
pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB: u32 = 0x88B0;
pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB: u32 = 0x8805;
pub const GL_PROGRAM_ATTRIBS_ARB: u32 = 0x88AC;
pub const GL_PROGRAM_ATTRIB_COMPONENTS_NV: u32 = 0x8906;
pub const GL_PROGRAM_BINARY_FORMATS: u32 = 0x87FF;
pub const GL_PROGRAM_BINARY_FORMAT_MESA: u32 = 0x875F;
pub const GL_PROGRAM_BINARY_LENGTH: u32 = 0x8741;
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT: u32 = 0x8257;
pub const GL_PROGRAM_BINDING_ARB: u32 = 0x8677;
pub const GL_PROGRAM_ERROR_POSITION_ARB: u32 = 0x864B;
pub const GL_PROGRAM_ERROR_POSITION_NV: u32 = 0x864B;
pub const GL_PROGRAM_ERROR_STRING_ARB: u32 = 0x8874;
pub const GL_PROGRAM_ERROR_STRING_NV: u32 = 0x8874;
pub const GL_PROGRAM_FORMAT_ARB: u32 = 0x8876;
pub const GL_PROGRAM_FORMAT_ASCII_ARB: u32 = 0x8875;
pub const GL_PROGRAM_INPUT: u32 = 0x92E3;
pub const GL_PROGRAM_INSTRUCTIONS_ARB: u32 = 0x88A0;
pub const GL_PROGRAM_LENGTH_ARB: u32 = 0x8627;
pub const GL_PROGRAM_LENGTH_NV: u32 = 0x8627;
pub const GL_PROGRAM_MATRIX_EXT: u32 = 0x8E2D;
pub const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT: u32 = 0x8E2F;
pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: u32 = 0x88B2;
pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: u32 = 0x8808;
pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB: u32 = 0x88AE;
pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB: u32 = 0x88A2;
pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB: u32 = 0x88AA;
pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB: u32 = 0x88A6;
pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: u32 = 0x880A;
pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: u32 = 0x8809;
pub const GL_PROGRAM_OBJECT_ARB: u32 = 0x8B40;
pub const GL_PROGRAM_OBJECT_EXT: u32 = 0x8B40;
pub const GL_PROGRAM_OUTPUT: u32 = 0x92E4;
pub const GL_PROGRAM_PARAMETERS_ARB: u32 = 0x88A8;
pub const GL_PROGRAM_PARAMETER_NV: u32 = 0x8644;
pub const GL_PROGRAM_PIPELINE: u32 = 0x82E4;
pub const GL_PROGRAM_PIPELINE_BINDING: u32 = 0x825A;
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT: u32 = 0x8A4F;
pub const GL_PROGRAM_POINT_SIZE: u32 = 0x8642;
pub const GL_PROGRAM_POINT_SIZE_ARB: u32 = 0x8642;
pub const GL_PROGRAM_POINT_SIZE_EXT: u32 = 0x8642;
pub const GL_PROGRAM_RESIDENT_NV: u32 = 0x8647;
pub const GL_PROGRAM_RESULT_COMPONENTS_NV: u32 = 0x8907;
pub const GL_PROGRAM_SEPARABLE: u32 = 0x8258;
pub const GL_PROGRAM_STRING_ARB: u32 = 0x8628;
pub const GL_PROGRAM_STRING_NV: u32 = 0x8628;
pub const GL_PROGRAM_TARGET_NV: u32 = 0x8646;
pub const GL_PROGRAM_TEMPORARIES_ARB: u32 = 0x88A4;
pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB: u32 = 0x8807;
pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB: u32 = 0x8806;
pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB: u32 = 0x88B6;
pub const GL_PROTECTED_MEMORY_OBJECT_EXT: u32 = 0x959B;
pub const GL_PROVOKING_VERTEX: u32 = 0x8E4F;
pub const GL_PROVOKING_VERTEX_EXT: u32 = 0x8E4F;
pub const GL_PROXY_COLOR_TABLE_SGI: u32 = 0x80D3;
pub const GL_PROXY_HISTOGRAM_EXT: u32 = 0x8025;
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI: u32 = 0x80D5;
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI: u32 = 0x80D4;
pub const GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: u32 = 0x8163;
pub const GL_PROXY_TEXTURE_1D: u32 = 0x8063;
pub const GL_PROXY_TEXTURE_1D_ARRAY: u32 = 0x8C19;
pub const GL_PROXY_TEXTURE_1D_ARRAY_EXT: u32 = 0x8C19;
pub const GL_PROXY_TEXTURE_1D_EXT: u32 = 0x8063;
pub const GL_PROXY_TEXTURE_1D_STACK_MESAX: u32 = 0x875B;
pub const GL_PROXY_TEXTURE_2D: u32 = 0x8064;
pub const GL_PROXY_TEXTURE_2D_ARRAY: u32 = 0x8C1B;
pub const GL_PROXY_TEXTURE_2D_ARRAY_EXT: u32 = 0x8C1B;
pub const GL_PROXY_TEXTURE_2D_EXT: u32 = 0x8064;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE: u32 = 0x9101;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: u32 = 0x9103;
pub const GL_PROXY_TEXTURE_2D_STACK_MESAX: u32 = 0x875C;
pub const GL_PROXY_TEXTURE_3D: u32 = 0x8070;
pub const GL_PROXY_TEXTURE_3D_EXT: u32 = 0x8070;
pub const GL_PROXY_TEXTURE_4D_SGIS: u32 = 0x8135;
pub const GL_PROXY_TEXTURE_COLOR_TABLE_SGI: u32 = 0x80BD;
pub const GL_PROXY_TEXTURE_CUBE_MAP: u32 = 0x851B;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB: u32 = 0x851B;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB: u32 = 0x900B;
pub const GL_PROXY_TEXTURE_CUBE_MAP_EXT: u32 = 0x851B;
pub const GL_PROXY_TEXTURE_RECTANGLE: u32 = 0x84F7;
pub const GL_PROXY_TEXTURE_RECTANGLE_ARB: u32 = 0x84F7;
pub const GL_PROXY_TEXTURE_RECTANGLE_NV: u32 = 0x84F7;
pub const GL_PURGEABLE_APPLE: u32 = 0x8A1D;
pub const GL_PURGED_CONTEXT_RESET_NV: u32 = 0x92BB;
pub const GL_QUADRATIC_CURVE_TO_NV: u32 = 0x0A;
pub const GL_QUADS: u32 = 0x0007;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: u32 = 0x8E4C;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT: u32 = 0x8E4C;
pub const GL_QUAD_ALPHA4_SGIS: u32 = 0x811E;
pub const GL_QUAD_ALPHA8_SGIS: u32 = 0x811F;
pub const GL_QUAD_INTENSITY4_SGIS: u32 = 0x8122;
pub const GL_QUAD_INTENSITY8_SGIS: u32 = 0x8123;
pub const GL_QUAD_LUMINANCE4_SGIS: u32 = 0x8120;
pub const GL_QUAD_LUMINANCE8_SGIS: u32 = 0x8121;
pub const GL_QUAD_MESH_SUN: u32 = 0x8614;
pub const GL_QUAD_TEXTURE_SELECT_SGIS: u32 = 0x8125;
pub const GL_QUARTER_BIT_ATI: u32 = 0x00000010;
pub const GL_QUERY: u32 = 0x82E3;
pub const GL_QUERY_ALL_EVENT_BITS_AMD: u32 = 0xFFFFFFFF;
pub const GL_QUERY_BUFFER: u32 = 0x9192;
pub const GL_QUERY_BUFFER_AMD: u32 = 0x9192;
pub const GL_QUERY_BUFFER_BARRIER_BIT: u32 = 0x00008000;
pub const GL_QUERY_BUFFER_BINDING: u32 = 0x9193;
pub const GL_QUERY_BUFFER_BINDING_AMD: u32 = 0x9193;
pub const GL_QUERY_BY_REGION_NO_WAIT: u32 = 0x8E16;
pub const GL_QUERY_BY_REGION_NO_WAIT_INVERTED: u32 = 0x8E1A;
pub const GL_QUERY_BY_REGION_NO_WAIT_NV: u32 = 0x8E16;
pub const GL_QUERY_BY_REGION_WAIT: u32 = 0x8E15;
pub const GL_QUERY_BY_REGION_WAIT_INVERTED: u32 = 0x8E19;
pub const GL_QUERY_BY_REGION_WAIT_NV: u32 = 0x8E15;
pub const GL_QUERY_COUNTER_BITS: u32 = 0x8864;
pub const GL_QUERY_COUNTER_BITS_ARB: u32 = 0x8864;
pub const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD: u32 = 0x00000008;
pub const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD: u32 = 0x00000002;
pub const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD: u32 = 0x00000001;
pub const GL_QUERY_NO_WAIT: u32 = 0x8E14;
pub const GL_QUERY_NO_WAIT_INVERTED: u32 = 0x8E18;
pub const GL_QUERY_NO_WAIT_NV: u32 = 0x8E14;
pub const GL_QUERY_OBJECT_AMD: u32 = 0x9153;
pub const GL_QUERY_OBJECT_EXT: u32 = 0x9153;
pub const GL_QUERY_RESOURCE_BUFFEROBJECT_NV: u32 = 0x9547;
pub const GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV: u32 = 0x9542;
pub const GL_QUERY_RESOURCE_RENDERBUFFER_NV: u32 = 0x9546;
pub const GL_QUERY_RESOURCE_SYS_RESERVED_NV: u32 = 0x9544;
pub const GL_QUERY_RESOURCE_TEXTURE_NV: u32 = 0x9545;
pub const GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV: u32 = 0x9540;
pub const GL_QUERY_RESULT: u32 = 0x8866;
pub const GL_QUERY_RESULT_ARB: u32 = 0x8866;
pub const GL_QUERY_RESULT_AVAILABLE: u32 = 0x8867;
pub const GL_QUERY_RESULT_AVAILABLE_ARB: u32 = 0x8867;
pub const GL_QUERY_RESULT_NO_WAIT: u32 = 0x9194;
pub const GL_QUERY_RESULT_NO_WAIT_AMD: u32 = 0x9194;
pub const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD: u32 = 0x00000004;
pub const GL_QUERY_TARGET: u32 = 0x82EA;
pub const GL_QUERY_WAIT: u32 = 0x8E13;
pub const GL_QUERY_WAIT_INVERTED: u32 = 0x8E17;
pub const GL_QUERY_WAIT_NV: u32 = 0x8E13;
pub const GL_R11F_G11F_B10F: u32 = 0x8C3A;
pub const GL_R11F_G11F_B10F_EXT: u32 = 0x8C3A;
pub const GL_R16: u32 = 0x822A;
pub const GL_R16F: u32 = 0x822D;
pub const GL_R16I: u32 = 0x8233;
pub const GL_R16UI: u32 = 0x8234;
pub const GL_R16_SNORM: u32 = 0x8F98;
pub const GL_R1UI_C3F_V3F_SUN: u32 = 0x85C6;
pub const GL_R1UI_C4F_N3F_V3F_SUN: u32 = 0x85C8;
pub const GL_R1UI_C4UB_V3F_SUN: u32 = 0x85C5;
pub const GL_R1UI_N3F_V3F_SUN: u32 = 0x85C7;
pub const GL_R1UI_T2F_C4F_N3F_V3F_SUN: u32 = 0x85CB;
pub const GL_R1UI_T2F_N3F_V3F_SUN: u32 = 0x85CA;
pub const GL_R1UI_T2F_V3F_SUN: u32 = 0x85C9;
pub const GL_R1UI_V3F_SUN: u32 = 0x85C4;
pub const GL_R32F: u32 = 0x822E;
pub const GL_R32I: u32 = 0x8235;
pub const GL_R32UI: u32 = 0x8236;
pub const GL_R3_G3_B2: u32 = 0x2A10;
pub const GL_R8: u32 = 0x8229;
pub const GL_R8I: u32 = 0x8231;
pub const GL_R8UI: u32 = 0x8232;
pub const GL_R8_SNORM: u32 = 0x8F94;
pub const GL_RASTERIZER_DISCARD: u32 = 0x8C89;
pub const GL_RASTERIZER_DISCARD_EXT: u32 = 0x8C89;
pub const GL_RASTERIZER_DISCARD_NV: u32 = 0x8C89;
pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT: u32 = 0x932A;
pub const GL_RASTER_MULTISAMPLE_EXT: u32 = 0x9327;
pub const GL_RASTER_POSITION_UNCLIPPED_IBM: u32 = 0x19262;
pub const GL_RASTER_SAMPLES_EXT: u32 = 0x9328;
pub const GL_READ_BUFFER: u32 = 0x0C02;
pub const GL_READ_FRAMEBUFFER: u32 = 0x8CA8;
pub const GL_READ_FRAMEBUFFER_BINDING: u32 = 0x8CAA;
pub const GL_READ_FRAMEBUFFER_BINDING_EXT: u32 = 0x8CAA;
pub const GL_READ_FRAMEBUFFER_EXT: u32 = 0x8CA8;
pub const GL_READ_ONLY: u32 = 0x88B8;
pub const GL_READ_ONLY_ARB: u32 = 0x88B8;
pub const GL_READ_PIXELS: u32 = 0x828C;
pub const GL_READ_PIXELS_FORMAT: u32 = 0x828D;
pub const GL_READ_PIXELS_TYPE: u32 = 0x828E;
pub const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV: u32 = 0x887B;
pub const GL_READ_PIXEL_DATA_RANGE_NV: u32 = 0x8879;
pub const GL_READ_PIXEL_DATA_RANGE_POINTER_NV: u32 = 0x887D;
pub const GL_READ_WRITE: u32 = 0x88BA;
pub const GL_READ_WRITE_ARB: u32 = 0x88BA;
pub const GL_RECLAIM_MEMORY_HINT_PGI: u32 = 0x1A1FE;
pub const GL_RECT_NV: u32 = 0xF6;
pub const GL_RED: u32 = 0x1903;
pub const GL_REDUCE_EXT: u32 = 0x8016;
pub const GL_RED_BIT_ATI: u32 = 0x00000001;
pub const GL_RED_INTEGER: u32 = 0x8D94;
pub const GL_RED_INTEGER_EXT: u32 = 0x8D94;
pub const GL_RED_MAX_CLAMP_INGR: u32 = 0x8564;
pub const GL_RED_MIN_CLAMP_INGR: u32 = 0x8560;
pub const GL_RED_NV: u32 = 0x1903;
pub const GL_RED_SNORM: u32 = 0x8F90;
pub const GL_REFERENCED_BY_COMPUTE_SHADER: u32 = 0x930B;
pub const GL_REFERENCED_BY_FRAGMENT_SHADER: u32 = 0x930A;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER: u32 = 0x9309;
pub const GL_REFERENCED_BY_MESH_SHADER_NV: u32 = 0x95A0;
pub const GL_REFERENCED_BY_TASK_SHADER_NV: u32 = 0x95A1;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 0x9307;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 0x9308;
pub const GL_REFERENCED_BY_VERTEX_SHADER: u32 = 0x9306;
pub const GL_REFERENCE_PLANE_EQUATION_SGIX: u32 = 0x817E;
pub const GL_REFERENCE_PLANE_SGIX: u32 = 0x817D;
pub const GL_REFLECTION_MAP_ARB: u32 = 0x8512;
pub const GL_REFLECTION_MAP_EXT: u32 = 0x8512;
pub const GL_REFLECTION_MAP_NV: u32 = 0x8512;
pub const GL_REGISTER_COMBINERS_NV: u32 = 0x8522;
pub const GL_REG_0_ATI: u32 = 0x8921;
pub const GL_REG_10_ATI: u32 = 0x892B;
pub const GL_REG_11_ATI: u32 = 0x892C;
pub const GL_REG_12_ATI: u32 = 0x892D;
pub const GL_REG_13_ATI: u32 = 0x892E;
pub const GL_REG_14_ATI: u32 = 0x892F;
pub const GL_REG_15_ATI: u32 = 0x8930;
pub const GL_REG_16_ATI: u32 = 0x8931;
pub const GL_REG_17_ATI: u32 = 0x8932;
pub const GL_REG_18_ATI: u32 = 0x8933;
pub const GL_REG_19_ATI: u32 = 0x8934;
pub const GL_REG_1_ATI: u32 = 0x8922;
pub const GL_REG_20_ATI: u32 = 0x8935;
pub const GL_REG_21_ATI: u32 = 0x8936;
pub const GL_REG_22_ATI: u32 = 0x8937;
pub const GL_REG_23_ATI: u32 = 0x8938;
pub const GL_REG_24_ATI: u32 = 0x8939;
pub const GL_REG_25_ATI: u32 = 0x893A;
pub const GL_REG_26_ATI: u32 = 0x893B;
pub const GL_REG_27_ATI: u32 = 0x893C;
pub const GL_REG_28_ATI: u32 = 0x893D;
pub const GL_REG_29_ATI: u32 = 0x893E;
pub const GL_REG_2_ATI: u32 = 0x8923;
pub const GL_REG_30_ATI: u32 = 0x893F;
pub const GL_REG_31_ATI: u32 = 0x8940;
pub const GL_REG_3_ATI: u32 = 0x8924;
pub const GL_REG_4_ATI: u32 = 0x8925;
pub const GL_REG_5_ATI: u32 = 0x8926;
pub const GL_REG_6_ATI: u32 = 0x8927;
pub const GL_REG_7_ATI: u32 = 0x8928;
pub const GL_REG_8_ATI: u32 = 0x8929;
pub const GL_REG_9_ATI: u32 = 0x892A;
pub const GL_RELATIVE_ARC_TO_NV: u32 = 0xFF;
pub const GL_RELATIVE_CONIC_CURVE_TO_NV: u32 = 0x1B;
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV: u32 = 0x0D;
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV: u32 = 0x07;
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV: u32 = 0x17;
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV: u32 = 0x19;
pub const GL_RELATIVE_LINE_TO_NV: u32 = 0x05;
pub const GL_RELATIVE_MOVE_TO_NV: u32 = 0x03;
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV: u32 = 0x0B;
pub const GL_RELATIVE_RECT_NV: u32 = 0xF7;
pub const GL_RELATIVE_ROUNDED_RECT2_NV: u32 = 0xEB;
pub const GL_RELATIVE_ROUNDED_RECT4_NV: u32 = 0xED;
pub const GL_RELATIVE_ROUNDED_RECT8_NV: u32 = 0xEF;
pub const GL_RELATIVE_ROUNDED_RECT_NV: u32 = 0xE9;
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV: u32 = 0x13;
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV: u32 = 0x15;
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV: u32 = 0x11;
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV: u32 = 0x0F;
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV: u32 = 0x09;
pub const GL_RELEASED_APPLE: u32 = 0x8A19;
pub const GL_RENDERBUFFER: u32 = 0x8D41;
pub const GL_RENDERBUFFER_ALPHA_SIZE: u32 = 0x8D53;
pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT: u32 = 0x8D53;
pub const GL_RENDERBUFFER_BINDING: u32 = 0x8CA7;
pub const GL_RENDERBUFFER_BINDING_EXT: u32 = 0x8CA7;
pub const GL_RENDERBUFFER_BLUE_SIZE: u32 = 0x8D52;
pub const GL_RENDERBUFFER_BLUE_SIZE_EXT: u32 = 0x8D52;
pub const GL_RENDERBUFFER_COLOR_SAMPLES_NV: u32 = 0x8E10;
pub const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV: u32 = 0x8CAB;
pub const GL_RENDERBUFFER_DEPTH_SIZE: u32 = 0x8D54;
pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT: u32 = 0x8D54;
pub const GL_RENDERBUFFER_EXT: u32 = 0x8D41;
pub const GL_RENDERBUFFER_FREE_MEMORY_ATI: u32 = 0x87FD;
pub const GL_RENDERBUFFER_GREEN_SIZE: u32 = 0x8D51;
pub const GL_RENDERBUFFER_GREEN_SIZE_EXT: u32 = 0x8D51;
pub const GL_RENDERBUFFER_HEIGHT: u32 = 0x8D43;
pub const GL_RENDERBUFFER_HEIGHT_EXT: u32 = 0x8D43;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT: u32 = 0x8D44;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT: u32 = 0x8D44;
pub const GL_RENDERBUFFER_RED_SIZE: u32 = 0x8D50;
pub const GL_RENDERBUFFER_RED_SIZE_EXT: u32 = 0x8D50;
pub const GL_RENDERBUFFER_SAMPLES: u32 = 0x8CAB;
pub const GL_RENDERBUFFER_SAMPLES_EXT: u32 = 0x8CAB;
pub const GL_RENDERBUFFER_STENCIL_SIZE: u32 = 0x8D55;
pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT: u32 = 0x8D55;
pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD: u32 = 0x91B2;
pub const GL_RENDERBUFFER_WIDTH: u32 = 0x8D42;
pub const GL_RENDERBUFFER_WIDTH_EXT: u32 = 0x8D42;
pub const GL_RENDERER: u32 = 0x1F01;
pub const GL_RENDER_GPU_MASK_NV: u32 = 0x9558;
pub const GL_REPEAT: u32 = 0x2901;
pub const GL_REPLACE: u32 = 0x1E01;
pub const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN: u32 = 0x85C3;
pub const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN: u32 = 0x85C2;
pub const GL_REPLACEMENT_CODE_ARRAY_SUN: u32 = 0x85C0;
pub const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN: u32 = 0x85C1;
pub const GL_REPLACEMENT_CODE_SUN: u32 = 0x81D8;
pub const GL_REPLACE_EXT: u32 = 0x8062;
pub const GL_REPLACE_MIDDLE_SUN: u32 = 0x0002;
pub const GL_REPLACE_OLDEST_SUN: u32 = 0x0003;
pub const GL_REPLACE_VALUE_AMD: u32 = 0x874B;
pub const GL_REPLICATE_BORDER_HP: u32 = 0x8153;
pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV: u32 = 0x937F;
pub const GL_RESAMPLE_AVERAGE_OML: u32 = 0x8988;
pub const GL_RESAMPLE_DECIMATE_OML: u32 = 0x8989;
pub const GL_RESAMPLE_DECIMATE_SGIX: u32 = 0x8430;
pub const GL_RESAMPLE_REPLICATE_OML: u32 = 0x8986;
pub const GL_RESAMPLE_REPLICATE_SGIX: u32 = 0x8433;
pub const GL_RESAMPLE_ZERO_FILL_OML: u32 = 0x8987;
pub const GL_RESAMPLE_ZERO_FILL_SGIX: u32 = 0x8434;
pub const GL_RESCALE_NORMAL_EXT: u32 = 0x803A;
pub const GL_RESET_NOTIFICATION_STRATEGY: u32 = 0x8256;
pub const GL_RESET_NOTIFICATION_STRATEGY_ARB: u32 = 0x8256;
pub const GL_RESTART_PATH_NV: u32 = 0xF0;
pub const GL_RESTART_SUN: u32 = 0x0001;
pub const GL_RETAINED_APPLE: u32 = 0x8A1B;
pub const GL_RG: u32 = 0x8227;
pub const GL_RG16: u32 = 0x822C;
pub const GL_RG16F: u32 = 0x822F;
pub const GL_RG16I: u32 = 0x8239;
pub const GL_RG16UI: u32 = 0x823A;
pub const GL_RG16_SNORM: u32 = 0x8F99;
pub const GL_RG32F: u32 = 0x8230;
pub const GL_RG32I: u32 = 0x823B;
pub const GL_RG32UI: u32 = 0x823C;
pub const GL_RG8: u32 = 0x822B;
pub const GL_RG8I: u32 = 0x8237;
pub const GL_RG8UI: u32 = 0x8238;
pub const GL_RG8_SNORM: u32 = 0x8F95;
pub const GL_RGB: u32 = 0x1907;
pub const GL_RGB10: u32 = 0x8052;
pub const GL_RGB10_A2: u32 = 0x8059;
pub const GL_RGB10_A2UI: u32 = 0x906F;
pub const GL_RGB10_A2_EXT: u32 = 0x8059;
pub const GL_RGB10_EXT: u32 = 0x8052;
pub const GL_RGB12: u32 = 0x8053;
pub const GL_RGB12_EXT: u32 = 0x8053;
pub const GL_RGB16: u32 = 0x8054;
pub const GL_RGB16F: u32 = 0x881B;
pub const GL_RGB16F_ARB: u32 = 0x881B;
pub const GL_RGB16I: u32 = 0x8D89;
pub const GL_RGB16I_EXT: u32 = 0x8D89;
pub const GL_RGB16UI: u32 = 0x8D77;
pub const GL_RGB16UI_EXT: u32 = 0x8D77;
pub const GL_RGB16_EXT: u32 = 0x8054;
pub const GL_RGB16_SNORM: u32 = 0x8F9A;
pub const GL_RGB2_EXT: u32 = 0x804E;
pub const GL_RGB32F: u32 = 0x8815;
pub const GL_RGB32F_ARB: u32 = 0x8815;
pub const GL_RGB32I: u32 = 0x8D83;
pub const GL_RGB32I_EXT: u32 = 0x8D83;
pub const GL_RGB32UI: u32 = 0x8D71;
pub const GL_RGB32UI_EXT: u32 = 0x8D71;
pub const GL_RGB4: u32 = 0x804F;
pub const GL_RGB4_EXT: u32 = 0x804F;
pub const GL_RGB4_S3TC: u32 = 0x83A1;
pub const GL_RGB5: u32 = 0x8050;
pub const GL_RGB565: u32 = 0x8D62;
pub const GL_RGB5_A1: u32 = 0x8057;
pub const GL_RGB5_A1_EXT: u32 = 0x8057;
pub const GL_RGB5_EXT: u32 = 0x8050;
pub const GL_RGB8: u32 = 0x8051;
pub const GL_RGB8I: u32 = 0x8D8F;
pub const GL_RGB8I_EXT: u32 = 0x8D8F;
pub const GL_RGB8UI: u32 = 0x8D7D;
pub const GL_RGB8UI_EXT: u32 = 0x8D7D;
pub const GL_RGB8_EXT: u32 = 0x8051;
pub const GL_RGB8_SNORM: u32 = 0x8F96;
pub const GL_RGB9_E5: u32 = 0x8C3D;
pub const GL_RGB9_E5_EXT: u32 = 0x8C3D;
pub const GL_RGBA: u32 = 0x1908;
pub const GL_RGBA12: u32 = 0x805A;
pub const GL_RGBA12_EXT: u32 = 0x805A;
pub const GL_RGBA16: u32 = 0x805B;
pub const GL_RGBA16F: u32 = 0x881A;
pub const GL_RGBA16F_ARB: u32 = 0x881A;
pub const GL_RGBA16I: u32 = 0x8D88;
pub const GL_RGBA16I_EXT: u32 = 0x8D88;
pub const GL_RGBA16UI: u32 = 0x8D76;
pub const GL_RGBA16UI_EXT: u32 = 0x8D76;
pub const GL_RGBA16_EXT: u32 = 0x805B;
pub const GL_RGBA16_SNORM: u32 = 0x8F9B;
pub const GL_RGBA2: u32 = 0x8055;
pub const GL_RGBA2_EXT: u32 = 0x8055;
pub const GL_RGBA32F: u32 = 0x8814;
pub const GL_RGBA32F_ARB: u32 = 0x8814;
pub const GL_RGBA32I: u32 = 0x8D82;
pub const GL_RGBA32I_EXT: u32 = 0x8D82;
pub const GL_RGBA32UI: u32 = 0x8D70;
pub const GL_RGBA32UI_EXT: u32 = 0x8D70;
pub const GL_RGBA4: u32 = 0x8056;
pub const GL_RGBA4_DXT5_S3TC: u32 = 0x83A5;
pub const GL_RGBA4_EXT: u32 = 0x8056;
pub const GL_RGBA4_S3TC: u32 = 0x83A3;
pub const GL_RGBA8: u32 = 0x8058;
pub const GL_RGBA8I: u32 = 0x8D8E;
pub const GL_RGBA8I_EXT: u32 = 0x8D8E;
pub const GL_RGBA8UI: u32 = 0x8D7C;
pub const GL_RGBA8UI_EXT: u32 = 0x8D7C;
pub const GL_RGBA8_EXT: u32 = 0x8058;
pub const GL_RGBA8_SNORM: u32 = 0x8F97;
pub const GL_RGBA_DXT5_S3TC: u32 = 0x83A4;
pub const GL_RGBA_FLOAT16_APPLE: u32 = 0x881A;
pub const GL_RGBA_FLOAT16_ATI: u32 = 0x881A;
pub const GL_RGBA_FLOAT32_APPLE: u32 = 0x8814;
pub const GL_RGBA_FLOAT32_ATI: u32 = 0x8814;
pub const GL_RGBA_FLOAT_MODE_ARB: u32 = 0x8820;
pub const GL_RGBA_FLOAT_MODE_ATI: u32 = 0x8820;
pub const GL_RGBA_INTEGER: u32 = 0x8D99;
pub const GL_RGBA_INTEGER_EXT: u32 = 0x8D99;
pub const GL_RGBA_INTEGER_MODE_EXT: u32 = 0x8D9E;
pub const GL_RGBA_S3TC: u32 = 0x83A2;
pub const GL_RGBA_SIGNED_COMPONENTS_EXT: u32 = 0x8C3C;
pub const GL_RGBA_SNORM: u32 = 0x8F93;
pub const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV: u32 = 0x86D9;
pub const GL_RGB_422_APPLE: u32 = 0x8A1F;
pub const GL_RGB_FLOAT16_APPLE: u32 = 0x881B;
pub const GL_RGB_FLOAT16_ATI: u32 = 0x881B;
pub const GL_RGB_FLOAT32_APPLE: u32 = 0x8815;
pub const GL_RGB_FLOAT32_ATI: u32 = 0x8815;
pub const GL_RGB_INTEGER: u32 = 0x8D98;
pub const GL_RGB_INTEGER_EXT: u32 = 0x8D98;
pub const GL_RGB_RAW_422_APPLE: u32 = 0x8A51;
pub const GL_RGB_S3TC: u32 = 0x83A0;
pub const GL_RGB_SCALE_ARB: u32 = 0x8573;
pub const GL_RGB_SCALE_EXT: u32 = 0x8573;
pub const GL_RGB_SNORM: u32 = 0x8F92;
pub const GL_RG_INTEGER: u32 = 0x8228;
pub const GL_RG_SNORM: u32 = 0x8F91;
pub const GL_RIGHT: u32 = 0x0407;
pub const GL_ROUNDED_RECT2_NV: u32 = 0xEA;
pub const GL_ROUNDED_RECT4_NV: u32 = 0xEC;
pub const GL_ROUNDED_RECT8_NV: u32 = 0xEE;
pub const GL_ROUNDED_RECT_NV: u32 = 0xE8;
pub const GL_ROUND_NV: u32 = 0x90A4;
pub const GL_SAMPLER: u32 = 0x82E6;
pub const GL_SAMPLER_1D: u32 = 0x8B5D;
pub const GL_SAMPLER_1D_ARB: u32 = 0x8B5D;
pub const GL_SAMPLER_1D_ARRAY: u32 = 0x8DC0;
pub const GL_SAMPLER_1D_ARRAY_EXT: u32 = 0x8DC0;
pub const GL_SAMPLER_1D_ARRAY_SHADOW: u32 = 0x8DC3;
pub const GL_SAMPLER_1D_ARRAY_SHADOW_EXT: u32 = 0x8DC3;
pub const GL_SAMPLER_1D_SHADOW: u32 = 0x8B61;
pub const GL_SAMPLER_1D_SHADOW_ARB: u32 = 0x8B61;
pub const GL_SAMPLER_2D: u32 = 0x8B5E;
pub const GL_SAMPLER_2D_ARB: u32 = 0x8B5E;
pub const GL_SAMPLER_2D_ARRAY: u32 = 0x8DC1;
pub const GL_SAMPLER_2D_ARRAY_EXT: u32 = 0x8DC1;
pub const GL_SAMPLER_2D_ARRAY_SHADOW: u32 = 0x8DC4;
pub const GL_SAMPLER_2D_ARRAY_SHADOW_EXT: u32 = 0x8DC4;
pub const GL_SAMPLER_2D_MULTISAMPLE: u32 = 0x9108;
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 0x910B;
pub const GL_SAMPLER_2D_RECT: u32 = 0x8B63;
pub const GL_SAMPLER_2D_RECT_ARB: u32 = 0x8B63;
pub const GL_SAMPLER_2D_RECT_SHADOW: u32 = 0x8B64;
pub const GL_SAMPLER_2D_RECT_SHADOW_ARB: u32 = 0x8B64;
pub const GL_SAMPLER_2D_SHADOW: u32 = 0x8B62;
pub const GL_SAMPLER_2D_SHADOW_ARB: u32 = 0x8B62;
pub const GL_SAMPLER_3D: u32 = 0x8B5F;
pub const GL_SAMPLER_3D_ARB: u32 = 0x8B5F;
pub const GL_SAMPLER_BINDING: u32 = 0x8919;
pub const GL_SAMPLER_BUFFER: u32 = 0x8DC2;
pub const GL_SAMPLER_BUFFER_AMD: u32 = 0x9001;
pub const GL_SAMPLER_BUFFER_EXT: u32 = 0x8DC2;
pub const GL_SAMPLER_CUBE: u32 = 0x8B60;
pub const GL_SAMPLER_CUBE_ARB: u32 = 0x8B60;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 0x900C;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB: u32 = 0x900D;
pub const GL_SAMPLER_CUBE_SHADOW: u32 = 0x8DC5;
pub const GL_SAMPLER_CUBE_SHADOW_EXT: u32 = 0x8DC5;
pub const GL_SAMPLER_OBJECT_AMD: u32 = 0x9155;
pub const GL_SAMPLER_RENDERBUFFER_NV: u32 = 0x8E56;
pub const GL_SAMPLES: u32 = 0x80A9;
pub const GL_SAMPLES_3DFX: u32 = 0x86B4;
pub const GL_SAMPLES_ARB: u32 = 0x80A9;
pub const GL_SAMPLES_EXT: u32 = 0x80A9;
pub const GL_SAMPLES_PASSED: u32 = 0x8914;
pub const GL_SAMPLES_PASSED_ARB: u32 = 0x8914;
pub const GL_SAMPLES_SGIS: u32 = 0x80A9;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE: u32 = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB: u32 = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_MASK_EXT: u32 = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_MASK_SGIS: u32 = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_ONE: u32 = 0x809F;
pub const GL_SAMPLE_ALPHA_TO_ONE_ARB: u32 = 0x809F;
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT: u32 = 0x809F;
pub const GL_SAMPLE_ALPHA_TO_ONE_SGIS: u32 = 0x809F;
pub const GL_SAMPLE_BUFFERS: u32 = 0x80A8;
pub const GL_SAMPLE_BUFFERS_3DFX: u32 = 0x86B3;
pub const GL_SAMPLE_BUFFERS_ARB: u32 = 0x80A8;
pub const GL_SAMPLE_BUFFERS_EXT: u32 = 0x80A8;
pub const GL_SAMPLE_BUFFERS_SGIS: u32 = 0x80A8;
pub const GL_SAMPLE_COVERAGE: u32 = 0x80A0;
pub const GL_SAMPLE_COVERAGE_ARB: u32 = 0x80A0;
pub const GL_SAMPLE_COVERAGE_INVERT: u32 = 0x80AB;
pub const GL_SAMPLE_COVERAGE_INVERT_ARB: u32 = 0x80AB;
pub const GL_SAMPLE_COVERAGE_VALUE: u32 = 0x80AA;
pub const GL_SAMPLE_COVERAGE_VALUE_ARB: u32 = 0x80AA;
pub const GL_SAMPLE_LOCATION_ARB: u32 = 0x8E50;
pub const GL_SAMPLE_LOCATION_NV: u32 = 0x8E50;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB: u32 = 0x933F;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV: u32 = 0x933F;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB: u32 = 0x933E;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV: u32 = 0x933E;
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB: u32 = 0x933D;
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV: u32 = 0x933D;
pub const GL_SAMPLE_MASK: u32 = 0x8E51;
pub const GL_SAMPLE_MASK_EXT: u32 = 0x80A0;
pub const GL_SAMPLE_MASK_INVERT_EXT: u32 = 0x80AB;
pub const GL_SAMPLE_MASK_INVERT_SGIS: u32 = 0x80AB;
pub const GL_SAMPLE_MASK_NV: u32 = 0x8E51;
pub const GL_SAMPLE_MASK_SGIS: u32 = 0x80A0;
pub const GL_SAMPLE_MASK_VALUE: u32 = 0x8E52;
pub const GL_SAMPLE_MASK_VALUE_EXT: u32 = 0x80AA;
pub const GL_SAMPLE_MASK_VALUE_NV: u32 = 0x8E52;
pub const GL_SAMPLE_MASK_VALUE_SGIS: u32 = 0x80AA;
pub const GL_SAMPLE_PATTERN_EXT: u32 = 0x80AC;
pub const GL_SAMPLE_PATTERN_SGIS: u32 = 0x80AC;
pub const GL_SAMPLE_POSITION: u32 = 0x8E50;
pub const GL_SAMPLE_POSITION_NV: u32 = 0x8E50;
pub const GL_SAMPLE_SHADING_ARB: u32 = 0x8C36;
pub const GL_SATURATE_BIT_ATI: u32 = 0x00000040;
pub const GL_SCALAR_EXT: u32 = 0x87BE;
pub const GL_SCALEBIAS_HINT_SGIX: u32 = 0x8322;
pub const GL_SCALED_RESOLVE_FASTEST_EXT: u32 = 0x90BA;
pub const GL_SCALED_RESOLVE_NICEST_EXT: u32 = 0x90BB;
pub const GL_SCALE_BY_FOUR_NV: u32 = 0x853F;
pub const GL_SCALE_BY_ONE_HALF_NV: u32 = 0x8540;
pub const GL_SCALE_BY_TWO_NV: u32 = 0x853E;
pub const GL_SCISSOR_BOX: u32 = 0x0C10;
pub const GL_SCISSOR_BOX_EXCLUSIVE_NV: u32 = 0x9556;
pub const GL_SCISSOR_COMMAND_NV: u32 = 0x0011;
pub const GL_SCISSOR_TEST: u32 = 0x0C11;
pub const GL_SCISSOR_TEST_EXCLUSIVE_NV: u32 = 0x9555;
pub const GL_SCREEN_COORDINATES_REND: u32 = 0x8490;
pub const GL_SCREEN_KHR: u32 = 0x9295;
pub const GL_SCREEN_NV: u32 = 0x9295;
pub const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV: u32 = 0x8F27;
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889C;
pub const GL_SECONDARY_COLOR_ARRAY_EXT: u32 = 0x845E;
pub const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV: u32 = 0x8F31;
pub const GL_SECONDARY_COLOR_ARRAY_LIST_IBM: u32 = 103077;
pub const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM: u32 = 103087;
pub const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT: u32 = 0x845D;
pub const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT: u32 = 0x845A;
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT: u32 = 0x845C;
pub const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT: u32 = 0x845B;
pub const GL_SECONDARY_COLOR_NV: u32 = 0x852D;
pub const GL_SECONDARY_INTERPOLATOR_ATI: u32 = 0x896D;
pub const GL_SEMAPHORE_TYPE_BINARY_NV: u32 = 0x95B4;
pub const GL_SEMAPHORE_TYPE_NV: u32 = 0x95B3;
pub const GL_SEMAPHORE_TYPE_TIMELINE_NV: u32 = 0x95B5;
pub const GL_SEPARABLE_2D_EXT: u32 = 0x8012;
pub const GL_SEPARATE_ATTRIBS: u32 = 0x8C8D;
pub const GL_SEPARATE_ATTRIBS_EXT: u32 = 0x8C8D;
pub const GL_SEPARATE_ATTRIBS_NV: u32 = 0x8C8D;
pub const GL_SEPARATE_SPECULAR_COLOR_EXT: u32 = 0x81FA;
pub const GL_SET: u32 = 0x150F;
pub const GL_SET_AMD: u32 = 0x874A;
pub const GL_SHADER: u32 = 0x82E1;
pub const GL_SHADER_BINARY_FORMATS: u32 = 0x8DF8;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V: u32 = 0x9551;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB: u32 = 0x9551;
pub const GL_SHADER_COMPILER: u32 = 0x8DFA;
pub const GL_SHADER_CONSISTENT_NV: u32 = 0x86DD;
pub const GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV: u32 = 0x00000010;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT: u32 = 0x00000020;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT: u32 = 0x00000020;
pub const GL_SHADER_IMAGE_ATOMIC: u32 = 0x82A6;
pub const GL_SHADER_IMAGE_LOAD: u32 = 0x82A4;
pub const GL_SHADER_IMAGE_STORE: u32 = 0x82A5;
pub const GL_SHADER_INCLUDE_ARB: u32 = 0x8DAE;
pub const GL_SHADER_OBJECT_ARB: u32 = 0x8B48;
pub const GL_SHADER_OBJECT_EXT: u32 = 0x8B48;
pub const GL_SHADER_OPERATION_NV: u32 = 0x86DF;
pub const GL_SHADER_SOURCE_LENGTH: u32 = 0x8B88;
pub const GL_SHADER_STORAGE_BARRIER_BIT: u32 = 0x00002000;
pub const GL_SHADER_STORAGE_BLOCK: u32 = 0x92E6;
pub const GL_SHADER_STORAGE_BUFFER: u32 = 0x90D2;
pub const GL_SHADER_STORAGE_BUFFER_BINDING: u32 = 0x90D3;
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT: u32 = 0x90DF;
pub const GL_SHADER_STORAGE_BUFFER_SIZE: u32 = 0x90D5;
pub const GL_SHADER_STORAGE_BUFFER_START: u32 = 0x90D4;
pub const GL_SHADER_TYPE: u32 = 0x8B4F;
pub const GL_SHADING_LANGUAGE_VERSION: u32 = 0x8B8C;
pub const GL_SHADING_LANGUAGE_VERSION_ARB: u32 = 0x8B8C;
pub const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV: u32 = 0x956F;
pub const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV: u32 = 0x9566;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV: u32 = 0x9567;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV: u32 = 0x9568;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV: u32 = 0x9569;
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV: u32 = 0x956A;
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV: u32 = 0x956B;
pub const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV: u32 = 0x9565;
pub const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV: u32 = 0x956C;
pub const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV: u32 = 0x956D;
pub const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV: u32 = 0x956E;
pub const GL_SHADING_RATE_IMAGE_BINDING_NV: u32 = 0x955B;
pub const GL_SHADING_RATE_IMAGE_NV: u32 = 0x9563;
pub const GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV: u32 = 0x95B2;
pub const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV: u32 = 0x955E;
pub const GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV: u32 = 0x95B1;
pub const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV: u32 = 0x955D;
pub const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV: u32 = 0x955C;
pub const GL_SHADING_RATE_NO_INVOCATIONS_NV: u32 = 0x9564;
pub const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV: u32 = 0x95AE;
pub const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV: u32 = 0x95AF;
pub const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV: u32 = 0x95B0;
pub const GL_SHADOW_AMBIENT_SGIX: u32 = 0x80BF;
pub const GL_SHADOW_ATTENUATION_EXT: u32 = 0x834E;
pub const GL_SHARED_EDGE_NV: u32 = 0xC0;
pub const GL_SHARED_TEXTURE_PALETTE_EXT: u32 = 0x81FB;
pub const GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS: u32 = 0x80B0;
pub const GL_SHORT: u32 = 0x1402;
pub const GL_SIGNALED: u32 = 0x9119;
pub const GL_SIGNED_ALPHA8_NV: u32 = 0x8706;
pub const GL_SIGNED_ALPHA_NV: u32 = 0x8705;
pub const GL_SIGNED_HILO16_NV: u32 = 0x86FA;
pub const GL_SIGNED_HILO8_NV: u32 = 0x885F;
pub const GL_SIGNED_HILO_NV: u32 = 0x86F9;
pub const GL_SIGNED_IDENTITY_NV: u32 = 0x853C;
pub const GL_SIGNED_INTENSITY8_NV: u32 = 0x8708;
pub const GL_SIGNED_INTENSITY_NV: u32 = 0x8707;
pub const GL_SIGNED_LUMINANCE8_ALPHA8_NV: u32 = 0x8704;
pub const GL_SIGNED_LUMINANCE8_NV: u32 = 0x8702;
pub const GL_SIGNED_LUMINANCE_ALPHA_NV: u32 = 0x8703;
pub const GL_SIGNED_LUMINANCE_NV: u32 = 0x8701;
pub const GL_SIGNED_NEGATE_NV: u32 = 0x853D;
pub const GL_SIGNED_NORMALIZED: u32 = 0x8F9C;
pub const GL_SIGNED_RGB8_NV: u32 = 0x86FF;
pub const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV: u32 = 0x870D;
pub const GL_SIGNED_RGBA8_NV: u32 = 0x86FC;
pub const GL_SIGNED_RGBA_NV: u32 = 0x86FB;
pub const GL_SIGNED_RGB_NV: u32 = 0x86FE;
pub const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV: u32 = 0x870C;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST: u32 = 0x82AC;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE: u32 = 0x82AE;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST: u32 = 0x82AD;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE: u32 = 0x82AF;
pub const GL_SINGLE_COLOR_EXT: u32 = 0x81F9;
pub const GL_SKIP_COMPONENTS1_NV: i32 = -6;
pub const GL_SKIP_COMPONENTS2_NV: i32 = -5;
pub const GL_SKIP_COMPONENTS3_NV: i32 = -4;
pub const GL_SKIP_COMPONENTS4_NV: i32 = -3;
pub const GL_SKIP_DECODE_EXT: u32 = 0x8A4A;
pub const GL_SKIP_MISSING_GLYPH_NV: u32 = 0x90A9;
pub const GL_SLICE_ACCUM_SUN: u32 = 0x85CC;
pub const GL_SLUMINANCE8_ALPHA8_EXT: u32 = 0x8C45;
pub const GL_SLUMINANCE8_EXT: u32 = 0x8C47;
pub const GL_SLUMINANCE_ALPHA_EXT: u32 = 0x8C44;
pub const GL_SLUMINANCE_EXT: u32 = 0x8C46;
pub const GL_SMALL_CCW_ARC_TO_NV: u32 = 0x12;
pub const GL_SMALL_CW_ARC_TO_NV: u32 = 0x14;
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV: u32 = 0x10;
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY: u32 = 0x0B23;
pub const GL_SMOOTH_LINE_WIDTH_RANGE: u32 = 0x0B22;
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY: u32 = 0x0B13;
pub const GL_SMOOTH_POINT_SIZE_RANGE: u32 = 0x0B12;
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV: u32 = 0x0E;
pub const GL_SM_COUNT_NV: u32 = 0x933B;
pub const GL_SOFTLIGHT_KHR: u32 = 0x929C;
pub const GL_SOFTLIGHT_NV: u32 = 0x929C;
pub const GL_SOURCE0_ALPHA_ARB: u32 = 0x8588;
pub const GL_SOURCE0_ALPHA_EXT: u32 = 0x8588;
pub const GL_SOURCE0_RGB_ARB: u32 = 0x8580;
pub const GL_SOURCE0_RGB_EXT: u32 = 0x8580;
pub const GL_SOURCE1_ALPHA: u32 = 0x8589;
pub const GL_SOURCE1_ALPHA_ARB: u32 = 0x8589;
pub const GL_SOURCE1_ALPHA_EXT: u32 = 0x8589;
pub const GL_SOURCE1_RGB_ARB: u32 = 0x8581;
pub const GL_SOURCE1_RGB_EXT: u32 = 0x8581;
pub const GL_SOURCE2_ALPHA_ARB: u32 = 0x858A;
pub const GL_SOURCE2_ALPHA_EXT: u32 = 0x858A;
pub const GL_SOURCE2_RGB_ARB: u32 = 0x8582;
pub const GL_SOURCE2_RGB_EXT: u32 = 0x8582;
pub const GL_SOURCE3_ALPHA_NV: u32 = 0x858B;
pub const GL_SOURCE3_RGB_NV: u32 = 0x8583;
pub const GL_SPARE0_NV: u32 = 0x852E;
pub const GL_SPARE0_PLUS_SECONDARY_COLOR_NV: u32 = 0x8532;
pub const GL_SPARE1_NV: u32 = 0x852F;
pub const GL_SPARSE_BUFFER_PAGE_SIZE_ARB: u32 = 0x82F8;
pub const GL_SPARSE_STORAGE_BIT_ARB: u32 = 0x0400;
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB: u32 = 0x91A9;
pub const GL_SPIR_V_BINARY: u32 = 0x9552;
pub const GL_SPIR_V_BINARY_ARB: u32 = 0x9552;
pub const GL_SPIR_V_EXTENSIONS: u32 = 0x9553;
pub const GL_SPRITE_AXIAL_SGIX: u32 = 0x814C;
pub const GL_SPRITE_AXIS_SGIX: u32 = 0x814A;
pub const GL_SPRITE_EYE_ALIGNED_SGIX: u32 = 0x814E;
pub const GL_SPRITE_MODE_SGIX: u32 = 0x8149;
pub const GL_SPRITE_OBJECT_ALIGNED_SGIX: u32 = 0x814D;
pub const GL_SPRITE_SGIX: u32 = 0x8148;
pub const GL_SPRITE_TRANSLATION_SGIX: u32 = 0x814B;
pub const GL_SQUARE_NV: u32 = 0x90A3;
pub const GL_SR8_EXT: u32 = 0x8FBD;
pub const GL_SRC1_ALPHA: u32 = 0x8589;
pub const GL_SRC1_COLOR: u32 = 0x88F9;
pub const GL_SRC_ALPHA: u32 = 0x0302;
pub const GL_SRC_ALPHA_SATURATE: u32 = 0x0308;
pub const GL_SRC_ATOP_NV: u32 = 0x928E;
pub const GL_SRC_COLOR: u32 = 0x0300;
pub const GL_SRC_IN_NV: u32 = 0x928A;
pub const GL_SRC_NV: u32 = 0x9286;
pub const GL_SRC_OUT_NV: u32 = 0x928C;
pub const GL_SRC_OVER_NV: u32 = 0x9288;
pub const GL_SRG8_EXT: u32 = 0x8FBE;
pub const GL_SRGB: u32 = 0x8C40;
pub const GL_SRGB8: u32 = 0x8C41;
pub const GL_SRGB8_ALPHA8: u32 = 0x8C43;
pub const GL_SRGB8_ALPHA8_EXT: u32 = 0x8C43;
pub const GL_SRGB8_EXT: u32 = 0x8C41;
pub const GL_SRGB_ALPHA: u32 = 0x8C42;
pub const GL_SRGB_ALPHA_EXT: u32 = 0x8C42;
pub const GL_SRGB_DECODE_ARB: u32 = 0x8299;
pub const GL_SRGB_EXT: u32 = 0x8C40;
pub const GL_SRGB_READ: u32 = 0x8297;
pub const GL_SRGB_WRITE: u32 = 0x8298;
pub const GL_STACK_OVERFLOW: u32 = 0x0503;
pub const GL_STACK_UNDERFLOW: u32 = 0x0504;
pub const GL_STANDARD_FONT_FORMAT_NV: u32 = 0x936C;
pub const GL_STANDARD_FONT_NAME_NV: u32 = 0x9072;
pub const GL_STATIC_ATI: u32 = 0x8760;
pub const GL_STATIC_COPY: u32 = 0x88E6;
pub const GL_STATIC_COPY_ARB: u32 = 0x88E6;
pub const GL_STATIC_DRAW: u32 = 0x88E4;
pub const GL_STATIC_DRAW_ARB: u32 = 0x88E4;
pub const GL_STATIC_READ: u32 = 0x88E5;
pub const GL_STATIC_READ_ARB: u32 = 0x88E5;
pub const GL_STATIC_VERTEX_ARRAY_IBM: u32 = 103061;
pub const GL_STENCIL: u32 = 0x1802;
pub const GL_STENCIL_ATTACHMENT: u32 = 0x8D20;
pub const GL_STENCIL_ATTACHMENT_EXT: u32 = 0x8D20;
pub const GL_STENCIL_BACK_FAIL: u32 = 0x8801;
pub const GL_STENCIL_BACK_FAIL_ATI: u32 = 0x8801;
pub const GL_STENCIL_BACK_FUNC: u32 = 0x8800;
pub const GL_STENCIL_BACK_FUNC_ATI: u32 = 0x8800;
pub const GL_STENCIL_BACK_OP_VALUE_AMD: u32 = 0x874D;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL: u32 = 0x8802;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI: u32 = 0x8802;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS: u32 = 0x8803;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI: u32 = 0x8803;
pub const GL_STENCIL_BACK_REF: u32 = 0x8CA3;
pub const GL_STENCIL_BACK_VALUE_MASK: u32 = 0x8CA4;
pub const GL_STENCIL_BACK_WRITEMASK: u32 = 0x8CA5;
pub const GL_STENCIL_BUFFER_BIT: u32 = 0x00000400;
pub const GL_STENCIL_CLEAR_TAG_VALUE_EXT: u32 = 0x88F3;
pub const GL_STENCIL_CLEAR_VALUE: u32 = 0x0B91;
pub const GL_STENCIL_COMPONENTS: u32 = 0x8285;
pub const GL_STENCIL_FAIL: u32 = 0x0B94;
pub const GL_STENCIL_FUNC: u32 = 0x0B92;
pub const GL_STENCIL_INDEX: u32 = 0x1901;
pub const GL_STENCIL_INDEX1: u32 = 0x8D46;
pub const GL_STENCIL_INDEX16: u32 = 0x8D49;
pub const GL_STENCIL_INDEX16_EXT: u32 = 0x8D49;
pub const GL_STENCIL_INDEX1_EXT: u32 = 0x8D46;
pub const GL_STENCIL_INDEX4: u32 = 0x8D47;
pub const GL_STENCIL_INDEX4_EXT: u32 = 0x8D47;
pub const GL_STENCIL_INDEX8: u32 = 0x8D48;
pub const GL_STENCIL_INDEX8_EXT: u32 = 0x8D48;
pub const GL_STENCIL_OP_VALUE_AMD: u32 = 0x874C;
pub const GL_STENCIL_PASS_DEPTH_FAIL: u32 = 0x0B95;
pub const GL_STENCIL_PASS_DEPTH_PASS: u32 = 0x0B96;
pub const GL_STENCIL_REF: u32 = 0x0B97;
pub const GL_STENCIL_REF_COMMAND_NV: u32 = 0x000C;
pub const GL_STENCIL_RENDERABLE: u32 = 0x8288;
pub const GL_STENCIL_SAMPLES_NV: u32 = 0x932E;
pub const GL_STENCIL_TAG_BITS_EXT: u32 = 0x88F2;
pub const GL_STENCIL_TEST: u32 = 0x0B90;
pub const GL_STENCIL_TEST_TWO_SIDE_EXT: u32 = 0x8910;
pub const GL_STENCIL_VALUE_MASK: u32 = 0x0B93;
pub const GL_STENCIL_WRITEMASK: u32 = 0x0B98;
pub const GL_STEREO: u32 = 0x0C33;
pub const GL_STORAGE_CACHED_APPLE: u32 = 0x85BE;
pub const GL_STORAGE_CLIENT_APPLE: u32 = 0x85B4;
pub const GL_STORAGE_PRIVATE_APPLE: u32 = 0x85BD;
pub const GL_STORAGE_SHARED_APPLE: u32 = 0x85BF;
pub const GL_STREAM_COPY: u32 = 0x88E2;
pub const GL_STREAM_COPY_ARB: u32 = 0x88E2;
pub const GL_STREAM_DRAW: u32 = 0x88E0;
pub const GL_STREAM_DRAW_ARB: u32 = 0x88E0;
pub const GL_STREAM_RASTERIZATION_AMD: u32 = 0x91A0;
pub const GL_STREAM_READ: u32 = 0x88E1;
pub const GL_STREAM_READ_ARB: u32 = 0x88E1;
pub const GL_STRICT_DEPTHFUNC_HINT_PGI: u32 = 0x1A216;
pub const GL_STRICT_LIGHTING_HINT_PGI: u32 = 0x1A217;
pub const GL_STRICT_SCISSOR_HINT_PGI: u32 = 0x1A218;
pub const GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR: u32 = 0x00000004;
pub const GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR: u32 = 0x00000008;
pub const GL_SUBGROUP_FEATURE_BASIC_BIT_KHR: u32 = 0x00000001;
pub const GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR: u32 = 0x00000040;
pub const GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV: u32 = 0x00000100;
pub const GL_SUBGROUP_FEATURE_QUAD_BIT_KHR: u32 = 0x00000080;
pub const GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR: u32 = 0x00000010;
pub const GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR: u32 = 0x00000020;
pub const GL_SUBGROUP_FEATURE_VOTE_BIT_KHR: u32 = 0x00000002;
pub const GL_SUBGROUP_QUAD_ALL_STAGES_KHR: u32 = 0x9535;
pub const GL_SUBGROUP_SIZE_KHR: u32 = 0x9532;
pub const GL_SUBGROUP_SUPPORTED_FEATURES_KHR: u32 = 0x9534;
pub const GL_SUBGROUP_SUPPORTED_STAGES_KHR: u32 = 0x9533;
pub const GL_SUBPIXEL_BITS: u32 = 0x0D50;
pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV: u32 = 0x9347;
pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV: u32 = 0x9348;
pub const GL_SUBSAMPLE_DISTANCE_AMD: u32 = 0x883F;
pub const GL_SUBTRACT_ARB: u32 = 0x84E7;
pub const GL_SUB_ATI: u32 = 0x8965;
pub const GL_SUCCESS_NV: u32 = 0x902F;
pub const GL_SUPERSAMPLE_SCALE_X_NV: u32 = 0x9372;
pub const GL_SUPERSAMPLE_SCALE_Y_NV: u32 = 0x9373;
pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD: u32 = 0x91B7;
pub const GL_SURFACE_MAPPED_NV: u32 = 0x8700;
pub const GL_SURFACE_REGISTERED_NV: u32 = 0x86FD;
pub const GL_SURFACE_STATE_NV: u32 = 0x86EB;
pub const GL_SWIZZLE_STQ_ATI: u32 = 0x8977;
pub const GL_SWIZZLE_STQ_DQ_ATI: u32 = 0x8979;
pub const GL_SWIZZLE_STRQ_ATI: u32 = 0x897A;
pub const GL_SWIZZLE_STRQ_DQ_ATI: u32 = 0x897B;
pub const GL_SWIZZLE_STR_ATI: u32 = 0x8976;
pub const GL_SWIZZLE_STR_DR_ATI: u32 = 0x8978;
pub const GL_SYNC_CL_EVENT_ARB: u32 = 0x8240;
pub const GL_SYNC_CL_EVENT_COMPLETE_ARB: u32 = 0x8241;
pub const GL_SYNC_CONDITION: u32 = 0x9113;
pub const GL_SYNC_FENCE: u32 = 0x9116;
pub const GL_SYNC_FLAGS: u32 = 0x9115;
pub const GL_SYNC_FLUSH_COMMANDS_BIT: u32 = 0x00000001;
pub const GL_SYNC_GPU_COMMANDS_COMPLETE: u32 = 0x9117;
pub const GL_SYNC_STATUS: u32 = 0x9114;
pub const GL_SYNC_X11_FENCE_EXT: u32 = 0x90E1;
pub const GL_SYSTEM_FONT_NAME_NV: u32 = 0x9073;
pub const GL_T2F_IUI_N3F_V2F_EXT: u32 = 0x81B3;
pub const GL_T2F_IUI_N3F_V3F_EXT: u32 = 0x81B4;
pub const GL_T2F_IUI_V2F_EXT: u32 = 0x81B1;
pub const GL_T2F_IUI_V3F_EXT: u32 = 0x81B2;
pub const GL_TABLE_TOO_LARGE_EXT: u32 = 0x8031;
pub const GL_TANGENT_ARRAY_EXT: u32 = 0x8439;
pub const GL_TANGENT_ARRAY_POINTER_EXT: u32 = 0x8442;
pub const GL_TANGENT_ARRAY_STRIDE_EXT: u32 = 0x843F;
pub const GL_TANGENT_ARRAY_TYPE_EXT: u32 = 0x843E;
pub const GL_TASK_SHADER_BIT_NV: u32 = 0x00000080;
pub const GL_TASK_SHADER_NV: u32 = 0x955A;
pub const GL_TASK_SUBROUTINE_NV: u32 = 0x957D;
pub const GL_TASK_SUBROUTINE_UNIFORM_NV: u32 = 0x957F;
pub const GL_TASK_WORK_GROUP_SIZE_NV: u32 = 0x953F;
pub const GL_TERMINATE_SEQUENCE_COMMAND_NV: u32 = 0x0000;
pub const GL_TESSELLATION_FACTOR_AMD: u32 = 0x9005;
pub const GL_TESSELLATION_MODE_AMD: u32 = 0x9004;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES: u32 = 0x8E75;
pub const GL_TESS_CONTROL_PROGRAM_NV: u32 = 0x891E;
pub const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV: u32 = 0x8C74;
pub const GL_TESS_CONTROL_SHADER: u32 = 0x8E88;
pub const GL_TESS_CONTROL_SHADER_BIT: u32 = 0x00000008;
pub const GL_TESS_CONTROL_SHADER_PATCHES: u32 = 0x82F1;
pub const GL_TESS_CONTROL_SHADER_PATCHES_ARB: u32 = 0x82F1;
pub const GL_TESS_CONTROL_SUBROUTINE: u32 = 0x92E9;
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM: u32 = 0x92EF;
pub const GL_TESS_CONTROL_TEXTURE: u32 = 0x829C;
pub const GL_TESS_EVALUATION_PROGRAM_NV: u32 = 0x891F;
pub const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV: u32 = 0x8C75;
pub const GL_TESS_EVALUATION_SHADER: u32 = 0x8E87;
pub const GL_TESS_EVALUATION_SHADER_BIT: u32 = 0x00000010;
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS: u32 = 0x82F2;
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB: u32 = 0x82F2;
pub const GL_TESS_EVALUATION_SUBROUTINE: u32 = 0x92EA;
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM: u32 = 0x92F0;
pub const GL_TESS_EVALUATION_TEXTURE: u32 = 0x829D;
pub const GL_TESS_GEN_MODE: u32 = 0x8E76;
pub const GL_TESS_GEN_POINT_MODE: u32 = 0x8E79;
pub const GL_TESS_GEN_SPACING: u32 = 0x8E77;
pub const GL_TESS_GEN_VERTEX_ORDER: u32 = 0x8E78;
pub const GL_TEXCOORD1_BIT_PGI: u32 = 0x10000000;
pub const GL_TEXCOORD2_BIT_PGI: u32 = 0x20000000;
pub const GL_TEXCOORD3_BIT_PGI: u32 = 0x40000000;
pub const GL_TEXCOORD4_BIT_PGI: u32 = 0x80000000;
pub const GL_TEXTURE: u32 = 0x1702;
pub const GL_TEXTURE0: u32 = 0x84C0;
pub const GL_TEXTURE0_ARB: u32 = 0x84C0;
pub const GL_TEXTURE1: u32 = 0x84C1;
pub const GL_TEXTURE10: u32 = 0x84CA;
pub const GL_TEXTURE10_ARB: u32 = 0x84CA;
pub const GL_TEXTURE11: u32 = 0x84CB;
pub const GL_TEXTURE11_ARB: u32 = 0x84CB;
pub const GL_TEXTURE12: u32 = 0x84CC;
pub const GL_TEXTURE12_ARB: u32 = 0x84CC;
pub const GL_TEXTURE13: u32 = 0x84CD;
pub const GL_TEXTURE13_ARB: u32 = 0x84CD;
pub const GL_TEXTURE14: u32 = 0x84CE;
pub const GL_TEXTURE14_ARB: u32 = 0x84CE;
pub const GL_TEXTURE15: u32 = 0x84CF;
pub const GL_TEXTURE15_ARB: u32 = 0x84CF;
pub const GL_TEXTURE16: u32 = 0x84D0;
pub const GL_TEXTURE16_ARB: u32 = 0x84D0;
pub const GL_TEXTURE17: u32 = 0x84D1;
pub const GL_TEXTURE17_ARB: u32 = 0x84D1;
pub const GL_TEXTURE18: u32 = 0x84D2;
pub const GL_TEXTURE18_ARB: u32 = 0x84D2;
pub const GL_TEXTURE19: u32 = 0x84D3;
pub const GL_TEXTURE19_ARB: u32 = 0x84D3;
pub const GL_TEXTURE1_ARB: u32 = 0x84C1;
pub const GL_TEXTURE2: u32 = 0x84C2;
pub const GL_TEXTURE20: u32 = 0x84D4;
pub const GL_TEXTURE20_ARB: u32 = 0x84D4;
pub const GL_TEXTURE21: u32 = 0x84D5;
pub const GL_TEXTURE21_ARB: u32 = 0x84D5;
pub const GL_TEXTURE22: u32 = 0x84D6;
pub const GL_TEXTURE22_ARB: u32 = 0x84D6;
pub const GL_TEXTURE23: u32 = 0x84D7;
pub const GL_TEXTURE23_ARB: u32 = 0x84D7;
pub const GL_TEXTURE24: u32 = 0x84D8;
pub const GL_TEXTURE24_ARB: u32 = 0x84D8;
pub const GL_TEXTURE25: u32 = 0x84D9;
pub const GL_TEXTURE25_ARB: u32 = 0x84D9;
pub const GL_TEXTURE26: u32 = 0x84DA;
pub const GL_TEXTURE26_ARB: u32 = 0x84DA;
pub const GL_TEXTURE27: u32 = 0x84DB;
pub const GL_TEXTURE27_ARB: u32 = 0x84DB;
pub const GL_TEXTURE28: u32 = 0x84DC;
pub const GL_TEXTURE28_ARB: u32 = 0x84DC;
pub const GL_TEXTURE29: u32 = 0x84DD;
pub const GL_TEXTURE29_ARB: u32 = 0x84DD;
pub const GL_TEXTURE2_ARB: u32 = 0x84C2;
pub const GL_TEXTURE3: u32 = 0x84C3;
pub const GL_TEXTURE30: u32 = 0x84DE;
pub const GL_TEXTURE30_ARB: u32 = 0x84DE;
pub const GL_TEXTURE31: u32 = 0x84DF;
pub const GL_TEXTURE31_ARB: u32 = 0x84DF;
pub const GL_TEXTURE3_ARB: u32 = 0x84C3;
pub const GL_TEXTURE4: u32 = 0x84C4;
pub const GL_TEXTURE4_ARB: u32 = 0x84C4;
pub const GL_TEXTURE5: u32 = 0x84C5;
pub const GL_TEXTURE5_ARB: u32 = 0x84C5;
pub const GL_TEXTURE6: u32 = 0x84C6;
pub const GL_TEXTURE6_ARB: u32 = 0x84C6;
pub const GL_TEXTURE7: u32 = 0x84C7;
pub const GL_TEXTURE7_ARB: u32 = 0x84C7;
pub const GL_TEXTURE8: u32 = 0x84C8;
pub const GL_TEXTURE8_ARB: u32 = 0x84C8;
pub const GL_TEXTURE9: u32 = 0x84C9;
pub const GL_TEXTURE9_ARB: u32 = 0x84C9;
pub const GL_TEXTURE_1D: u32 = 0x0DE0;
pub const GL_TEXTURE_1D_ARRAY: u32 = 0x8C18;
pub const GL_TEXTURE_1D_ARRAY_EXT: u32 = 0x8C18;
pub const GL_TEXTURE_1D_BINDING_EXT: u32 = 0x8068;
pub const GL_TEXTURE_1D_STACK_BINDING_MESAX: u32 = 0x875D;
pub const GL_TEXTURE_1D_STACK_MESAX: u32 = 0x8759;
pub const GL_TEXTURE_2D: u32 = 0x0DE1;
pub const GL_TEXTURE_2D_ARRAY: u32 = 0x8C1A;
pub const GL_TEXTURE_2D_ARRAY_EXT: u32 = 0x8C1A;
pub const GL_TEXTURE_2D_BINDING_EXT: u32 = 0x8069;
pub const GL_TEXTURE_2D_MULTISAMPLE: u32 = 0x9100;
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY: u32 = 0x9102;
pub const GL_TEXTURE_2D_STACK_BINDING_MESAX: u32 = 0x875E;
pub const GL_TEXTURE_2D_STACK_MESAX: u32 = 0x875A;
pub const GL_TEXTURE_3D: u32 = 0x806F;
pub const GL_TEXTURE_3D_BINDING_EXT: u32 = 0x806A;
pub const GL_TEXTURE_3D_EXT: u32 = 0x806F;
pub const GL_TEXTURE_4DSIZE_SGIS: u32 = 0x8136;
pub const GL_TEXTURE_4D_BINDING_SGIS: u32 = 0x814F;
pub const GL_TEXTURE_4D_SGIS: u32 = 0x8134;
pub const GL_TEXTURE_ALPHA_SIZE: u32 = 0x805F;
pub const GL_TEXTURE_ALPHA_SIZE_EXT: u32 = 0x805F;
pub const GL_TEXTURE_ALPHA_TYPE: u32 = 0x8C13;
pub const GL_TEXTURE_ALPHA_TYPE_ARB: u32 = 0x8C13;
pub const GL_TEXTURE_APPLICATION_MODE_EXT: u32 = 0x834F;
pub const GL_TEXTURE_BASE_LEVEL: u32 = 0x813C;
pub const GL_TEXTURE_BASE_LEVEL_SGIS: u32 = 0x813C;
pub const GL_TEXTURE_BINDING_1D: u32 = 0x8068;
pub const GL_TEXTURE_BINDING_1D_ARRAY: u32 = 0x8C1C;
pub const GL_TEXTURE_BINDING_1D_ARRAY_EXT: u32 = 0x8C1C;
pub const GL_TEXTURE_BINDING_2D: u32 = 0x8069;
pub const GL_TEXTURE_BINDING_2D_ARRAY: u32 = 0x8C1D;
pub const GL_TEXTURE_BINDING_2D_ARRAY_EXT: u32 = 0x8C1D;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE: u32 = 0x9104;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: u32 = 0x9105;
pub const GL_TEXTURE_BINDING_3D: u32 = 0x806A;
pub const GL_TEXTURE_BINDING_BUFFER: u32 = 0x8C2C;
pub const GL_TEXTURE_BINDING_BUFFER_ARB: u32 = 0x8C2C;
pub const GL_TEXTURE_BINDING_BUFFER_EXT: u32 = 0x8C2C;
pub const GL_TEXTURE_BINDING_CUBE_MAP: u32 = 0x8514;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB: u32 = 0x8514;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY: u32 = 0x900A;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB: u32 = 0x900A;
pub const GL_TEXTURE_BINDING_CUBE_MAP_EXT: u32 = 0x8514;
pub const GL_TEXTURE_BINDING_RECTANGLE: u32 = 0x84F6;
pub const GL_TEXTURE_BINDING_RECTANGLE_ARB: u32 = 0x84F6;
pub const GL_TEXTURE_BINDING_RECTANGLE_NV: u32 = 0x84F6;
pub const GL_TEXTURE_BINDING_RENDERBUFFER_NV: u32 = 0x8E53;
pub const GL_TEXTURE_BLUE_SIZE: u32 = 0x805E;
pub const GL_TEXTURE_BLUE_SIZE_EXT: u32 = 0x805E;
pub const GL_TEXTURE_BLUE_TYPE: u32 = 0x8C12;
pub const GL_TEXTURE_BLUE_TYPE_ARB: u32 = 0x8C12;
pub const GL_TEXTURE_BORDER_COLOR: u32 = 0x1004;
pub const GL_TEXTURE_BORDER_VALUES_NV: u32 = 0x871A;
pub const GL_TEXTURE_BUFFER: u32 = 0x8C2A;
pub const GL_TEXTURE_BUFFER_ARB: u32 = 0x8C2A;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING: u32 = 0x8C2D;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB: u32 = 0x8C2D;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT: u32 = 0x8C2D;
pub const GL_TEXTURE_BUFFER_EXT: u32 = 0x8C2A;
pub const GL_TEXTURE_BUFFER_FORMAT_ARB: u32 = 0x8C2E;
pub const GL_TEXTURE_BUFFER_FORMAT_EXT: u32 = 0x8C2E;
pub const GL_TEXTURE_BUFFER_OFFSET: u32 = 0x919D;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT: u32 = 0x919F;
pub const GL_TEXTURE_BUFFER_SIZE: u32 = 0x919E;
pub const GL_TEXTURE_CLIPMAP_CENTER_SGIX: u32 = 0x8171;
pub const GL_TEXTURE_CLIPMAP_DEPTH_SGIX: u32 = 0x8176;
pub const GL_TEXTURE_CLIPMAP_FRAME_SGIX: u32 = 0x8172;
pub const GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX: u32 = 0x8175;
pub const GL_TEXTURE_CLIPMAP_OFFSET_SGIX: u32 = 0x8173;
pub const GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX: u32 = 0x8174;
pub const GL_TEXTURE_COLOR_SAMPLES_NV: u32 = 0x9046;
pub const GL_TEXTURE_COLOR_TABLE_SGI: u32 = 0x80BC;
pub const GL_TEXTURE_COLOR_WRITEMASK_SGIS: u32 = 0x81EF;
pub const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB: u32 = 0x80BF;
pub const GL_TEXTURE_COMPARE_FUNC: u32 = 0x884D;
pub const GL_TEXTURE_COMPARE_FUNC_ARB: u32 = 0x884D;
pub const GL_TEXTURE_COMPARE_MODE: u32 = 0x884C;
pub const GL_TEXTURE_COMPARE_MODE_ARB: u32 = 0x884C;
pub const GL_TEXTURE_COMPARE_OPERATOR_SGIX: u32 = 0x819B;
pub const GL_TEXTURE_COMPARE_SGIX: u32 = 0x819A;
pub const GL_TEXTURE_COMPRESSED: u32 = 0x86A1;
pub const GL_TEXTURE_COMPRESSED_ARB: u32 = 0x86A1;
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT: u32 = 0x82B2;
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE: u32 = 0x82B3;
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH: u32 = 0x82B1;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE: u32 = 0x86A0;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB: u32 = 0x86A0;
pub const GL_TEXTURE_COMPRESSION_HINT: u32 = 0x84EF;
pub const GL_TEXTURE_COMPRESSION_HINT_ARB: u32 = 0x84EF;
pub const GL_TEXTURE_CONSTANT_DATA_SUNX: u32 = 0x81D6;
pub const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV: u32 = 0x8F25;
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889A;
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT: u32 = 0x808B;
pub const GL_TEXTURE_COORD_ARRAY_EXT: u32 = 0x8078;
pub const GL_TEXTURE_COORD_ARRAY_LENGTH_NV: u32 = 0x8F2F;
pub const GL_TEXTURE_COORD_ARRAY_LIST_IBM: u32 = 103074;
pub const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM: u32 = 103084;
pub const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL: u32 = 0x83F8;
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT: u32 = 0x8092;
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT: u32 = 0x8088;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT: u32 = 0x808A;
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT: u32 = 0x8089;
pub const GL_TEXTURE_COORD_NV: u32 = 0x8C79;
pub const GL_TEXTURE_COVERAGE_SAMPLES_NV: u32 = 0x9045;
pub const GL_TEXTURE_CUBE_MAP: u32 = 0x8513;
pub const GL_TEXTURE_CUBE_MAP_ARB: u32 = 0x8513;
pub const GL_TEXTURE_CUBE_MAP_ARRAY: u32 = 0x9009;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB: u32 = 0x9009;
pub const GL_TEXTURE_CUBE_MAP_EXT: u32 = 0x8513;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X: u32 = 0x8516;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB: u32 = 0x8516;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT: u32 = 0x8516;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: u32 = 0x8518;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB: u32 = 0x8518;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT: u32 = 0x8518;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: u32 = 0x851A;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB: u32 = 0x851A;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT: u32 = 0x851A;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X: u32 = 0x8515;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB: u32 = 0x8515;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT: u32 = 0x8515;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y: u32 = 0x8517;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB: u32 = 0x8517;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT: u32 = 0x8517;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z: u32 = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB: u32 = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT: u32 = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS: u32 = 0x884F;
pub const GL_TEXTURE_DEFORMATION_BIT_SGIX: u32 = 0x00000001;
pub const GL_TEXTURE_DEFORMATION_SGIX: u32 = 0x8195;
pub const GL_TEXTURE_DEPTH: u32 = 0x8071;
pub const GL_TEXTURE_DEPTH_EXT: u32 = 0x8071;
pub const GL_TEXTURE_DEPTH_SIZE: u32 = 0x884A;
pub const GL_TEXTURE_DEPTH_SIZE_ARB: u32 = 0x884A;
pub const GL_TEXTURE_DEPTH_TYPE: u32 = 0x8C16;
pub const GL_TEXTURE_DEPTH_TYPE_ARB: u32 = 0x8C16;
pub const GL_TEXTURE_DS_SIZE_NV: u32 = 0x871D;
pub const GL_TEXTURE_DT_SIZE_NV: u32 = 0x871E;
pub const GL_TEXTURE_ENV_BIAS_SGIX: u32 = 0x80BE;
pub const GL_TEXTURE_FETCH_BARRIER_BIT: u32 = 0x00000008;
pub const GL_TEXTURE_FETCH_BARRIER_BIT_EXT: u32 = 0x00000008;
pub const GL_TEXTURE_FILTER4_SIZE_SGIS: u32 = 0x8147;
pub const GL_TEXTURE_FILTER_CONTROL_EXT: u32 = 0x8500;
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS: u32 = 0x9107;
pub const GL_TEXTURE_FLOAT_COMPONENTS_NV: u32 = 0x888C;
pub const GL_TEXTURE_FREE_MEMORY_ATI: u32 = 0x87FC;
pub const GL_TEXTURE_GATHER: u32 = 0x82A2;
pub const GL_TEXTURE_GATHER_SHADOW: u32 = 0x82A3;
pub const GL_TEXTURE_GEQUAL_R_SGIX: u32 = 0x819D;
pub const GL_TEXTURE_GREEN_SIZE: u32 = 0x805D;
pub const GL_TEXTURE_GREEN_SIZE_EXT: u32 = 0x805D;
pub const GL_TEXTURE_GREEN_TYPE: u32 = 0x8C11;
pub const GL_TEXTURE_GREEN_TYPE_ARB: u32 = 0x8C11;
pub const GL_TEXTURE_HEIGHT: u32 = 0x1001;
pub const GL_TEXTURE_HI_SIZE_NV: u32 = 0x871B;
pub const GL_TEXTURE_IMAGE_FORMAT: u32 = 0x828F;
pub const GL_TEXTURE_IMAGE_TYPE: u32 = 0x8290;
pub const GL_TEXTURE_IMMUTABLE_FORMAT: u32 = 0x912F;
pub const GL_TEXTURE_IMMUTABLE_LEVELS: u32 = 0x82DF;
pub const GL_TEXTURE_INDEX_SIZE_EXT: u32 = 0x80ED;
pub const GL_TEXTURE_INTENSITY_SIZE_EXT: u32 = 0x8061;
pub const GL_TEXTURE_INTENSITY_TYPE_ARB: u32 = 0x8C15;
pub const GL_TEXTURE_INTERNAL_FORMAT: u32 = 0x1003;
pub const GL_TEXTURE_LEQUAL_R_SGIX: u32 = 0x819C;
pub const GL_TEXTURE_LIGHTING_MODE_HP: u32 = 0x8167;
pub const GL_TEXTURE_LIGHT_EXT: u32 = 0x8350;
pub const GL_TEXTURE_LOD_BIAS: u32 = 0x8501;
pub const GL_TEXTURE_LOD_BIAS_EXT: u32 = 0x8501;
pub const GL_TEXTURE_LOD_BIAS_R_SGIX: u32 = 0x8190;
pub const GL_TEXTURE_LOD_BIAS_S_SGIX: u32 = 0x818E;
pub const GL_TEXTURE_LOD_BIAS_T_SGIX: u32 = 0x818F;
pub const GL_TEXTURE_LO_SIZE_NV: u32 = 0x871C;
pub const GL_TEXTURE_LUMINANCE_SIZE_EXT: u32 = 0x8060;
pub const GL_TEXTURE_LUMINANCE_TYPE_ARB: u32 = 0x8C14;
pub const GL_TEXTURE_MAG_FILTER: u32 = 0x2800;
pub const GL_TEXTURE_MAG_SIZE_NV: u32 = 0x871F;
pub const GL_TEXTURE_MATERIAL_FACE_EXT: u32 = 0x8351;
pub const GL_TEXTURE_MATERIAL_PARAMETER_EXT: u32 = 0x8352;
pub const GL_TEXTURE_MAX_ANISOTROPY: u32 = 0x84FE;
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 0x84FE;
pub const GL_TEXTURE_MAX_CLAMP_R_SGIX: u32 = 0x836B;
pub const GL_TEXTURE_MAX_CLAMP_S_SGIX: u32 = 0x8369;
pub const GL_TEXTURE_MAX_CLAMP_T_SGIX: u32 = 0x836A;
pub const GL_TEXTURE_MAX_LEVEL: u32 = 0x813D;
pub const GL_TEXTURE_MAX_LEVEL_SGIS: u32 = 0x813D;
pub const GL_TEXTURE_MAX_LOD: u32 = 0x813B;
pub const GL_TEXTURE_MAX_LOD_SGIS: u32 = 0x813B;
pub const GL_TEXTURE_MEMORY_LAYOUT_INTEL: u32 = 0x83FF;
pub const GL_TEXTURE_MIN_FILTER: u32 = 0x2801;
pub const GL_TEXTURE_MIN_LOD: u32 = 0x813A;
pub const GL_TEXTURE_MIN_LOD_SGIS: u32 = 0x813A;
pub const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX: u32 = 0x812E;
pub const GL_TEXTURE_NORMAL_EXT: u32 = 0x85AF;
pub const GL_TEXTURE_POST_SPECULAR_HP: u32 = 0x8168;
pub const GL_TEXTURE_PRE_SPECULAR_HP: u32 = 0x8169;
pub const GL_TEXTURE_PRIORITY_EXT: u32 = 0x8066;
pub const GL_TEXTURE_RANGE_LENGTH_APPLE: u32 = 0x85B7;
pub const GL_TEXTURE_RANGE_POINTER_APPLE: u32 = 0x85B8;
pub const GL_TEXTURE_RECTANGLE: u32 = 0x84F5;
pub const GL_TEXTURE_RECTANGLE_ARB: u32 = 0x84F5;
pub const GL_TEXTURE_RECTANGLE_NV: u32 = 0x84F5;
pub const GL_TEXTURE_REDUCTION_MODE_ARB: u32 = 0x9366;
pub const GL_TEXTURE_REDUCTION_MODE_EXT: u32 = 0x9366;
pub const GL_TEXTURE_RED_SIZE: u32 = 0x805C;
pub const GL_TEXTURE_RED_SIZE_EXT: u32 = 0x805C;
pub const GL_TEXTURE_RED_TYPE: u32 = 0x8C10;
pub const GL_TEXTURE_RED_TYPE_ARB: u32 = 0x8C10;
pub const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV: u32 = 0x8E54;
pub const GL_TEXTURE_RENDERBUFFER_NV: u32 = 0x8E55;
pub const GL_TEXTURE_RESIDENT_EXT: u32 = 0x8067;
pub const GL_TEXTURE_SAMPLES: u32 = 0x9106;
pub const GL_TEXTURE_SHADER_NV: u32 = 0x86DE;
pub const GL_TEXTURE_SHADOW: u32 = 0x82A1;
pub const GL_TEXTURE_SHARED_SIZE: u32 = 0x8C3F;
pub const GL_TEXTURE_SHARED_SIZE_EXT: u32 = 0x8C3F;
pub const GL_TEXTURE_SPARSE_ARB: u32 = 0x91A6;
pub const GL_TEXTURE_SRGB_DECODE_EXT: u32 = 0x8A48;
pub const GL_TEXTURE_STENCIL_SIZE: u32 = 0x88F1;
pub const GL_TEXTURE_STENCIL_SIZE_EXT: u32 = 0x88F1;
pub const GL_TEXTURE_STORAGE_HINT_APPLE: u32 = 0x85BC;
pub const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD: u32 = 0x00000001;
pub const GL_TEXTURE_SWIZZLE_A: u32 = 0x8E45;
pub const GL_TEXTURE_SWIZZLE_A_EXT: u32 = 0x8E45;
pub const GL_TEXTURE_SWIZZLE_B: u32 = 0x8E44;
pub const GL_TEXTURE_SWIZZLE_B_EXT: u32 = 0x8E44;
pub const GL_TEXTURE_SWIZZLE_G: u32 = 0x8E43;
pub const GL_TEXTURE_SWIZZLE_G_EXT: u32 = 0x8E43;
pub const GL_TEXTURE_SWIZZLE_R: u32 = 0x8E42;
pub const GL_TEXTURE_SWIZZLE_RGBA: u32 = 0x8E46;
pub const GL_TEXTURE_SWIZZLE_RGBA_EXT: u32 = 0x8E46;
pub const GL_TEXTURE_SWIZZLE_R_EXT: u32 = 0x8E42;
pub const GL_TEXTURE_TARGET: u32 = 0x1006;
pub const GL_TEXTURE_TILING_EXT: u32 = 0x9580;
pub const GL_TEXTURE_TOO_LARGE_EXT: u32 = 0x8065;
pub const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV: u32 = 0x888F;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT: u32 = 0x00000100;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT: u32 = 0x00000100;
pub const GL_TEXTURE_VIEW: u32 = 0x82B5;
pub const GL_TEXTURE_VIEW_MIN_LAYER: u32 = 0x82DD;
pub const GL_TEXTURE_VIEW_MIN_LEVEL: u32 = 0x82DB;
pub const GL_TEXTURE_VIEW_NUM_LAYERS: u32 = 0x82DE;
pub const GL_TEXTURE_VIEW_NUM_LEVELS: u32 = 0x82DC;
pub const GL_TEXTURE_WIDTH: u32 = 0x1000;
pub const GL_TEXTURE_WRAP_Q_SGIS: u32 = 0x8137;
pub const GL_TEXTURE_WRAP_R: u32 = 0x8072;
pub const GL_TEXTURE_WRAP_R_EXT: u32 = 0x8072;
pub const GL_TEXTURE_WRAP_S: u32 = 0x2802;
pub const GL_TEXTURE_WRAP_T: u32 = 0x2803;
pub const GL_TEXT_FRAGMENT_SHADER_ATI: u32 = 0x8200;
pub const GL_TILE_RASTER_ORDER_FIXED_MESA: u32 = 0x8BB8;
pub const GL_TILE_RASTER_ORDER_INCREASING_X_MESA: u32 = 0x8BB9;
pub const GL_TILE_RASTER_ORDER_INCREASING_Y_MESA: u32 = 0x8BBA;
pub const GL_TILING_TYPES_EXT: u32 = 0x9583;
pub const GL_TIMELINE_SEMAPHORE_VALUE_NV: u32 = 0x9595;
pub const GL_TIMEOUT_EXPIRED: u32 = 0x911B;
pub const GL_TIMEOUT_IGNORED: u64 = 0xFFFFFFFFFFFFFFFF;
pub const GL_TIMESTAMP: u32 = 0x8E28;
pub const GL_TIME_ELAPSED: u32 = 0x88BF;
pub const GL_TIME_ELAPSED_EXT: u32 = 0x88BF;
pub const GL_TOP_LEVEL_ARRAY_SIZE: u32 = 0x930C;
pub const GL_TOP_LEVEL_ARRAY_STRIDE: u32 = 0x930D;
pub const GL_TRACK_MATRIX_NV: u32 = 0x8648;
pub const GL_TRACK_MATRIX_TRANSFORM_NV: u32 = 0x8649;
pub const GL_TRANSFORM_FEEDBACK: u32 = 0x8E22;
pub const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV: u32 = 0x8C7E;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT: u32 = 0x00000800;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT: u32 = 0x00000800;
pub const GL_TRANSFORM_FEEDBACK_BINDING: u32 = 0x8E25;
pub const GL_TRANSFORM_FEEDBACK_BINDING_NV: u32 = 0x8E25;
pub const GL_TRANSFORM_FEEDBACK_BUFFER: u32 = 0x8C8E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE: u32 = 0x8E24;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV: u32 = 0x8E24;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING: u32 = 0x8C8F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT: u32 = 0x8C8F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV: u32 = 0x8C8F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_EXT: u32 = 0x8C8E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX: u32 = 0x934B;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE: u32 = 0x8C7F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT: u32 = 0x8C7F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV: u32 = 0x8C7F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_NV: u32 = 0x8C8E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED: u32 = 0x8E23;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV: u32 = 0x8E23;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE: u32 = 0x8C85;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT: u32 = 0x8C85;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV: u32 = 0x8C85;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START: u32 = 0x8C84;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT: u32 = 0x8C84;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV: u32 = 0x8C84;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE: u32 = 0x934C;
pub const GL_TRANSFORM_FEEDBACK_NV: u32 = 0x8E22;
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW: u32 = 0x82EC;
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB: u32 = 0x82EC;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: u32 = 0x8C88;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT: u32 = 0x8C88;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV: u32 = 0x8C88;
pub const GL_TRANSFORM_FEEDBACK_RECORD_NV: u32 = 0x8C86;
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW: u32 = 0x82ED;
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB: u32 = 0x82ED;
pub const GL_TRANSFORM_FEEDBACK_VARYING: u32 = 0x92F4;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS: u32 = 0x8C83;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT: u32 = 0x8C83;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_NV: u32 = 0x8C83;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: u32 = 0x8C76;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT: u32 = 0x8C76;
pub const GL_TRANSFORM_HINT_APPLE: u32 = 0x85B1;
pub const GL_TRANSLATE_2D_NV: u32 = 0x9090;
pub const GL_TRANSLATE_3D_NV: u32 = 0x9091;
pub const GL_TRANSLATE_X_NV: u32 = 0x908E;
pub const GL_TRANSLATE_Y_NV: u32 = 0x908F;
pub const GL_TRANSPOSE_AFFINE_2D_NV: u32 = 0x9096;
pub const GL_TRANSPOSE_AFFINE_3D_NV: u32 = 0x9098;
pub const GL_TRANSPOSE_COLOR_MATRIX_ARB: u32 = 0x84E6;
pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB: u32 = 0x88B7;
pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB: u32 = 0x84E3;
pub const GL_TRANSPOSE_NV: u32 = 0x862C;
pub const GL_TRANSPOSE_PROGRAM_MATRIX_EXT: u32 = 0x8E2E;
pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB: u32 = 0x84E4;
pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB: u32 = 0x84E5;
pub const GL_TRIANGLES: u32 = 0x0004;
pub const GL_TRIANGLES_ADJACENCY: u32 = 0x000C;
pub const GL_TRIANGLES_ADJACENCY_ARB: u32 = 0x000C;
pub const GL_TRIANGLES_ADJACENCY_EXT: u32 = 0x000C;
pub const GL_TRIANGLE_FAN: u32 = 0x0006;
pub const GL_TRIANGLE_LIST_SUN: u32 = 0x81D7;
pub const GL_TRIANGLE_MESH_SUN: u32 = 0x8615;
pub const GL_TRIANGLE_STRIP: u32 = 0x0005;
pub const GL_TRIANGLE_STRIP_ADJACENCY: u32 = 0x000D;
pub const GL_TRIANGLE_STRIP_ADJACENCY_ARB: u32 = 0x000D;
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT: u32 = 0x000D;
pub const GL_TRIANGULAR_NV: u32 = 0x90A5;
pub const GL_TRUE: GLboolean = true;
pub const GL_TYPE: u32 = 0x92FA;
pub const GL_UNCORRELATED_NV: u32 = 0x9282;
pub const GL_UNDEFINED_APPLE: u32 = 0x8A1C;
pub const GL_UNDEFINED_VERTEX: u32 = 0x8260;
pub const GL_UNIFORM: u32 = 0x92E1;
pub const GL_UNIFORM_ADDRESS_COMMAND_NV: u32 = 0x000A;
pub const GL_UNIFORM_ARRAY_STRIDE: u32 = 0x8A3C;
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX: u32 = 0x92DA;
pub const GL_UNIFORM_BARRIER_BIT: u32 = 0x00000004;
pub const GL_UNIFORM_BARRIER_BIT_EXT: u32 = 0x00000004;
pub const GL_UNIFORM_BLOCK: u32 = 0x92E2;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS: u32 = 0x8A42;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: u32 = 0x8A43;
pub const GL_UNIFORM_BLOCK_BINDING: u32 = 0x8A3F;
pub const GL_UNIFORM_BLOCK_DATA_SIZE: u32 = 0x8A40;
pub const GL_UNIFORM_BLOCK_INDEX: u32 = 0x8A3A;
pub const GL_UNIFORM_BLOCK_NAME_LENGTH: u32 = 0x8A41;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER: u32 = 0x90EC;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: u32 = 0x8A46;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: u32 = 0x8A45;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV: u32 = 0x959C;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV: u32 = 0x959D;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 0x84F0;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 0x84F1;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: u32 = 0x8A44;
pub const GL_UNIFORM_BUFFER: u32 = 0x8A11;
pub const GL_UNIFORM_BUFFER_ADDRESS_NV: u32 = 0x936F;
pub const GL_UNIFORM_BUFFER_BINDING: u32 = 0x8A28;
pub const GL_UNIFORM_BUFFER_BINDING_EXT: u32 = 0x8DEF;
pub const GL_UNIFORM_BUFFER_EXT: u32 = 0x8DEE;
pub const GL_UNIFORM_BUFFER_LENGTH_NV: u32 = 0x9370;
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT: u32 = 0x8A34;
pub const GL_UNIFORM_BUFFER_SIZE: u32 = 0x8A2A;
pub const GL_UNIFORM_BUFFER_START: u32 = 0x8A29;
pub const GL_UNIFORM_BUFFER_UNIFIED_NV: u32 = 0x936E;
pub const GL_UNIFORM_IS_ROW_MAJOR: u32 = 0x8A3E;
pub const GL_UNIFORM_MATRIX_STRIDE: u32 = 0x8A3D;
pub const GL_UNIFORM_NAME_LENGTH: u32 = 0x8A39;
pub const GL_UNIFORM_OFFSET: u32 = 0x8A3B;
pub const GL_UNIFORM_SIZE: u32 = 0x8A38;
pub const GL_UNIFORM_TYPE: u32 = 0x8A37;
pub const GL_UNKNOWN_CONTEXT_RESET: u32 = 0x8255;
pub const GL_UNKNOWN_CONTEXT_RESET_ARB: u32 = 0x8255;
pub const GL_UNPACK_ALIGNMENT: u32 = 0x0CF5;
pub const GL_UNPACK_CLIENT_STORAGE_APPLE: u32 = 0x85B2;
pub const GL_UNPACK_CMYK_HINT_EXT: u32 = 0x800F;
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH: u32 = 0x9129;
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT: u32 = 0x9128;
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE: u32 = 0x912A;
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH: u32 = 0x9127;
pub const GL_UNPACK_CONSTANT_DATA_SUNX: u32 = 0x81D5;
pub const GL_UNPACK_IMAGE_DEPTH_SGIS: u32 = 0x8133;
pub const GL_UNPACK_IMAGE_HEIGHT: u32 = 0x806E;
pub const GL_UNPACK_IMAGE_HEIGHT_EXT: u32 = 0x806E;
pub const GL_UNPACK_LSB_FIRST: u32 = 0x0CF1;
pub const GL_UNPACK_RESAMPLE_OML: u32 = 0x8985;
pub const GL_UNPACK_RESAMPLE_SGIX: u32 = 0x842F;
pub const GL_UNPACK_ROW_BYTES_APPLE: u32 = 0x8A16;
pub const GL_UNPACK_ROW_LENGTH: u32 = 0x0CF2;
pub const GL_UNPACK_SKIP_IMAGES: u32 = 0x806D;
pub const GL_UNPACK_SKIP_IMAGES_EXT: u32 = 0x806D;
pub const GL_UNPACK_SKIP_PIXELS: u32 = 0x0CF4;
pub const GL_UNPACK_SKIP_ROWS: u32 = 0x0CF3;
pub const GL_UNPACK_SKIP_VOLUMES_SGIS: u32 = 0x8132;
pub const GL_UNPACK_SUBSAMPLE_RATE_SGIX: u32 = 0x85A1;
pub const GL_UNPACK_SWAP_BYTES: u32 = 0x0CF0;
pub const GL_UNSIGNALED: u32 = 0x9118;
pub const GL_UNSIGNED_BYTE: u32 = 0x1401;
pub const GL_UNSIGNED_BYTE_2_3_3_REV: u32 = 0x8362;
pub const GL_UNSIGNED_BYTE_3_3_2: u32 = 0x8032;
pub const GL_UNSIGNED_BYTE_3_3_2_EXT: u32 = 0x8032;
pub const GL_UNSIGNED_IDENTITY_NV: u32 = 0x8536;
pub const GL_UNSIGNED_INT: u32 = 0x1405;
pub const GL_UNSIGNED_INT16_NV: u32 = 0x8FF0;
pub const GL_UNSIGNED_INT16_VEC2_NV: u32 = 0x8FF1;
pub const GL_UNSIGNED_INT16_VEC3_NV: u32 = 0x8FF2;
pub const GL_UNSIGNED_INT16_VEC4_NV: u32 = 0x8FF3;
pub const GL_UNSIGNED_INT64_AMD: u32 = 0x8BC2;
pub const GL_UNSIGNED_INT64_ARB: u32 = 0x140F;
pub const GL_UNSIGNED_INT64_NV: u32 = 0x140F;
pub const GL_UNSIGNED_INT64_VEC2_ARB: u32 = 0x8FF5;
pub const GL_UNSIGNED_INT64_VEC2_NV: u32 = 0x8FF5;
pub const GL_UNSIGNED_INT64_VEC3_ARB: u32 = 0x8FF6;
pub const GL_UNSIGNED_INT64_VEC3_NV: u32 = 0x8FF6;
pub const GL_UNSIGNED_INT64_VEC4_ARB: u32 = 0x8FF7;
pub const GL_UNSIGNED_INT64_VEC4_NV: u32 = 0x8FF7;
pub const GL_UNSIGNED_INT8_NV: u32 = 0x8FEC;
pub const GL_UNSIGNED_INT8_VEC2_NV: u32 = 0x8FED;
pub const GL_UNSIGNED_INT8_VEC3_NV: u32 = 0x8FEE;
pub const GL_UNSIGNED_INT8_VEC4_NV: u32 = 0x8FEF;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV: u32 = 0x8C3B;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT: u32 = 0x8C3B;
pub const GL_UNSIGNED_INT_10_10_10_2: u32 = 0x8036;
pub const GL_UNSIGNED_INT_10_10_10_2_EXT: u32 = 0x8036;
pub const GL_UNSIGNED_INT_24_8: u32 = 0x84FA;
pub const GL_UNSIGNED_INT_24_8_EXT: u32 = 0x84FA;
pub const GL_UNSIGNED_INT_24_8_NV: u32 = 0x84FA;
pub const GL_UNSIGNED_INT_2_10_10_10_REV: u32 = 0x8368;
pub const GL_UNSIGNED_INT_5_9_9_9_REV: u32 = 0x8C3E;
pub const GL_UNSIGNED_INT_5_9_9_9_REV_EXT: u32 = 0x8C3E;
pub const GL_UNSIGNED_INT_8_8_8_8: u32 = 0x8035;
pub const GL_UNSIGNED_INT_8_8_8_8_EXT: u32 = 0x8035;
pub const GL_UNSIGNED_INT_8_8_8_8_REV: u32 = 0x8367;
pub const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV: u32 = 0x86DB;
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER: u32 = 0x92DB;
pub const GL_UNSIGNED_INT_IMAGE_1D: u32 = 0x9062;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY: u32 = 0x9068;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT: u32 = 0x9068;
pub const GL_UNSIGNED_INT_IMAGE_1D_EXT: u32 = 0x9062;
pub const GL_UNSIGNED_INT_IMAGE_2D: u32 = 0x9063;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY: u32 = 0x9069;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT: u32 = 0x9069;
pub const GL_UNSIGNED_INT_IMAGE_2D_EXT: u32 = 0x9063;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE: u32 = 0x906B;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 0x906C;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: u32 = 0x906C;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT: u32 = 0x906B;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT: u32 = 0x9065;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT: u32 = 0x9065;
pub const GL_UNSIGNED_INT_IMAGE_3D: u32 = 0x9064;
pub const GL_UNSIGNED_INT_IMAGE_3D_EXT: u32 = 0x9064;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER: u32 = 0x9067;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT: u32 = 0x9067;
pub const GL_UNSIGNED_INT_IMAGE_CUBE: u32 = 0x9066;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_EXT: u32 = 0x9066;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY: u32 = 0x906A;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 0x906A;
pub const GL_UNSIGNED_INT_S8_S8_8_8_NV: u32 = 0x86DA;
pub const GL_UNSIGNED_INT_SAMPLER_1D: u32 = 0x8DD1;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY: u32 = 0x8DD6;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT: u32 = 0x8DD6;
pub const GL_UNSIGNED_INT_SAMPLER_1D_EXT: u32 = 0x8DD1;
pub const GL_UNSIGNED_INT_SAMPLER_2D: u32 = 0x8DD2;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY: u32 = 0x8DD7;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT: u32 = 0x8DD7;
pub const GL_UNSIGNED_INT_SAMPLER_2D_EXT: u32 = 0x8DD2;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: u32 = 0x910A;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 0x910D;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT: u32 = 0x8DD5;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT: u32 = 0x8DD5;
pub const GL_UNSIGNED_INT_SAMPLER_3D: u32 = 0x8DD3;
pub const GL_UNSIGNED_INT_SAMPLER_3D_EXT: u32 = 0x8DD3;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER: u32 = 0x8DD8;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD: u32 = 0x9003;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT: u32 = 0x8DD8;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE: u32 = 0x8DD4;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT: u32 = 0x8DD4;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 0x900F;
pub const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV: u32 = 0x8E58;
pub const GL_UNSIGNED_INT_VEC2: u32 = 0x8DC6;
pub const GL_UNSIGNED_INT_VEC2_EXT: u32 = 0x8DC6;
pub const GL_UNSIGNED_INT_VEC3: u32 = 0x8DC7;
pub const GL_UNSIGNED_INT_VEC3_EXT: u32 = 0x8DC7;
pub const GL_UNSIGNED_INT_VEC4: u32 = 0x8DC8;
pub const GL_UNSIGNED_INT_VEC4_EXT: u32 = 0x8DC8;
pub const GL_UNSIGNED_INVERT_NV: u32 = 0x8537;
pub const GL_UNSIGNED_NORMALIZED: u32 = 0x8C17;
pub const GL_UNSIGNED_NORMALIZED_ARB: u32 = 0x8C17;
pub const GL_UNSIGNED_SHORT: u32 = 0x1403;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV: u32 = 0x8366;
pub const GL_UNSIGNED_SHORT_4_4_4_4: u32 = 0x8033;
pub const GL_UNSIGNED_SHORT_4_4_4_4_EXT: u32 = 0x8033;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV: u32 = 0x8365;
pub const GL_UNSIGNED_SHORT_5_5_5_1: u32 = 0x8034;
pub const GL_UNSIGNED_SHORT_5_5_5_1_EXT: u32 = 0x8034;
pub const GL_UNSIGNED_SHORT_5_6_5: u32 = 0x8363;
pub const GL_UNSIGNED_SHORT_5_6_5_REV: u32 = 0x8364;
pub const GL_UNSIGNED_SHORT_8_8_APPLE: u32 = 0x85BA;
pub const GL_UNSIGNED_SHORT_8_8_MESA: u32 = 0x85BA;
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE: u32 = 0x85BB;
pub const GL_UNSIGNED_SHORT_8_8_REV_MESA: u32 = 0x85BB;
pub const GL_UPLOAD_GPU_MASK_NVX: u32 = 0x954A;
pub const GL_UPPER_LEFT: u32 = 0x8CA2;
pub const GL_USE_MISSING_GLYPH_NV: u32 = 0x90AA;
pub const GL_UTF16_NV: u32 = 0x909B;
pub const GL_UTF8_NV: u32 = 0x909A;
pub const GL_UUID_SIZE_EXT: u32 = 16;
pub const GL_VALIDATE_STATUS: u32 = 0x8B83;
pub const GL_VARIABLE_A_NV: u32 = 0x8523;
pub const GL_VARIABLE_B_NV: u32 = 0x8524;
pub const GL_VARIABLE_C_NV: u32 = 0x8525;
pub const GL_VARIABLE_D_NV: u32 = 0x8526;
pub const GL_VARIABLE_E_NV: u32 = 0x8527;
pub const GL_VARIABLE_F_NV: u32 = 0x8528;
pub const GL_VARIABLE_G_NV: u32 = 0x8529;
pub const GL_VARIANT_ARRAY_EXT: u32 = 0x87E8;
pub const GL_VARIANT_ARRAY_POINTER_EXT: u32 = 0x87E9;
pub const GL_VARIANT_ARRAY_STRIDE_EXT: u32 = 0x87E6;
pub const GL_VARIANT_ARRAY_TYPE_EXT: u32 = 0x87E7;
pub const GL_VARIANT_DATATYPE_EXT: u32 = 0x87E5;
pub const GL_VARIANT_EXT: u32 = 0x87C1;
pub const GL_VARIANT_VALUE_EXT: u32 = 0x87E4;
pub const GL_VBO_FREE_MEMORY_ATI: u32 = 0x87FB;
pub const GL_VECTOR_EXT: u32 = 0x87BF;
pub const GL_VENDOR: u32 = 0x1F00;
pub const GL_VERSION: u32 = 0x1F02;
pub const GL_VERTEX23_BIT_PGI: u32 = 0x00000004;
pub const GL_VERTEX4_BIT_PGI: u32 = 0x00000008;
pub const GL_VERTEX_ARRAY: u32 = 0x8074;
pub const GL_VERTEX_ARRAY_ADDRESS_NV: u32 = 0x8F21;
pub const GL_VERTEX_ARRAY_BINDING: u32 = 0x85B5;
pub const GL_VERTEX_ARRAY_BINDING_APPLE: u32 = 0x85B5;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8896;
pub const GL_VERTEX_ARRAY_COUNT_EXT: u32 = 0x807D;
pub const GL_VERTEX_ARRAY_EXT: u32 = 0x8074;
pub const GL_VERTEX_ARRAY_LENGTH_NV: u32 = 0x8F2B;
pub const GL_VERTEX_ARRAY_LIST_IBM: u32 = 103070;
pub const GL_VERTEX_ARRAY_LIST_STRIDE_IBM: u32 = 103080;
pub const GL_VERTEX_ARRAY_OBJECT_AMD: u32 = 0x9154;
pub const GL_VERTEX_ARRAY_OBJECT_EXT: u32 = 0x9154;
pub const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL: u32 = 0x83F5;
pub const GL_VERTEX_ARRAY_POINTER_EXT: u32 = 0x808E;
pub const GL_VERTEX_ARRAY_RANGE_APPLE: u32 = 0x851D;
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE: u32 = 0x851E;
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_NV: u32 = 0x851E;
pub const GL_VERTEX_ARRAY_RANGE_NV: u32 = 0x851D;
pub const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE: u32 = 0x8521;
pub const GL_VERTEX_ARRAY_RANGE_POINTER_NV: u32 = 0x8521;
pub const GL_VERTEX_ARRAY_RANGE_VALID_NV: u32 = 0x851F;
pub const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV: u32 = 0x8533;
pub const GL_VERTEX_ARRAY_SIZE_EXT: u32 = 0x807A;
pub const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE: u32 = 0x851F;
pub const GL_VERTEX_ARRAY_STRIDE_EXT: u32 = 0x807C;
pub const GL_VERTEX_ARRAY_TYPE_EXT: u32 = 0x807B;
pub const GL_VERTEX_ATTRIB_ARRAY0_NV: u32 = 0x8650;
pub const GL_VERTEX_ATTRIB_ARRAY10_NV: u32 = 0x865A;
pub const GL_VERTEX_ATTRIB_ARRAY11_NV: u32 = 0x865B;
pub const GL_VERTEX_ATTRIB_ARRAY12_NV: u32 = 0x865C;
pub const GL_VERTEX_ATTRIB_ARRAY13_NV: u32 = 0x865D;
pub const GL_VERTEX_ATTRIB_ARRAY14_NV: u32 = 0x865E;
pub const GL_VERTEX_ATTRIB_ARRAY15_NV: u32 = 0x865F;
pub const GL_VERTEX_ATTRIB_ARRAY1_NV: u32 = 0x8651;
pub const GL_VERTEX_ATTRIB_ARRAY2_NV: u32 = 0x8652;
pub const GL_VERTEX_ATTRIB_ARRAY3_NV: u32 = 0x8653;
pub const GL_VERTEX_ATTRIB_ARRAY4_NV: u32 = 0x8654;
pub const GL_VERTEX_ATTRIB_ARRAY5_NV: u32 = 0x8655;
pub const GL_VERTEX_ATTRIB_ARRAY6_NV: u32 = 0x8656;
pub const GL_VERTEX_ATTRIB_ARRAY7_NV: u32 = 0x8657;
pub const GL_VERTEX_ATTRIB_ARRAY8_NV: u32 = 0x8658;
pub const GL_VERTEX_ATTRIB_ARRAY9_NV: u32 = 0x8659;
pub const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV: u32 = 0x8F20;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT: u32 = 0x00000001;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT: u32 = 0x00000001;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: u32 = 0x889F;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889F;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR: u32 = 0x88FE;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB: u32 = 0x88FE;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED: u32 = 0x8622;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB: u32 = 0x8622;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER: u32 = 0x88FD;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT: u32 = 0x88FD;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV: u32 = 0x88FD;
pub const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV: u32 = 0x8F2A;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: u32 = 0x886A;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB: u32 = 0x886A;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER: u32 = 0x8645;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB: u32 = 0x8645;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE: u32 = 0x8623;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB: u32 = 0x8623;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE: u32 = 0x8624;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB: u32 = 0x8624;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE: u32 = 0x8625;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB: u32 = 0x8625;
pub const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV: u32 = 0x8F1E;
pub const GL_VERTEX_ATTRIB_BINDING: u32 = 0x82D4;
pub const GL_VERTEX_ATTRIB_MAP1_APPLE: u32 = 0x8A00;
pub const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE: u32 = 0x8A03;
pub const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE: u32 = 0x8A05;
pub const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE: u32 = 0x8A04;
pub const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE: u32 = 0x8A02;
pub const GL_VERTEX_ATTRIB_MAP2_APPLE: u32 = 0x8A01;
pub const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE: u32 = 0x8A07;
pub const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE: u32 = 0x8A09;
pub const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE: u32 = 0x8A08;
pub const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE: u32 = 0x8A06;
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET: u32 = 0x82D5;
pub const GL_VERTEX_BINDING_DIVISOR: u32 = 0x82D6;
pub const GL_VERTEX_BINDING_OFFSET: u32 = 0x82D7;
pub const GL_VERTEX_BINDING_STRIDE: u32 = 0x82D8;
pub const GL_VERTEX_BLEND_ARB: u32 = 0x86A7;
pub const GL_VERTEX_CONSISTENT_HINT_PGI: u32 = 0x1A22B;
pub const GL_VERTEX_DATA_HINT_PGI: u32 = 0x1A22A;
pub const GL_VERTEX_ELEMENT_SWIZZLE_AMD: u32 = 0x91A4;
pub const GL_VERTEX_ID_NV: u32 = 0x8C7B;
pub const GL_VERTEX_ID_SWIZZLE_AMD: u32 = 0x91A5;
pub const GL_VERTEX_PRECLIP_HINT_SGIX: u32 = 0x83EF;
pub const GL_VERTEX_PRECLIP_SGIX: u32 = 0x83EE;
pub const GL_VERTEX_PROGRAM_ARB: u32 = 0x8620;
pub const GL_VERTEX_PROGRAM_BINDING_NV: u32 = 0x864A;
pub const GL_VERTEX_PROGRAM_NV: u32 = 0x8620;
pub const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV: u32 = 0x8DA2;
pub const GL_VERTEX_PROGRAM_POINT_SIZE: u32 = 0x8642;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB: u32 = 0x8642;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_NV: u32 = 0x8642;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB: u32 = 0x8643;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_NV: u32 = 0x8643;
pub const GL_VERTEX_SHADER: u32 = 0x8B31;
pub const GL_VERTEX_SHADER_ARB: u32 = 0x8B31;
pub const GL_VERTEX_SHADER_BINDING_EXT: u32 = 0x8781;
pub const GL_VERTEX_SHADER_BIT: u32 = 0x00000001;
pub const GL_VERTEX_SHADER_EXT: u32 = 0x8780;
pub const GL_VERTEX_SHADER_INSTRUCTIONS_EXT: u32 = 0x87CF;
pub const GL_VERTEX_SHADER_INVARIANTS_EXT: u32 = 0x87D1;
pub const GL_VERTEX_SHADER_INVOCATIONS: u32 = 0x82F0;
pub const GL_VERTEX_SHADER_INVOCATIONS_ARB: u32 = 0x82F0;
pub const GL_VERTEX_SHADER_LOCALS_EXT: u32 = 0x87D3;
pub const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: u32 = 0x87D2;
pub const GL_VERTEX_SHADER_OPTIMIZED_EXT: u32 = 0x87D4;
pub const GL_VERTEX_SHADER_VARIANTS_EXT: u32 = 0x87D0;
pub const GL_VERTEX_SOURCE_ATI: u32 = 0x8774;
pub const GL_VERTEX_STATE_PROGRAM_NV: u32 = 0x8621;
pub const GL_VERTEX_STREAM0_ATI: u32 = 0x876C;
pub const GL_VERTEX_STREAM1_ATI: u32 = 0x876D;
pub const GL_VERTEX_STREAM2_ATI: u32 = 0x876E;
pub const GL_VERTEX_STREAM3_ATI: u32 = 0x876F;
pub const GL_VERTEX_STREAM4_ATI: u32 = 0x8770;
pub const GL_VERTEX_STREAM5_ATI: u32 = 0x8771;
pub const GL_VERTEX_STREAM6_ATI: u32 = 0x8772;
pub const GL_VERTEX_STREAM7_ATI: u32 = 0x8773;
pub const GL_VERTEX_SUBROUTINE: u32 = 0x92E8;
pub const GL_VERTEX_SUBROUTINE_UNIFORM: u32 = 0x92EE;
pub const GL_VERTEX_TEXTURE: u32 = 0x829B;
pub const GL_VERTEX_WEIGHTING_EXT: u32 = 0x8509;
pub const GL_VERTEX_WEIGHT_ARRAY_EXT: u32 = 0x850C;
pub const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT: u32 = 0x8510;
pub const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT: u32 = 0x850D;
pub const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT: u32 = 0x850F;
pub const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT: u32 = 0x850E;
pub const GL_VERTICAL_LINE_TO_NV: u32 = 0x08;
pub const GL_VERTICES_SUBMITTED: u32 = 0x82EE;
pub const GL_VERTICES_SUBMITTED_ARB: u32 = 0x82EE;
pub const GL_VIBRANCE_BIAS_NV: u32 = 0x8719;
pub const GL_VIBRANCE_SCALE_NV: u32 = 0x8713;
pub const GL_VIDEO_BUFFER_BINDING_NV: u32 = 0x9021;
pub const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV: u32 = 0x902D;
pub const GL_VIDEO_BUFFER_NV: u32 = 0x9020;
pub const GL_VIDEO_BUFFER_PITCH_NV: u32 = 0x9028;
pub const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV: u32 = 0x903B;
pub const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV: u32 = 0x903A;
pub const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV: u32 = 0x9039;
pub const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV: u32 = 0x9038;
pub const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV: u32 = 0x903C;
pub const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV: u32 = 0x9026;
pub const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV: u32 = 0x9029;
pub const GL_VIDEO_COLOR_CONVERSION_MAX_NV: u32 = 0x902A;
pub const GL_VIDEO_COLOR_CONVERSION_MIN_NV: u32 = 0x902B;
pub const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV: u32 = 0x902C;
pub const GL_VIEWPORT: u32 = 0x0BA2;
pub const GL_VIEWPORT_BOUNDS_RANGE: u32 = 0x825D;
pub const GL_VIEWPORT_COMMAND_NV: u32 = 0x0010;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX: u32 = 0x825F;
pub const GL_VIEWPORT_POSITION_W_SCALE_NV: u32 = 0x937C;
pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV: u32 = 0x937D;
pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV: u32 = 0x937E;
pub const GL_VIEWPORT_SUBPIXEL_BITS: u32 = 0x825C;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV: u32 = 0x9357;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV: u32 = 0x9351;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV: u32 = 0x9353;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV: u32 = 0x9355;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV: u32 = 0x9356;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV: u32 = 0x9350;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV: u32 = 0x9352;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV: u32 = 0x9354;
pub const GL_VIEWPORT_SWIZZLE_W_NV: u32 = 0x935B;
pub const GL_VIEWPORT_SWIZZLE_X_NV: u32 = 0x9358;
pub const GL_VIEWPORT_SWIZZLE_Y_NV: u32 = 0x9359;
pub const GL_VIEWPORT_SWIZZLE_Z_NV: u32 = 0x935A;
pub const GL_VIEW_CLASS_128_BITS: u32 = 0x82C4;
pub const GL_VIEW_CLASS_16_BITS: u32 = 0x82CA;
pub const GL_VIEW_CLASS_24_BITS: u32 = 0x82C9;
pub const GL_VIEW_CLASS_32_BITS: u32 = 0x82C8;
pub const GL_VIEW_CLASS_48_BITS: u32 = 0x82C7;
pub const GL_VIEW_CLASS_64_BITS: u32 = 0x82C6;
pub const GL_VIEW_CLASS_8_BITS: u32 = 0x82CB;
pub const GL_VIEW_CLASS_96_BITS: u32 = 0x82C5;
pub const GL_VIEW_CLASS_ASTC_10x10_RGBA: u32 = 0x9393;
pub const GL_VIEW_CLASS_ASTC_10x5_RGBA: u32 = 0x9390;
pub const GL_VIEW_CLASS_ASTC_10x6_RGBA: u32 = 0x9391;
pub const GL_VIEW_CLASS_ASTC_10x8_RGBA: u32 = 0x9392;
pub const GL_VIEW_CLASS_ASTC_12x10_RGBA: u32 = 0x9394;
pub const GL_VIEW_CLASS_ASTC_12x12_RGBA: u32 = 0x9395;
pub const GL_VIEW_CLASS_ASTC_4x4_RGBA: u32 = 0x9388;
pub const GL_VIEW_CLASS_ASTC_5x4_RGBA: u32 = 0x9389;
pub const GL_VIEW_CLASS_ASTC_5x5_RGBA: u32 = 0x938A;
pub const GL_VIEW_CLASS_ASTC_6x5_RGBA: u32 = 0x938B;
pub const GL_VIEW_CLASS_ASTC_6x6_RGBA: u32 = 0x938C;
pub const GL_VIEW_CLASS_ASTC_8x5_RGBA: u32 = 0x938D;
pub const GL_VIEW_CLASS_ASTC_8x6_RGBA: u32 = 0x938E;
pub const GL_VIEW_CLASS_ASTC_8x8_RGBA: u32 = 0x938F;
pub const GL_VIEW_CLASS_BPTC_FLOAT: u32 = 0x82D3;
pub const GL_VIEW_CLASS_BPTC_UNORM: u32 = 0x82D2;
pub const GL_VIEW_CLASS_EAC_R11: u32 = 0x9383;
pub const GL_VIEW_CLASS_EAC_RG11: u32 = 0x9384;
pub const GL_VIEW_CLASS_ETC2_EAC_RGBA: u32 = 0x9387;
pub const GL_VIEW_CLASS_ETC2_RGB: u32 = 0x9385;
pub const GL_VIEW_CLASS_ETC2_RGBA: u32 = 0x9386;
pub const GL_VIEW_CLASS_RGTC1_RED: u32 = 0x82D0;
pub const GL_VIEW_CLASS_RGTC2_RG: u32 = 0x82D1;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB: u32 = 0x82CC;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA: u32 = 0x82CD;
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA: u32 = 0x82CE;
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA: u32 = 0x82CF;
pub const GL_VIEW_COMPATIBILITY_CLASS: u32 = 0x82B6;
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB: u32 = 0x91A7;
pub const GL_VIRTUAL_PAGE_SIZE_X_AMD: u32 = 0x9195;
pub const GL_VIRTUAL_PAGE_SIZE_X_ARB: u32 = 0x9195;
pub const GL_VIRTUAL_PAGE_SIZE_Y_AMD: u32 = 0x9196;
pub const GL_VIRTUAL_PAGE_SIZE_Y_ARB: u32 = 0x9196;
pub const GL_VIRTUAL_PAGE_SIZE_Z_AMD: u32 = 0x9197;
pub const GL_VIRTUAL_PAGE_SIZE_Z_ARB: u32 = 0x9197;
pub const GL_VIVIDLIGHT_NV: u32 = 0x92A6;
pub const GL_VOLATILE_APPLE: u32 = 0x8A1A;
pub const GL_WAIT_FAILED: u32 = 0x911D;
pub const GL_WARPS_PER_SM_NV: u32 = 0x933A;
pub const GL_WARP_SIZE_NV: u32 = 0x9339;
pub const GL_WEIGHTED_AVERAGE_ARB: u32 = 0x9367;
pub const GL_WEIGHTED_AVERAGE_EXT: u32 = 0x9367;
pub const GL_WEIGHT_ARRAY_ARB: u32 = 0x86AD;
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889E;
pub const GL_WEIGHT_ARRAY_POINTER_ARB: u32 = 0x86AC;
pub const GL_WEIGHT_ARRAY_SIZE_ARB: u32 = 0x86AB;
pub const GL_WEIGHT_ARRAY_STRIDE_ARB: u32 = 0x86AA;
pub const GL_WEIGHT_ARRAY_TYPE_ARB: u32 = 0x86A9;
pub const GL_WEIGHT_SUM_UNITY_ARB: u32 = 0x86A6;
pub const GL_WIDE_LINE_HINT_PGI: u32 = 0x1A222;
pub const GL_WINDOW_RECTANGLE_EXT: u32 = 0x8F12;
pub const GL_WINDOW_RECTANGLE_MODE_EXT: u32 = 0x8F13;
pub const GL_WRAP_BORDER_SUN: u32 = 0x81D4;
pub const GL_WRITE_DISCARD_NV: u32 = 0x88BE;
pub const GL_WRITE_ONLY: u32 = 0x88B9;
pub const GL_WRITE_ONLY_ARB: u32 = 0x88B9;
pub const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV: u32 = 0x887A;
pub const GL_WRITE_PIXEL_DATA_RANGE_NV: u32 = 0x8878;
pub const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV: u32 = 0x887C;
pub const GL_W_EXT: u32 = 0x87D8;
pub const GL_XOR: u32 = 0x1506;
pub const GL_XOR_NV: u32 = 0x1506;
pub const GL_X_EXT: u32 = 0x87D5;
pub const GL_YCBAYCR8A_4224_NV: u32 = 0x9032;
pub const GL_YCBCR_422_APPLE: u32 = 0x85B9;
pub const GL_YCBCR_MESA: u32 = 0x8757;
pub const GL_YCBYCR8_422_NV: u32 = 0x9031;
pub const GL_YCRCBA_SGIX: u32 = 0x8319;
pub const GL_YCRCB_422_SGIX: u32 = 0x81BB;
pub const GL_YCRCB_444_SGIX: u32 = 0x81BC;
pub const GL_YCRCB_SGIX: u32 = 0x8318;
pub const GL_Y_EXT: u32 = 0x87D6;
pub const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV: u32 = 0x9036;
pub const GL_Z4Y12Z4CB12Z4CR12_444_NV: u32 = 0x9037;
pub const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV: u32 = 0x9035;
pub const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV: u32 = 0x9034;
pub const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV: u32 = 0x9033;
pub const GL_ZERO: u32 = 0;
pub const GL_ZERO_EXT: u32 = 0x87DD;
pub const GL_ZERO_TO_ONE: u32 = 0x935F;
pub const GL_Z_EXT: u32 = 0x87D7;

pub const gl = struct {
    AccumxOES: glAccumxOES = undefined,
    AcquireKeyedMutexWin32EXT: glAcquireKeyedMutexWin32EXT = undefined,
    ActiveProgramEXT: glActiveProgramEXT = undefined,
    ActiveShaderProgram: glActiveShaderProgram = undefined,
    ActiveStencilFaceEXT: glActiveStencilFaceEXT = undefined,
    ActiveTexture: glActiveTexture = undefined,
    ActiveTextureARB: glActiveTextureARB = undefined,
    ActiveVaryingNV: glActiveVaryingNV = undefined,
    AlphaFragmentOp1ATI: glAlphaFragmentOp1ATI = undefined,
    AlphaFragmentOp2ATI: glAlphaFragmentOp2ATI = undefined,
    AlphaFragmentOp3ATI: glAlphaFragmentOp3ATI = undefined,
    AlphaFuncxOES: glAlphaFuncxOES = undefined,
    AlphaToCoverageDitherControlNV: glAlphaToCoverageDitherControlNV = undefined,
    ApplyFramebufferAttachmentCMAAINTEL: glApplyFramebufferAttachmentCMAAINTEL = undefined,
    ApplyTextureEXT: glApplyTextureEXT = undefined,
    AreProgramsResidentNV: glAreProgramsResidentNV = undefined,
    AreTexturesResidentEXT: glAreTexturesResidentEXT = undefined,
    ArrayElementEXT: glArrayElementEXT = undefined,
    ArrayObjectATI: glArrayObjectATI = undefined,
    AsyncCopyBufferSubDataNVX: glAsyncCopyBufferSubDataNVX = undefined,
    AsyncCopyImageSubDataNVX: glAsyncCopyImageSubDataNVX = undefined,
    AsyncMarkerSGIX: glAsyncMarkerSGIX = undefined,
    AttachObjectARB: glAttachObjectARB = undefined,
    AttachShader: glAttachShader = undefined,
    BeginConditionalRender: glBeginConditionalRender = undefined,
    BeginConditionalRenderNV: glBeginConditionalRenderNV = undefined,
    BeginConditionalRenderNVX: glBeginConditionalRenderNVX = undefined,
    BeginFragmentShaderATI: glBeginFragmentShaderATI = undefined,
    BeginOcclusionQueryNV: glBeginOcclusionQueryNV = undefined,
    BeginPerfMonitorAMD: glBeginPerfMonitorAMD = undefined,
    BeginPerfQueryINTEL: glBeginPerfQueryINTEL = undefined,
    BeginQuery: glBeginQuery = undefined,
    BeginQueryARB: glBeginQueryARB = undefined,
    BeginQueryIndexed: glBeginQueryIndexed = undefined,
    BeginTransformFeedback: glBeginTransformFeedback = undefined,
    BeginTransformFeedbackEXT: glBeginTransformFeedbackEXT = undefined,
    BeginTransformFeedbackNV: glBeginTransformFeedbackNV = undefined,
    BeginVertexShaderEXT: glBeginVertexShaderEXT = undefined,
    BeginVideoCaptureNV: glBeginVideoCaptureNV = undefined,
    BindAttribLocation: glBindAttribLocation = undefined,
    BindAttribLocationARB: glBindAttribLocationARB = undefined,
    BindBuffer: glBindBuffer = undefined,
    BindBufferARB: glBindBufferARB = undefined,
    BindBufferBase: glBindBufferBase = undefined,
    BindBufferBaseEXT: glBindBufferBaseEXT = undefined,
    BindBufferBaseNV: glBindBufferBaseNV = undefined,
    BindBufferOffsetEXT: glBindBufferOffsetEXT = undefined,
    BindBufferOffsetNV: glBindBufferOffsetNV = undefined,
    BindBufferRange: glBindBufferRange = undefined,
    BindBufferRangeEXT: glBindBufferRangeEXT = undefined,
    BindBufferRangeNV: glBindBufferRangeNV = undefined,
    BindBuffersBase: glBindBuffersBase = undefined,
    BindBuffersRange: glBindBuffersRange = undefined,
    BindFragDataLocation: glBindFragDataLocation = undefined,
    BindFragDataLocationEXT: glBindFragDataLocationEXT = undefined,
    BindFragDataLocationIndexed: glBindFragDataLocationIndexed = undefined,
    BindFragmentShaderATI: glBindFragmentShaderATI = undefined,
    BindFramebuffer: glBindFramebuffer = undefined,
    BindFramebufferEXT: glBindFramebufferEXT = undefined,
    BindImageTexture: glBindImageTexture = undefined,
    BindImageTextureEXT: glBindImageTextureEXT = undefined,
    BindImageTextures: glBindImageTextures = undefined,
    BindLightParameterEXT: glBindLightParameterEXT = undefined,
    BindMaterialParameterEXT: glBindMaterialParameterEXT = undefined,
    BindMultiTextureEXT: glBindMultiTextureEXT = undefined,
    BindParameterEXT: glBindParameterEXT = undefined,
    BindProgramARB: glBindProgramARB = undefined,
    BindProgramNV: glBindProgramNV = undefined,
    BindProgramPipeline: glBindProgramPipeline = undefined,
    BindRenderbuffer: glBindRenderbuffer = undefined,
    BindRenderbufferEXT: glBindRenderbufferEXT = undefined,
    BindSampler: glBindSampler = undefined,
    BindSamplers: glBindSamplers = undefined,
    BindShadingRateImageNV: glBindShadingRateImageNV = undefined,
    BindTexGenParameterEXT: glBindTexGenParameterEXT = undefined,
    BindTexture: glBindTexture = undefined,
    BindTextureEXT: glBindTextureEXT = undefined,
    BindTextureUnit: glBindTextureUnit = undefined,
    BindTextureUnitParameterEXT: glBindTextureUnitParameterEXT = undefined,
    BindTextures: glBindTextures = undefined,
    BindTransformFeedback: glBindTransformFeedback = undefined,
    BindTransformFeedbackNV: glBindTransformFeedbackNV = undefined,
    BindVertexArray: glBindVertexArray = undefined,
    BindVertexArrayAPPLE: glBindVertexArrayAPPLE = undefined,
    BindVertexBuffer: glBindVertexBuffer = undefined,
    BindVertexBuffers: glBindVertexBuffers = undefined,
    BindVertexShaderEXT: glBindVertexShaderEXT = undefined,
    BindVideoCaptureStreamBufferNV: glBindVideoCaptureStreamBufferNV = undefined,
    BindVideoCaptureStreamTextureNV: glBindVideoCaptureStreamTextureNV = undefined,
    Binormal3bEXT: glBinormal3bEXT = undefined,
    Binormal3bvEXT: glBinormal3bvEXT = undefined,
    Binormal3dEXT: glBinormal3dEXT = undefined,
    Binormal3dvEXT: glBinormal3dvEXT = undefined,
    Binormal3fEXT: glBinormal3fEXT = undefined,
    Binormal3fvEXT: glBinormal3fvEXT = undefined,
    Binormal3iEXT: glBinormal3iEXT = undefined,
    Binormal3ivEXT: glBinormal3ivEXT = undefined,
    Binormal3sEXT: glBinormal3sEXT = undefined,
    Binormal3svEXT: glBinormal3svEXT = undefined,
    BinormalPointerEXT: glBinormalPointerEXT = undefined,
    BitmapxOES: glBitmapxOES = undefined,
    BlendBarrierKHR: glBlendBarrierKHR = undefined,
    BlendBarrierNV: glBlendBarrierNV = undefined,
    BlendColor: glBlendColor = undefined,
    BlendColorEXT: glBlendColorEXT = undefined,
    BlendColorxOES: glBlendColorxOES = undefined,
    BlendEquation: glBlendEquation = undefined,
    BlendEquationEXT: glBlendEquationEXT = undefined,
    BlendEquationIndexedAMD: glBlendEquationIndexedAMD = undefined,
    BlendEquationSeparate: glBlendEquationSeparate = undefined,
    BlendEquationSeparateEXT: glBlendEquationSeparateEXT = undefined,
    BlendEquationSeparateIndexedAMD: glBlendEquationSeparateIndexedAMD = undefined,
    BlendEquationSeparateiARB: glBlendEquationSeparateiARB = undefined,
    BlendEquationiARB: glBlendEquationiARB = undefined,
    BlendFunc: glBlendFunc = undefined,
    BlendFuncIndexedAMD: glBlendFuncIndexedAMD = undefined,
    BlendFuncSeparate: glBlendFuncSeparate = undefined,
    BlendFuncSeparateEXT: glBlendFuncSeparateEXT = undefined,
    BlendFuncSeparateINGR: glBlendFuncSeparateINGR = undefined,
    BlendFuncSeparateIndexedAMD: glBlendFuncSeparateIndexedAMD = undefined,
    BlendFuncSeparateiARB: glBlendFuncSeparateiARB = undefined,
    BlendFunciARB: glBlendFunciARB = undefined,
    BlendParameteriNV: glBlendParameteriNV = undefined,
    BlitFramebuffer: glBlitFramebuffer = undefined,
    BlitFramebufferEXT: glBlitFramebufferEXT = undefined,
    BlitNamedFramebuffer: glBlitNamedFramebuffer = undefined,
    BufferAddressRangeNV: glBufferAddressRangeNV = undefined,
    BufferAttachMemoryNV: glBufferAttachMemoryNV = undefined,
    BufferData: glBufferData = undefined,
    BufferDataARB: glBufferDataARB = undefined,
    BufferPageCommitmentARB: glBufferPageCommitmentARB = undefined,
    BufferPageCommitmentMemNV: glBufferPageCommitmentMemNV = undefined,
    BufferParameteriAPPLE: glBufferParameteriAPPLE = undefined,
    BufferStorage: glBufferStorage = undefined,
    BufferStorageExternalEXT: glBufferStorageExternalEXT = undefined,
    BufferStorageMemEXT: glBufferStorageMemEXT = undefined,
    BufferSubData: glBufferSubData = undefined,
    BufferSubDataARB: glBufferSubDataARB = undefined,
    CallCommandListNV: glCallCommandListNV = undefined,
    CheckFramebufferStatus: glCheckFramebufferStatus = undefined,
    CheckFramebufferStatusEXT: glCheckFramebufferStatusEXT = undefined,
    CheckNamedFramebufferStatus: glCheckNamedFramebufferStatus = undefined,
    CheckNamedFramebufferStatusEXT: glCheckNamedFramebufferStatusEXT = undefined,
    ClampColor: glClampColor = undefined,
    ClampColorARB: glClampColorARB = undefined,
    Clear: glClear = undefined,
    ClearAccumxOES: glClearAccumxOES = undefined,
    ClearBufferData: glClearBufferData = undefined,
    ClearBufferSubData: glClearBufferSubData = undefined,
    ClearBufferfi: glClearBufferfi = undefined,
    ClearBufferfv: glClearBufferfv = undefined,
    ClearBufferiv: glClearBufferiv = undefined,
    ClearBufferuiv: glClearBufferuiv = undefined,
    ClearColor: glClearColor = undefined,
    ClearColorIiEXT: glClearColorIiEXT = undefined,
    ClearColorIuiEXT: glClearColorIuiEXT = undefined,
    ClearColorxOES: glClearColorxOES = undefined,
    ClearDepth: glClearDepth = undefined,
    ClearDepthdNV: glClearDepthdNV = undefined,
    ClearDepthf: glClearDepthf = undefined,
    ClearDepthfOES: glClearDepthfOES = undefined,
    ClearDepthxOES: glClearDepthxOES = undefined,
    ClearNamedBufferData: glClearNamedBufferData = undefined,
    ClearNamedBufferDataEXT: glClearNamedBufferDataEXT = undefined,
    ClearNamedBufferSubData: glClearNamedBufferSubData = undefined,
    ClearNamedBufferSubDataEXT: glClearNamedBufferSubDataEXT = undefined,
    ClearNamedFramebufferfi: glClearNamedFramebufferfi = undefined,
    ClearNamedFramebufferfv: glClearNamedFramebufferfv = undefined,
    ClearNamedFramebufferiv: glClearNamedFramebufferiv = undefined,
    ClearNamedFramebufferuiv: glClearNamedFramebufferuiv = undefined,
    ClearStencil: glClearStencil = undefined,
    ClearTexImage: glClearTexImage = undefined,
    ClearTexSubImage: glClearTexSubImage = undefined,
    ClientActiveTextureARB: glClientActiveTextureARB = undefined,
    ClientActiveVertexStreamATI: glClientActiveVertexStreamATI = undefined,
    ClientAttribDefaultEXT: glClientAttribDefaultEXT = undefined,
    ClientWaitSemaphoreui64NVX: glClientWaitSemaphoreui64NVX = undefined,
    ClientWaitSync: glClientWaitSync = undefined,
    ClipControl: glClipControl = undefined,
    ClipPlanefOES: glClipPlanefOES = undefined,
    ClipPlanexOES: glClipPlanexOES = undefined,
    Color3fVertex3fSUN: glColor3fVertex3fSUN = undefined,
    Color3fVertex3fvSUN: glColor3fVertex3fvSUN = undefined,
    Color3hNV: glColor3hNV = undefined,
    Color3hvNV: glColor3hvNV = undefined,
    Color3xOES: glColor3xOES = undefined,
    Color3xvOES: glColor3xvOES = undefined,
    Color4fNormal3fVertex3fSUN: glColor4fNormal3fVertex3fSUN = undefined,
    Color4fNormal3fVertex3fvSUN: glColor4fNormal3fVertex3fvSUN = undefined,
    Color4hNV: glColor4hNV = undefined,
    Color4hvNV: glColor4hvNV = undefined,
    Color4ubVertex2fSUN: glColor4ubVertex2fSUN = undefined,
    Color4ubVertex2fvSUN: glColor4ubVertex2fvSUN = undefined,
    Color4ubVertex3fSUN: glColor4ubVertex3fSUN = undefined,
    Color4ubVertex3fvSUN: glColor4ubVertex3fvSUN = undefined,
    Color4xOES: glColor4xOES = undefined,
    Color4xvOES: glColor4xvOES = undefined,
    ColorFormatNV: glColorFormatNV = undefined,
    ColorFragmentOp1ATI: glColorFragmentOp1ATI = undefined,
    ColorFragmentOp2ATI: glColorFragmentOp2ATI = undefined,
    ColorFragmentOp3ATI: glColorFragmentOp3ATI = undefined,
    ColorMask: glColorMask = undefined,
    ColorMaskIndexedEXT: glColorMaskIndexedEXT = undefined,
    ColorMaski: glColorMaski = undefined,
    ColorPointerEXT: glColorPointerEXT = undefined,
    ColorPointerListIBM: glColorPointerListIBM = undefined,
    ColorPointervINTEL: glColorPointervINTEL = undefined,
    ColorSubTableEXT: glColorSubTableEXT = undefined,
    ColorTableEXT: glColorTableEXT = undefined,
    ColorTableParameterfvSGI: glColorTableParameterfvSGI = undefined,
    ColorTableParameterivSGI: glColorTableParameterivSGI = undefined,
    ColorTableSGI: glColorTableSGI = undefined,
    CombinerInputNV: glCombinerInputNV = undefined,
    CombinerOutputNV: glCombinerOutputNV = undefined,
    CombinerParameterfNV: glCombinerParameterfNV = undefined,
    CombinerParameterfvNV: glCombinerParameterfvNV = undefined,
    CombinerParameteriNV: glCombinerParameteriNV = undefined,
    CombinerParameterivNV: glCombinerParameterivNV = undefined,
    CombinerStageParameterfvNV: glCombinerStageParameterfvNV = undefined,
    CommandListSegmentsNV: glCommandListSegmentsNV = undefined,
    CompileCommandListNV: glCompileCommandListNV = undefined,
    CompileShader: glCompileShader = undefined,
    CompileShaderARB: glCompileShaderARB = undefined,
    CompileShaderIncludeARB: glCompileShaderIncludeARB = undefined,
    CompressedMultiTexImage1DEXT: glCompressedMultiTexImage1DEXT = undefined,
    CompressedMultiTexImage2DEXT: glCompressedMultiTexImage2DEXT = undefined,
    CompressedMultiTexImage3DEXT: glCompressedMultiTexImage3DEXT = undefined,
    CompressedMultiTexSubImage1DEXT: glCompressedMultiTexSubImage1DEXT = undefined,
    CompressedMultiTexSubImage2DEXT: glCompressedMultiTexSubImage2DEXT = undefined,
    CompressedMultiTexSubImage3DEXT: glCompressedMultiTexSubImage3DEXT = undefined,
    CompressedTexImage1D: glCompressedTexImage1D = undefined,
    CompressedTexImage1DARB: glCompressedTexImage1DARB = undefined,
    CompressedTexImage2D: glCompressedTexImage2D = undefined,
    CompressedTexImage2DARB: glCompressedTexImage2DARB = undefined,
    CompressedTexImage3D: glCompressedTexImage3D = undefined,
    CompressedTexImage3DARB: glCompressedTexImage3DARB = undefined,
    CompressedTexSubImage1D: glCompressedTexSubImage1D = undefined,
    CompressedTexSubImage1DARB: glCompressedTexSubImage1DARB = undefined,
    CompressedTexSubImage2D: glCompressedTexSubImage2D = undefined,
    CompressedTexSubImage2DARB: glCompressedTexSubImage2DARB = undefined,
    CompressedTexSubImage3D: glCompressedTexSubImage3D = undefined,
    CompressedTexSubImage3DARB: glCompressedTexSubImage3DARB = undefined,
    CompressedTextureImage1DEXT: glCompressedTextureImage1DEXT = undefined,
    CompressedTextureImage2DEXT: glCompressedTextureImage2DEXT = undefined,
    CompressedTextureImage3DEXT: glCompressedTextureImage3DEXT = undefined,
    CompressedTextureSubImage1D: glCompressedTextureSubImage1D = undefined,
    CompressedTextureSubImage1DEXT: glCompressedTextureSubImage1DEXT = undefined,
    CompressedTextureSubImage2D: glCompressedTextureSubImage2D = undefined,
    CompressedTextureSubImage2DEXT: glCompressedTextureSubImage2DEXT = undefined,
    CompressedTextureSubImage3D: glCompressedTextureSubImage3D = undefined,
    CompressedTextureSubImage3DEXT: glCompressedTextureSubImage3DEXT = undefined,
    ConservativeRasterParameterfNV: glConservativeRasterParameterfNV = undefined,
    ConservativeRasterParameteriNV: glConservativeRasterParameteriNV = undefined,
    ConvolutionFilter1DEXT: glConvolutionFilter1DEXT = undefined,
    ConvolutionFilter2DEXT: glConvolutionFilter2DEXT = undefined,
    ConvolutionParameterfEXT: glConvolutionParameterfEXT = undefined,
    ConvolutionParameterfvEXT: glConvolutionParameterfvEXT = undefined,
    ConvolutionParameteriEXT: glConvolutionParameteriEXT = undefined,
    ConvolutionParameterivEXT: glConvolutionParameterivEXT = undefined,
    ConvolutionParameterxOES: glConvolutionParameterxOES = undefined,
    ConvolutionParameterxvOES: glConvolutionParameterxvOES = undefined,
    CopyBufferSubData: glCopyBufferSubData = undefined,
    CopyColorSubTableEXT: glCopyColorSubTableEXT = undefined,
    CopyColorTableSGI: glCopyColorTableSGI = undefined,
    CopyConvolutionFilter1DEXT: glCopyConvolutionFilter1DEXT = undefined,
    CopyConvolutionFilter2DEXT: glCopyConvolutionFilter2DEXT = undefined,
    CopyImageSubData: glCopyImageSubData = undefined,
    CopyImageSubDataNV: glCopyImageSubDataNV = undefined,
    CopyMultiTexImage1DEXT: glCopyMultiTexImage1DEXT = undefined,
    CopyMultiTexImage2DEXT: glCopyMultiTexImage2DEXT = undefined,
    CopyMultiTexSubImage1DEXT: glCopyMultiTexSubImage1DEXT = undefined,
    CopyMultiTexSubImage2DEXT: glCopyMultiTexSubImage2DEXT = undefined,
    CopyMultiTexSubImage3DEXT: glCopyMultiTexSubImage3DEXT = undefined,
    CopyNamedBufferSubData: glCopyNamedBufferSubData = undefined,
    CopyPathNV: glCopyPathNV = undefined,
    CopyTexImage1D: glCopyTexImage1D = undefined,
    CopyTexImage1DEXT: glCopyTexImage1DEXT = undefined,
    CopyTexImage2D: glCopyTexImage2D = undefined,
    CopyTexImage2DEXT: glCopyTexImage2DEXT = undefined,
    CopyTexSubImage1D: glCopyTexSubImage1D = undefined,
    CopyTexSubImage1DEXT: glCopyTexSubImage1DEXT = undefined,
    CopyTexSubImage2D: glCopyTexSubImage2D = undefined,
    CopyTexSubImage2DEXT: glCopyTexSubImage2DEXT = undefined,
    CopyTexSubImage3D: glCopyTexSubImage3D = undefined,
    CopyTexSubImage3DEXT: glCopyTexSubImage3DEXT = undefined,
    CopyTextureImage1DEXT: glCopyTextureImage1DEXT = undefined,
    CopyTextureImage2DEXT: glCopyTextureImage2DEXT = undefined,
    CopyTextureSubImage1D: glCopyTextureSubImage1D = undefined,
    CopyTextureSubImage1DEXT: glCopyTextureSubImage1DEXT = undefined,
    CopyTextureSubImage2D: glCopyTextureSubImage2D = undefined,
    CopyTextureSubImage2DEXT: glCopyTextureSubImage2DEXT = undefined,
    CopyTextureSubImage3D: glCopyTextureSubImage3D = undefined,
    CopyTextureSubImage3DEXT: glCopyTextureSubImage3DEXT = undefined,
    CoverFillPathInstancedNV: glCoverFillPathInstancedNV = undefined,
    CoverFillPathNV: glCoverFillPathNV = undefined,
    CoverStrokePathInstancedNV: glCoverStrokePathInstancedNV = undefined,
    CoverStrokePathNV: glCoverStrokePathNV = undefined,
    CoverageModulationNV: glCoverageModulationNV = undefined,
    CoverageModulationTableNV: glCoverageModulationTableNV = undefined,
    CreateBuffers: glCreateBuffers = undefined,
    CreateCommandListsNV: glCreateCommandListsNV = undefined,
    CreateFramebuffers: glCreateFramebuffers = undefined,
    CreateMemoryObjectsEXT: glCreateMemoryObjectsEXT = undefined,
    CreatePerfQueryINTEL: glCreatePerfQueryINTEL = undefined,
    CreateProgram: glCreateProgram = undefined,
    CreateProgramObjectARB: glCreateProgramObjectARB = undefined,
    CreateProgramPipelines: glCreateProgramPipelines = undefined,
    CreateProgressFenceNVX: glCreateProgressFenceNVX = undefined,
    CreateQueries: glCreateQueries = undefined,
    CreateRenderbuffers: glCreateRenderbuffers = undefined,
    CreateSamplers: glCreateSamplers = undefined,
    CreateSemaphoresNV: glCreateSemaphoresNV = undefined,
    CreateShader: glCreateShader = undefined,
    CreateShaderObjectARB: glCreateShaderObjectARB = undefined,
    CreateShaderProgramEXT: glCreateShaderProgramEXT = undefined,
    CreateShaderProgramv: glCreateShaderProgramv = undefined,
    CreateStatesNV: glCreateStatesNV = undefined,
    CreateSyncFromCLeventARB: glCreateSyncFromCLeventARB = undefined,
    CreateTextures: glCreateTextures = undefined,
    CreateTransformFeedbacks: glCreateTransformFeedbacks = undefined,
    CreateVertexArrays: glCreateVertexArrays = undefined,
    CullFace: glCullFace = undefined,
    CullParameterdvEXT: glCullParameterdvEXT = undefined,
    CullParameterfvEXT: glCullParameterfvEXT = undefined,
    CurrentPaletteMatrixARB: glCurrentPaletteMatrixARB = undefined,
    DebugMessageCallback: glDebugMessageCallback = undefined,
    DebugMessageCallbackAMD: glDebugMessageCallbackAMD = undefined,
    DebugMessageCallbackARB: glDebugMessageCallbackARB = undefined,
    DebugMessageControl: glDebugMessageControl = undefined,
    DebugMessageControlARB: glDebugMessageControlARB = undefined,
    DebugMessageEnableAMD: glDebugMessageEnableAMD = undefined,
    DebugMessageInsert: glDebugMessageInsert = undefined,
    DebugMessageInsertAMD: glDebugMessageInsertAMD = undefined,
    DebugMessageInsertARB: glDebugMessageInsertARB = undefined,
    DeformSGIX: glDeformSGIX = undefined,
    DeformationMap3dSGIX: glDeformationMap3dSGIX = undefined,
    DeformationMap3fSGIX: glDeformationMap3fSGIX = undefined,
    DeleteAsyncMarkersSGIX: glDeleteAsyncMarkersSGIX = undefined,
    DeleteBuffers: glDeleteBuffers = undefined,
    DeleteBuffersARB: glDeleteBuffersARB = undefined,
    DeleteCommandListsNV: glDeleteCommandListsNV = undefined,
    DeleteFencesAPPLE: glDeleteFencesAPPLE = undefined,
    DeleteFencesNV: glDeleteFencesNV = undefined,
    DeleteFragmentShaderATI: glDeleteFragmentShaderATI = undefined,
    DeleteFramebuffers: glDeleteFramebuffers = undefined,
    DeleteFramebuffersEXT: glDeleteFramebuffersEXT = undefined,
    DeleteMemoryObjectsEXT: glDeleteMemoryObjectsEXT = undefined,
    DeleteNamedStringARB: glDeleteNamedStringARB = undefined,
    DeleteNamesAMD: glDeleteNamesAMD = undefined,
    DeleteObjectARB: glDeleteObjectARB = undefined,
    DeleteOcclusionQueriesNV: glDeleteOcclusionQueriesNV = undefined,
    DeletePathsNV: glDeletePathsNV = undefined,
    DeletePerfMonitorsAMD: glDeletePerfMonitorsAMD = undefined,
    DeletePerfQueryINTEL: glDeletePerfQueryINTEL = undefined,
    DeleteProgram: glDeleteProgram = undefined,
    DeleteProgramPipelines: glDeleteProgramPipelines = undefined,
    DeleteProgramsARB: glDeleteProgramsARB = undefined,
    DeleteProgramsNV: glDeleteProgramsNV = undefined,
    DeleteQueries: glDeleteQueries = undefined,
    DeleteQueriesARB: glDeleteQueriesARB = undefined,
    DeleteQueryResourceTagNV: glDeleteQueryResourceTagNV = undefined,
    DeleteRenderbuffers: glDeleteRenderbuffers = undefined,
    DeleteRenderbuffersEXT: glDeleteRenderbuffersEXT = undefined,
    DeleteSamplers: glDeleteSamplers = undefined,
    DeleteSemaphoresEXT: glDeleteSemaphoresEXT = undefined,
    DeleteShader: glDeleteShader = undefined,
    DeleteStatesNV: glDeleteStatesNV = undefined,
    DeleteSync: glDeleteSync = undefined,
    DeleteTextures: glDeleteTextures = undefined,
    DeleteTexturesEXT: glDeleteTexturesEXT = undefined,
    DeleteTransformFeedbacks: glDeleteTransformFeedbacks = undefined,
    DeleteTransformFeedbacksNV: glDeleteTransformFeedbacksNV = undefined,
    DeleteVertexArrays: glDeleteVertexArrays = undefined,
    DeleteVertexArraysAPPLE: glDeleteVertexArraysAPPLE = undefined,
    DeleteVertexShaderEXT: glDeleteVertexShaderEXT = undefined,
    DepthBoundsEXT: glDepthBoundsEXT = undefined,
    DepthBoundsdNV: glDepthBoundsdNV = undefined,
    DepthFunc: glDepthFunc = undefined,
    DepthMask: glDepthMask = undefined,
    DepthRange: glDepthRange = undefined,
    DepthRangeArraydvNV: glDepthRangeArraydvNV = undefined,
    DepthRangeArrayv: glDepthRangeArrayv = undefined,
    DepthRangeIndexed: glDepthRangeIndexed = undefined,
    DepthRangeIndexeddNV: glDepthRangeIndexeddNV = undefined,
    DepthRangedNV: glDepthRangedNV = undefined,
    DepthRangef: glDepthRangef = undefined,
    DepthRangefOES: glDepthRangefOES = undefined,
    DepthRangexOES: glDepthRangexOES = undefined,
    DetachObjectARB: glDetachObjectARB = undefined,
    DetachShader: glDetachShader = undefined,
    DetailTexFuncSGIS: glDetailTexFuncSGIS = undefined,
    Disable: glDisable = undefined,
    DisableClientStateIndexedEXT: glDisableClientStateIndexedEXT = undefined,
    DisableClientStateiEXT: glDisableClientStateiEXT = undefined,
    DisableIndexedEXT: glDisableIndexedEXT = undefined,
    DisableVariantClientStateEXT: glDisableVariantClientStateEXT = undefined,
    DisableVertexArrayAttrib: glDisableVertexArrayAttrib = undefined,
    DisableVertexArrayAttribEXT: glDisableVertexArrayAttribEXT = undefined,
    DisableVertexArrayEXT: glDisableVertexArrayEXT = undefined,
    DisableVertexAttribAPPLE: glDisableVertexAttribAPPLE = undefined,
    DisableVertexAttribArray: glDisableVertexAttribArray = undefined,
    DisableVertexAttribArrayARB: glDisableVertexAttribArrayARB = undefined,
    Disablei: glDisablei = undefined,
    DispatchCompute: glDispatchCompute = undefined,
    DispatchComputeGroupSizeARB: glDispatchComputeGroupSizeARB = undefined,
    DispatchComputeIndirect: glDispatchComputeIndirect = undefined,
    DrawArrays: glDrawArrays = undefined,
    DrawArraysEXT: glDrawArraysEXT = undefined,
    DrawArraysIndirect: glDrawArraysIndirect = undefined,
    DrawArraysInstanced: glDrawArraysInstanced = undefined,
    DrawArraysInstancedARB: glDrawArraysInstancedARB = undefined,
    DrawArraysInstancedBaseInstance: glDrawArraysInstancedBaseInstance = undefined,
    DrawArraysInstancedEXT: glDrawArraysInstancedEXT = undefined,
    DrawBuffer: glDrawBuffer = undefined,
    DrawBuffers: glDrawBuffers = undefined,
    DrawBuffersARB: glDrawBuffersARB = undefined,
    DrawBuffersATI: glDrawBuffersATI = undefined,
    DrawCommandsAddressNV: glDrawCommandsAddressNV = undefined,
    DrawCommandsNV: glDrawCommandsNV = undefined,
    DrawCommandsStatesAddressNV: glDrawCommandsStatesAddressNV = undefined,
    DrawCommandsStatesNV: glDrawCommandsStatesNV = undefined,
    DrawElementArrayAPPLE: glDrawElementArrayAPPLE = undefined,
    DrawElementArrayATI: glDrawElementArrayATI = undefined,
    DrawElements: glDrawElements = undefined,
    DrawElementsBaseVertex: glDrawElementsBaseVertex = undefined,
    DrawElementsIndirect: glDrawElementsIndirect = undefined,
    DrawElementsInstanced: glDrawElementsInstanced = undefined,
    DrawElementsInstancedARB: glDrawElementsInstancedARB = undefined,
    DrawElementsInstancedBaseInstance: glDrawElementsInstancedBaseInstance = undefined,
    DrawElementsInstancedBaseVertex: glDrawElementsInstancedBaseVertex = undefined,
    DrawElementsInstancedBaseVertexBaseInstance: glDrawElementsInstancedBaseVertexBaseInstance = undefined,
    DrawElementsInstancedEXT: glDrawElementsInstancedEXT = undefined,
    DrawMeshArraysSUN: glDrawMeshArraysSUN = undefined,
    DrawMeshTasksIndirectNV: glDrawMeshTasksIndirectNV = undefined,
    DrawMeshTasksNV: glDrawMeshTasksNV = undefined,
    DrawRangeElementArrayAPPLE: glDrawRangeElementArrayAPPLE = undefined,
    DrawRangeElementArrayATI: glDrawRangeElementArrayATI = undefined,
    DrawRangeElements: glDrawRangeElements = undefined,
    DrawRangeElementsBaseVertex: glDrawRangeElementsBaseVertex = undefined,
    DrawRangeElementsEXT: glDrawRangeElementsEXT = undefined,
    DrawTextureNV: glDrawTextureNV = undefined,
    DrawTransformFeedback: glDrawTransformFeedback = undefined,
    DrawTransformFeedbackInstanced: glDrawTransformFeedbackInstanced = undefined,
    DrawTransformFeedbackNV: glDrawTransformFeedbackNV = undefined,
    DrawTransformFeedbackStream: glDrawTransformFeedbackStream = undefined,
    DrawTransformFeedbackStreamInstanced: glDrawTransformFeedbackStreamInstanced = undefined,
    DrawVkImageNV: glDrawVkImageNV = undefined,
    EGLImageTargetTexStorageEXT: glEGLImageTargetTexStorageEXT = undefined,
    EGLImageTargetTextureStorageEXT: glEGLImageTargetTextureStorageEXT = undefined,
    EdgeFlagFormatNV: glEdgeFlagFormatNV = undefined,
    EdgeFlagPointerEXT: glEdgeFlagPointerEXT = undefined,
    EdgeFlagPointerListIBM: glEdgeFlagPointerListIBM = undefined,
    ElementPointerAPPLE: glElementPointerAPPLE = undefined,
    ElementPointerATI: glElementPointerATI = undefined,
    Enable: glEnable = undefined,
    EnableClientStateIndexedEXT: glEnableClientStateIndexedEXT = undefined,
    EnableClientStateiEXT: glEnableClientStateiEXT = undefined,
    EnableIndexedEXT: glEnableIndexedEXT = undefined,
    EnableVariantClientStateEXT: glEnableVariantClientStateEXT = undefined,
    EnableVertexArrayAttrib: glEnableVertexArrayAttrib = undefined,
    EnableVertexArrayAttribEXT: glEnableVertexArrayAttribEXT = undefined,
    EnableVertexArrayEXT: glEnableVertexArrayEXT = undefined,
    EnableVertexAttribAPPLE: glEnableVertexAttribAPPLE = undefined,
    EnableVertexAttribArray: glEnableVertexAttribArray = undefined,
    EnableVertexAttribArrayARB: glEnableVertexAttribArrayARB = undefined,
    Enablei: glEnablei = undefined,
    EndConditionalRender: glEndConditionalRender = undefined,
    EndConditionalRenderNV: glEndConditionalRenderNV = undefined,
    EndConditionalRenderNVX: glEndConditionalRenderNVX = undefined,
    EndFragmentShaderATI: glEndFragmentShaderATI = undefined,
    EndOcclusionQueryNV: glEndOcclusionQueryNV = undefined,
    EndPerfMonitorAMD: glEndPerfMonitorAMD = undefined,
    EndPerfQueryINTEL: glEndPerfQueryINTEL = undefined,
    EndQuery: glEndQuery = undefined,
    EndQueryARB: glEndQueryARB = undefined,
    EndQueryIndexed: glEndQueryIndexed = undefined,
    EndTransformFeedback: glEndTransformFeedback = undefined,
    EndTransformFeedbackEXT: glEndTransformFeedbackEXT = undefined,
    EndTransformFeedbackNV: glEndTransformFeedbackNV = undefined,
    EndVertexShaderEXT: glEndVertexShaderEXT = undefined,
    EndVideoCaptureNV: glEndVideoCaptureNV = undefined,
    EvalCoord1xOES: glEvalCoord1xOES = undefined,
    EvalCoord1xvOES: glEvalCoord1xvOES = undefined,
    EvalCoord2xOES: glEvalCoord2xOES = undefined,
    EvalCoord2xvOES: glEvalCoord2xvOES = undefined,
    EvalMapsNV: glEvalMapsNV = undefined,
    EvaluateDepthValuesARB: glEvaluateDepthValuesARB = undefined,
    ExecuteProgramNV: glExecuteProgramNV = undefined,
    ExtractComponentEXT: glExtractComponentEXT = undefined,
    FeedbackBufferxOES: glFeedbackBufferxOES = undefined,
    FenceSync: glFenceSync = undefined,
    FinalCombinerInputNV: glFinalCombinerInputNV = undefined,
    Finish: glFinish = undefined,
    FinishAsyncSGIX: glFinishAsyncSGIX = undefined,
    FinishFenceAPPLE: glFinishFenceAPPLE = undefined,
    FinishFenceNV: glFinishFenceNV = undefined,
    FinishObjectAPPLE: glFinishObjectAPPLE = undefined,
    FinishTextureSUNX: glFinishTextureSUNX = undefined,
    Flush: glFlush = undefined,
    FlushMappedBufferRange: glFlushMappedBufferRange = undefined,
    FlushMappedBufferRangeAPPLE: glFlushMappedBufferRangeAPPLE = undefined,
    FlushMappedNamedBufferRange: glFlushMappedNamedBufferRange = undefined,
    FlushMappedNamedBufferRangeEXT: glFlushMappedNamedBufferRangeEXT = undefined,
    FlushPixelDataRangeNV: glFlushPixelDataRangeNV = undefined,
    FlushRasterSGIX: glFlushRasterSGIX = undefined,
    FlushStaticDataIBM: glFlushStaticDataIBM = undefined,
    FlushVertexArrayRangeAPPLE: glFlushVertexArrayRangeAPPLE = undefined,
    FlushVertexArrayRangeNV: glFlushVertexArrayRangeNV = undefined,
    FogCoordFormatNV: glFogCoordFormatNV = undefined,
    FogCoordPointerEXT: glFogCoordPointerEXT = undefined,
    FogCoordPointerListIBM: glFogCoordPointerListIBM = undefined,
    FogCoorddEXT: glFogCoorddEXT = undefined,
    FogCoorddvEXT: glFogCoorddvEXT = undefined,
    FogCoordfEXT: glFogCoordfEXT = undefined,
    FogCoordfvEXT: glFogCoordfvEXT = undefined,
    FogCoordhNV: glFogCoordhNV = undefined,
    FogCoordhvNV: glFogCoordhvNV = undefined,
    FogFuncSGIS: glFogFuncSGIS = undefined,
    FogxOES: glFogxOES = undefined,
    FogxvOES: glFogxvOES = undefined,
    FragmentColorMaterialSGIX: glFragmentColorMaterialSGIX = undefined,
    FragmentCoverageColorNV: glFragmentCoverageColorNV = undefined,
    FragmentLightModelfSGIX: glFragmentLightModelfSGIX = undefined,
    FragmentLightModelfvSGIX: glFragmentLightModelfvSGIX = undefined,
    FragmentLightModeliSGIX: glFragmentLightModeliSGIX = undefined,
    FragmentLightModelivSGIX: glFragmentLightModelivSGIX = undefined,
    FragmentLightfSGIX: glFragmentLightfSGIX = undefined,
    FragmentLightfvSGIX: glFragmentLightfvSGIX = undefined,
    FragmentLightiSGIX: glFragmentLightiSGIX = undefined,
    FragmentLightivSGIX: glFragmentLightivSGIX = undefined,
    FragmentMaterialfSGIX: glFragmentMaterialfSGIX = undefined,
    FragmentMaterialfvSGIX: glFragmentMaterialfvSGIX = undefined,
    FragmentMaterialiSGIX: glFragmentMaterialiSGIX = undefined,
    FragmentMaterialivSGIX: glFragmentMaterialivSGIX = undefined,
    FrameTerminatorGREMEDY: glFrameTerminatorGREMEDY = undefined,
    FrameZoomSGIX: glFrameZoomSGIX = undefined,
    FramebufferDrawBufferEXT: glFramebufferDrawBufferEXT = undefined,
    FramebufferDrawBuffersEXT: glFramebufferDrawBuffersEXT = undefined,
    FramebufferFetchBarrierEXT: glFramebufferFetchBarrierEXT = undefined,
    FramebufferParameteri: glFramebufferParameteri = undefined,
    FramebufferParameteriMESA: glFramebufferParameteriMESA = undefined,
    FramebufferReadBufferEXT: glFramebufferReadBufferEXT = undefined,
    FramebufferRenderbuffer: glFramebufferRenderbuffer = undefined,
    FramebufferRenderbufferEXT: glFramebufferRenderbufferEXT = undefined,
    FramebufferSampleLocationsfvARB: glFramebufferSampleLocationsfvARB = undefined,
    FramebufferSampleLocationsfvNV: glFramebufferSampleLocationsfvNV = undefined,
    FramebufferSamplePositionsfvAMD: glFramebufferSamplePositionsfvAMD = undefined,
    FramebufferTexture: glFramebufferTexture = undefined,
    FramebufferTexture1D: glFramebufferTexture1D = undefined,
    FramebufferTexture1DEXT: glFramebufferTexture1DEXT = undefined,
    FramebufferTexture2D: glFramebufferTexture2D = undefined,
    FramebufferTexture2DEXT: glFramebufferTexture2DEXT = undefined,
    FramebufferTexture3D: glFramebufferTexture3D = undefined,
    FramebufferTexture3DEXT: glFramebufferTexture3DEXT = undefined,
    FramebufferTextureARB: glFramebufferTextureARB = undefined,
    FramebufferTextureEXT: glFramebufferTextureEXT = undefined,
    FramebufferTextureFaceARB: glFramebufferTextureFaceARB = undefined,
    FramebufferTextureFaceEXT: glFramebufferTextureFaceEXT = undefined,
    FramebufferTextureLayer: glFramebufferTextureLayer = undefined,
    FramebufferTextureLayerARB: glFramebufferTextureLayerARB = undefined,
    FramebufferTextureLayerEXT: glFramebufferTextureLayerEXT = undefined,
    FramebufferTextureMultiviewOVR: glFramebufferTextureMultiviewOVR = undefined,
    FreeObjectBufferATI: glFreeObjectBufferATI = undefined,
    FrontFace: glFrontFace = undefined,
    FrustumfOES: glFrustumfOES = undefined,
    FrustumxOES: glFrustumxOES = undefined,
    GenAsyncMarkersSGIX: glGenAsyncMarkersSGIX = undefined,
    GenBuffers: glGenBuffers = undefined,
    GenBuffersARB: glGenBuffersARB = undefined,
    GenFencesAPPLE: glGenFencesAPPLE = undefined,
    GenFencesNV: glGenFencesNV = undefined,
    GenFragmentShadersATI: glGenFragmentShadersATI = undefined,
    GenFramebuffers: glGenFramebuffers = undefined,
    GenFramebuffersEXT: glGenFramebuffersEXT = undefined,
    GenNamesAMD: glGenNamesAMD = undefined,
    GenOcclusionQueriesNV: glGenOcclusionQueriesNV = undefined,
    GenPathsNV: glGenPathsNV = undefined,
    GenPerfMonitorsAMD: glGenPerfMonitorsAMD = undefined,
    GenProgramPipelines: glGenProgramPipelines = undefined,
    GenProgramsARB: glGenProgramsARB = undefined,
    GenProgramsNV: glGenProgramsNV = undefined,
    GenQueries: glGenQueries = undefined,
    GenQueriesARB: glGenQueriesARB = undefined,
    GenQueryResourceTagNV: glGenQueryResourceTagNV = undefined,
    GenRenderbuffers: glGenRenderbuffers = undefined,
    GenRenderbuffersEXT: glGenRenderbuffersEXT = undefined,
    GenSamplers: glGenSamplers = undefined,
    GenSemaphoresEXT: glGenSemaphoresEXT = undefined,
    GenSymbolsEXT: glGenSymbolsEXT = undefined,
    GenTextures: glGenTextures = undefined,
    GenTexturesEXT: glGenTexturesEXT = undefined,
    GenTransformFeedbacks: glGenTransformFeedbacks = undefined,
    GenTransformFeedbacksNV: glGenTransformFeedbacksNV = undefined,
    GenVertexArrays: glGenVertexArrays = undefined,
    GenVertexArraysAPPLE: glGenVertexArraysAPPLE = undefined,
    GenVertexShadersEXT: glGenVertexShadersEXT = undefined,
    GenerateMipmap: glGenerateMipmap = undefined,
    GenerateMipmapEXT: glGenerateMipmapEXT = undefined,
    GenerateMultiTexMipmapEXT: glGenerateMultiTexMipmapEXT = undefined,
    GenerateTextureMipmap: glGenerateTextureMipmap = undefined,
    GenerateTextureMipmapEXT: glGenerateTextureMipmapEXT = undefined,
    GetActiveAtomicCounterBufferiv: glGetActiveAtomicCounterBufferiv = undefined,
    GetActiveAttrib: glGetActiveAttrib = undefined,
    GetActiveAttribARB: glGetActiveAttribARB = undefined,
    GetActiveSubroutineName: glGetActiveSubroutineName = undefined,
    GetActiveSubroutineUniformName: glGetActiveSubroutineUniformName = undefined,
    GetActiveSubroutineUniformiv: glGetActiveSubroutineUniformiv = undefined,
    GetActiveUniform: glGetActiveUniform = undefined,
    GetActiveUniformARB: glGetActiveUniformARB = undefined,
    GetActiveUniformBlockName: glGetActiveUniformBlockName = undefined,
    GetActiveUniformBlockiv: glGetActiveUniformBlockiv = undefined,
    GetActiveUniformName: glGetActiveUniformName = undefined,
    GetActiveUniformsiv: glGetActiveUniformsiv = undefined,
    GetActiveVaryingNV: glGetActiveVaryingNV = undefined,
    GetArrayObjectfvATI: glGetArrayObjectfvATI = undefined,
    GetArrayObjectivATI: glGetArrayObjectivATI = undefined,
    GetAttachedObjectsARB: glGetAttachedObjectsARB = undefined,
    GetAttachedShaders: glGetAttachedShaders = undefined,
    GetAttribLocation: glGetAttribLocation = undefined,
    GetAttribLocationARB: glGetAttribLocationARB = undefined,
    GetBooleanIndexedvEXT: glGetBooleanIndexedvEXT = undefined,
    GetBooleani_v: glGetBooleani_v = undefined,
    GetBooleanv: glGetBooleanv = undefined,
    GetBufferParameteri64v: glGetBufferParameteri64v = undefined,
    GetBufferParameteriv: glGetBufferParameteriv = undefined,
    GetBufferParameterivARB: glGetBufferParameterivARB = undefined,
    GetBufferParameterui64vNV: glGetBufferParameterui64vNV = undefined,
    GetBufferPointerv: glGetBufferPointerv = undefined,
    GetBufferPointervARB: glGetBufferPointervARB = undefined,
    GetBufferSubData: glGetBufferSubData = undefined,
    GetBufferSubDataARB: glGetBufferSubDataARB = undefined,
    GetClipPlanefOES: glGetClipPlanefOES = undefined,
    GetClipPlanexOES: glGetClipPlanexOES = undefined,
    GetColorTableEXT: glGetColorTableEXT = undefined,
    GetColorTableParameterfvEXT: glGetColorTableParameterfvEXT = undefined,
    GetColorTableParameterfvSGI: glGetColorTableParameterfvSGI = undefined,
    GetColorTableParameterivEXT: glGetColorTableParameterivEXT = undefined,
    GetColorTableParameterivSGI: glGetColorTableParameterivSGI = undefined,
    GetColorTableSGI: glGetColorTableSGI = undefined,
    GetCombinerInputParameterfvNV: glGetCombinerInputParameterfvNV = undefined,
    GetCombinerInputParameterivNV: glGetCombinerInputParameterivNV = undefined,
    GetCombinerOutputParameterfvNV: glGetCombinerOutputParameterfvNV = undefined,
    GetCombinerOutputParameterivNV: glGetCombinerOutputParameterivNV = undefined,
    GetCombinerStageParameterfvNV: glGetCombinerStageParameterfvNV = undefined,
    GetCommandHeaderNV: glGetCommandHeaderNV = undefined,
    GetCompressedMultiTexImageEXT: glGetCompressedMultiTexImageEXT = undefined,
    GetCompressedTexImage: glGetCompressedTexImage = undefined,
    GetCompressedTexImageARB: glGetCompressedTexImageARB = undefined,
    GetCompressedTextureImage: glGetCompressedTextureImage = undefined,
    GetCompressedTextureImageEXT: glGetCompressedTextureImageEXT = undefined,
    GetCompressedTextureSubImage: glGetCompressedTextureSubImage = undefined,
    GetConvolutionFilterEXT: glGetConvolutionFilterEXT = undefined,
    GetConvolutionParameterfvEXT: glGetConvolutionParameterfvEXT = undefined,
    GetConvolutionParameterivEXT: glGetConvolutionParameterivEXT = undefined,
    GetConvolutionParameterxvOES: glGetConvolutionParameterxvOES = undefined,
    GetCoverageModulationTableNV: glGetCoverageModulationTableNV = undefined,
    GetDebugMessageLog: glGetDebugMessageLog = undefined,
    GetDebugMessageLogAMD: glGetDebugMessageLogAMD = undefined,
    GetDebugMessageLogARB: glGetDebugMessageLogARB = undefined,
    GetDetailTexFuncSGIS: glGetDetailTexFuncSGIS = undefined,
    GetDoubleIndexedvEXT: glGetDoubleIndexedvEXT = undefined,
    GetDoublei_v: glGetDoublei_v = undefined,
    GetDoublei_vEXT: glGetDoublei_vEXT = undefined,
    GetDoublev: glGetDoublev = undefined,
    GetError: glGetError = undefined,
    GetFenceivNV: glGetFenceivNV = undefined,
    GetFinalCombinerInputParameterfvNV: glGetFinalCombinerInputParameterfvNV = undefined,
    GetFinalCombinerInputParameterivNV: glGetFinalCombinerInputParameterivNV = undefined,
    GetFirstPerfQueryIdINTEL: glGetFirstPerfQueryIdINTEL = undefined,
    GetFixedvOES: glGetFixedvOES = undefined,
    GetFloatIndexedvEXT: glGetFloatIndexedvEXT = undefined,
    GetFloati_v: glGetFloati_v = undefined,
    GetFloati_vEXT: glGetFloati_vEXT = undefined,
    GetFloatv: glGetFloatv = undefined,
    GetFogFuncSGIS: glGetFogFuncSGIS = undefined,
    GetFragDataIndex: glGetFragDataIndex = undefined,
    GetFragDataLocation: glGetFragDataLocation = undefined,
    GetFragDataLocationEXT: glGetFragDataLocationEXT = undefined,
    GetFragmentLightfvSGIX: glGetFragmentLightfvSGIX = undefined,
    GetFragmentLightivSGIX: glGetFragmentLightivSGIX = undefined,
    GetFragmentMaterialfvSGIX: glGetFragmentMaterialfvSGIX = undefined,
    GetFragmentMaterialivSGIX: glGetFragmentMaterialivSGIX = undefined,
    GetFramebufferAttachmentParameteriv: glGetFramebufferAttachmentParameteriv = undefined,
    GetFramebufferAttachmentParameterivEXT: glGetFramebufferAttachmentParameterivEXT = undefined,
    GetFramebufferParameterfvAMD: glGetFramebufferParameterfvAMD = undefined,
    GetFramebufferParameteriv: glGetFramebufferParameteriv = undefined,
    GetFramebufferParameterivEXT: glGetFramebufferParameterivEXT = undefined,
    GetFramebufferParameterivMESA: glGetFramebufferParameterivMESA = undefined,
    GetGraphicsResetStatus: glGetGraphicsResetStatus = undefined,
    GetGraphicsResetStatusARB: glGetGraphicsResetStatusARB = undefined,
    GetHandleARB: glGetHandleARB = undefined,
    GetHistogramEXT: glGetHistogramEXT = undefined,
    GetHistogramParameterfvEXT: glGetHistogramParameterfvEXT = undefined,
    GetHistogramParameterivEXT: glGetHistogramParameterivEXT = undefined,
    GetHistogramParameterxvOES: glGetHistogramParameterxvOES = undefined,
    GetImageHandleARB: glGetImageHandleARB = undefined,
    GetImageHandleNV: glGetImageHandleNV = undefined,
    GetImageTransformParameterfvHP: glGetImageTransformParameterfvHP = undefined,
    GetImageTransformParameterivHP: glGetImageTransformParameterivHP = undefined,
    GetInfoLogARB: glGetInfoLogARB = undefined,
    GetInstrumentsSGIX: glGetInstrumentsSGIX = undefined,
    GetInteger64i_v: glGetInteger64i_v = undefined,
    GetInteger64v: glGetInteger64v = undefined,
    GetIntegerIndexedvEXT: glGetIntegerIndexedvEXT = undefined,
    GetIntegeri_v: glGetIntegeri_v = undefined,
    GetIntegerui64i_vNV: glGetIntegerui64i_vNV = undefined,
    GetIntegerui64vNV: glGetIntegerui64vNV = undefined,
    GetIntegerv: glGetIntegerv = undefined,
    GetInternalformatSampleivNV: glGetInternalformatSampleivNV = undefined,
    GetInternalformati64v: glGetInternalformati64v = undefined,
    GetInternalformativ: glGetInternalformativ = undefined,
    GetInvariantBooleanvEXT: glGetInvariantBooleanvEXT = undefined,
    GetInvariantFloatvEXT: glGetInvariantFloatvEXT = undefined,
    GetInvariantIntegervEXT: glGetInvariantIntegervEXT = undefined,
    GetLightxOES: glGetLightxOES = undefined,
    GetListParameterfvSGIX: glGetListParameterfvSGIX = undefined,
    GetListParameterivSGIX: glGetListParameterivSGIX = undefined,
    GetLocalConstantBooleanvEXT: glGetLocalConstantBooleanvEXT = undefined,
    GetLocalConstantFloatvEXT: glGetLocalConstantFloatvEXT = undefined,
    GetLocalConstantIntegervEXT: glGetLocalConstantIntegervEXT = undefined,
    GetMapAttribParameterfvNV: glGetMapAttribParameterfvNV = undefined,
    GetMapAttribParameterivNV: glGetMapAttribParameterivNV = undefined,
    GetMapControlPointsNV: glGetMapControlPointsNV = undefined,
    GetMapParameterfvNV: glGetMapParameterfvNV = undefined,
    GetMapParameterivNV: glGetMapParameterivNV = undefined,
    GetMapxvOES: glGetMapxvOES = undefined,
    GetMaterialxOES: glGetMaterialxOES = undefined,
    GetMemoryObjectDetachedResourcesuivNV: glGetMemoryObjectDetachedResourcesuivNV = undefined,
    GetMemoryObjectParameterivEXT: glGetMemoryObjectParameterivEXT = undefined,
    GetMinmaxEXT: glGetMinmaxEXT = undefined,
    GetMinmaxParameterfvEXT: glGetMinmaxParameterfvEXT = undefined,
    GetMinmaxParameterivEXT: glGetMinmaxParameterivEXT = undefined,
    GetMultiTexEnvfvEXT: glGetMultiTexEnvfvEXT = undefined,
    GetMultiTexEnvivEXT: glGetMultiTexEnvivEXT = undefined,
    GetMultiTexGendvEXT: glGetMultiTexGendvEXT = undefined,
    GetMultiTexGenfvEXT: glGetMultiTexGenfvEXT = undefined,
    GetMultiTexGenivEXT: glGetMultiTexGenivEXT = undefined,
    GetMultiTexImageEXT: glGetMultiTexImageEXT = undefined,
    GetMultiTexLevelParameterfvEXT: glGetMultiTexLevelParameterfvEXT = undefined,
    GetMultiTexLevelParameterivEXT: glGetMultiTexLevelParameterivEXT = undefined,
    GetMultiTexParameterIivEXT: glGetMultiTexParameterIivEXT = undefined,
    GetMultiTexParameterIuivEXT: glGetMultiTexParameterIuivEXT = undefined,
    GetMultiTexParameterfvEXT: glGetMultiTexParameterfvEXT = undefined,
    GetMultiTexParameterivEXT: glGetMultiTexParameterivEXT = undefined,
    GetMultisamplefv: glGetMultisamplefv = undefined,
    GetMultisamplefvNV: glGetMultisamplefvNV = undefined,
    GetNamedBufferParameteri64v: glGetNamedBufferParameteri64v = undefined,
    GetNamedBufferParameteriv: glGetNamedBufferParameteriv = undefined,
    GetNamedBufferParameterivEXT: glGetNamedBufferParameterivEXT = undefined,
    GetNamedBufferParameterui64vNV: glGetNamedBufferParameterui64vNV = undefined,
    GetNamedBufferPointerv: glGetNamedBufferPointerv = undefined,
    GetNamedBufferPointervEXT: glGetNamedBufferPointervEXT = undefined,
    GetNamedBufferSubData: glGetNamedBufferSubData = undefined,
    GetNamedBufferSubDataEXT: glGetNamedBufferSubDataEXT = undefined,
    GetNamedFramebufferAttachmentParameteriv: glGetNamedFramebufferAttachmentParameteriv = undefined,
    GetNamedFramebufferAttachmentParameterivEXT: glGetNamedFramebufferAttachmentParameterivEXT = undefined,
    GetNamedFramebufferParameterfvAMD: glGetNamedFramebufferParameterfvAMD = undefined,
    GetNamedFramebufferParameteriv: glGetNamedFramebufferParameteriv = undefined,
    GetNamedFramebufferParameterivEXT: glGetNamedFramebufferParameterivEXT = undefined,
    GetNamedProgramLocalParameterIivEXT: glGetNamedProgramLocalParameterIivEXT = undefined,
    GetNamedProgramLocalParameterIuivEXT: glGetNamedProgramLocalParameterIuivEXT = undefined,
    GetNamedProgramLocalParameterdvEXT: glGetNamedProgramLocalParameterdvEXT = undefined,
    GetNamedProgramLocalParameterfvEXT: glGetNamedProgramLocalParameterfvEXT = undefined,
    GetNamedProgramStringEXT: glGetNamedProgramStringEXT = undefined,
    GetNamedProgramivEXT: glGetNamedProgramivEXT = undefined,
    GetNamedRenderbufferParameteriv: glGetNamedRenderbufferParameteriv = undefined,
    GetNamedRenderbufferParameterivEXT: glGetNamedRenderbufferParameterivEXT = undefined,
    GetNamedStringARB: glGetNamedStringARB = undefined,
    GetNamedStringivARB: glGetNamedStringivARB = undefined,
    GetNextPerfQueryIdINTEL: glGetNextPerfQueryIdINTEL = undefined,
    GetObjectBufferfvATI: glGetObjectBufferfvATI = undefined,
    GetObjectBufferivATI: glGetObjectBufferivATI = undefined,
    GetObjectLabel: glGetObjectLabel = undefined,
    GetObjectLabelEXT: glGetObjectLabelEXT = undefined,
    GetObjectParameterfvARB: glGetObjectParameterfvARB = undefined,
    GetObjectParameterivAPPLE: glGetObjectParameterivAPPLE = undefined,
    GetObjectParameterivARB: glGetObjectParameterivARB = undefined,
    GetObjectPtrLabel: glGetObjectPtrLabel = undefined,
    GetOcclusionQueryivNV: glGetOcclusionQueryivNV = undefined,
    GetOcclusionQueryuivNV: glGetOcclusionQueryuivNV = undefined,
    GetPathCommandsNV: glGetPathCommandsNV = undefined,
    GetPathCoordsNV: glGetPathCoordsNV = undefined,
    GetPathDashArrayNV: glGetPathDashArrayNV = undefined,
    GetPathLengthNV: glGetPathLengthNV = undefined,
    GetPathMetricRangeNV: glGetPathMetricRangeNV = undefined,
    GetPathMetricsNV: glGetPathMetricsNV = undefined,
    GetPathParameterfvNV: glGetPathParameterfvNV = undefined,
    GetPathParameterivNV: glGetPathParameterivNV = undefined,
    GetPathSpacingNV: glGetPathSpacingNV = undefined,
    GetPerfCounterInfoINTEL: glGetPerfCounterInfoINTEL = undefined,
    GetPerfMonitorCounterDataAMD: glGetPerfMonitorCounterDataAMD = undefined,
    GetPerfMonitorCounterInfoAMD: glGetPerfMonitorCounterInfoAMD = undefined,
    GetPerfMonitorCounterStringAMD: glGetPerfMonitorCounterStringAMD = undefined,
    GetPerfMonitorCountersAMD: glGetPerfMonitorCountersAMD = undefined,
    GetPerfMonitorGroupStringAMD: glGetPerfMonitorGroupStringAMD = undefined,
    GetPerfMonitorGroupsAMD: glGetPerfMonitorGroupsAMD = undefined,
    GetPerfQueryDataINTEL: glGetPerfQueryDataINTEL = undefined,
    GetPerfQueryIdByNameINTEL: glGetPerfQueryIdByNameINTEL = undefined,
    GetPerfQueryInfoINTEL: glGetPerfQueryInfoINTEL = undefined,
    GetPixelMapxv: glGetPixelMapxv = undefined,
    GetPixelTexGenParameterfvSGIS: glGetPixelTexGenParameterfvSGIS = undefined,
    GetPixelTexGenParameterivSGIS: glGetPixelTexGenParameterivSGIS = undefined,
    GetPixelTransformParameterfvEXT: glGetPixelTransformParameterfvEXT = undefined,
    GetPixelTransformParameterivEXT: glGetPixelTransformParameterivEXT = undefined,
    GetPointerIndexedvEXT: glGetPointerIndexedvEXT = undefined,
    GetPointeri_vEXT: glGetPointeri_vEXT = undefined,
    GetPointerv: glGetPointerv = undefined,
    GetPointervEXT: glGetPointervEXT = undefined,
    GetProgramBinary: glGetProgramBinary = undefined,
    GetProgramEnvParameterIivNV: glGetProgramEnvParameterIivNV = undefined,
    GetProgramEnvParameterIuivNV: glGetProgramEnvParameterIuivNV = undefined,
    GetProgramEnvParameterdvARB: glGetProgramEnvParameterdvARB = undefined,
    GetProgramEnvParameterfvARB: glGetProgramEnvParameterfvARB = undefined,
    GetProgramInfoLog: glGetProgramInfoLog = undefined,
    GetProgramInterfaceiv: glGetProgramInterfaceiv = undefined,
    GetProgramLocalParameterIivNV: glGetProgramLocalParameterIivNV = undefined,
    GetProgramLocalParameterIuivNV: glGetProgramLocalParameterIuivNV = undefined,
    GetProgramLocalParameterdvARB: glGetProgramLocalParameterdvARB = undefined,
    GetProgramLocalParameterfvARB: glGetProgramLocalParameterfvARB = undefined,
    GetProgramNamedParameterdvNV: glGetProgramNamedParameterdvNV = undefined,
    GetProgramNamedParameterfvNV: glGetProgramNamedParameterfvNV = undefined,
    GetProgramParameterdvNV: glGetProgramParameterdvNV = undefined,
    GetProgramParameterfvNV: glGetProgramParameterfvNV = undefined,
    GetProgramPipelineInfoLog: glGetProgramPipelineInfoLog = undefined,
    GetProgramPipelineiv: glGetProgramPipelineiv = undefined,
    GetProgramResourceIndex: glGetProgramResourceIndex = undefined,
    GetProgramResourceLocation: glGetProgramResourceLocation = undefined,
    GetProgramResourceLocationIndex: glGetProgramResourceLocationIndex = undefined,
    GetProgramResourceName: glGetProgramResourceName = undefined,
    GetProgramResourcefvNV: glGetProgramResourcefvNV = undefined,
    GetProgramResourceiv: glGetProgramResourceiv = undefined,
    GetProgramStageiv: glGetProgramStageiv = undefined,
    GetProgramStringARB: glGetProgramStringARB = undefined,
    GetProgramStringNV: glGetProgramStringNV = undefined,
    GetProgramSubroutineParameteruivNV: glGetProgramSubroutineParameteruivNV = undefined,
    GetProgramiv: glGetProgramiv = undefined,
    GetProgramivARB: glGetProgramivARB = undefined,
    GetProgramivNV: glGetProgramivNV = undefined,
    GetQueryBufferObjecti64v: glGetQueryBufferObjecti64v = undefined,
    GetQueryBufferObjectiv: glGetQueryBufferObjectiv = undefined,
    GetQueryBufferObjectui64v: glGetQueryBufferObjectui64v = undefined,
    GetQueryBufferObjectuiv: glGetQueryBufferObjectuiv = undefined,
    GetQueryIndexediv: glGetQueryIndexediv = undefined,
    GetQueryObjecti64v: glGetQueryObjecti64v = undefined,
    GetQueryObjecti64vEXT: glGetQueryObjecti64vEXT = undefined,
    GetQueryObjectiv: glGetQueryObjectiv = undefined,
    GetQueryObjectivARB: glGetQueryObjectivARB = undefined,
    GetQueryObjectui64v: glGetQueryObjectui64v = undefined,
    GetQueryObjectui64vEXT: glGetQueryObjectui64vEXT = undefined,
    GetQueryObjectuiv: glGetQueryObjectuiv = undefined,
    GetQueryObjectuivARB: glGetQueryObjectuivARB = undefined,
    GetQueryiv: glGetQueryiv = undefined,
    GetQueryivARB: glGetQueryivARB = undefined,
    GetRenderbufferParameteriv: glGetRenderbufferParameteriv = undefined,
    GetRenderbufferParameterivEXT: glGetRenderbufferParameterivEXT = undefined,
    GetSamplerParameterIiv: glGetSamplerParameterIiv = undefined,
    GetSamplerParameterIuiv: glGetSamplerParameterIuiv = undefined,
    GetSamplerParameterfv: glGetSamplerParameterfv = undefined,
    GetSamplerParameteriv: glGetSamplerParameteriv = undefined,
    GetSemaphoreParameterivNV: glGetSemaphoreParameterivNV = undefined,
    GetSemaphoreParameterui64vEXT: glGetSemaphoreParameterui64vEXT = undefined,
    GetSeparableFilterEXT: glGetSeparableFilterEXT = undefined,
    GetShaderInfoLog: glGetShaderInfoLog = undefined,
    GetShaderPrecisionFormat: glGetShaderPrecisionFormat = undefined,
    GetShaderSource: glGetShaderSource = undefined,
    GetShaderSourceARB: glGetShaderSourceARB = undefined,
    GetShaderiv: glGetShaderiv = undefined,
    GetShadingRateImagePaletteNV: glGetShadingRateImagePaletteNV = undefined,
    GetShadingRateSampleLocationivNV: glGetShadingRateSampleLocationivNV = undefined,
    GetSharpenTexFuncSGIS: glGetSharpenTexFuncSGIS = undefined,
    GetStageIndexNV: glGetStageIndexNV = undefined,
    GetString: glGetString = undefined,
    GetStringi: glGetStringi = undefined,
    GetSubroutineIndex: glGetSubroutineIndex = undefined,
    GetSubroutineUniformLocation: glGetSubroutineUniformLocation = undefined,
    GetSynciv: glGetSynciv = undefined,
    GetTexBumpParameterfvATI: glGetTexBumpParameterfvATI = undefined,
    GetTexBumpParameterivATI: glGetTexBumpParameterivATI = undefined,
    GetTexEnvxvOES: glGetTexEnvxvOES = undefined,
    GetTexFilterFuncSGIS: glGetTexFilterFuncSGIS = undefined,
    GetTexGenxvOES: glGetTexGenxvOES = undefined,
    GetTexImage: glGetTexImage = undefined,
    GetTexLevelParameterfv: glGetTexLevelParameterfv = undefined,
    GetTexLevelParameteriv: glGetTexLevelParameteriv = undefined,
    GetTexLevelParameterxvOES: glGetTexLevelParameterxvOES = undefined,
    GetTexParameterIiv: glGetTexParameterIiv = undefined,
    GetTexParameterIivEXT: glGetTexParameterIivEXT = undefined,
    GetTexParameterIuiv: glGetTexParameterIuiv = undefined,
    GetTexParameterIuivEXT: glGetTexParameterIuivEXT = undefined,
    GetTexParameterPointervAPPLE: glGetTexParameterPointervAPPLE = undefined,
    GetTexParameterfv: glGetTexParameterfv = undefined,
    GetTexParameteriv: glGetTexParameteriv = undefined,
    GetTexParameterxvOES: glGetTexParameterxvOES = undefined,
    GetTextureHandleARB: glGetTextureHandleARB = undefined,
    GetTextureHandleNV: glGetTextureHandleNV = undefined,
    GetTextureImage: glGetTextureImage = undefined,
    GetTextureImageEXT: glGetTextureImageEXT = undefined,
    GetTextureLevelParameterfv: glGetTextureLevelParameterfv = undefined,
    GetTextureLevelParameterfvEXT: glGetTextureLevelParameterfvEXT = undefined,
    GetTextureLevelParameteriv: glGetTextureLevelParameteriv = undefined,
    GetTextureLevelParameterivEXT: glGetTextureLevelParameterivEXT = undefined,
    GetTextureParameterIiv: glGetTextureParameterIiv = undefined,
    GetTextureParameterIivEXT: glGetTextureParameterIivEXT = undefined,
    GetTextureParameterIuiv: glGetTextureParameterIuiv = undefined,
    GetTextureParameterIuivEXT: glGetTextureParameterIuivEXT = undefined,
    GetTextureParameterfv: glGetTextureParameterfv = undefined,
    GetTextureParameterfvEXT: glGetTextureParameterfvEXT = undefined,
    GetTextureParameteriv: glGetTextureParameteriv = undefined,
    GetTextureParameterivEXT: glGetTextureParameterivEXT = undefined,
    GetTextureSamplerHandleARB: glGetTextureSamplerHandleARB = undefined,
    GetTextureSamplerHandleNV: glGetTextureSamplerHandleNV = undefined,
    GetTextureSubImage: glGetTextureSubImage = undefined,
    GetTrackMatrixivNV: glGetTrackMatrixivNV = undefined,
    GetTransformFeedbackVarying: glGetTransformFeedbackVarying = undefined,
    GetTransformFeedbackVaryingEXT: glGetTransformFeedbackVaryingEXT = undefined,
    GetTransformFeedbackVaryingNV: glGetTransformFeedbackVaryingNV = undefined,
    GetTransformFeedbacki64_v: glGetTransformFeedbacki64_v = undefined,
    GetTransformFeedbacki_v: glGetTransformFeedbacki_v = undefined,
    GetTransformFeedbackiv: glGetTransformFeedbackiv = undefined,
    GetUniformBlockIndex: glGetUniformBlockIndex = undefined,
    GetUniformBufferSizeEXT: glGetUniformBufferSizeEXT = undefined,
    GetUniformIndices: glGetUniformIndices = undefined,
    GetUniformLocation: glGetUniformLocation = undefined,
    GetUniformLocationARB: glGetUniformLocationARB = undefined,
    GetUniformOffsetEXT: glGetUniformOffsetEXT = undefined,
    GetUniformSubroutineuiv: glGetUniformSubroutineuiv = undefined,
    GetUniformdv: glGetUniformdv = undefined,
    GetUniformfv: glGetUniformfv = undefined,
    GetUniformfvARB: glGetUniformfvARB = undefined,
    GetUniformi64vARB: glGetUniformi64vARB = undefined,
    GetUniformi64vNV: glGetUniformi64vNV = undefined,
    GetUniformiv: glGetUniformiv = undefined,
    GetUniformivARB: glGetUniformivARB = undefined,
    GetUniformui64vARB: glGetUniformui64vARB = undefined,
    GetUniformui64vNV: glGetUniformui64vNV = undefined,
    GetUniformuiv: glGetUniformuiv = undefined,
    GetUniformuivEXT: glGetUniformuivEXT = undefined,
    GetUnsignedBytei_vEXT: glGetUnsignedBytei_vEXT = undefined,
    GetUnsignedBytevEXT: glGetUnsignedBytevEXT = undefined,
    GetVariantArrayObjectfvATI: glGetVariantArrayObjectfvATI = undefined,
    GetVariantArrayObjectivATI: glGetVariantArrayObjectivATI = undefined,
    GetVariantBooleanvEXT: glGetVariantBooleanvEXT = undefined,
    GetVariantFloatvEXT: glGetVariantFloatvEXT = undefined,
    GetVariantIntegervEXT: glGetVariantIntegervEXT = undefined,
    GetVariantPointervEXT: glGetVariantPointervEXT = undefined,
    GetVaryingLocationNV: glGetVaryingLocationNV = undefined,
    GetVertexArrayIndexed64iv: glGetVertexArrayIndexed64iv = undefined,
    GetVertexArrayIndexediv: glGetVertexArrayIndexediv = undefined,
    GetVertexArrayIntegeri_vEXT: glGetVertexArrayIntegeri_vEXT = undefined,
    GetVertexArrayIntegervEXT: glGetVertexArrayIntegervEXT = undefined,
    GetVertexArrayPointeri_vEXT: glGetVertexArrayPointeri_vEXT = undefined,
    GetVertexArrayPointervEXT: glGetVertexArrayPointervEXT = undefined,
    GetVertexArrayiv: glGetVertexArrayiv = undefined,
    GetVertexAttribArrayObjectfvATI: glGetVertexAttribArrayObjectfvATI = undefined,
    GetVertexAttribArrayObjectivATI: glGetVertexAttribArrayObjectivATI = undefined,
    GetVertexAttribIiv: glGetVertexAttribIiv = undefined,
    GetVertexAttribIivEXT: glGetVertexAttribIivEXT = undefined,
    GetVertexAttribIuiv: glGetVertexAttribIuiv = undefined,
    GetVertexAttribIuivEXT: glGetVertexAttribIuivEXT = undefined,
    GetVertexAttribLdv: glGetVertexAttribLdv = undefined,
    GetVertexAttribLdvEXT: glGetVertexAttribLdvEXT = undefined,
    GetVertexAttribLi64vNV: glGetVertexAttribLi64vNV = undefined,
    GetVertexAttribLui64vARB: glGetVertexAttribLui64vARB = undefined,
    GetVertexAttribLui64vNV: glGetVertexAttribLui64vNV = undefined,
    GetVertexAttribPointerv: glGetVertexAttribPointerv = undefined,
    GetVertexAttribPointervARB: glGetVertexAttribPointervARB = undefined,
    GetVertexAttribPointervNV: glGetVertexAttribPointervNV = undefined,
    GetVertexAttribdv: glGetVertexAttribdv = undefined,
    GetVertexAttribdvARB: glGetVertexAttribdvARB = undefined,
    GetVertexAttribdvNV: glGetVertexAttribdvNV = undefined,
    GetVertexAttribfv: glGetVertexAttribfv = undefined,
    GetVertexAttribfvARB: glGetVertexAttribfvARB = undefined,
    GetVertexAttribfvNV: glGetVertexAttribfvNV = undefined,
    GetVertexAttribiv: glGetVertexAttribiv = undefined,
    GetVertexAttribivARB: glGetVertexAttribivARB = undefined,
    GetVertexAttribivNV: glGetVertexAttribivNV = undefined,
    GetVideoCaptureStreamdvNV: glGetVideoCaptureStreamdvNV = undefined,
    GetVideoCaptureStreamfvNV: glGetVideoCaptureStreamfvNV = undefined,
    GetVideoCaptureStreamivNV: glGetVideoCaptureStreamivNV = undefined,
    GetVideoCaptureivNV: glGetVideoCaptureivNV = undefined,
    GetVideoi64vNV: glGetVideoi64vNV = undefined,
    GetVideoivNV: glGetVideoivNV = undefined,
    GetVideoui64vNV: glGetVideoui64vNV = undefined,
    GetVideouivNV: glGetVideouivNV = undefined,
    GetVkProcAddrNV: glGetVkProcAddrNV = undefined,
    GetnCompressedTexImageARB: glGetnCompressedTexImageARB = undefined,
    GetnTexImageARB: glGetnTexImageARB = undefined,
    GetnUniformdvARB: glGetnUniformdvARB = undefined,
    GetnUniformfv: glGetnUniformfv = undefined,
    GetnUniformfvARB: glGetnUniformfvARB = undefined,
    GetnUniformi64vARB: glGetnUniformi64vARB = undefined,
    GetnUniformiv: glGetnUniformiv = undefined,
    GetnUniformivARB: glGetnUniformivARB = undefined,
    GetnUniformui64vARB: glGetnUniformui64vARB = undefined,
    GetnUniformuiv: glGetnUniformuiv = undefined,
    GetnUniformuivARB: glGetnUniformuivARB = undefined,
    GlobalAlphaFactorbSUN: glGlobalAlphaFactorbSUN = undefined,
    GlobalAlphaFactordSUN: glGlobalAlphaFactordSUN = undefined,
    GlobalAlphaFactorfSUN: glGlobalAlphaFactorfSUN = undefined,
    GlobalAlphaFactoriSUN: glGlobalAlphaFactoriSUN = undefined,
    GlobalAlphaFactorsSUN: glGlobalAlphaFactorsSUN = undefined,
    GlobalAlphaFactorubSUN: glGlobalAlphaFactorubSUN = undefined,
    GlobalAlphaFactoruiSUN: glGlobalAlphaFactoruiSUN = undefined,
    GlobalAlphaFactorusSUN: glGlobalAlphaFactorusSUN = undefined,
    Hint: glHint = undefined,
    HintPGI: glHintPGI = undefined,
    HistogramEXT: glHistogramEXT = undefined,
    IglooInterfaceSGIX: glIglooInterfaceSGIX = undefined,
    ImageTransformParameterfHP: glImageTransformParameterfHP = undefined,
    ImageTransformParameterfvHP: glImageTransformParameterfvHP = undefined,
    ImageTransformParameteriHP: glImageTransformParameteriHP = undefined,
    ImageTransformParameterivHP: glImageTransformParameterivHP = undefined,
    ImportMemoryFdEXT: glImportMemoryFdEXT = undefined,
    ImportMemoryWin32HandleEXT: glImportMemoryWin32HandleEXT = undefined,
    ImportMemoryWin32NameEXT: glImportMemoryWin32NameEXT = undefined,
    ImportSemaphoreFdEXT: glImportSemaphoreFdEXT = undefined,
    ImportSemaphoreWin32HandleEXT: glImportSemaphoreWin32HandleEXT = undefined,
    ImportSemaphoreWin32NameEXT: glImportSemaphoreWin32NameEXT = undefined,
    ImportSyncEXT: glImportSyncEXT = undefined,
    IndexFormatNV: glIndexFormatNV = undefined,
    IndexFuncEXT: glIndexFuncEXT = undefined,
    IndexMaterialEXT: glIndexMaterialEXT = undefined,
    IndexPointerEXT: glIndexPointerEXT = undefined,
    IndexPointerListIBM: glIndexPointerListIBM = undefined,
    IndexxOES: glIndexxOES = undefined,
    IndexxvOES: glIndexxvOES = undefined,
    InsertComponentEXT: glInsertComponentEXT = undefined,
    InsertEventMarkerEXT: glInsertEventMarkerEXT = undefined,
    InstrumentsBufferSGIX: glInstrumentsBufferSGIX = undefined,
    InterpolatePathsNV: glInterpolatePathsNV = undefined,
    InvalidateBufferData: glInvalidateBufferData = undefined,
    InvalidateBufferSubData: glInvalidateBufferSubData = undefined,
    InvalidateFramebuffer: glInvalidateFramebuffer = undefined,
    InvalidateNamedFramebufferData: glInvalidateNamedFramebufferData = undefined,
    InvalidateNamedFramebufferSubData: glInvalidateNamedFramebufferSubData = undefined,
    InvalidateSubFramebuffer: glInvalidateSubFramebuffer = undefined,
    InvalidateTexImage: glInvalidateTexImage = undefined,
    InvalidateTexSubImage: glInvalidateTexSubImage = undefined,
    IsAsyncMarkerSGIX: glIsAsyncMarkerSGIX = undefined,
    IsBuffer: glIsBuffer = undefined,
    IsBufferARB: glIsBufferARB = undefined,
    IsBufferResidentNV: glIsBufferResidentNV = undefined,
    IsCommandListNV: glIsCommandListNV = undefined,
    IsEnabled: glIsEnabled = undefined,
    IsEnabledIndexedEXT: glIsEnabledIndexedEXT = undefined,
    IsEnabledi: glIsEnabledi = undefined,
    IsFenceAPPLE: glIsFenceAPPLE = undefined,
    IsFenceNV: glIsFenceNV = undefined,
    IsFramebuffer: glIsFramebuffer = undefined,
    IsFramebufferEXT: glIsFramebufferEXT = undefined,
    IsImageHandleResidentARB: glIsImageHandleResidentARB = undefined,
    IsImageHandleResidentNV: glIsImageHandleResidentNV = undefined,
    IsMemoryObjectEXT: glIsMemoryObjectEXT = undefined,
    IsNameAMD: glIsNameAMD = undefined,
    IsNamedBufferResidentNV: glIsNamedBufferResidentNV = undefined,
    IsNamedStringARB: glIsNamedStringARB = undefined,
    IsObjectBufferATI: glIsObjectBufferATI = undefined,
    IsOcclusionQueryNV: glIsOcclusionQueryNV = undefined,
    IsPathNV: glIsPathNV = undefined,
    IsPointInFillPathNV: glIsPointInFillPathNV = undefined,
    IsPointInStrokePathNV: glIsPointInStrokePathNV = undefined,
    IsProgram: glIsProgram = undefined,
    IsProgramARB: glIsProgramARB = undefined,
    IsProgramNV: glIsProgramNV = undefined,
    IsProgramPipeline: glIsProgramPipeline = undefined,
    IsQuery: glIsQuery = undefined,
    IsQueryARB: glIsQueryARB = undefined,
    IsRenderbuffer: glIsRenderbuffer = undefined,
    IsRenderbufferEXT: glIsRenderbufferEXT = undefined,
    IsSampler: glIsSampler = undefined,
    IsSemaphoreEXT: glIsSemaphoreEXT = undefined,
    IsShader: glIsShader = undefined,
    IsStateNV: glIsStateNV = undefined,
    IsSync: glIsSync = undefined,
    IsTexture: glIsTexture = undefined,
    IsTextureEXT: glIsTextureEXT = undefined,
    IsTextureHandleResidentARB: glIsTextureHandleResidentARB = undefined,
    IsTextureHandleResidentNV: glIsTextureHandleResidentNV = undefined,
    IsTransformFeedback: glIsTransformFeedback = undefined,
    IsTransformFeedbackNV: glIsTransformFeedbackNV = undefined,
    IsVariantEnabledEXT: glIsVariantEnabledEXT = undefined,
    IsVertexArray: glIsVertexArray = undefined,
    IsVertexArrayAPPLE: glIsVertexArrayAPPLE = undefined,
    IsVertexAttribEnabledAPPLE: glIsVertexAttribEnabledAPPLE = undefined,
    LGPUCopyImageSubDataNVX: glLGPUCopyImageSubDataNVX = undefined,
    LGPUInterlockNVX: glLGPUInterlockNVX = undefined,
    LGPUNamedBufferSubDataNVX: glLGPUNamedBufferSubDataNVX = undefined,
    LabelObjectEXT: glLabelObjectEXT = undefined,
    LightEnviSGIX: glLightEnviSGIX = undefined,
    LightModelxOES: glLightModelxOES = undefined,
    LightModelxvOES: glLightModelxvOES = undefined,
    LightxOES: glLightxOES = undefined,
    LightxvOES: glLightxvOES = undefined,
    LineWidth: glLineWidth = undefined,
    LineWidthxOES: glLineWidthxOES = undefined,
    LinkProgram: glLinkProgram = undefined,
    LinkProgramARB: glLinkProgramARB = undefined,
    ListDrawCommandsStatesClientNV: glListDrawCommandsStatesClientNV = undefined,
    ListParameterfSGIX: glListParameterfSGIX = undefined,
    ListParameterfvSGIX: glListParameterfvSGIX = undefined,
    ListParameteriSGIX: glListParameteriSGIX = undefined,
    ListParameterivSGIX: glListParameterivSGIX = undefined,
    LoadIdentityDeformationMapSGIX: glLoadIdentityDeformationMapSGIX = undefined,
    LoadMatrixxOES: glLoadMatrixxOES = undefined,
    LoadProgramNV: glLoadProgramNV = undefined,
    LoadTransposeMatrixdARB: glLoadTransposeMatrixdARB = undefined,
    LoadTransposeMatrixfARB: glLoadTransposeMatrixfARB = undefined,
    LoadTransposeMatrixxOES: glLoadTransposeMatrixxOES = undefined,
    LockArraysEXT: glLockArraysEXT = undefined,
    LogicOp: glLogicOp = undefined,
    MakeBufferNonResidentNV: glMakeBufferNonResidentNV = undefined,
    MakeBufferResidentNV: glMakeBufferResidentNV = undefined,
    MakeImageHandleNonResidentARB: glMakeImageHandleNonResidentARB = undefined,
    MakeImageHandleNonResidentNV: glMakeImageHandleNonResidentNV = undefined,
    MakeImageHandleResidentARB: glMakeImageHandleResidentARB = undefined,
    MakeImageHandleResidentNV: glMakeImageHandleResidentNV = undefined,
    MakeNamedBufferNonResidentNV: glMakeNamedBufferNonResidentNV = undefined,
    MakeNamedBufferResidentNV: glMakeNamedBufferResidentNV = undefined,
    MakeTextureHandleNonResidentARB: glMakeTextureHandleNonResidentARB = undefined,
    MakeTextureHandleNonResidentNV: glMakeTextureHandleNonResidentNV = undefined,
    MakeTextureHandleResidentARB: glMakeTextureHandleResidentARB = undefined,
    MakeTextureHandleResidentNV: glMakeTextureHandleResidentNV = undefined,
    Map1xOES: glMap1xOES = undefined,
    Map2xOES: glMap2xOES = undefined,
    MapBuffer: glMapBuffer = undefined,
    MapBufferARB: glMapBufferARB = undefined,
    MapBufferRange: glMapBufferRange = undefined,
    MapControlPointsNV: glMapControlPointsNV = undefined,
    MapGrid1xOES: glMapGrid1xOES = undefined,
    MapGrid2xOES: glMapGrid2xOES = undefined,
    MapNamedBuffer: glMapNamedBuffer = undefined,
    MapNamedBufferEXT: glMapNamedBufferEXT = undefined,
    MapNamedBufferRange: glMapNamedBufferRange = undefined,
    MapNamedBufferRangeEXT: glMapNamedBufferRangeEXT = undefined,
    MapObjectBufferATI: glMapObjectBufferATI = undefined,
    MapParameterfvNV: glMapParameterfvNV = undefined,
    MapParameterivNV: glMapParameterivNV = undefined,
    MapTexture2DINTEL: glMapTexture2DINTEL = undefined,
    MapVertexAttrib1dAPPLE: glMapVertexAttrib1dAPPLE = undefined,
    MapVertexAttrib1fAPPLE: glMapVertexAttrib1fAPPLE = undefined,
    MapVertexAttrib2dAPPLE: glMapVertexAttrib2dAPPLE = undefined,
    MapVertexAttrib2fAPPLE: glMapVertexAttrib2fAPPLE = undefined,
    MaterialxOES: glMaterialxOES = undefined,
    MaterialxvOES: glMaterialxvOES = undefined,
    MatrixFrustumEXT: glMatrixFrustumEXT = undefined,
    MatrixIndexPointerARB: glMatrixIndexPointerARB = undefined,
    MatrixIndexubvARB: glMatrixIndexubvARB = undefined,
    MatrixIndexuivARB: glMatrixIndexuivARB = undefined,
    MatrixIndexusvARB: glMatrixIndexusvARB = undefined,
    MatrixLoad3x2fNV: glMatrixLoad3x2fNV = undefined,
    MatrixLoad3x3fNV: glMatrixLoad3x3fNV = undefined,
    MatrixLoadIdentityEXT: glMatrixLoadIdentityEXT = undefined,
    MatrixLoadTranspose3x3fNV: glMatrixLoadTranspose3x3fNV = undefined,
    MatrixLoadTransposedEXT: glMatrixLoadTransposedEXT = undefined,
    MatrixLoadTransposefEXT: glMatrixLoadTransposefEXT = undefined,
    MatrixLoaddEXT: glMatrixLoaddEXT = undefined,
    MatrixLoadfEXT: glMatrixLoadfEXT = undefined,
    MatrixMult3x2fNV: glMatrixMult3x2fNV = undefined,
    MatrixMult3x3fNV: glMatrixMult3x3fNV = undefined,
    MatrixMultTranspose3x3fNV: glMatrixMultTranspose3x3fNV = undefined,
    MatrixMultTransposedEXT: glMatrixMultTransposedEXT = undefined,
    MatrixMultTransposefEXT: glMatrixMultTransposefEXT = undefined,
    MatrixMultdEXT: glMatrixMultdEXT = undefined,
    MatrixMultfEXT: glMatrixMultfEXT = undefined,
    MatrixOrthoEXT: glMatrixOrthoEXT = undefined,
    MatrixPopEXT: glMatrixPopEXT = undefined,
    MatrixPushEXT: glMatrixPushEXT = undefined,
    MatrixRotatedEXT: glMatrixRotatedEXT = undefined,
    MatrixRotatefEXT: glMatrixRotatefEXT = undefined,
    MatrixScaledEXT: glMatrixScaledEXT = undefined,
    MatrixScalefEXT: glMatrixScalefEXT = undefined,
    MatrixTranslatedEXT: glMatrixTranslatedEXT = undefined,
    MatrixTranslatefEXT: glMatrixTranslatefEXT = undefined,
    MaxShaderCompilerThreadsARB: glMaxShaderCompilerThreadsARB = undefined,
    MaxShaderCompilerThreadsKHR: glMaxShaderCompilerThreadsKHR = undefined,
    MemoryBarrier: glMemoryBarrier = undefined,
    MemoryBarrierByRegion: glMemoryBarrierByRegion = undefined,
    MemoryBarrierEXT: glMemoryBarrierEXT = undefined,
    MemoryObjectParameterivEXT: glMemoryObjectParameterivEXT = undefined,
    MinSampleShadingARB: glMinSampleShadingARB = undefined,
    MinmaxEXT: glMinmaxEXT = undefined,
    MultMatrixxOES: glMultMatrixxOES = undefined,
    MultTransposeMatrixdARB: glMultTransposeMatrixdARB = undefined,
    MultTransposeMatrixfARB: glMultTransposeMatrixfARB = undefined,
    MultTransposeMatrixxOES: glMultTransposeMatrixxOES = undefined,
    MultiDrawArrays: glMultiDrawArrays = undefined,
    MultiDrawArraysEXT: glMultiDrawArraysEXT = undefined,
    MultiDrawArraysIndirect: glMultiDrawArraysIndirect = undefined,
    MultiDrawArraysIndirectAMD: glMultiDrawArraysIndirectAMD = undefined,
    MultiDrawArraysIndirectBindlessCountNV: glMultiDrawArraysIndirectBindlessCountNV = undefined,
    MultiDrawArraysIndirectBindlessNV: glMultiDrawArraysIndirectBindlessNV = undefined,
    MultiDrawArraysIndirectCountARB: glMultiDrawArraysIndirectCountARB = undefined,
    MultiDrawElementArrayAPPLE: glMultiDrawElementArrayAPPLE = undefined,
    MultiDrawElements: glMultiDrawElements = undefined,
    MultiDrawElementsBaseVertex: glMultiDrawElementsBaseVertex = undefined,
    MultiDrawElementsEXT: glMultiDrawElementsEXT = undefined,
    MultiDrawElementsIndirect: glMultiDrawElementsIndirect = undefined,
    MultiDrawElementsIndirectAMD: glMultiDrawElementsIndirectAMD = undefined,
    MultiDrawElementsIndirectBindlessCountNV: glMultiDrawElementsIndirectBindlessCountNV = undefined,
    MultiDrawElementsIndirectBindlessNV: glMultiDrawElementsIndirectBindlessNV = undefined,
    MultiDrawElementsIndirectCountARB: glMultiDrawElementsIndirectCountARB = undefined,
    MultiDrawMeshTasksIndirectCountNV: glMultiDrawMeshTasksIndirectCountNV = undefined,
    MultiDrawMeshTasksIndirectNV: glMultiDrawMeshTasksIndirectNV = undefined,
    MultiDrawRangeElementArrayAPPLE: glMultiDrawRangeElementArrayAPPLE = undefined,
    MultiModeDrawArraysIBM: glMultiModeDrawArraysIBM = undefined,
    MultiModeDrawElementsIBM: glMultiModeDrawElementsIBM = undefined,
    MultiTexBufferEXT: glMultiTexBufferEXT = undefined,
    MultiTexCoord1bOES: glMultiTexCoord1bOES = undefined,
    MultiTexCoord1bvOES: glMultiTexCoord1bvOES = undefined,
    MultiTexCoord1dARB: glMultiTexCoord1dARB = undefined,
    MultiTexCoord1dvARB: glMultiTexCoord1dvARB = undefined,
    MultiTexCoord1fARB: glMultiTexCoord1fARB = undefined,
    MultiTexCoord1fvARB: glMultiTexCoord1fvARB = undefined,
    MultiTexCoord1hNV: glMultiTexCoord1hNV = undefined,
    MultiTexCoord1hvNV: glMultiTexCoord1hvNV = undefined,
    MultiTexCoord1iARB: glMultiTexCoord1iARB = undefined,
    MultiTexCoord1ivARB: glMultiTexCoord1ivARB = undefined,
    MultiTexCoord1sARB: glMultiTexCoord1sARB = undefined,
    MultiTexCoord1svARB: glMultiTexCoord1svARB = undefined,
    MultiTexCoord1xOES: glMultiTexCoord1xOES = undefined,
    MultiTexCoord1xvOES: glMultiTexCoord1xvOES = undefined,
    MultiTexCoord2bOES: glMultiTexCoord2bOES = undefined,
    MultiTexCoord2bvOES: glMultiTexCoord2bvOES = undefined,
    MultiTexCoord2dARB: glMultiTexCoord2dARB = undefined,
    MultiTexCoord2dvARB: glMultiTexCoord2dvARB = undefined,
    MultiTexCoord2fARB: glMultiTexCoord2fARB = undefined,
    MultiTexCoord2fvARB: glMultiTexCoord2fvARB = undefined,
    MultiTexCoord2hNV: glMultiTexCoord2hNV = undefined,
    MultiTexCoord2hvNV: glMultiTexCoord2hvNV = undefined,
    MultiTexCoord2iARB: glMultiTexCoord2iARB = undefined,
    MultiTexCoord2ivARB: glMultiTexCoord2ivARB = undefined,
    MultiTexCoord2sARB: glMultiTexCoord2sARB = undefined,
    MultiTexCoord2svARB: glMultiTexCoord2svARB = undefined,
    MultiTexCoord2xOES: glMultiTexCoord2xOES = undefined,
    MultiTexCoord2xvOES: glMultiTexCoord2xvOES = undefined,
    MultiTexCoord3bOES: glMultiTexCoord3bOES = undefined,
    MultiTexCoord3bvOES: glMultiTexCoord3bvOES = undefined,
    MultiTexCoord3dARB: glMultiTexCoord3dARB = undefined,
    MultiTexCoord3dvARB: glMultiTexCoord3dvARB = undefined,
    MultiTexCoord3fARB: glMultiTexCoord3fARB = undefined,
    MultiTexCoord3fvARB: glMultiTexCoord3fvARB = undefined,
    MultiTexCoord3hNV: glMultiTexCoord3hNV = undefined,
    MultiTexCoord3hvNV: glMultiTexCoord3hvNV = undefined,
    MultiTexCoord3iARB: glMultiTexCoord3iARB = undefined,
    MultiTexCoord3ivARB: glMultiTexCoord3ivARB = undefined,
    MultiTexCoord3sARB: glMultiTexCoord3sARB = undefined,
    MultiTexCoord3svARB: glMultiTexCoord3svARB = undefined,
    MultiTexCoord3xOES: glMultiTexCoord3xOES = undefined,
    MultiTexCoord3xvOES: glMultiTexCoord3xvOES = undefined,
    MultiTexCoord4bOES: glMultiTexCoord4bOES = undefined,
    MultiTexCoord4bvOES: glMultiTexCoord4bvOES = undefined,
    MultiTexCoord4dARB: glMultiTexCoord4dARB = undefined,
    MultiTexCoord4dvARB: glMultiTexCoord4dvARB = undefined,
    MultiTexCoord4fARB: glMultiTexCoord4fARB = undefined,
    MultiTexCoord4fvARB: glMultiTexCoord4fvARB = undefined,
    MultiTexCoord4hNV: glMultiTexCoord4hNV = undefined,
    MultiTexCoord4hvNV: glMultiTexCoord4hvNV = undefined,
    MultiTexCoord4iARB: glMultiTexCoord4iARB = undefined,
    MultiTexCoord4ivARB: glMultiTexCoord4ivARB = undefined,
    MultiTexCoord4sARB: glMultiTexCoord4sARB = undefined,
    MultiTexCoord4svARB: glMultiTexCoord4svARB = undefined,
    MultiTexCoord4xOES: glMultiTexCoord4xOES = undefined,
    MultiTexCoord4xvOES: glMultiTexCoord4xvOES = undefined,
    MultiTexCoordPointerEXT: glMultiTexCoordPointerEXT = undefined,
    MultiTexEnvfEXT: glMultiTexEnvfEXT = undefined,
    MultiTexEnvfvEXT: glMultiTexEnvfvEXT = undefined,
    MultiTexEnviEXT: glMultiTexEnviEXT = undefined,
    MultiTexEnvivEXT: glMultiTexEnvivEXT = undefined,
    MultiTexGendEXT: glMultiTexGendEXT = undefined,
    MultiTexGendvEXT: glMultiTexGendvEXT = undefined,
    MultiTexGenfEXT: glMultiTexGenfEXT = undefined,
    MultiTexGenfvEXT: glMultiTexGenfvEXT = undefined,
    MultiTexGeniEXT: glMultiTexGeniEXT = undefined,
    MultiTexGenivEXT: glMultiTexGenivEXT = undefined,
    MultiTexImage1DEXT: glMultiTexImage1DEXT = undefined,
    MultiTexImage2DEXT: glMultiTexImage2DEXT = undefined,
    MultiTexImage3DEXT: glMultiTexImage3DEXT = undefined,
    MultiTexParameterIivEXT: glMultiTexParameterIivEXT = undefined,
    MultiTexParameterIuivEXT: glMultiTexParameterIuivEXT = undefined,
    MultiTexParameterfEXT: glMultiTexParameterfEXT = undefined,
    MultiTexParameterfvEXT: glMultiTexParameterfvEXT = undefined,
    MultiTexParameteriEXT: glMultiTexParameteriEXT = undefined,
    MultiTexParameterivEXT: glMultiTexParameterivEXT = undefined,
    MultiTexRenderbufferEXT: glMultiTexRenderbufferEXT = undefined,
    MultiTexSubImage1DEXT: glMultiTexSubImage1DEXT = undefined,
    MultiTexSubImage2DEXT: glMultiTexSubImage2DEXT = undefined,
    MultiTexSubImage3DEXT: glMultiTexSubImage3DEXT = undefined,
    MulticastBarrierNV: glMulticastBarrierNV = undefined,
    MulticastBlitFramebufferNV: glMulticastBlitFramebufferNV = undefined,
    MulticastBufferSubDataNV: glMulticastBufferSubDataNV = undefined,
    MulticastCopyBufferSubDataNV: glMulticastCopyBufferSubDataNV = undefined,
    MulticastCopyImageSubDataNV: glMulticastCopyImageSubDataNV = undefined,
    MulticastFramebufferSampleLocationsfvNV: glMulticastFramebufferSampleLocationsfvNV = undefined,
    MulticastGetQueryObjecti64vNV: glMulticastGetQueryObjecti64vNV = undefined,
    MulticastGetQueryObjectivNV: glMulticastGetQueryObjectivNV = undefined,
    MulticastGetQueryObjectui64vNV: glMulticastGetQueryObjectui64vNV = undefined,
    MulticastGetQueryObjectuivNV: glMulticastGetQueryObjectuivNV = undefined,
    MulticastScissorArrayvNVX: glMulticastScissorArrayvNVX = undefined,
    MulticastViewportArrayvNVX: glMulticastViewportArrayvNVX = undefined,
    MulticastViewportPositionWScaleNVX: glMulticastViewportPositionWScaleNVX = undefined,
    MulticastWaitSyncNV: glMulticastWaitSyncNV = undefined,
    NamedBufferAttachMemoryNV: glNamedBufferAttachMemoryNV = undefined,
    NamedBufferData: glNamedBufferData = undefined,
    NamedBufferDataEXT: glNamedBufferDataEXT = undefined,
    NamedBufferPageCommitmentARB: glNamedBufferPageCommitmentARB = undefined,
    NamedBufferPageCommitmentEXT: glNamedBufferPageCommitmentEXT = undefined,
    NamedBufferPageCommitmentMemNV: glNamedBufferPageCommitmentMemNV = undefined,
    NamedBufferStorage: glNamedBufferStorage = undefined,
    NamedBufferStorageEXT: glNamedBufferStorageEXT = undefined,
    NamedBufferStorageExternalEXT: glNamedBufferStorageExternalEXT = undefined,
    NamedBufferStorageMemEXT: glNamedBufferStorageMemEXT = undefined,
    NamedBufferSubData: glNamedBufferSubData = undefined,
    NamedBufferSubDataEXT: glNamedBufferSubDataEXT = undefined,
    NamedCopyBufferSubDataEXT: glNamedCopyBufferSubDataEXT = undefined,
    NamedFramebufferDrawBuffer: glNamedFramebufferDrawBuffer = undefined,
    NamedFramebufferDrawBuffers: glNamedFramebufferDrawBuffers = undefined,
    NamedFramebufferParameteri: glNamedFramebufferParameteri = undefined,
    NamedFramebufferParameteriEXT: glNamedFramebufferParameteriEXT = undefined,
    NamedFramebufferReadBuffer: glNamedFramebufferReadBuffer = undefined,
    NamedFramebufferRenderbuffer: glNamedFramebufferRenderbuffer = undefined,
    NamedFramebufferRenderbufferEXT: glNamedFramebufferRenderbufferEXT = undefined,
    NamedFramebufferSampleLocationsfvARB: glNamedFramebufferSampleLocationsfvARB = undefined,
    NamedFramebufferSampleLocationsfvNV: glNamedFramebufferSampleLocationsfvNV = undefined,
    NamedFramebufferSamplePositionsfvAMD: glNamedFramebufferSamplePositionsfvAMD = undefined,
    NamedFramebufferTexture: glNamedFramebufferTexture = undefined,
    NamedFramebufferTexture1DEXT: glNamedFramebufferTexture1DEXT = undefined,
    NamedFramebufferTexture2DEXT: glNamedFramebufferTexture2DEXT = undefined,
    NamedFramebufferTexture3DEXT: glNamedFramebufferTexture3DEXT = undefined,
    NamedFramebufferTextureEXT: glNamedFramebufferTextureEXT = undefined,
    NamedFramebufferTextureFaceEXT: glNamedFramebufferTextureFaceEXT = undefined,
    NamedFramebufferTextureLayer: glNamedFramebufferTextureLayer = undefined,
    NamedFramebufferTextureLayerEXT: glNamedFramebufferTextureLayerEXT = undefined,
    NamedProgramLocalParameter4dEXT: glNamedProgramLocalParameter4dEXT = undefined,
    NamedProgramLocalParameter4dvEXT: glNamedProgramLocalParameter4dvEXT = undefined,
    NamedProgramLocalParameter4fEXT: glNamedProgramLocalParameter4fEXT = undefined,
    NamedProgramLocalParameter4fvEXT: glNamedProgramLocalParameter4fvEXT = undefined,
    NamedProgramLocalParameterI4iEXT: glNamedProgramLocalParameterI4iEXT = undefined,
    NamedProgramLocalParameterI4ivEXT: glNamedProgramLocalParameterI4ivEXT = undefined,
    NamedProgramLocalParameterI4uiEXT: glNamedProgramLocalParameterI4uiEXT = undefined,
    NamedProgramLocalParameterI4uivEXT: glNamedProgramLocalParameterI4uivEXT = undefined,
    NamedProgramLocalParameters4fvEXT: glNamedProgramLocalParameters4fvEXT = undefined,
    NamedProgramLocalParametersI4ivEXT: glNamedProgramLocalParametersI4ivEXT = undefined,
    NamedProgramLocalParametersI4uivEXT: glNamedProgramLocalParametersI4uivEXT = undefined,
    NamedProgramStringEXT: glNamedProgramStringEXT = undefined,
    NamedRenderbufferStorage: glNamedRenderbufferStorage = undefined,
    NamedRenderbufferStorageEXT: glNamedRenderbufferStorageEXT = undefined,
    NamedRenderbufferStorageMultisample: glNamedRenderbufferStorageMultisample = undefined,
    NamedRenderbufferStorageMultisampleAdvancedAMD: glNamedRenderbufferStorageMultisampleAdvancedAMD = undefined,
    NamedRenderbufferStorageMultisampleCoverageEXT: glNamedRenderbufferStorageMultisampleCoverageEXT = undefined,
    NamedRenderbufferStorageMultisampleEXT: glNamedRenderbufferStorageMultisampleEXT = undefined,
    NamedStringARB: glNamedStringARB = undefined,
    NewObjectBufferATI: glNewObjectBufferATI = undefined,
    Normal3fVertex3fSUN: glNormal3fVertex3fSUN = undefined,
    Normal3fVertex3fvSUN: glNormal3fVertex3fvSUN = undefined,
    Normal3hNV: glNormal3hNV = undefined,
    Normal3hvNV: glNormal3hvNV = undefined,
    Normal3xOES: glNormal3xOES = undefined,
    Normal3xvOES: glNormal3xvOES = undefined,
    NormalFormatNV: glNormalFormatNV = undefined,
    NormalPointerEXT: glNormalPointerEXT = undefined,
    NormalPointerListIBM: glNormalPointerListIBM = undefined,
    NormalPointervINTEL: glNormalPointervINTEL = undefined,
    NormalStream3bATI: glNormalStream3bATI = undefined,
    NormalStream3bvATI: glNormalStream3bvATI = undefined,
    NormalStream3dATI: glNormalStream3dATI = undefined,
    NormalStream3dvATI: glNormalStream3dvATI = undefined,
    NormalStream3fATI: glNormalStream3fATI = undefined,
    NormalStream3fvATI: glNormalStream3fvATI = undefined,
    NormalStream3iATI: glNormalStream3iATI = undefined,
    NormalStream3ivATI: glNormalStream3ivATI = undefined,
    NormalStream3sATI: glNormalStream3sATI = undefined,
    NormalStream3svATI: glNormalStream3svATI = undefined,
    ObjectLabel: glObjectLabel = undefined,
    ObjectPtrLabel: glObjectPtrLabel = undefined,
    ObjectPurgeableAPPLE: glObjectPurgeableAPPLE = undefined,
    ObjectUnpurgeableAPPLE: glObjectUnpurgeableAPPLE = undefined,
    OrthofOES: glOrthofOES = undefined,
    OrthoxOES: glOrthoxOES = undefined,
    PNTrianglesfATI: glPNTrianglesfATI = undefined,
    PNTrianglesiATI: glPNTrianglesiATI = undefined,
    PassTexCoordATI: glPassTexCoordATI = undefined,
    PassThroughxOES: glPassThroughxOES = undefined,
    PatchParameterfv: glPatchParameterfv = undefined,
    PatchParameteri: glPatchParameteri = undefined,
    PathCommandsNV: glPathCommandsNV = undefined,
    PathCoordsNV: glPathCoordsNV = undefined,
    PathCoverDepthFuncNV: glPathCoverDepthFuncNV = undefined,
    PathDashArrayNV: glPathDashArrayNV = undefined,
    PathGlyphIndexArrayNV: glPathGlyphIndexArrayNV = undefined,
    PathGlyphIndexRangeNV: glPathGlyphIndexRangeNV = undefined,
    PathGlyphRangeNV: glPathGlyphRangeNV = undefined,
    PathGlyphsNV: glPathGlyphsNV = undefined,
    PathMemoryGlyphIndexArrayNV: glPathMemoryGlyphIndexArrayNV = undefined,
    PathParameterfNV: glPathParameterfNV = undefined,
    PathParameterfvNV: glPathParameterfvNV = undefined,
    PathParameteriNV: glPathParameteriNV = undefined,
    PathParameterivNV: glPathParameterivNV = undefined,
    PathStencilDepthOffsetNV: glPathStencilDepthOffsetNV = undefined,
    PathStencilFuncNV: glPathStencilFuncNV = undefined,
    PathStringNV: glPathStringNV = undefined,
    PathSubCommandsNV: glPathSubCommandsNV = undefined,
    PathSubCoordsNV: glPathSubCoordsNV = undefined,
    PauseTransformFeedback: glPauseTransformFeedback = undefined,
    PauseTransformFeedbackNV: glPauseTransformFeedbackNV = undefined,
    PixelDataRangeNV: glPixelDataRangeNV = undefined,
    PixelMapx: glPixelMapx = undefined,
    PixelStoref: glPixelStoref = undefined,
    PixelStorei: glPixelStorei = undefined,
    PixelStorex: glPixelStorex = undefined,
    PixelTexGenParameterfSGIS: glPixelTexGenParameterfSGIS = undefined,
    PixelTexGenParameterfvSGIS: glPixelTexGenParameterfvSGIS = undefined,
    PixelTexGenParameteriSGIS: glPixelTexGenParameteriSGIS = undefined,
    PixelTexGenParameterivSGIS: glPixelTexGenParameterivSGIS = undefined,
    PixelTexGenSGIX: glPixelTexGenSGIX = undefined,
    PixelTransferxOES: glPixelTransferxOES = undefined,
    PixelTransformParameterfEXT: glPixelTransformParameterfEXT = undefined,
    PixelTransformParameterfvEXT: glPixelTransformParameterfvEXT = undefined,
    PixelTransformParameteriEXT: glPixelTransformParameteriEXT = undefined,
    PixelTransformParameterivEXT: glPixelTransformParameterivEXT = undefined,
    PixelZoomxOES: glPixelZoomxOES = undefined,
    PointAlongPathNV: glPointAlongPathNV = undefined,
    PointParameterf: glPointParameterf = undefined,
    PointParameterfARB: glPointParameterfARB = undefined,
    PointParameterfEXT: glPointParameterfEXT = undefined,
    PointParameterfSGIS: glPointParameterfSGIS = undefined,
    PointParameterfv: glPointParameterfv = undefined,
    PointParameterfvARB: glPointParameterfvARB = undefined,
    PointParameterfvEXT: glPointParameterfvEXT = undefined,
    PointParameterfvSGIS: glPointParameterfvSGIS = undefined,
    PointParameteri: glPointParameteri = undefined,
    PointParameteriNV: glPointParameteriNV = undefined,
    PointParameteriv: glPointParameteriv = undefined,
    PointParameterivNV: glPointParameterivNV = undefined,
    PointParameterxvOES: glPointParameterxvOES = undefined,
    PointSize: glPointSize = undefined,
    PointSizexOES: glPointSizexOES = undefined,
    PollAsyncSGIX: glPollAsyncSGIX = undefined,
    PollInstrumentsSGIX: glPollInstrumentsSGIX = undefined,
    PolygonMode: glPolygonMode = undefined,
    PolygonOffset: glPolygonOffset = undefined,
    PolygonOffsetClamp: glPolygonOffsetClamp = undefined,
    PolygonOffsetClampEXT: glPolygonOffsetClampEXT = undefined,
    PolygonOffsetEXT: glPolygonOffsetEXT = undefined,
    PolygonOffsetxOES: glPolygonOffsetxOES = undefined,
    PopDebugGroup: glPopDebugGroup = undefined,
    PopGroupMarkerEXT: glPopGroupMarkerEXT = undefined,
    PresentFrameDualFillNV: glPresentFrameDualFillNV = undefined,
    PresentFrameKeyedNV: glPresentFrameKeyedNV = undefined,
    PrimitiveBoundingBoxARB: glPrimitiveBoundingBoxARB = undefined,
    PrimitiveRestartIndex: glPrimitiveRestartIndex = undefined,
    PrimitiveRestartIndexNV: glPrimitiveRestartIndexNV = undefined,
    PrimitiveRestartNV: glPrimitiveRestartNV = undefined,
    PrioritizeTexturesEXT: glPrioritizeTexturesEXT = undefined,
    PrioritizeTexturesxOES: glPrioritizeTexturesxOES = undefined,
    ProgramBinary: glProgramBinary = undefined,
    ProgramBufferParametersIivNV: glProgramBufferParametersIivNV = undefined,
    ProgramBufferParametersIuivNV: glProgramBufferParametersIuivNV = undefined,
    ProgramBufferParametersfvNV: glProgramBufferParametersfvNV = undefined,
    ProgramEnvParameter4dARB: glProgramEnvParameter4dARB = undefined,
    ProgramEnvParameter4dvARB: glProgramEnvParameter4dvARB = undefined,
    ProgramEnvParameter4fARB: glProgramEnvParameter4fARB = undefined,
    ProgramEnvParameter4fvARB: glProgramEnvParameter4fvARB = undefined,
    ProgramEnvParameterI4iNV: glProgramEnvParameterI4iNV = undefined,
    ProgramEnvParameterI4ivNV: glProgramEnvParameterI4ivNV = undefined,
    ProgramEnvParameterI4uiNV: glProgramEnvParameterI4uiNV = undefined,
    ProgramEnvParameterI4uivNV: glProgramEnvParameterI4uivNV = undefined,
    ProgramEnvParameters4fvEXT: glProgramEnvParameters4fvEXT = undefined,
    ProgramEnvParametersI4ivNV: glProgramEnvParametersI4ivNV = undefined,
    ProgramEnvParametersI4uivNV: glProgramEnvParametersI4uivNV = undefined,
    ProgramLocalParameter4dARB: glProgramLocalParameter4dARB = undefined,
    ProgramLocalParameter4dvARB: glProgramLocalParameter4dvARB = undefined,
    ProgramLocalParameter4fARB: glProgramLocalParameter4fARB = undefined,
    ProgramLocalParameter4fvARB: glProgramLocalParameter4fvARB = undefined,
    ProgramLocalParameterI4iNV: glProgramLocalParameterI4iNV = undefined,
    ProgramLocalParameterI4ivNV: glProgramLocalParameterI4ivNV = undefined,
    ProgramLocalParameterI4uiNV: glProgramLocalParameterI4uiNV = undefined,
    ProgramLocalParameterI4uivNV: glProgramLocalParameterI4uivNV = undefined,
    ProgramLocalParameters4fvEXT: glProgramLocalParameters4fvEXT = undefined,
    ProgramLocalParametersI4ivNV: glProgramLocalParametersI4ivNV = undefined,
    ProgramLocalParametersI4uivNV: glProgramLocalParametersI4uivNV = undefined,
    ProgramNamedParameter4dNV: glProgramNamedParameter4dNV = undefined,
    ProgramNamedParameter4dvNV: glProgramNamedParameter4dvNV = undefined,
    ProgramNamedParameter4fNV: glProgramNamedParameter4fNV = undefined,
    ProgramNamedParameter4fvNV: glProgramNamedParameter4fvNV = undefined,
    ProgramParameter4dNV: glProgramParameter4dNV = undefined,
    ProgramParameter4dvNV: glProgramParameter4dvNV = undefined,
    ProgramParameter4fNV: glProgramParameter4fNV = undefined,
    ProgramParameter4fvNV: glProgramParameter4fvNV = undefined,
    ProgramParameteri: glProgramParameteri = undefined,
    ProgramParameteriARB: glProgramParameteriARB = undefined,
    ProgramParameteriEXT: glProgramParameteriEXT = undefined,
    ProgramParameters4dvNV: glProgramParameters4dvNV = undefined,
    ProgramParameters4fvNV: glProgramParameters4fvNV = undefined,
    ProgramPathFragmentInputGenNV: glProgramPathFragmentInputGenNV = undefined,
    ProgramStringARB: glProgramStringARB = undefined,
    ProgramSubroutineParametersuivNV: glProgramSubroutineParametersuivNV = undefined,
    ProgramUniform1d: glProgramUniform1d = undefined,
    ProgramUniform1dEXT: glProgramUniform1dEXT = undefined,
    ProgramUniform1dv: glProgramUniform1dv = undefined,
    ProgramUniform1dvEXT: glProgramUniform1dvEXT = undefined,
    ProgramUniform1f: glProgramUniform1f = undefined,
    ProgramUniform1fEXT: glProgramUniform1fEXT = undefined,
    ProgramUniform1fv: glProgramUniform1fv = undefined,
    ProgramUniform1fvEXT: glProgramUniform1fvEXT = undefined,
    ProgramUniform1i: glProgramUniform1i = undefined,
    ProgramUniform1i64ARB: glProgramUniform1i64ARB = undefined,
    ProgramUniform1i64NV: glProgramUniform1i64NV = undefined,
    ProgramUniform1i64vARB: glProgramUniform1i64vARB = undefined,
    ProgramUniform1i64vNV: glProgramUniform1i64vNV = undefined,
    ProgramUniform1iEXT: glProgramUniform1iEXT = undefined,
    ProgramUniform1iv: glProgramUniform1iv = undefined,
    ProgramUniform1ivEXT: glProgramUniform1ivEXT = undefined,
    ProgramUniform1ui: glProgramUniform1ui = undefined,
    ProgramUniform1ui64ARB: glProgramUniform1ui64ARB = undefined,
    ProgramUniform1ui64NV: glProgramUniform1ui64NV = undefined,
    ProgramUniform1ui64vARB: glProgramUniform1ui64vARB = undefined,
    ProgramUniform1ui64vNV: glProgramUniform1ui64vNV = undefined,
    ProgramUniform1uiEXT: glProgramUniform1uiEXT = undefined,
    ProgramUniform1uiv: glProgramUniform1uiv = undefined,
    ProgramUniform1uivEXT: glProgramUniform1uivEXT = undefined,
    ProgramUniform2d: glProgramUniform2d = undefined,
    ProgramUniform2dEXT: glProgramUniform2dEXT = undefined,
    ProgramUniform2dv: glProgramUniform2dv = undefined,
    ProgramUniform2dvEXT: glProgramUniform2dvEXT = undefined,
    ProgramUniform2f: glProgramUniform2f = undefined,
    ProgramUniform2fEXT: glProgramUniform2fEXT = undefined,
    ProgramUniform2fv: glProgramUniform2fv = undefined,
    ProgramUniform2fvEXT: glProgramUniform2fvEXT = undefined,
    ProgramUniform2i: glProgramUniform2i = undefined,
    ProgramUniform2i64ARB: glProgramUniform2i64ARB = undefined,
    ProgramUniform2i64NV: glProgramUniform2i64NV = undefined,
    ProgramUniform2i64vARB: glProgramUniform2i64vARB = undefined,
    ProgramUniform2i64vNV: glProgramUniform2i64vNV = undefined,
    ProgramUniform2iEXT: glProgramUniform2iEXT = undefined,
    ProgramUniform2iv: glProgramUniform2iv = undefined,
    ProgramUniform2ivEXT: glProgramUniform2ivEXT = undefined,
    ProgramUniform2ui: glProgramUniform2ui = undefined,
    ProgramUniform2ui64ARB: glProgramUniform2ui64ARB = undefined,
    ProgramUniform2ui64NV: glProgramUniform2ui64NV = undefined,
    ProgramUniform2ui64vARB: glProgramUniform2ui64vARB = undefined,
    ProgramUniform2ui64vNV: glProgramUniform2ui64vNV = undefined,
    ProgramUniform2uiEXT: glProgramUniform2uiEXT = undefined,
    ProgramUniform2uiv: glProgramUniform2uiv = undefined,
    ProgramUniform2uivEXT: glProgramUniform2uivEXT = undefined,
    ProgramUniform3d: glProgramUniform3d = undefined,
    ProgramUniform3dEXT: glProgramUniform3dEXT = undefined,
    ProgramUniform3dv: glProgramUniform3dv = undefined,
    ProgramUniform3dvEXT: glProgramUniform3dvEXT = undefined,
    ProgramUniform3f: glProgramUniform3f = undefined,
    ProgramUniform3fEXT: glProgramUniform3fEXT = undefined,
    ProgramUniform3fv: glProgramUniform3fv = undefined,
    ProgramUniform3fvEXT: glProgramUniform3fvEXT = undefined,
    ProgramUniform3i: glProgramUniform3i = undefined,
    ProgramUniform3i64ARB: glProgramUniform3i64ARB = undefined,
    ProgramUniform3i64NV: glProgramUniform3i64NV = undefined,
    ProgramUniform3i64vARB: glProgramUniform3i64vARB = undefined,
    ProgramUniform3i64vNV: glProgramUniform3i64vNV = undefined,
    ProgramUniform3iEXT: glProgramUniform3iEXT = undefined,
    ProgramUniform3iv: glProgramUniform3iv = undefined,
    ProgramUniform3ivEXT: glProgramUniform3ivEXT = undefined,
    ProgramUniform3ui: glProgramUniform3ui = undefined,
    ProgramUniform3ui64ARB: glProgramUniform3ui64ARB = undefined,
    ProgramUniform3ui64NV: glProgramUniform3ui64NV = undefined,
    ProgramUniform3ui64vARB: glProgramUniform3ui64vARB = undefined,
    ProgramUniform3ui64vNV: glProgramUniform3ui64vNV = undefined,
    ProgramUniform3uiEXT: glProgramUniform3uiEXT = undefined,
    ProgramUniform3uiv: glProgramUniform3uiv = undefined,
    ProgramUniform3uivEXT: glProgramUniform3uivEXT = undefined,
    ProgramUniform4d: glProgramUniform4d = undefined,
    ProgramUniform4dEXT: glProgramUniform4dEXT = undefined,
    ProgramUniform4dv: glProgramUniform4dv = undefined,
    ProgramUniform4dvEXT: glProgramUniform4dvEXT = undefined,
    ProgramUniform4f: glProgramUniform4f = undefined,
    ProgramUniform4fEXT: glProgramUniform4fEXT = undefined,
    ProgramUniform4fv: glProgramUniform4fv = undefined,
    ProgramUniform4fvEXT: glProgramUniform4fvEXT = undefined,
    ProgramUniform4i: glProgramUniform4i = undefined,
    ProgramUniform4i64ARB: glProgramUniform4i64ARB = undefined,
    ProgramUniform4i64NV: glProgramUniform4i64NV = undefined,
    ProgramUniform4i64vARB: glProgramUniform4i64vARB = undefined,
    ProgramUniform4i64vNV: glProgramUniform4i64vNV = undefined,
    ProgramUniform4iEXT: glProgramUniform4iEXT = undefined,
    ProgramUniform4iv: glProgramUniform4iv = undefined,
    ProgramUniform4ivEXT: glProgramUniform4ivEXT = undefined,
    ProgramUniform4ui: glProgramUniform4ui = undefined,
    ProgramUniform4ui64ARB: glProgramUniform4ui64ARB = undefined,
    ProgramUniform4ui64NV: glProgramUniform4ui64NV = undefined,
    ProgramUniform4ui64vARB: glProgramUniform4ui64vARB = undefined,
    ProgramUniform4ui64vNV: glProgramUniform4ui64vNV = undefined,
    ProgramUniform4uiEXT: glProgramUniform4uiEXT = undefined,
    ProgramUniform4uiv: glProgramUniform4uiv = undefined,
    ProgramUniform4uivEXT: glProgramUniform4uivEXT = undefined,
    ProgramUniformHandleui64ARB: glProgramUniformHandleui64ARB = undefined,
    ProgramUniformHandleui64NV: glProgramUniformHandleui64NV = undefined,
    ProgramUniformHandleui64vARB: glProgramUniformHandleui64vARB = undefined,
    ProgramUniformHandleui64vNV: glProgramUniformHandleui64vNV = undefined,
    ProgramUniformMatrix2dv: glProgramUniformMatrix2dv = undefined,
    ProgramUniformMatrix2dvEXT: glProgramUniformMatrix2dvEXT = undefined,
    ProgramUniformMatrix2fv: glProgramUniformMatrix2fv = undefined,
    ProgramUniformMatrix2fvEXT: glProgramUniformMatrix2fvEXT = undefined,
    ProgramUniformMatrix2x3dv: glProgramUniformMatrix2x3dv = undefined,
    ProgramUniformMatrix2x3dvEXT: glProgramUniformMatrix2x3dvEXT = undefined,
    ProgramUniformMatrix2x3fv: glProgramUniformMatrix2x3fv = undefined,
    ProgramUniformMatrix2x3fvEXT: glProgramUniformMatrix2x3fvEXT = undefined,
    ProgramUniformMatrix2x4dv: glProgramUniformMatrix2x4dv = undefined,
    ProgramUniformMatrix2x4dvEXT: glProgramUniformMatrix2x4dvEXT = undefined,
    ProgramUniformMatrix2x4fv: glProgramUniformMatrix2x4fv = undefined,
    ProgramUniformMatrix2x4fvEXT: glProgramUniformMatrix2x4fvEXT = undefined,
    ProgramUniformMatrix3dv: glProgramUniformMatrix3dv = undefined,
    ProgramUniformMatrix3dvEXT: glProgramUniformMatrix3dvEXT = undefined,
    ProgramUniformMatrix3fv: glProgramUniformMatrix3fv = undefined,
    ProgramUniformMatrix3fvEXT: glProgramUniformMatrix3fvEXT = undefined,
    ProgramUniformMatrix3x2dv: glProgramUniformMatrix3x2dv = undefined,
    ProgramUniformMatrix3x2dvEXT: glProgramUniformMatrix3x2dvEXT = undefined,
    ProgramUniformMatrix3x2fv: glProgramUniformMatrix3x2fv = undefined,
    ProgramUniformMatrix3x2fvEXT: glProgramUniformMatrix3x2fvEXT = undefined,
    ProgramUniformMatrix3x4dv: glProgramUniformMatrix3x4dv = undefined,
    ProgramUniformMatrix3x4dvEXT: glProgramUniformMatrix3x4dvEXT = undefined,
    ProgramUniformMatrix3x4fv: glProgramUniformMatrix3x4fv = undefined,
    ProgramUniformMatrix3x4fvEXT: glProgramUniformMatrix3x4fvEXT = undefined,
    ProgramUniformMatrix4dv: glProgramUniformMatrix4dv = undefined,
    ProgramUniformMatrix4dvEXT: glProgramUniformMatrix4dvEXT = undefined,
    ProgramUniformMatrix4fv: glProgramUniformMatrix4fv = undefined,
    ProgramUniformMatrix4fvEXT: glProgramUniformMatrix4fvEXT = undefined,
    ProgramUniformMatrix4x2dv: glProgramUniformMatrix4x2dv = undefined,
    ProgramUniformMatrix4x2dvEXT: glProgramUniformMatrix4x2dvEXT = undefined,
    ProgramUniformMatrix4x2fv: glProgramUniformMatrix4x2fv = undefined,
    ProgramUniformMatrix4x2fvEXT: glProgramUniformMatrix4x2fvEXT = undefined,
    ProgramUniformMatrix4x3dv: glProgramUniformMatrix4x3dv = undefined,
    ProgramUniformMatrix4x3dvEXT: glProgramUniformMatrix4x3dvEXT = undefined,
    ProgramUniformMatrix4x3fv: glProgramUniformMatrix4x3fv = undefined,
    ProgramUniformMatrix4x3fvEXT: glProgramUniformMatrix4x3fvEXT = undefined,
    ProgramUniformui64NV: glProgramUniformui64NV = undefined,
    ProgramUniformui64vNV: glProgramUniformui64vNV = undefined,
    ProgramVertexLimitNV: glProgramVertexLimitNV = undefined,
    ProvokingVertex: glProvokingVertex = undefined,
    ProvokingVertexEXT: glProvokingVertexEXT = undefined,
    PushClientAttribDefaultEXT: glPushClientAttribDefaultEXT = undefined,
    PushDebugGroup: glPushDebugGroup = undefined,
    PushGroupMarkerEXT: glPushGroupMarkerEXT = undefined,
    QueryCounter: glQueryCounter = undefined,
    QueryMatrixxOES: glQueryMatrixxOES = undefined,
    QueryObjectParameteruiAMD: glQueryObjectParameteruiAMD = undefined,
    QueryResourceNV: glQueryResourceNV = undefined,
    QueryResourceTagNV: glQueryResourceTagNV = undefined,
    RasterPos2xOES: glRasterPos2xOES = undefined,
    RasterPos2xvOES: glRasterPos2xvOES = undefined,
    RasterPos3xOES: glRasterPos3xOES = undefined,
    RasterPos3xvOES: glRasterPos3xvOES = undefined,
    RasterPos4xOES: glRasterPos4xOES = undefined,
    RasterPos4xvOES: glRasterPos4xvOES = undefined,
    RasterSamplesEXT: glRasterSamplesEXT = undefined,
    ReadBuffer: glReadBuffer = undefined,
    ReadInstrumentsSGIX: glReadInstrumentsSGIX = undefined,
    ReadPixels: glReadPixels = undefined,
    ReadnPixels: glReadnPixels = undefined,
    ReadnPixelsARB: glReadnPixelsARB = undefined,
    RectxOES: glRectxOES = undefined,
    RectxvOES: glRectxvOES = undefined,
    ReferencePlaneSGIX: glReferencePlaneSGIX = undefined,
    ReleaseKeyedMutexWin32EXT: glReleaseKeyedMutexWin32EXT = undefined,
    ReleaseShaderCompiler: glReleaseShaderCompiler = undefined,
    RenderGpuMaskNV: glRenderGpuMaskNV = undefined,
    RenderbufferStorage: glRenderbufferStorage = undefined,
    RenderbufferStorageEXT: glRenderbufferStorageEXT = undefined,
    RenderbufferStorageMultisample: glRenderbufferStorageMultisample = undefined,
    RenderbufferStorageMultisampleAdvancedAMD: glRenderbufferStorageMultisampleAdvancedAMD = undefined,
    RenderbufferStorageMultisampleCoverageNV: glRenderbufferStorageMultisampleCoverageNV = undefined,
    RenderbufferStorageMultisampleEXT: glRenderbufferStorageMultisampleEXT = undefined,
    ReplacementCodePointerSUN: glReplacementCodePointerSUN = undefined,
    ReplacementCodeubSUN: glReplacementCodeubSUN = undefined,
    ReplacementCodeubvSUN: glReplacementCodeubvSUN = undefined,
    ReplacementCodeuiColor3fVertex3fSUN: glReplacementCodeuiColor3fVertex3fSUN = undefined,
    ReplacementCodeuiColor3fVertex3fvSUN: glReplacementCodeuiColor3fVertex3fvSUN = undefined,
    ReplacementCodeuiColor4fNormal3fVertex3fSUN: glReplacementCodeuiColor4fNormal3fVertex3fSUN = undefined,
    ReplacementCodeuiColor4fNormal3fVertex3fvSUN: glReplacementCodeuiColor4fNormal3fVertex3fvSUN = undefined,
    ReplacementCodeuiColor4ubVertex3fSUN: glReplacementCodeuiColor4ubVertex3fSUN = undefined,
    ReplacementCodeuiColor4ubVertex3fvSUN: glReplacementCodeuiColor4ubVertex3fvSUN = undefined,
    ReplacementCodeuiNormal3fVertex3fSUN: glReplacementCodeuiNormal3fVertex3fSUN = undefined,
    ReplacementCodeuiNormal3fVertex3fvSUN: glReplacementCodeuiNormal3fVertex3fvSUN = undefined,
    ReplacementCodeuiSUN: glReplacementCodeuiSUN = undefined,
    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = undefined,
    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = undefined,
    ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = undefined,
    ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = undefined,
    ReplacementCodeuiTexCoord2fVertex3fSUN: glReplacementCodeuiTexCoord2fVertex3fSUN = undefined,
    ReplacementCodeuiTexCoord2fVertex3fvSUN: glReplacementCodeuiTexCoord2fVertex3fvSUN = undefined,
    ReplacementCodeuiVertex3fSUN: glReplacementCodeuiVertex3fSUN = undefined,
    ReplacementCodeuiVertex3fvSUN: glReplacementCodeuiVertex3fvSUN = undefined,
    ReplacementCodeuivSUN: glReplacementCodeuivSUN = undefined,
    ReplacementCodeusSUN: glReplacementCodeusSUN = undefined,
    ReplacementCodeusvSUN: glReplacementCodeusvSUN = undefined,
    RequestResidentProgramsNV: glRequestResidentProgramsNV = undefined,
    ResetHistogramEXT: glResetHistogramEXT = undefined,
    ResetMemoryObjectParameterNV: glResetMemoryObjectParameterNV = undefined,
    ResetMinmaxEXT: glResetMinmaxEXT = undefined,
    ResizeBuffersMESA: glResizeBuffersMESA = undefined,
    ResolveDepthValuesNV: glResolveDepthValuesNV = undefined,
    ResumeTransformFeedback: glResumeTransformFeedback = undefined,
    ResumeTransformFeedbackNV: glResumeTransformFeedbackNV = undefined,
    RotatexOES: glRotatexOES = undefined,
    SampleCoverage: glSampleCoverage = undefined,
    SampleCoverageARB: glSampleCoverageARB = undefined,
    SampleMapATI: glSampleMapATI = undefined,
    SampleMaskEXT: glSampleMaskEXT = undefined,
    SampleMaskIndexedNV: glSampleMaskIndexedNV = undefined,
    SampleMaskSGIS: glSampleMaskSGIS = undefined,
    SampleMaski: glSampleMaski = undefined,
    SamplePatternEXT: glSamplePatternEXT = undefined,
    SamplePatternSGIS: glSamplePatternSGIS = undefined,
    SamplerParameterIiv: glSamplerParameterIiv = undefined,
    SamplerParameterIuiv: glSamplerParameterIuiv = undefined,
    SamplerParameterf: glSamplerParameterf = undefined,
    SamplerParameterfv: glSamplerParameterfv = undefined,
    SamplerParameteri: glSamplerParameteri = undefined,
    SamplerParameteriv: glSamplerParameteriv = undefined,
    ScalexOES: glScalexOES = undefined,
    Scissor: glScissor = undefined,
    ScissorArrayv: glScissorArrayv = undefined,
    ScissorExclusiveArrayvNV: glScissorExclusiveArrayvNV = undefined,
    ScissorExclusiveNV: glScissorExclusiveNV = undefined,
    ScissorIndexed: glScissorIndexed = undefined,
    ScissorIndexedv: glScissorIndexedv = undefined,
    SecondaryColor3bEXT: glSecondaryColor3bEXT = undefined,
    SecondaryColor3bvEXT: glSecondaryColor3bvEXT = undefined,
    SecondaryColor3dEXT: glSecondaryColor3dEXT = undefined,
    SecondaryColor3dvEXT: glSecondaryColor3dvEXT = undefined,
    SecondaryColor3fEXT: glSecondaryColor3fEXT = undefined,
    SecondaryColor3fvEXT: glSecondaryColor3fvEXT = undefined,
    SecondaryColor3hNV: glSecondaryColor3hNV = undefined,
    SecondaryColor3hvNV: glSecondaryColor3hvNV = undefined,
    SecondaryColor3iEXT: glSecondaryColor3iEXT = undefined,
    SecondaryColor3ivEXT: glSecondaryColor3ivEXT = undefined,
    SecondaryColor3sEXT: glSecondaryColor3sEXT = undefined,
    SecondaryColor3svEXT: glSecondaryColor3svEXT = undefined,
    SecondaryColor3ubEXT: glSecondaryColor3ubEXT = undefined,
    SecondaryColor3ubvEXT: glSecondaryColor3ubvEXT = undefined,
    SecondaryColor3uiEXT: glSecondaryColor3uiEXT = undefined,
    SecondaryColor3uivEXT: glSecondaryColor3uivEXT = undefined,
    SecondaryColor3usEXT: glSecondaryColor3usEXT = undefined,
    SecondaryColor3usvEXT: glSecondaryColor3usvEXT = undefined,
    SecondaryColorFormatNV: glSecondaryColorFormatNV = undefined,
    SecondaryColorPointerEXT: glSecondaryColorPointerEXT = undefined,
    SecondaryColorPointerListIBM: glSecondaryColorPointerListIBM = undefined,
    SelectPerfMonitorCountersAMD: glSelectPerfMonitorCountersAMD = undefined,
    SemaphoreParameterivNV: glSemaphoreParameterivNV = undefined,
    SemaphoreParameterui64vEXT: glSemaphoreParameterui64vEXT = undefined,
    SeparableFilter2DEXT: glSeparableFilter2DEXT = undefined,
    SetFenceAPPLE: glSetFenceAPPLE = undefined,
    SetFenceNV: glSetFenceNV = undefined,
    SetFragmentShaderConstantATI: glSetFragmentShaderConstantATI = undefined,
    SetInvariantEXT: glSetInvariantEXT = undefined,
    SetLocalConstantEXT: glSetLocalConstantEXT = undefined,
    SetMultisamplefvAMD: glSetMultisamplefvAMD = undefined,
    ShaderBinary: glShaderBinary = undefined,
    ShaderOp1EXT: glShaderOp1EXT = undefined,
    ShaderOp2EXT: glShaderOp2EXT = undefined,
    ShaderOp3EXT: glShaderOp3EXT = undefined,
    ShaderSource: glShaderSource = undefined,
    ShaderSourceARB: glShaderSourceARB = undefined,
    ShaderStorageBlockBinding: glShaderStorageBlockBinding = undefined,
    ShadingRateImageBarrierNV: glShadingRateImageBarrierNV = undefined,
    ShadingRateImagePaletteNV: glShadingRateImagePaletteNV = undefined,
    ShadingRateSampleOrderCustomNV: glShadingRateSampleOrderCustomNV = undefined,
    ShadingRateSampleOrderNV: glShadingRateSampleOrderNV = undefined,
    SharpenTexFuncSGIS: glSharpenTexFuncSGIS = undefined,
    SignalSemaphoreEXT: glSignalSemaphoreEXT = undefined,
    SignalSemaphoreui64NVX: glSignalSemaphoreui64NVX = undefined,
    SignalVkFenceNV: glSignalVkFenceNV = undefined,
    SignalVkSemaphoreNV: glSignalVkSemaphoreNV = undefined,
    SpecializeShaderARB: glSpecializeShaderARB = undefined,
    SpriteParameterfSGIX: glSpriteParameterfSGIX = undefined,
    SpriteParameterfvSGIX: glSpriteParameterfvSGIX = undefined,
    SpriteParameteriSGIX: glSpriteParameteriSGIX = undefined,
    SpriteParameterivSGIX: glSpriteParameterivSGIX = undefined,
    StartInstrumentsSGIX: glStartInstrumentsSGIX = undefined,
    StateCaptureNV: glStateCaptureNV = undefined,
    StencilClearTagEXT: glStencilClearTagEXT = undefined,
    StencilFillPathInstancedNV: glStencilFillPathInstancedNV = undefined,
    StencilFillPathNV: glStencilFillPathNV = undefined,
    StencilFunc: glStencilFunc = undefined,
    StencilFuncSeparate: glStencilFuncSeparate = undefined,
    StencilFuncSeparateATI: glStencilFuncSeparateATI = undefined,
    StencilMask: glStencilMask = undefined,
    StencilMaskSeparate: glStencilMaskSeparate = undefined,
    StencilOp: glStencilOp = undefined,
    StencilOpSeparate: glStencilOpSeparate = undefined,
    StencilOpSeparateATI: glStencilOpSeparateATI = undefined,
    StencilOpValueAMD: glStencilOpValueAMD = undefined,
    StencilStrokePathInstancedNV: glStencilStrokePathInstancedNV = undefined,
    StencilStrokePathNV: glStencilStrokePathNV = undefined,
    StencilThenCoverFillPathInstancedNV: glStencilThenCoverFillPathInstancedNV = undefined,
    StencilThenCoverFillPathNV: glStencilThenCoverFillPathNV = undefined,
    StencilThenCoverStrokePathInstancedNV: glStencilThenCoverStrokePathInstancedNV = undefined,
    StencilThenCoverStrokePathNV: glStencilThenCoverStrokePathNV = undefined,
    StopInstrumentsSGIX: glStopInstrumentsSGIX = undefined,
    StringMarkerGREMEDY: glStringMarkerGREMEDY = undefined,
    SubpixelPrecisionBiasNV: glSubpixelPrecisionBiasNV = undefined,
    SwizzleEXT: glSwizzleEXT = undefined,
    SyncTextureINTEL: glSyncTextureINTEL = undefined,
    TagSampleBufferSGIX: glTagSampleBufferSGIX = undefined,
    Tangent3bEXT: glTangent3bEXT = undefined,
    Tangent3bvEXT: glTangent3bvEXT = undefined,
    Tangent3dEXT: glTangent3dEXT = undefined,
    Tangent3dvEXT: glTangent3dvEXT = undefined,
    Tangent3fEXT: glTangent3fEXT = undefined,
    Tangent3fvEXT: glTangent3fvEXT = undefined,
    Tangent3iEXT: glTangent3iEXT = undefined,
    Tangent3ivEXT: glTangent3ivEXT = undefined,
    Tangent3sEXT: glTangent3sEXT = undefined,
    Tangent3svEXT: glTangent3svEXT = undefined,
    TangentPointerEXT: glTangentPointerEXT = undefined,
    TbufferMask3DFX: glTbufferMask3DFX = undefined,
    TessellationFactorAMD: glTessellationFactorAMD = undefined,
    TessellationModeAMD: glTessellationModeAMD = undefined,
    TestFenceAPPLE: glTestFenceAPPLE = undefined,
    TestFenceNV: glTestFenceNV = undefined,
    TestObjectAPPLE: glTestObjectAPPLE = undefined,
    TexAttachMemoryNV: glTexAttachMemoryNV = undefined,
    TexBuffer: glTexBuffer = undefined,
    TexBufferARB: glTexBufferARB = undefined,
    TexBufferEXT: glTexBufferEXT = undefined,
    TexBufferRange: glTexBufferRange = undefined,
    TexBumpParameterfvATI: glTexBumpParameterfvATI = undefined,
    TexBumpParameterivATI: glTexBumpParameterivATI = undefined,
    TexCoord1bOES: glTexCoord1bOES = undefined,
    TexCoord1bvOES: glTexCoord1bvOES = undefined,
    TexCoord1hNV: glTexCoord1hNV = undefined,
    TexCoord1hvNV: glTexCoord1hvNV = undefined,
    TexCoord1xOES: glTexCoord1xOES = undefined,
    TexCoord1xvOES: glTexCoord1xvOES = undefined,
    TexCoord2bOES: glTexCoord2bOES = undefined,
    TexCoord2bvOES: glTexCoord2bvOES = undefined,
    TexCoord2fColor3fVertex3fSUN: glTexCoord2fColor3fVertex3fSUN = undefined,
    TexCoord2fColor3fVertex3fvSUN: glTexCoord2fColor3fVertex3fvSUN = undefined,
    TexCoord2fColor4fNormal3fVertex3fSUN: glTexCoord2fColor4fNormal3fVertex3fSUN = undefined,
    TexCoord2fColor4fNormal3fVertex3fvSUN: glTexCoord2fColor4fNormal3fVertex3fvSUN = undefined,
    TexCoord2fColor4ubVertex3fSUN: glTexCoord2fColor4ubVertex3fSUN = undefined,
    TexCoord2fColor4ubVertex3fvSUN: glTexCoord2fColor4ubVertex3fvSUN = undefined,
    TexCoord2fNormal3fVertex3fSUN: glTexCoord2fNormal3fVertex3fSUN = undefined,
    TexCoord2fNormal3fVertex3fvSUN: glTexCoord2fNormal3fVertex3fvSUN = undefined,
    TexCoord2fVertex3fSUN: glTexCoord2fVertex3fSUN = undefined,
    TexCoord2fVertex3fvSUN: glTexCoord2fVertex3fvSUN = undefined,
    TexCoord2hNV: glTexCoord2hNV = undefined,
    TexCoord2hvNV: glTexCoord2hvNV = undefined,
    TexCoord2xOES: glTexCoord2xOES = undefined,
    TexCoord2xvOES: glTexCoord2xvOES = undefined,
    TexCoord3bOES: glTexCoord3bOES = undefined,
    TexCoord3bvOES: glTexCoord3bvOES = undefined,
    TexCoord3hNV: glTexCoord3hNV = undefined,
    TexCoord3hvNV: glTexCoord3hvNV = undefined,
    TexCoord3xOES: glTexCoord3xOES = undefined,
    TexCoord3xvOES: glTexCoord3xvOES = undefined,
    TexCoord4bOES: glTexCoord4bOES = undefined,
    TexCoord4bvOES: glTexCoord4bvOES = undefined,
    TexCoord4fColor4fNormal3fVertex4fSUN: glTexCoord4fColor4fNormal3fVertex4fSUN = undefined,
    TexCoord4fColor4fNormal3fVertex4fvSUN: glTexCoord4fColor4fNormal3fVertex4fvSUN = undefined,
    TexCoord4fVertex4fSUN: glTexCoord4fVertex4fSUN = undefined,
    TexCoord4fVertex4fvSUN: glTexCoord4fVertex4fvSUN = undefined,
    TexCoord4hNV: glTexCoord4hNV = undefined,
    TexCoord4hvNV: glTexCoord4hvNV = undefined,
    TexCoord4xOES: glTexCoord4xOES = undefined,
    TexCoord4xvOES: glTexCoord4xvOES = undefined,
    TexCoordFormatNV: glTexCoordFormatNV = undefined,
    TexCoordPointerEXT: glTexCoordPointerEXT = undefined,
    TexCoordPointerListIBM: glTexCoordPointerListIBM = undefined,
    TexCoordPointervINTEL: glTexCoordPointervINTEL = undefined,
    TexEnvxOES: glTexEnvxOES = undefined,
    TexEnvxvOES: glTexEnvxvOES = undefined,
    TexFilterFuncSGIS: glTexFilterFuncSGIS = undefined,
    TexGenxOES: glTexGenxOES = undefined,
    TexGenxvOES: glTexGenxvOES = undefined,
    TexImage1D: glTexImage1D = undefined,
    TexImage2D: glTexImage2D = undefined,
    TexImage2DMultisample: glTexImage2DMultisample = undefined,
    TexImage2DMultisampleCoverageNV: glTexImage2DMultisampleCoverageNV = undefined,
    TexImage3D: glTexImage3D = undefined,
    TexImage3DEXT: glTexImage3DEXT = undefined,
    TexImage3DMultisample: glTexImage3DMultisample = undefined,
    TexImage3DMultisampleCoverageNV: glTexImage3DMultisampleCoverageNV = undefined,
    TexImage4DSGIS: glTexImage4DSGIS = undefined,
    TexPageCommitmentARB: glTexPageCommitmentARB = undefined,
    TexPageCommitmentMemNV: glTexPageCommitmentMemNV = undefined,
    TexParameterIiv: glTexParameterIiv = undefined,
    TexParameterIivEXT: glTexParameterIivEXT = undefined,
    TexParameterIuiv: glTexParameterIuiv = undefined,
    TexParameterIuivEXT: glTexParameterIuivEXT = undefined,
    TexParameterf: glTexParameterf = undefined,
    TexParameterfv: glTexParameterfv = undefined,
    TexParameteri: glTexParameteri = undefined,
    TexParameteriv: glTexParameteriv = undefined,
    TexParameterxOES: glTexParameterxOES = undefined,
    TexParameterxvOES: glTexParameterxvOES = undefined,
    TexRenderbufferNV: glTexRenderbufferNV = undefined,
    TexStorage1D: glTexStorage1D = undefined,
    TexStorage2D: glTexStorage2D = undefined,
    TexStorage2DMultisample: glTexStorage2DMultisample = undefined,
    TexStorage3D: glTexStorage3D = undefined,
    TexStorage3DMultisample: glTexStorage3DMultisample = undefined,
    TexStorageMem1DEXT: glTexStorageMem1DEXT = undefined,
    TexStorageMem2DEXT: glTexStorageMem2DEXT = undefined,
    TexStorageMem2DMultisampleEXT: glTexStorageMem2DMultisampleEXT = undefined,
    TexStorageMem3DEXT: glTexStorageMem3DEXT = undefined,
    TexStorageMem3DMultisampleEXT: glTexStorageMem3DMultisampleEXT = undefined,
    TexStorageSparseAMD: glTexStorageSparseAMD = undefined,
    TexSubImage1D: glTexSubImage1D = undefined,
    TexSubImage1DEXT: glTexSubImage1DEXT = undefined,
    TexSubImage2D: glTexSubImage2D = undefined,
    TexSubImage2DEXT: glTexSubImage2DEXT = undefined,
    TexSubImage3D: glTexSubImage3D = undefined,
    TexSubImage3DEXT: glTexSubImage3DEXT = undefined,
    TexSubImage4DSGIS: glTexSubImage4DSGIS = undefined,
    TextureAttachMemoryNV: glTextureAttachMemoryNV = undefined,
    TextureBarrier: glTextureBarrier = undefined,
    TextureBarrierNV: glTextureBarrierNV = undefined,
    TextureBuffer: glTextureBuffer = undefined,
    TextureBufferEXT: glTextureBufferEXT = undefined,
    TextureBufferRange: glTextureBufferRange = undefined,
    TextureBufferRangeEXT: glTextureBufferRangeEXT = undefined,
    TextureColorMaskSGIS: glTextureColorMaskSGIS = undefined,
    TextureImage1DEXT: glTextureImage1DEXT = undefined,
    TextureImage2DEXT: glTextureImage2DEXT = undefined,
    TextureImage2DMultisampleCoverageNV: glTextureImage2DMultisampleCoverageNV = undefined,
    TextureImage2DMultisampleNV: glTextureImage2DMultisampleNV = undefined,
    TextureImage3DEXT: glTextureImage3DEXT = undefined,
    TextureImage3DMultisampleCoverageNV: glTextureImage3DMultisampleCoverageNV = undefined,
    TextureImage3DMultisampleNV: glTextureImage3DMultisampleNV = undefined,
    TextureLightEXT: glTextureLightEXT = undefined,
    TextureMaterialEXT: glTextureMaterialEXT = undefined,
    TextureNormalEXT: glTextureNormalEXT = undefined,
    TexturePageCommitmentEXT: glTexturePageCommitmentEXT = undefined,
    TexturePageCommitmentMemNV: glTexturePageCommitmentMemNV = undefined,
    TextureParameterIiv: glTextureParameterIiv = undefined,
    TextureParameterIivEXT: glTextureParameterIivEXT = undefined,
    TextureParameterIuiv: glTextureParameterIuiv = undefined,
    TextureParameterIuivEXT: glTextureParameterIuivEXT = undefined,
    TextureParameterf: glTextureParameterf = undefined,
    TextureParameterfEXT: glTextureParameterfEXT = undefined,
    TextureParameterfv: glTextureParameterfv = undefined,
    TextureParameterfvEXT: glTextureParameterfvEXT = undefined,
    TextureParameteri: glTextureParameteri = undefined,
    TextureParameteriEXT: glTextureParameteriEXT = undefined,
    TextureParameteriv: glTextureParameteriv = undefined,
    TextureParameterivEXT: glTextureParameterivEXT = undefined,
    TextureRangeAPPLE: glTextureRangeAPPLE = undefined,
    TextureRenderbufferEXT: glTextureRenderbufferEXT = undefined,
    TextureStorage1D: glTextureStorage1D = undefined,
    TextureStorage1DEXT: glTextureStorage1DEXT = undefined,
    TextureStorage2D: glTextureStorage2D = undefined,
    TextureStorage2DEXT: glTextureStorage2DEXT = undefined,
    TextureStorage2DMultisample: glTextureStorage2DMultisample = undefined,
    TextureStorage2DMultisampleEXT: glTextureStorage2DMultisampleEXT = undefined,
    TextureStorage3D: glTextureStorage3D = undefined,
    TextureStorage3DEXT: glTextureStorage3DEXT = undefined,
    TextureStorage3DMultisample: glTextureStorage3DMultisample = undefined,
    TextureStorage3DMultisampleEXT: glTextureStorage3DMultisampleEXT = undefined,
    TextureStorageMem1DEXT: glTextureStorageMem1DEXT = undefined,
    TextureStorageMem2DEXT: glTextureStorageMem2DEXT = undefined,
    TextureStorageMem2DMultisampleEXT: glTextureStorageMem2DMultisampleEXT = undefined,
    TextureStorageMem3DEXT: glTextureStorageMem3DEXT = undefined,
    TextureStorageMem3DMultisampleEXT: glTextureStorageMem3DMultisampleEXT = undefined,
    TextureStorageSparseAMD: glTextureStorageSparseAMD = undefined,
    TextureSubImage1D: glTextureSubImage1D = undefined,
    TextureSubImage1DEXT: glTextureSubImage1DEXT = undefined,
    TextureSubImage2D: glTextureSubImage2D = undefined,
    TextureSubImage2DEXT: glTextureSubImage2DEXT = undefined,
    TextureSubImage3D: glTextureSubImage3D = undefined,
    TextureSubImage3DEXT: glTextureSubImage3DEXT = undefined,
    TextureView: glTextureView = undefined,
    TrackMatrixNV: glTrackMatrixNV = undefined,
    TransformFeedbackAttribsNV: glTransformFeedbackAttribsNV = undefined,
    TransformFeedbackBufferBase: glTransformFeedbackBufferBase = undefined,
    TransformFeedbackBufferRange: glTransformFeedbackBufferRange = undefined,
    TransformFeedbackStreamAttribsNV: glTransformFeedbackStreamAttribsNV = undefined,
    TransformFeedbackVaryings: glTransformFeedbackVaryings = undefined,
    TransformFeedbackVaryingsEXT: glTransformFeedbackVaryingsEXT = undefined,
    TransformFeedbackVaryingsNV: glTransformFeedbackVaryingsNV = undefined,
    TransformPathNV: glTransformPathNV = undefined,
    TranslatexOES: glTranslatexOES = undefined,
    Uniform1d: glUniform1d = undefined,
    Uniform1dv: glUniform1dv = undefined,
    Uniform1f: glUniform1f = undefined,
    Uniform1fARB: glUniform1fARB = undefined,
    Uniform1fv: glUniform1fv = undefined,
    Uniform1fvARB: glUniform1fvARB = undefined,
    Uniform1i: glUniform1i = undefined,
    Uniform1i64ARB: glUniform1i64ARB = undefined,
    Uniform1i64NV: glUniform1i64NV = undefined,
    Uniform1i64vARB: glUniform1i64vARB = undefined,
    Uniform1i64vNV: glUniform1i64vNV = undefined,
    Uniform1iARB: glUniform1iARB = undefined,
    Uniform1iv: glUniform1iv = undefined,
    Uniform1ivARB: glUniform1ivARB = undefined,
    Uniform1ui: glUniform1ui = undefined,
    Uniform1ui64ARB: glUniform1ui64ARB = undefined,
    Uniform1ui64NV: glUniform1ui64NV = undefined,
    Uniform1ui64vARB: glUniform1ui64vARB = undefined,
    Uniform1ui64vNV: glUniform1ui64vNV = undefined,
    Uniform1uiEXT: glUniform1uiEXT = undefined,
    Uniform1uiv: glUniform1uiv = undefined,
    Uniform1uivEXT: glUniform1uivEXT = undefined,
    Uniform2d: glUniform2d = undefined,
    Uniform2dv: glUniform2dv = undefined,
    Uniform2f: glUniform2f = undefined,
    Uniform2fARB: glUniform2fARB = undefined,
    Uniform2fv: glUniform2fv = undefined,
    Uniform2fvARB: glUniform2fvARB = undefined,
    Uniform2i: glUniform2i = undefined,
    Uniform2i64ARB: glUniform2i64ARB = undefined,
    Uniform2i64NV: glUniform2i64NV = undefined,
    Uniform2i64vARB: glUniform2i64vARB = undefined,
    Uniform2i64vNV: glUniform2i64vNV = undefined,
    Uniform2iARB: glUniform2iARB = undefined,
    Uniform2iv: glUniform2iv = undefined,
    Uniform2ivARB: glUniform2ivARB = undefined,
    Uniform2ui: glUniform2ui = undefined,
    Uniform2ui64ARB: glUniform2ui64ARB = undefined,
    Uniform2ui64NV: glUniform2ui64NV = undefined,
    Uniform2ui64vARB: glUniform2ui64vARB = undefined,
    Uniform2ui64vNV: glUniform2ui64vNV = undefined,
    Uniform2uiEXT: glUniform2uiEXT = undefined,
    Uniform2uiv: glUniform2uiv = undefined,
    Uniform2uivEXT: glUniform2uivEXT = undefined,
    Uniform3d: glUniform3d = undefined,
    Uniform3dv: glUniform3dv = undefined,
    Uniform3f: glUniform3f = undefined,
    Uniform3fARB: glUniform3fARB = undefined,
    Uniform3fv: glUniform3fv = undefined,
    Uniform3fvARB: glUniform3fvARB = undefined,
    Uniform3i: glUniform3i = undefined,
    Uniform3i64ARB: glUniform3i64ARB = undefined,
    Uniform3i64NV: glUniform3i64NV = undefined,
    Uniform3i64vARB: glUniform3i64vARB = undefined,
    Uniform3i64vNV: glUniform3i64vNV = undefined,
    Uniform3iARB: glUniform3iARB = undefined,
    Uniform3iv: glUniform3iv = undefined,
    Uniform3ivARB: glUniform3ivARB = undefined,
    Uniform3ui: glUniform3ui = undefined,
    Uniform3ui64ARB: glUniform3ui64ARB = undefined,
    Uniform3ui64NV: glUniform3ui64NV = undefined,
    Uniform3ui64vARB: glUniform3ui64vARB = undefined,
    Uniform3ui64vNV: glUniform3ui64vNV = undefined,
    Uniform3uiEXT: glUniform3uiEXT = undefined,
    Uniform3uiv: glUniform3uiv = undefined,
    Uniform3uivEXT: glUniform3uivEXT = undefined,
    Uniform4d: glUniform4d = undefined,
    Uniform4dv: glUniform4dv = undefined,
    Uniform4f: glUniform4f = undefined,
    Uniform4fARB: glUniform4fARB = undefined,
    Uniform4fv: glUniform4fv = undefined,
    Uniform4fvARB: glUniform4fvARB = undefined,
    Uniform4i: glUniform4i = undefined,
    Uniform4i64ARB: glUniform4i64ARB = undefined,
    Uniform4i64NV: glUniform4i64NV = undefined,
    Uniform4i64vARB: glUniform4i64vARB = undefined,
    Uniform4i64vNV: glUniform4i64vNV = undefined,
    Uniform4iARB: glUniform4iARB = undefined,
    Uniform4iv: glUniform4iv = undefined,
    Uniform4ivARB: glUniform4ivARB = undefined,
    Uniform4ui: glUniform4ui = undefined,
    Uniform4ui64ARB: glUniform4ui64ARB = undefined,
    Uniform4ui64NV: glUniform4ui64NV = undefined,
    Uniform4ui64vARB: glUniform4ui64vARB = undefined,
    Uniform4ui64vNV: glUniform4ui64vNV = undefined,
    Uniform4uiEXT: glUniform4uiEXT = undefined,
    Uniform4uiv: glUniform4uiv = undefined,
    Uniform4uivEXT: glUniform4uivEXT = undefined,
    UniformBlockBinding: glUniformBlockBinding = undefined,
    UniformBufferEXT: glUniformBufferEXT = undefined,
    UniformHandleui64ARB: glUniformHandleui64ARB = undefined,
    UniformHandleui64NV: glUniformHandleui64NV = undefined,
    UniformHandleui64vARB: glUniformHandleui64vARB = undefined,
    UniformHandleui64vNV: glUniformHandleui64vNV = undefined,
    UniformMatrix2dv: glUniformMatrix2dv = undefined,
    UniformMatrix2fv: glUniformMatrix2fv = undefined,
    UniformMatrix2fvARB: glUniformMatrix2fvARB = undefined,
    UniformMatrix2x3dv: glUniformMatrix2x3dv = undefined,
    UniformMatrix2x3fv: glUniformMatrix2x3fv = undefined,
    UniformMatrix2x4dv: glUniformMatrix2x4dv = undefined,
    UniformMatrix2x4fv: glUniformMatrix2x4fv = undefined,
    UniformMatrix3dv: glUniformMatrix3dv = undefined,
    UniformMatrix3fv: glUniformMatrix3fv = undefined,
    UniformMatrix3fvARB: glUniformMatrix3fvARB = undefined,
    UniformMatrix3x2dv: glUniformMatrix3x2dv = undefined,
    UniformMatrix3x2fv: glUniformMatrix3x2fv = undefined,
    UniformMatrix3x4dv: glUniformMatrix3x4dv = undefined,
    UniformMatrix3x4fv: glUniformMatrix3x4fv = undefined,
    UniformMatrix4dv: glUniformMatrix4dv = undefined,
    UniformMatrix4fv: glUniformMatrix4fv = undefined,
    UniformMatrix4fvARB: glUniformMatrix4fvARB = undefined,
    UniformMatrix4x2dv: glUniformMatrix4x2dv = undefined,
    UniformMatrix4x2fv: glUniformMatrix4x2fv = undefined,
    UniformMatrix4x3dv: glUniformMatrix4x3dv = undefined,
    UniformMatrix4x3fv: glUniformMatrix4x3fv = undefined,
    UniformSubroutinesuiv: glUniformSubroutinesuiv = undefined,
    Uniformui64NV: glUniformui64NV = undefined,
    Uniformui64vNV: glUniformui64vNV = undefined,
    UnlockArraysEXT: glUnlockArraysEXT = undefined,
    UnmapBuffer: glUnmapBuffer = undefined,
    UnmapBufferARB: glUnmapBufferARB = undefined,
    UnmapNamedBuffer: glUnmapNamedBuffer = undefined,
    UnmapNamedBufferEXT: glUnmapNamedBufferEXT = undefined,
    UnmapObjectBufferATI: glUnmapObjectBufferATI = undefined,
    UnmapTexture2DINTEL: glUnmapTexture2DINTEL = undefined,
    UpdateObjectBufferATI: glUpdateObjectBufferATI = undefined,
    UploadGpuMaskNVX: glUploadGpuMaskNVX = undefined,
    UseProgram: glUseProgram = undefined,
    UseProgramObjectARB: glUseProgramObjectARB = undefined,
    UseProgramStages: glUseProgramStages = undefined,
    UseShaderProgramEXT: glUseShaderProgramEXT = undefined,
    VDPAUFiniNV: glVDPAUFiniNV = undefined,
    VDPAUGetSurfaceivNV: glVDPAUGetSurfaceivNV = undefined,
    VDPAUInitNV: glVDPAUInitNV = undefined,
    VDPAUIsSurfaceNV: glVDPAUIsSurfaceNV = undefined,
    VDPAUMapSurfacesNV: glVDPAUMapSurfacesNV = undefined,
    VDPAURegisterOutputSurfaceNV: glVDPAURegisterOutputSurfaceNV = undefined,
    VDPAURegisterVideoSurfaceNV: glVDPAURegisterVideoSurfaceNV = undefined,
    VDPAURegisterVideoSurfaceWithPictureStructureNV: glVDPAURegisterVideoSurfaceWithPictureStructureNV = undefined,
    VDPAUSurfaceAccessNV: glVDPAUSurfaceAccessNV = undefined,
    VDPAUUnmapSurfacesNV: glVDPAUUnmapSurfacesNV = undefined,
    VDPAUUnregisterSurfaceNV: glVDPAUUnregisterSurfaceNV = undefined,
    ValidateProgram: glValidateProgram = undefined,
    ValidateProgramARB: glValidateProgramARB = undefined,
    ValidateProgramPipeline: glValidateProgramPipeline = undefined,
    VariantArrayObjectATI: glVariantArrayObjectATI = undefined,
    VariantPointerEXT: glVariantPointerEXT = undefined,
    VariantbvEXT: glVariantbvEXT = undefined,
    VariantdvEXT: glVariantdvEXT = undefined,
    VariantfvEXT: glVariantfvEXT = undefined,
    VariantivEXT: glVariantivEXT = undefined,
    VariantsvEXT: glVariantsvEXT = undefined,
    VariantubvEXT: glVariantubvEXT = undefined,
    VariantuivEXT: glVariantuivEXT = undefined,
    VariantusvEXT: glVariantusvEXT = undefined,
    Vertex2bOES: glVertex2bOES = undefined,
    Vertex2bvOES: glVertex2bvOES = undefined,
    Vertex2hNV: glVertex2hNV = undefined,
    Vertex2hvNV: glVertex2hvNV = undefined,
    Vertex2xOES: glVertex2xOES = undefined,
    Vertex2xvOES: glVertex2xvOES = undefined,
    Vertex3bOES: glVertex3bOES = undefined,
    Vertex3bvOES: glVertex3bvOES = undefined,
    Vertex3hNV: glVertex3hNV = undefined,
    Vertex3hvNV: glVertex3hvNV = undefined,
    Vertex3xOES: glVertex3xOES = undefined,
    Vertex3xvOES: glVertex3xvOES = undefined,
    Vertex4bOES: glVertex4bOES = undefined,
    Vertex4bvOES: glVertex4bvOES = undefined,
    Vertex4hNV: glVertex4hNV = undefined,
    Vertex4hvNV: glVertex4hvNV = undefined,
    Vertex4xOES: glVertex4xOES = undefined,
    Vertex4xvOES: glVertex4xvOES = undefined,
    VertexArrayAttribBinding: glVertexArrayAttribBinding = undefined,
    VertexArrayAttribFormat: glVertexArrayAttribFormat = undefined,
    VertexArrayAttribIFormat: glVertexArrayAttribIFormat = undefined,
    VertexArrayAttribLFormat: glVertexArrayAttribLFormat = undefined,
    VertexArrayBindVertexBufferEXT: glVertexArrayBindVertexBufferEXT = undefined,
    VertexArrayBindingDivisor: glVertexArrayBindingDivisor = undefined,
    VertexArrayColorOffsetEXT: glVertexArrayColorOffsetEXT = undefined,
    VertexArrayEdgeFlagOffsetEXT: glVertexArrayEdgeFlagOffsetEXT = undefined,
    VertexArrayElementBuffer: glVertexArrayElementBuffer = undefined,
    VertexArrayFogCoordOffsetEXT: glVertexArrayFogCoordOffsetEXT = undefined,
    VertexArrayIndexOffsetEXT: glVertexArrayIndexOffsetEXT = undefined,
    VertexArrayMultiTexCoordOffsetEXT: glVertexArrayMultiTexCoordOffsetEXT = undefined,
    VertexArrayNormalOffsetEXT: glVertexArrayNormalOffsetEXT = undefined,
    VertexArrayParameteriAPPLE: glVertexArrayParameteriAPPLE = undefined,
    VertexArrayRangeAPPLE: glVertexArrayRangeAPPLE = undefined,
    VertexArrayRangeNV: glVertexArrayRangeNV = undefined,
    VertexArraySecondaryColorOffsetEXT: glVertexArraySecondaryColorOffsetEXT = undefined,
    VertexArrayTexCoordOffsetEXT: glVertexArrayTexCoordOffsetEXT = undefined,
    VertexArrayVertexAttribBindingEXT: glVertexArrayVertexAttribBindingEXT = undefined,
    VertexArrayVertexAttribDivisorEXT: glVertexArrayVertexAttribDivisorEXT = undefined,
    VertexArrayVertexAttribFormatEXT: glVertexArrayVertexAttribFormatEXT = undefined,
    VertexArrayVertexAttribIFormatEXT: glVertexArrayVertexAttribIFormatEXT = undefined,
    VertexArrayVertexAttribIOffsetEXT: glVertexArrayVertexAttribIOffsetEXT = undefined,
    VertexArrayVertexAttribLFormatEXT: glVertexArrayVertexAttribLFormatEXT = undefined,
    VertexArrayVertexAttribLOffsetEXT: glVertexArrayVertexAttribLOffsetEXT = undefined,
    VertexArrayVertexAttribOffsetEXT: glVertexArrayVertexAttribOffsetEXT = undefined,
    VertexArrayVertexBindingDivisorEXT: glVertexArrayVertexBindingDivisorEXT = undefined,
    VertexArrayVertexBuffer: glVertexArrayVertexBuffer = undefined,
    VertexArrayVertexBuffers: glVertexArrayVertexBuffers = undefined,
    VertexArrayVertexOffsetEXT: glVertexArrayVertexOffsetEXT = undefined,
    VertexAttrib1d: glVertexAttrib1d = undefined,
    VertexAttrib1dARB: glVertexAttrib1dARB = undefined,
    VertexAttrib1dNV: glVertexAttrib1dNV = undefined,
    VertexAttrib1dv: glVertexAttrib1dv = undefined,
    VertexAttrib1dvARB: glVertexAttrib1dvARB = undefined,
    VertexAttrib1dvNV: glVertexAttrib1dvNV = undefined,
    VertexAttrib1f: glVertexAttrib1f = undefined,
    VertexAttrib1fARB: glVertexAttrib1fARB = undefined,
    VertexAttrib1fNV: glVertexAttrib1fNV = undefined,
    VertexAttrib1fv: glVertexAttrib1fv = undefined,
    VertexAttrib1fvARB: glVertexAttrib1fvARB = undefined,
    VertexAttrib1fvNV: glVertexAttrib1fvNV = undefined,
    VertexAttrib1hNV: glVertexAttrib1hNV = undefined,
    VertexAttrib1hvNV: glVertexAttrib1hvNV = undefined,
    VertexAttrib1s: glVertexAttrib1s = undefined,
    VertexAttrib1sARB: glVertexAttrib1sARB = undefined,
    VertexAttrib1sNV: glVertexAttrib1sNV = undefined,
    VertexAttrib1sv: glVertexAttrib1sv = undefined,
    VertexAttrib1svARB: glVertexAttrib1svARB = undefined,
    VertexAttrib1svNV: glVertexAttrib1svNV = undefined,
    VertexAttrib2d: glVertexAttrib2d = undefined,
    VertexAttrib2dARB: glVertexAttrib2dARB = undefined,
    VertexAttrib2dNV: glVertexAttrib2dNV = undefined,
    VertexAttrib2dv: glVertexAttrib2dv = undefined,
    VertexAttrib2dvARB: glVertexAttrib2dvARB = undefined,
    VertexAttrib2dvNV: glVertexAttrib2dvNV = undefined,
    VertexAttrib2f: glVertexAttrib2f = undefined,
    VertexAttrib2fARB: glVertexAttrib2fARB = undefined,
    VertexAttrib2fNV: glVertexAttrib2fNV = undefined,
    VertexAttrib2fv: glVertexAttrib2fv = undefined,
    VertexAttrib2fvARB: glVertexAttrib2fvARB = undefined,
    VertexAttrib2fvNV: glVertexAttrib2fvNV = undefined,
    VertexAttrib2hNV: glVertexAttrib2hNV = undefined,
    VertexAttrib2hvNV: glVertexAttrib2hvNV = undefined,
    VertexAttrib2s: glVertexAttrib2s = undefined,
    VertexAttrib2sARB: glVertexAttrib2sARB = undefined,
    VertexAttrib2sNV: glVertexAttrib2sNV = undefined,
    VertexAttrib2sv: glVertexAttrib2sv = undefined,
    VertexAttrib2svARB: glVertexAttrib2svARB = undefined,
    VertexAttrib2svNV: glVertexAttrib2svNV = undefined,
    VertexAttrib3d: glVertexAttrib3d = undefined,
    VertexAttrib3dARB: glVertexAttrib3dARB = undefined,
    VertexAttrib3dNV: glVertexAttrib3dNV = undefined,
    VertexAttrib3dv: glVertexAttrib3dv = undefined,
    VertexAttrib3dvARB: glVertexAttrib3dvARB = undefined,
    VertexAttrib3dvNV: glVertexAttrib3dvNV = undefined,
    VertexAttrib3f: glVertexAttrib3f = undefined,
    VertexAttrib3fARB: glVertexAttrib3fARB = undefined,
    VertexAttrib3fNV: glVertexAttrib3fNV = undefined,
    VertexAttrib3fv: glVertexAttrib3fv = undefined,
    VertexAttrib3fvARB: glVertexAttrib3fvARB = undefined,
    VertexAttrib3fvNV: glVertexAttrib3fvNV = undefined,
    VertexAttrib3hNV: glVertexAttrib3hNV = undefined,
    VertexAttrib3hvNV: glVertexAttrib3hvNV = undefined,
    VertexAttrib3s: glVertexAttrib3s = undefined,
    VertexAttrib3sARB: glVertexAttrib3sARB = undefined,
    VertexAttrib3sNV: glVertexAttrib3sNV = undefined,
    VertexAttrib3sv: glVertexAttrib3sv = undefined,
    VertexAttrib3svARB: glVertexAttrib3svARB = undefined,
    VertexAttrib3svNV: glVertexAttrib3svNV = undefined,
    VertexAttrib4Nbv: glVertexAttrib4Nbv = undefined,
    VertexAttrib4NbvARB: glVertexAttrib4NbvARB = undefined,
    VertexAttrib4Niv: glVertexAttrib4Niv = undefined,
    VertexAttrib4NivARB: glVertexAttrib4NivARB = undefined,
    VertexAttrib4Nsv: glVertexAttrib4Nsv = undefined,
    VertexAttrib4NsvARB: glVertexAttrib4NsvARB = undefined,
    VertexAttrib4Nub: glVertexAttrib4Nub = undefined,
    VertexAttrib4NubARB: glVertexAttrib4NubARB = undefined,
    VertexAttrib4Nubv: glVertexAttrib4Nubv = undefined,
    VertexAttrib4NubvARB: glVertexAttrib4NubvARB = undefined,
    VertexAttrib4Nuiv: glVertexAttrib4Nuiv = undefined,
    VertexAttrib4NuivARB: glVertexAttrib4NuivARB = undefined,
    VertexAttrib4Nusv: glVertexAttrib4Nusv = undefined,
    VertexAttrib4NusvARB: glVertexAttrib4NusvARB = undefined,
    VertexAttrib4bv: glVertexAttrib4bv = undefined,
    VertexAttrib4bvARB: glVertexAttrib4bvARB = undefined,
    VertexAttrib4d: glVertexAttrib4d = undefined,
    VertexAttrib4dARB: glVertexAttrib4dARB = undefined,
    VertexAttrib4dNV: glVertexAttrib4dNV = undefined,
    VertexAttrib4dv: glVertexAttrib4dv = undefined,
    VertexAttrib4dvARB: glVertexAttrib4dvARB = undefined,
    VertexAttrib4dvNV: glVertexAttrib4dvNV = undefined,
    VertexAttrib4f: glVertexAttrib4f = undefined,
    VertexAttrib4fARB: glVertexAttrib4fARB = undefined,
    VertexAttrib4fNV: glVertexAttrib4fNV = undefined,
    VertexAttrib4fv: glVertexAttrib4fv = undefined,
    VertexAttrib4fvARB: glVertexAttrib4fvARB = undefined,
    VertexAttrib4fvNV: glVertexAttrib4fvNV = undefined,
    VertexAttrib4hNV: glVertexAttrib4hNV = undefined,
    VertexAttrib4hvNV: glVertexAttrib4hvNV = undefined,
    VertexAttrib4iv: glVertexAttrib4iv = undefined,
    VertexAttrib4ivARB: glVertexAttrib4ivARB = undefined,
    VertexAttrib4s: glVertexAttrib4s = undefined,
    VertexAttrib4sARB: glVertexAttrib4sARB = undefined,
    VertexAttrib4sNV: glVertexAttrib4sNV = undefined,
    VertexAttrib4sv: glVertexAttrib4sv = undefined,
    VertexAttrib4svARB: glVertexAttrib4svARB = undefined,
    VertexAttrib4svNV: glVertexAttrib4svNV = undefined,
    VertexAttrib4ubNV: glVertexAttrib4ubNV = undefined,
    VertexAttrib4ubv: glVertexAttrib4ubv = undefined,
    VertexAttrib4ubvARB: glVertexAttrib4ubvARB = undefined,
    VertexAttrib4ubvNV: glVertexAttrib4ubvNV = undefined,
    VertexAttrib4uiv: glVertexAttrib4uiv = undefined,
    VertexAttrib4uivARB: glVertexAttrib4uivARB = undefined,
    VertexAttrib4usv: glVertexAttrib4usv = undefined,
    VertexAttrib4usvARB: glVertexAttrib4usvARB = undefined,
    VertexAttribArrayObjectATI: glVertexAttribArrayObjectATI = undefined,
    VertexAttribBinding: glVertexAttribBinding = undefined,
    VertexAttribDivisor: glVertexAttribDivisor = undefined,
    VertexAttribDivisorARB: glVertexAttribDivisorARB = undefined,
    VertexAttribFormat: glVertexAttribFormat = undefined,
    VertexAttribFormatNV: glVertexAttribFormatNV = undefined,
    VertexAttribI1i: glVertexAttribI1i = undefined,
    VertexAttribI1iEXT: glVertexAttribI1iEXT = undefined,
    VertexAttribI1iv: glVertexAttribI1iv = undefined,
    VertexAttribI1ivEXT: glVertexAttribI1ivEXT = undefined,
    VertexAttribI1ui: glVertexAttribI1ui = undefined,
    VertexAttribI1uiEXT: glVertexAttribI1uiEXT = undefined,
    VertexAttribI1uiv: glVertexAttribI1uiv = undefined,
    VertexAttribI1uivEXT: glVertexAttribI1uivEXT = undefined,
    VertexAttribI2i: glVertexAttribI2i = undefined,
    VertexAttribI2iEXT: glVertexAttribI2iEXT = undefined,
    VertexAttribI2iv: glVertexAttribI2iv = undefined,
    VertexAttribI2ivEXT: glVertexAttribI2ivEXT = undefined,
    VertexAttribI2ui: glVertexAttribI2ui = undefined,
    VertexAttribI2uiEXT: glVertexAttribI2uiEXT = undefined,
    VertexAttribI2uiv: glVertexAttribI2uiv = undefined,
    VertexAttribI2uivEXT: glVertexAttribI2uivEXT = undefined,
    VertexAttribI3i: glVertexAttribI3i = undefined,
    VertexAttribI3iEXT: glVertexAttribI3iEXT = undefined,
    VertexAttribI3iv: glVertexAttribI3iv = undefined,
    VertexAttribI3ivEXT: glVertexAttribI3ivEXT = undefined,
    VertexAttribI3ui: glVertexAttribI3ui = undefined,
    VertexAttribI3uiEXT: glVertexAttribI3uiEXT = undefined,
    VertexAttribI3uiv: glVertexAttribI3uiv = undefined,
    VertexAttribI3uivEXT: glVertexAttribI3uivEXT = undefined,
    VertexAttribI4bv: glVertexAttribI4bv = undefined,
    VertexAttribI4bvEXT: glVertexAttribI4bvEXT = undefined,
    VertexAttribI4i: glVertexAttribI4i = undefined,
    VertexAttribI4iEXT: glVertexAttribI4iEXT = undefined,
    VertexAttribI4iv: glVertexAttribI4iv = undefined,
    VertexAttribI4ivEXT: glVertexAttribI4ivEXT = undefined,
    VertexAttribI4sv: glVertexAttribI4sv = undefined,
    VertexAttribI4svEXT: glVertexAttribI4svEXT = undefined,
    VertexAttribI4ubv: glVertexAttribI4ubv = undefined,
    VertexAttribI4ubvEXT: glVertexAttribI4ubvEXT = undefined,
    VertexAttribI4ui: glVertexAttribI4ui = undefined,
    VertexAttribI4uiEXT: glVertexAttribI4uiEXT = undefined,
    VertexAttribI4uiv: glVertexAttribI4uiv = undefined,
    VertexAttribI4uivEXT: glVertexAttribI4uivEXT = undefined,
    VertexAttribI4usv: glVertexAttribI4usv = undefined,
    VertexAttribI4usvEXT: glVertexAttribI4usvEXT = undefined,
    VertexAttribIFormat: glVertexAttribIFormat = undefined,
    VertexAttribIFormatNV: glVertexAttribIFormatNV = undefined,
    VertexAttribIPointer: glVertexAttribIPointer = undefined,
    VertexAttribIPointerEXT: glVertexAttribIPointerEXT = undefined,
    VertexAttribL1d: glVertexAttribL1d = undefined,
    VertexAttribL1dEXT: glVertexAttribL1dEXT = undefined,
    VertexAttribL1dv: glVertexAttribL1dv = undefined,
    VertexAttribL1dvEXT: glVertexAttribL1dvEXT = undefined,
    VertexAttribL1i64NV: glVertexAttribL1i64NV = undefined,
    VertexAttribL1i64vNV: glVertexAttribL1i64vNV = undefined,
    VertexAttribL1ui64ARB: glVertexAttribL1ui64ARB = undefined,
    VertexAttribL1ui64NV: glVertexAttribL1ui64NV = undefined,
    VertexAttribL1ui64vARB: glVertexAttribL1ui64vARB = undefined,
    VertexAttribL1ui64vNV: glVertexAttribL1ui64vNV = undefined,
    VertexAttribL2d: glVertexAttribL2d = undefined,
    VertexAttribL2dEXT: glVertexAttribL2dEXT = undefined,
    VertexAttribL2dv: glVertexAttribL2dv = undefined,
    VertexAttribL2dvEXT: glVertexAttribL2dvEXT = undefined,
    VertexAttribL2i64NV: glVertexAttribL2i64NV = undefined,
    VertexAttribL2i64vNV: glVertexAttribL2i64vNV = undefined,
    VertexAttribL2ui64NV: glVertexAttribL2ui64NV = undefined,
    VertexAttribL2ui64vNV: glVertexAttribL2ui64vNV = undefined,
    VertexAttribL3d: glVertexAttribL3d = undefined,
    VertexAttribL3dEXT: glVertexAttribL3dEXT = undefined,
    VertexAttribL3dv: glVertexAttribL3dv = undefined,
    VertexAttribL3dvEXT: glVertexAttribL3dvEXT = undefined,
    VertexAttribL3i64NV: glVertexAttribL3i64NV = undefined,
    VertexAttribL3i64vNV: glVertexAttribL3i64vNV = undefined,
    VertexAttribL3ui64NV: glVertexAttribL3ui64NV = undefined,
    VertexAttribL3ui64vNV: glVertexAttribL3ui64vNV = undefined,
    VertexAttribL4d: glVertexAttribL4d = undefined,
    VertexAttribL4dEXT: glVertexAttribL4dEXT = undefined,
    VertexAttribL4dv: glVertexAttribL4dv = undefined,
    VertexAttribL4dvEXT: glVertexAttribL4dvEXT = undefined,
    VertexAttribL4i64NV: glVertexAttribL4i64NV = undefined,
    VertexAttribL4i64vNV: glVertexAttribL4i64vNV = undefined,
    VertexAttribL4ui64NV: glVertexAttribL4ui64NV = undefined,
    VertexAttribL4ui64vNV: glVertexAttribL4ui64vNV = undefined,
    VertexAttribLFormat: glVertexAttribLFormat = undefined,
    VertexAttribLFormatNV: glVertexAttribLFormatNV = undefined,
    VertexAttribLPointer: glVertexAttribLPointer = undefined,
    VertexAttribLPointerEXT: glVertexAttribLPointerEXT = undefined,
    VertexAttribP1ui: glVertexAttribP1ui = undefined,
    VertexAttribP1uiv: glVertexAttribP1uiv = undefined,
    VertexAttribP2ui: glVertexAttribP2ui = undefined,
    VertexAttribP2uiv: glVertexAttribP2uiv = undefined,
    VertexAttribP3ui: glVertexAttribP3ui = undefined,
    VertexAttribP3uiv: glVertexAttribP3uiv = undefined,
    VertexAttribP4ui: glVertexAttribP4ui = undefined,
    VertexAttribP4uiv: glVertexAttribP4uiv = undefined,
    VertexAttribParameteriAMD: glVertexAttribParameteriAMD = undefined,
    VertexAttribPointer: glVertexAttribPointer = undefined,
    VertexAttribPointerARB: glVertexAttribPointerARB = undefined,
    VertexAttribPointerNV: glVertexAttribPointerNV = undefined,
    VertexAttribs1dvNV: glVertexAttribs1dvNV = undefined,
    VertexAttribs1fvNV: glVertexAttribs1fvNV = undefined,
    VertexAttribs1hvNV: glVertexAttribs1hvNV = undefined,
    VertexAttribs1svNV: glVertexAttribs1svNV = undefined,
    VertexAttribs2dvNV: glVertexAttribs2dvNV = undefined,
    VertexAttribs2fvNV: glVertexAttribs2fvNV = undefined,
    VertexAttribs2hvNV: glVertexAttribs2hvNV = undefined,
    VertexAttribs2svNV: glVertexAttribs2svNV = undefined,
    VertexAttribs3dvNV: glVertexAttribs3dvNV = undefined,
    VertexAttribs3fvNV: glVertexAttribs3fvNV = undefined,
    VertexAttribs3hvNV: glVertexAttribs3hvNV = undefined,
    VertexAttribs3svNV: glVertexAttribs3svNV = undefined,
    VertexAttribs4dvNV: glVertexAttribs4dvNV = undefined,
    VertexAttribs4fvNV: glVertexAttribs4fvNV = undefined,
    VertexAttribs4hvNV: glVertexAttribs4hvNV = undefined,
    VertexAttribs4svNV: glVertexAttribs4svNV = undefined,
    VertexAttribs4ubvNV: glVertexAttribs4ubvNV = undefined,
    VertexBindingDivisor: glVertexBindingDivisor = undefined,
    VertexBlendARB: glVertexBlendARB = undefined,
    VertexBlendEnvfATI: glVertexBlendEnvfATI = undefined,
    VertexBlendEnviATI: glVertexBlendEnviATI = undefined,
    VertexFormatNV: glVertexFormatNV = undefined,
    VertexPointerEXT: glVertexPointerEXT = undefined,
    VertexPointerListIBM: glVertexPointerListIBM = undefined,
    VertexPointervINTEL: glVertexPointervINTEL = undefined,
    VertexStream1dATI: glVertexStream1dATI = undefined,
    VertexStream1dvATI: glVertexStream1dvATI = undefined,
    VertexStream1fATI: glVertexStream1fATI = undefined,
    VertexStream1fvATI: glVertexStream1fvATI = undefined,
    VertexStream1iATI: glVertexStream1iATI = undefined,
    VertexStream1ivATI: glVertexStream1ivATI = undefined,
    VertexStream1sATI: glVertexStream1sATI = undefined,
    VertexStream1svATI: glVertexStream1svATI = undefined,
    VertexStream2dATI: glVertexStream2dATI = undefined,
    VertexStream2dvATI: glVertexStream2dvATI = undefined,
    VertexStream2fATI: glVertexStream2fATI = undefined,
    VertexStream2fvATI: glVertexStream2fvATI = undefined,
    VertexStream2iATI: glVertexStream2iATI = undefined,
    VertexStream2ivATI: glVertexStream2ivATI = undefined,
    VertexStream2sATI: glVertexStream2sATI = undefined,
    VertexStream2svATI: glVertexStream2svATI = undefined,
    VertexStream3dATI: glVertexStream3dATI = undefined,
    VertexStream3dvATI: glVertexStream3dvATI = undefined,
    VertexStream3fATI: glVertexStream3fATI = undefined,
    VertexStream3fvATI: glVertexStream3fvATI = undefined,
    VertexStream3iATI: glVertexStream3iATI = undefined,
    VertexStream3ivATI: glVertexStream3ivATI = undefined,
    VertexStream3sATI: glVertexStream3sATI = undefined,
    VertexStream3svATI: glVertexStream3svATI = undefined,
    VertexStream4dATI: glVertexStream4dATI = undefined,
    VertexStream4dvATI: glVertexStream4dvATI = undefined,
    VertexStream4fATI: glVertexStream4fATI = undefined,
    VertexStream4fvATI: glVertexStream4fvATI = undefined,
    VertexStream4iATI: glVertexStream4iATI = undefined,
    VertexStream4ivATI: glVertexStream4ivATI = undefined,
    VertexStream4sATI: glVertexStream4sATI = undefined,
    VertexStream4svATI: glVertexStream4svATI = undefined,
    VertexWeightPointerEXT: glVertexWeightPointerEXT = undefined,
    VertexWeightfEXT: glVertexWeightfEXT = undefined,
    VertexWeightfvEXT: glVertexWeightfvEXT = undefined,
    VertexWeighthNV: glVertexWeighthNV = undefined,
    VertexWeighthvNV: glVertexWeighthvNV = undefined,
    VideoCaptureNV: glVideoCaptureNV = undefined,
    VideoCaptureStreamParameterdvNV: glVideoCaptureStreamParameterdvNV = undefined,
    VideoCaptureStreamParameterfvNV: glVideoCaptureStreamParameterfvNV = undefined,
    VideoCaptureStreamParameterivNV: glVideoCaptureStreamParameterivNV = undefined,
    Viewport: glViewport = undefined,
    ViewportArrayv: glViewportArrayv = undefined,
    ViewportIndexedf: glViewportIndexedf = undefined,
    ViewportIndexedfv: glViewportIndexedfv = undefined,
    ViewportPositionWScaleNV: glViewportPositionWScaleNV = undefined,
    ViewportSwizzleNV: glViewportSwizzleNV = undefined,
    WaitSemaphoreEXT: glWaitSemaphoreEXT = undefined,
    WaitSemaphoreui64NVX: glWaitSemaphoreui64NVX = undefined,
    WaitSync: glWaitSync = undefined,
    WaitVkSemaphoreNV: glWaitVkSemaphoreNV = undefined,
    WeightPathsNV: glWeightPathsNV = undefined,
    WeightPointerARB: glWeightPointerARB = undefined,
    WeightbvARB: glWeightbvARB = undefined,
    WeightdvARB: glWeightdvARB = undefined,
    WeightfvARB: glWeightfvARB = undefined,
    WeightivARB: glWeightivARB = undefined,
    WeightsvARB: glWeightsvARB = undefined,
    WeightubvARB: glWeightubvARB = undefined,
    WeightuivARB: glWeightuivARB = undefined,
    WeightusvARB: glWeightusvARB = undefined,
    WindowPos2dARB: glWindowPos2dARB = undefined,
    WindowPos2dMESA: glWindowPos2dMESA = undefined,
    WindowPos2dvARB: glWindowPos2dvARB = undefined,
    WindowPos2dvMESA: glWindowPos2dvMESA = undefined,
    WindowPos2fARB: glWindowPos2fARB = undefined,
    WindowPos2fMESA: glWindowPos2fMESA = undefined,
    WindowPos2fvARB: glWindowPos2fvARB = undefined,
    WindowPos2fvMESA: glWindowPos2fvMESA = undefined,
    WindowPos2iARB: glWindowPos2iARB = undefined,
    WindowPos2iMESA: glWindowPos2iMESA = undefined,
    WindowPos2ivARB: glWindowPos2ivARB = undefined,
    WindowPos2ivMESA: glWindowPos2ivMESA = undefined,
    WindowPos2sARB: glWindowPos2sARB = undefined,
    WindowPos2sMESA: glWindowPos2sMESA = undefined,
    WindowPos2svARB: glWindowPos2svARB = undefined,
    WindowPos2svMESA: glWindowPos2svMESA = undefined,
    WindowPos3dARB: glWindowPos3dARB = undefined,
    WindowPos3dMESA: glWindowPos3dMESA = undefined,
    WindowPos3dvARB: glWindowPos3dvARB = undefined,
    WindowPos3dvMESA: glWindowPos3dvMESA = undefined,
    WindowPos3fARB: glWindowPos3fARB = undefined,
    WindowPos3fMESA: glWindowPos3fMESA = undefined,
    WindowPos3fvARB: glWindowPos3fvARB = undefined,
    WindowPos3fvMESA: glWindowPos3fvMESA = undefined,
    WindowPos3iARB: glWindowPos3iARB = undefined,
    WindowPos3iMESA: glWindowPos3iMESA = undefined,
    WindowPos3ivARB: glWindowPos3ivARB = undefined,
    WindowPos3ivMESA: glWindowPos3ivMESA = undefined,
    WindowPos3sARB: glWindowPos3sARB = undefined,
    WindowPos3sMESA: glWindowPos3sMESA = undefined,
    WindowPos3svARB: glWindowPos3svARB = undefined,
    WindowPos3svMESA: glWindowPos3svMESA = undefined,
    WindowPos4dMESA: glWindowPos4dMESA = undefined,
    WindowPos4dvMESA: glWindowPos4dvMESA = undefined,
    WindowPos4fMESA: glWindowPos4fMESA = undefined,
    WindowPos4fvMESA: glWindowPos4fvMESA = undefined,
    WindowPos4iMESA: glWindowPos4iMESA = undefined,
    WindowPos4ivMESA: glWindowPos4ivMESA = undefined,
    WindowPos4sMESA: glWindowPos4sMESA = undefined,
    WindowPos4svMESA: glWindowPos4svMESA = undefined,
    WindowRectanglesEXT: glWindowRectanglesEXT = undefined,
    WriteMaskEXT: glWriteMaskEXT = undefined,

    const Self = @This();

    pub fn init(comptime errors: type, loader: fn ([*:0]const u8) errors!GLproc) errors!Self {
        var self: Self = .{};
        try self.load(errors, loader);
        return self;
    }

    pub fn load(self: *Self, comptime errors: type, loader: fn ([*:0]const u8) errors!GLproc) errors!void {
        self.AccumxOES = @ptrCast(glAccumxOES, try loader("glAccumxOES"));
        self.AcquireKeyedMutexWin32EXT = @ptrCast(glAcquireKeyedMutexWin32EXT, try loader("glAcquireKeyedMutexWin32EXT"));
        self.ActiveProgramEXT = @ptrCast(glActiveProgramEXT, try loader("glActiveProgramEXT"));
        self.ActiveShaderProgram = @ptrCast(glActiveShaderProgram, try loader("glActiveShaderProgram"));
        self.ActiveStencilFaceEXT = @ptrCast(glActiveStencilFaceEXT, try loader("glActiveStencilFaceEXT"));
        self.ActiveTexture = @ptrCast(glActiveTexture, try loader("glActiveTexture"));
        self.ActiveTextureARB = @ptrCast(glActiveTextureARB, try loader("glActiveTextureARB"));
        self.ActiveVaryingNV = @ptrCast(glActiveVaryingNV, try loader("glActiveVaryingNV"));
        self.AlphaFragmentOp1ATI = @ptrCast(glAlphaFragmentOp1ATI, try loader("glAlphaFragmentOp1ATI"));
        self.AlphaFragmentOp2ATI = @ptrCast(glAlphaFragmentOp2ATI, try loader("glAlphaFragmentOp2ATI"));
        self.AlphaFragmentOp3ATI = @ptrCast(glAlphaFragmentOp3ATI, try loader("glAlphaFragmentOp3ATI"));
        self.AlphaFuncxOES = @ptrCast(glAlphaFuncxOES, try loader("glAlphaFuncxOES"));
        self.AlphaToCoverageDitherControlNV = @ptrCast(glAlphaToCoverageDitherControlNV, try loader("glAlphaToCoverageDitherControlNV"));
        self.ApplyFramebufferAttachmentCMAAINTEL = @ptrCast(glApplyFramebufferAttachmentCMAAINTEL, try loader("glApplyFramebufferAttachmentCMAAINTEL"));
        self.ApplyTextureEXT = @ptrCast(glApplyTextureEXT, try loader("glApplyTextureEXT"));
        self.AreProgramsResidentNV = @ptrCast(glAreProgramsResidentNV, try loader("glAreProgramsResidentNV"));
        self.AreTexturesResidentEXT = @ptrCast(glAreTexturesResidentEXT, try loader("glAreTexturesResidentEXT"));
        self.ArrayElementEXT = @ptrCast(glArrayElementEXT, try loader("glArrayElementEXT"));
        self.ArrayObjectATI = @ptrCast(glArrayObjectATI, try loader("glArrayObjectATI"));
        self.AsyncCopyBufferSubDataNVX = @ptrCast(glAsyncCopyBufferSubDataNVX, try loader("glAsyncCopyBufferSubDataNVX"));
        self.AsyncCopyImageSubDataNVX = @ptrCast(glAsyncCopyImageSubDataNVX, try loader("glAsyncCopyImageSubDataNVX"));
        self.AsyncMarkerSGIX = @ptrCast(glAsyncMarkerSGIX, try loader("glAsyncMarkerSGIX"));
        self.AttachObjectARB = @ptrCast(glAttachObjectARB, try loader("glAttachObjectARB"));
        self.AttachShader = @ptrCast(glAttachShader, try loader("glAttachShader"));
        self.BeginConditionalRender = @ptrCast(glBeginConditionalRender, try loader("glBeginConditionalRender"));
        self.BeginConditionalRenderNV = @ptrCast(glBeginConditionalRenderNV, try loader("glBeginConditionalRenderNV"));
        self.BeginConditionalRenderNVX = @ptrCast(glBeginConditionalRenderNVX, try loader("glBeginConditionalRenderNVX"));
        self.BeginFragmentShaderATI = @ptrCast(glBeginFragmentShaderATI, try loader("glBeginFragmentShaderATI"));
        self.BeginOcclusionQueryNV = @ptrCast(glBeginOcclusionQueryNV, try loader("glBeginOcclusionQueryNV"));
        self.BeginPerfMonitorAMD = @ptrCast(glBeginPerfMonitorAMD, try loader("glBeginPerfMonitorAMD"));
        self.BeginPerfQueryINTEL = @ptrCast(glBeginPerfQueryINTEL, try loader("glBeginPerfQueryINTEL"));
        self.BeginQuery = @ptrCast(glBeginQuery, try loader("glBeginQuery"));
        self.BeginQueryARB = @ptrCast(glBeginQueryARB, try loader("glBeginQueryARB"));
        self.BeginQueryIndexed = @ptrCast(glBeginQueryIndexed, try loader("glBeginQueryIndexed"));
        self.BeginTransformFeedback = @ptrCast(glBeginTransformFeedback, try loader("glBeginTransformFeedback"));
        self.BeginTransformFeedbackEXT = @ptrCast(glBeginTransformFeedbackEXT, try loader("glBeginTransformFeedbackEXT"));
        self.BeginTransformFeedbackNV = @ptrCast(glBeginTransformFeedbackNV, try loader("glBeginTransformFeedbackNV"));
        self.BeginVertexShaderEXT = @ptrCast(glBeginVertexShaderEXT, try loader("glBeginVertexShaderEXT"));
        self.BeginVideoCaptureNV = @ptrCast(glBeginVideoCaptureNV, try loader("glBeginVideoCaptureNV"));
        self.BindAttribLocation = @ptrCast(glBindAttribLocation, try loader("glBindAttribLocation"));
        self.BindAttribLocationARB = @ptrCast(glBindAttribLocationARB, try loader("glBindAttribLocationARB"));
        self.BindBuffer = @ptrCast(glBindBuffer, try loader("glBindBuffer"));
        self.BindBufferARB = @ptrCast(glBindBufferARB, try loader("glBindBufferARB"));
        self.BindBufferBase = @ptrCast(glBindBufferBase, try loader("glBindBufferBase"));
        self.BindBufferBaseEXT = @ptrCast(glBindBufferBaseEXT, try loader("glBindBufferBaseEXT"));
        self.BindBufferBaseNV = @ptrCast(glBindBufferBaseNV, try loader("glBindBufferBaseNV"));
        self.BindBufferOffsetEXT = @ptrCast(glBindBufferOffsetEXT, try loader("glBindBufferOffsetEXT"));
        self.BindBufferOffsetNV = @ptrCast(glBindBufferOffsetNV, try loader("glBindBufferOffsetNV"));
        self.BindBufferRange = @ptrCast(glBindBufferRange, try loader("glBindBufferRange"));
        self.BindBufferRangeEXT = @ptrCast(glBindBufferRangeEXT, try loader("glBindBufferRangeEXT"));
        self.BindBufferRangeNV = @ptrCast(glBindBufferRangeNV, try loader("glBindBufferRangeNV"));
        self.BindBuffersBase = @ptrCast(glBindBuffersBase, try loader("glBindBuffersBase"));
        self.BindBuffersRange = @ptrCast(glBindBuffersRange, try loader("glBindBuffersRange"));
        self.BindFragDataLocation = @ptrCast(glBindFragDataLocation, try loader("glBindFragDataLocation"));
        self.BindFragDataLocationEXT = @ptrCast(glBindFragDataLocationEXT, try loader("glBindFragDataLocationEXT"));
        self.BindFragDataLocationIndexed = @ptrCast(glBindFragDataLocationIndexed, try loader("glBindFragDataLocationIndexed"));
        self.BindFragmentShaderATI = @ptrCast(glBindFragmentShaderATI, try loader("glBindFragmentShaderATI"));
        self.BindFramebuffer = @ptrCast(glBindFramebuffer, try loader("glBindFramebuffer"));
        self.BindFramebufferEXT = @ptrCast(glBindFramebufferEXT, try loader("glBindFramebufferEXT"));
        self.BindImageTexture = @ptrCast(glBindImageTexture, try loader("glBindImageTexture"));
        self.BindImageTextureEXT = @ptrCast(glBindImageTextureEXT, try loader("glBindImageTextureEXT"));
        self.BindImageTextures = @ptrCast(glBindImageTextures, try loader("glBindImageTextures"));
        self.BindLightParameterEXT = @ptrCast(glBindLightParameterEXT, try loader("glBindLightParameterEXT"));
        self.BindMaterialParameterEXT = @ptrCast(glBindMaterialParameterEXT, try loader("glBindMaterialParameterEXT"));
        self.BindMultiTextureEXT = @ptrCast(glBindMultiTextureEXT, try loader("glBindMultiTextureEXT"));
        self.BindParameterEXT = @ptrCast(glBindParameterEXT, try loader("glBindParameterEXT"));
        self.BindProgramARB = @ptrCast(glBindProgramARB, try loader("glBindProgramARB"));
        self.BindProgramNV = @ptrCast(glBindProgramNV, try loader("glBindProgramNV"));
        self.BindProgramPipeline = @ptrCast(glBindProgramPipeline, try loader("glBindProgramPipeline"));
        self.BindRenderbuffer = @ptrCast(glBindRenderbuffer, try loader("glBindRenderbuffer"));
        self.BindRenderbufferEXT = @ptrCast(glBindRenderbufferEXT, try loader("glBindRenderbufferEXT"));
        self.BindSampler = @ptrCast(glBindSampler, try loader("glBindSampler"));
        self.BindSamplers = @ptrCast(glBindSamplers, try loader("glBindSamplers"));
        self.BindShadingRateImageNV = @ptrCast(glBindShadingRateImageNV, try loader("glBindShadingRateImageNV"));
        self.BindTexGenParameterEXT = @ptrCast(glBindTexGenParameterEXT, try loader("glBindTexGenParameterEXT"));
        self.BindTexture = @ptrCast(glBindTexture, try loader("glBindTexture"));
        self.BindTextureEXT = @ptrCast(glBindTextureEXT, try loader("glBindTextureEXT"));
        self.BindTextureUnit = @ptrCast(glBindTextureUnit, try loader("glBindTextureUnit"));
        self.BindTextureUnitParameterEXT = @ptrCast(glBindTextureUnitParameterEXT, try loader("glBindTextureUnitParameterEXT"));
        self.BindTextures = @ptrCast(glBindTextures, try loader("glBindTextures"));
        self.BindTransformFeedback = @ptrCast(glBindTransformFeedback, try loader("glBindTransformFeedback"));
        self.BindTransformFeedbackNV = @ptrCast(glBindTransformFeedbackNV, try loader("glBindTransformFeedbackNV"));
        self.BindVertexArray = @ptrCast(glBindVertexArray, try loader("glBindVertexArray"));
        self.BindVertexArrayAPPLE = @ptrCast(glBindVertexArrayAPPLE, try loader("glBindVertexArrayAPPLE"));
        self.BindVertexBuffer = @ptrCast(glBindVertexBuffer, try loader("glBindVertexBuffer"));
        self.BindVertexBuffers = @ptrCast(glBindVertexBuffers, try loader("glBindVertexBuffers"));
        self.BindVertexShaderEXT = @ptrCast(glBindVertexShaderEXT, try loader("glBindVertexShaderEXT"));
        self.BindVideoCaptureStreamBufferNV = @ptrCast(glBindVideoCaptureStreamBufferNV, try loader("glBindVideoCaptureStreamBufferNV"));
        self.BindVideoCaptureStreamTextureNV = @ptrCast(glBindVideoCaptureStreamTextureNV, try loader("glBindVideoCaptureStreamTextureNV"));
        self.Binormal3bEXT = @ptrCast(glBinormal3bEXT, try loader("glBinormal3bEXT"));
        self.Binormal3bvEXT = @ptrCast(glBinormal3bvEXT, try loader("glBinormal3bvEXT"));
        self.Binormal3dEXT = @ptrCast(glBinormal3dEXT, try loader("glBinormal3dEXT"));
        self.Binormal3dvEXT = @ptrCast(glBinormal3dvEXT, try loader("glBinormal3dvEXT"));
        self.Binormal3fEXT = @ptrCast(glBinormal3fEXT, try loader("glBinormal3fEXT"));
        self.Binormal3fvEXT = @ptrCast(glBinormal3fvEXT, try loader("glBinormal3fvEXT"));
        self.Binormal3iEXT = @ptrCast(glBinormal3iEXT, try loader("glBinormal3iEXT"));
        self.Binormal3ivEXT = @ptrCast(glBinormal3ivEXT, try loader("glBinormal3ivEXT"));
        self.Binormal3sEXT = @ptrCast(glBinormal3sEXT, try loader("glBinormal3sEXT"));
        self.Binormal3svEXT = @ptrCast(glBinormal3svEXT, try loader("glBinormal3svEXT"));
        self.BinormalPointerEXT = @ptrCast(glBinormalPointerEXT, try loader("glBinormalPointerEXT"));
        self.BitmapxOES = @ptrCast(glBitmapxOES, try loader("glBitmapxOES"));
        self.BlendBarrierKHR = @ptrCast(glBlendBarrierKHR, try loader("glBlendBarrierKHR"));
        self.BlendBarrierNV = @ptrCast(glBlendBarrierNV, try loader("glBlendBarrierNV"));
        self.BlendColor = @ptrCast(glBlendColor, try loader("glBlendColor"));
        self.BlendColorEXT = @ptrCast(glBlendColorEXT, try loader("glBlendColorEXT"));
        self.BlendColorxOES = @ptrCast(glBlendColorxOES, try loader("glBlendColorxOES"));
        self.BlendEquation = @ptrCast(glBlendEquation, try loader("glBlendEquation"));
        self.BlendEquationEXT = @ptrCast(glBlendEquationEXT, try loader("glBlendEquationEXT"));
        self.BlendEquationIndexedAMD = @ptrCast(glBlendEquationIndexedAMD, try loader("glBlendEquationIndexedAMD"));
        self.BlendEquationSeparate = @ptrCast(glBlendEquationSeparate, try loader("glBlendEquationSeparate"));
        self.BlendEquationSeparateEXT = @ptrCast(glBlendEquationSeparateEXT, try loader("glBlendEquationSeparateEXT"));
        self.BlendEquationSeparateIndexedAMD = @ptrCast(glBlendEquationSeparateIndexedAMD, try loader("glBlendEquationSeparateIndexedAMD"));
        self.BlendEquationSeparateiARB = @ptrCast(glBlendEquationSeparateiARB, try loader("glBlendEquationSeparateiARB"));
        self.BlendEquationiARB = @ptrCast(glBlendEquationiARB, try loader("glBlendEquationiARB"));
        self.BlendFunc = @ptrCast(glBlendFunc, try loader("glBlendFunc"));
        self.BlendFuncIndexedAMD = @ptrCast(glBlendFuncIndexedAMD, try loader("glBlendFuncIndexedAMD"));
        self.BlendFuncSeparate = @ptrCast(glBlendFuncSeparate, try loader("glBlendFuncSeparate"));
        self.BlendFuncSeparateEXT = @ptrCast(glBlendFuncSeparateEXT, try loader("glBlendFuncSeparateEXT"));
        self.BlendFuncSeparateINGR = @ptrCast(glBlendFuncSeparateINGR, try loader("glBlendFuncSeparateINGR"));
        self.BlendFuncSeparateIndexedAMD = @ptrCast(glBlendFuncSeparateIndexedAMD, try loader("glBlendFuncSeparateIndexedAMD"));
        self.BlendFuncSeparateiARB = @ptrCast(glBlendFuncSeparateiARB, try loader("glBlendFuncSeparateiARB"));
        self.BlendFunciARB = @ptrCast(glBlendFunciARB, try loader("glBlendFunciARB"));
        self.BlendParameteriNV = @ptrCast(glBlendParameteriNV, try loader("glBlendParameteriNV"));
        self.BlitFramebuffer = @ptrCast(glBlitFramebuffer, try loader("glBlitFramebuffer"));
        self.BlitFramebufferEXT = @ptrCast(glBlitFramebufferEXT, try loader("glBlitFramebufferEXT"));
        self.BlitNamedFramebuffer = @ptrCast(glBlitNamedFramebuffer, try loader("glBlitNamedFramebuffer"));
        self.BufferAddressRangeNV = @ptrCast(glBufferAddressRangeNV, try loader("glBufferAddressRangeNV"));
        self.BufferAttachMemoryNV = @ptrCast(glBufferAttachMemoryNV, try loader("glBufferAttachMemoryNV"));
        self.BufferData = @ptrCast(glBufferData, try loader("glBufferData"));
        self.BufferDataARB = @ptrCast(glBufferDataARB, try loader("glBufferDataARB"));
        self.BufferPageCommitmentARB = @ptrCast(glBufferPageCommitmentARB, try loader("glBufferPageCommitmentARB"));
        self.BufferPageCommitmentMemNV = @ptrCast(glBufferPageCommitmentMemNV, try loader("glBufferPageCommitmentMemNV"));
        self.BufferParameteriAPPLE = @ptrCast(glBufferParameteriAPPLE, try loader("glBufferParameteriAPPLE"));
        self.BufferStorage = @ptrCast(glBufferStorage, try loader("glBufferStorage"));
        self.BufferStorageExternalEXT = @ptrCast(glBufferStorageExternalEXT, try loader("glBufferStorageExternalEXT"));
        self.BufferStorageMemEXT = @ptrCast(glBufferStorageMemEXT, try loader("glBufferStorageMemEXT"));
        self.BufferSubData = @ptrCast(glBufferSubData, try loader("glBufferSubData"));
        self.BufferSubDataARB = @ptrCast(glBufferSubDataARB, try loader("glBufferSubDataARB"));
        self.CallCommandListNV = @ptrCast(glCallCommandListNV, try loader("glCallCommandListNV"));
        self.CheckFramebufferStatus = @ptrCast(glCheckFramebufferStatus, try loader("glCheckFramebufferStatus"));
        self.CheckFramebufferStatusEXT = @ptrCast(glCheckFramebufferStatusEXT, try loader("glCheckFramebufferStatusEXT"));
        self.CheckNamedFramebufferStatus = @ptrCast(glCheckNamedFramebufferStatus, try loader("glCheckNamedFramebufferStatus"));
        self.CheckNamedFramebufferStatusEXT = @ptrCast(glCheckNamedFramebufferStatusEXT, try loader("glCheckNamedFramebufferStatusEXT"));
        self.ClampColor = @ptrCast(glClampColor, try loader("glClampColor"));
        self.ClampColorARB = @ptrCast(glClampColorARB, try loader("glClampColorARB"));
        self.Clear = @ptrCast(glClear, try loader("glClear"));
        self.ClearAccumxOES = @ptrCast(glClearAccumxOES, try loader("glClearAccumxOES"));
        self.ClearBufferData = @ptrCast(glClearBufferData, try loader("glClearBufferData"));
        self.ClearBufferSubData = @ptrCast(glClearBufferSubData, try loader("glClearBufferSubData"));
        self.ClearBufferfi = @ptrCast(glClearBufferfi, try loader("glClearBufferfi"));
        self.ClearBufferfv = @ptrCast(glClearBufferfv, try loader("glClearBufferfv"));
        self.ClearBufferiv = @ptrCast(glClearBufferiv, try loader("glClearBufferiv"));
        self.ClearBufferuiv = @ptrCast(glClearBufferuiv, try loader("glClearBufferuiv"));
        self.ClearColor = @ptrCast(glClearColor, try loader("glClearColor"));
        self.ClearColorIiEXT = @ptrCast(glClearColorIiEXT, try loader("glClearColorIiEXT"));
        self.ClearColorIuiEXT = @ptrCast(glClearColorIuiEXT, try loader("glClearColorIuiEXT"));
        self.ClearColorxOES = @ptrCast(glClearColorxOES, try loader("glClearColorxOES"));
        self.ClearDepth = @ptrCast(glClearDepth, try loader("glClearDepth"));
        self.ClearDepthdNV = @ptrCast(glClearDepthdNV, try loader("glClearDepthdNV"));
        self.ClearDepthf = @ptrCast(glClearDepthf, try loader("glClearDepthf"));
        self.ClearDepthfOES = @ptrCast(glClearDepthfOES, try loader("glClearDepthfOES"));
        self.ClearDepthxOES = @ptrCast(glClearDepthxOES, try loader("glClearDepthxOES"));
        self.ClearNamedBufferData = @ptrCast(glClearNamedBufferData, try loader("glClearNamedBufferData"));
        self.ClearNamedBufferDataEXT = @ptrCast(glClearNamedBufferDataEXT, try loader("glClearNamedBufferDataEXT"));
        self.ClearNamedBufferSubData = @ptrCast(glClearNamedBufferSubData, try loader("glClearNamedBufferSubData"));
        self.ClearNamedBufferSubDataEXT = @ptrCast(glClearNamedBufferSubDataEXT, try loader("glClearNamedBufferSubDataEXT"));
        self.ClearNamedFramebufferfi = @ptrCast(glClearNamedFramebufferfi, try loader("glClearNamedFramebufferfi"));
        self.ClearNamedFramebufferfv = @ptrCast(glClearNamedFramebufferfv, try loader("glClearNamedFramebufferfv"));
        self.ClearNamedFramebufferiv = @ptrCast(glClearNamedFramebufferiv, try loader("glClearNamedFramebufferiv"));
        self.ClearNamedFramebufferuiv = @ptrCast(glClearNamedFramebufferuiv, try loader("glClearNamedFramebufferuiv"));
        self.ClearStencil = @ptrCast(glClearStencil, try loader("glClearStencil"));
        self.ClearTexImage = @ptrCast(glClearTexImage, try loader("glClearTexImage"));
        self.ClearTexSubImage = @ptrCast(glClearTexSubImage, try loader("glClearTexSubImage"));
        self.ClientActiveTextureARB = @ptrCast(glClientActiveTextureARB, try loader("glClientActiveTextureARB"));
        self.ClientActiveVertexStreamATI = @ptrCast(glClientActiveVertexStreamATI, try loader("glClientActiveVertexStreamATI"));
        self.ClientAttribDefaultEXT = @ptrCast(glClientAttribDefaultEXT, try loader("glClientAttribDefaultEXT"));
        self.ClientWaitSemaphoreui64NVX = @ptrCast(glClientWaitSemaphoreui64NVX, try loader("glClientWaitSemaphoreui64NVX"));
        self.ClientWaitSync = @ptrCast(glClientWaitSync, try loader("glClientWaitSync"));
        self.ClipControl = @ptrCast(glClipControl, try loader("glClipControl"));
        self.ClipPlanefOES = @ptrCast(glClipPlanefOES, try loader("glClipPlanefOES"));
        self.ClipPlanexOES = @ptrCast(glClipPlanexOES, try loader("glClipPlanexOES"));
        self.Color3fVertex3fSUN = @ptrCast(glColor3fVertex3fSUN, try loader("glColor3fVertex3fSUN"));
        self.Color3fVertex3fvSUN = @ptrCast(glColor3fVertex3fvSUN, try loader("glColor3fVertex3fvSUN"));
        self.Color3hNV = @ptrCast(glColor3hNV, try loader("glColor3hNV"));
        self.Color3hvNV = @ptrCast(glColor3hvNV, try loader("glColor3hvNV"));
        self.Color3xOES = @ptrCast(glColor3xOES, try loader("glColor3xOES"));
        self.Color3xvOES = @ptrCast(glColor3xvOES, try loader("glColor3xvOES"));
        self.Color4fNormal3fVertex3fSUN = @ptrCast(glColor4fNormal3fVertex3fSUN, try loader("glColor4fNormal3fVertex3fSUN"));
        self.Color4fNormal3fVertex3fvSUN = @ptrCast(glColor4fNormal3fVertex3fvSUN, try loader("glColor4fNormal3fVertex3fvSUN"));
        self.Color4hNV = @ptrCast(glColor4hNV, try loader("glColor4hNV"));
        self.Color4hvNV = @ptrCast(glColor4hvNV, try loader("glColor4hvNV"));
        self.Color4ubVertex2fSUN = @ptrCast(glColor4ubVertex2fSUN, try loader("glColor4ubVertex2fSUN"));
        self.Color4ubVertex2fvSUN = @ptrCast(glColor4ubVertex2fvSUN, try loader("glColor4ubVertex2fvSUN"));
        self.Color4ubVertex3fSUN = @ptrCast(glColor4ubVertex3fSUN, try loader("glColor4ubVertex3fSUN"));
        self.Color4ubVertex3fvSUN = @ptrCast(glColor4ubVertex3fvSUN, try loader("glColor4ubVertex3fvSUN"));
        self.Color4xOES = @ptrCast(glColor4xOES, try loader("glColor4xOES"));
        self.Color4xvOES = @ptrCast(glColor4xvOES, try loader("glColor4xvOES"));
        self.ColorFormatNV = @ptrCast(glColorFormatNV, try loader("glColorFormatNV"));
        self.ColorFragmentOp1ATI = @ptrCast(glColorFragmentOp1ATI, try loader("glColorFragmentOp1ATI"));
        self.ColorFragmentOp2ATI = @ptrCast(glColorFragmentOp2ATI, try loader("glColorFragmentOp2ATI"));
        self.ColorFragmentOp3ATI = @ptrCast(glColorFragmentOp3ATI, try loader("glColorFragmentOp3ATI"));
        self.ColorMask = @ptrCast(glColorMask, try loader("glColorMask"));
        self.ColorMaskIndexedEXT = @ptrCast(glColorMaskIndexedEXT, try loader("glColorMaskIndexedEXT"));
        self.ColorMaski = @ptrCast(glColorMaski, try loader("glColorMaski"));
        self.ColorPointerEXT = @ptrCast(glColorPointerEXT, try loader("glColorPointerEXT"));
        self.ColorPointerListIBM = @ptrCast(glColorPointerListIBM, try loader("glColorPointerListIBM"));
        self.ColorPointervINTEL = @ptrCast(glColorPointervINTEL, try loader("glColorPointervINTEL"));
        self.ColorSubTableEXT = @ptrCast(glColorSubTableEXT, try loader("glColorSubTableEXT"));
        self.ColorTableEXT = @ptrCast(glColorTableEXT, try loader("glColorTableEXT"));
        self.ColorTableParameterfvSGI = @ptrCast(glColorTableParameterfvSGI, try loader("glColorTableParameterfvSGI"));
        self.ColorTableParameterivSGI = @ptrCast(glColorTableParameterivSGI, try loader("glColorTableParameterivSGI"));
        self.ColorTableSGI = @ptrCast(glColorTableSGI, try loader("glColorTableSGI"));
        self.CombinerInputNV = @ptrCast(glCombinerInputNV, try loader("glCombinerInputNV"));
        self.CombinerOutputNV = @ptrCast(glCombinerOutputNV, try loader("glCombinerOutputNV"));
        self.CombinerParameterfNV = @ptrCast(glCombinerParameterfNV, try loader("glCombinerParameterfNV"));
        self.CombinerParameterfvNV = @ptrCast(glCombinerParameterfvNV, try loader("glCombinerParameterfvNV"));
        self.CombinerParameteriNV = @ptrCast(glCombinerParameteriNV, try loader("glCombinerParameteriNV"));
        self.CombinerParameterivNV = @ptrCast(glCombinerParameterivNV, try loader("glCombinerParameterivNV"));
        self.CombinerStageParameterfvNV = @ptrCast(glCombinerStageParameterfvNV, try loader("glCombinerStageParameterfvNV"));
        self.CommandListSegmentsNV = @ptrCast(glCommandListSegmentsNV, try loader("glCommandListSegmentsNV"));
        self.CompileCommandListNV = @ptrCast(glCompileCommandListNV, try loader("glCompileCommandListNV"));
        self.CompileShader = @ptrCast(glCompileShader, try loader("glCompileShader"));
        self.CompileShaderARB = @ptrCast(glCompileShaderARB, try loader("glCompileShaderARB"));
        self.CompileShaderIncludeARB = @ptrCast(glCompileShaderIncludeARB, try loader("glCompileShaderIncludeARB"));
        self.CompressedMultiTexImage1DEXT = @ptrCast(glCompressedMultiTexImage1DEXT, try loader("glCompressedMultiTexImage1DEXT"));
        self.CompressedMultiTexImage2DEXT = @ptrCast(glCompressedMultiTexImage2DEXT, try loader("glCompressedMultiTexImage2DEXT"));
        self.CompressedMultiTexImage3DEXT = @ptrCast(glCompressedMultiTexImage3DEXT, try loader("glCompressedMultiTexImage3DEXT"));
        self.CompressedMultiTexSubImage1DEXT = @ptrCast(glCompressedMultiTexSubImage1DEXT, try loader("glCompressedMultiTexSubImage1DEXT"));
        self.CompressedMultiTexSubImage2DEXT = @ptrCast(glCompressedMultiTexSubImage2DEXT, try loader("glCompressedMultiTexSubImage2DEXT"));
        self.CompressedMultiTexSubImage3DEXT = @ptrCast(glCompressedMultiTexSubImage3DEXT, try loader("glCompressedMultiTexSubImage3DEXT"));
        self.CompressedTexImage1D = @ptrCast(glCompressedTexImage1D, try loader("glCompressedTexImage1D"));
        self.CompressedTexImage1DARB = @ptrCast(glCompressedTexImage1DARB, try loader("glCompressedTexImage1DARB"));
        self.CompressedTexImage2D = @ptrCast(glCompressedTexImage2D, try loader("glCompressedTexImage2D"));
        self.CompressedTexImage2DARB = @ptrCast(glCompressedTexImage2DARB, try loader("glCompressedTexImage2DARB"));
        self.CompressedTexImage3D = @ptrCast(glCompressedTexImage3D, try loader("glCompressedTexImage3D"));
        self.CompressedTexImage3DARB = @ptrCast(glCompressedTexImage3DARB, try loader("glCompressedTexImage3DARB"));
        self.CompressedTexSubImage1D = @ptrCast(glCompressedTexSubImage1D, try loader("glCompressedTexSubImage1D"));
        self.CompressedTexSubImage1DARB = @ptrCast(glCompressedTexSubImage1DARB, try loader("glCompressedTexSubImage1DARB"));
        self.CompressedTexSubImage2D = @ptrCast(glCompressedTexSubImage2D, try loader("glCompressedTexSubImage2D"));
        self.CompressedTexSubImage2DARB = @ptrCast(glCompressedTexSubImage2DARB, try loader("glCompressedTexSubImage2DARB"));
        self.CompressedTexSubImage3D = @ptrCast(glCompressedTexSubImage3D, try loader("glCompressedTexSubImage3D"));
        self.CompressedTexSubImage3DARB = @ptrCast(glCompressedTexSubImage3DARB, try loader("glCompressedTexSubImage3DARB"));
        self.CompressedTextureImage1DEXT = @ptrCast(glCompressedTextureImage1DEXT, try loader("glCompressedTextureImage1DEXT"));
        self.CompressedTextureImage2DEXT = @ptrCast(glCompressedTextureImage2DEXT, try loader("glCompressedTextureImage2DEXT"));
        self.CompressedTextureImage3DEXT = @ptrCast(glCompressedTextureImage3DEXT, try loader("glCompressedTextureImage3DEXT"));
        self.CompressedTextureSubImage1D = @ptrCast(glCompressedTextureSubImage1D, try loader("glCompressedTextureSubImage1D"));
        self.CompressedTextureSubImage1DEXT = @ptrCast(glCompressedTextureSubImage1DEXT, try loader("glCompressedTextureSubImage1DEXT"));
        self.CompressedTextureSubImage2D = @ptrCast(glCompressedTextureSubImage2D, try loader("glCompressedTextureSubImage2D"));
        self.CompressedTextureSubImage2DEXT = @ptrCast(glCompressedTextureSubImage2DEXT, try loader("glCompressedTextureSubImage2DEXT"));
        self.CompressedTextureSubImage3D = @ptrCast(glCompressedTextureSubImage3D, try loader("glCompressedTextureSubImage3D"));
        self.CompressedTextureSubImage3DEXT = @ptrCast(glCompressedTextureSubImage3DEXT, try loader("glCompressedTextureSubImage3DEXT"));
        self.ConservativeRasterParameterfNV = @ptrCast(glConservativeRasterParameterfNV, try loader("glConservativeRasterParameterfNV"));
        self.ConservativeRasterParameteriNV = @ptrCast(glConservativeRasterParameteriNV, try loader("glConservativeRasterParameteriNV"));
        self.ConvolutionFilter1DEXT = @ptrCast(glConvolutionFilter1DEXT, try loader("glConvolutionFilter1DEXT"));
        self.ConvolutionFilter2DEXT = @ptrCast(glConvolutionFilter2DEXT, try loader("glConvolutionFilter2DEXT"));
        self.ConvolutionParameterfEXT = @ptrCast(glConvolutionParameterfEXT, try loader("glConvolutionParameterfEXT"));
        self.ConvolutionParameterfvEXT = @ptrCast(glConvolutionParameterfvEXT, try loader("glConvolutionParameterfvEXT"));
        self.ConvolutionParameteriEXT = @ptrCast(glConvolutionParameteriEXT, try loader("glConvolutionParameteriEXT"));
        self.ConvolutionParameterivEXT = @ptrCast(glConvolutionParameterivEXT, try loader("glConvolutionParameterivEXT"));
        self.ConvolutionParameterxOES = @ptrCast(glConvolutionParameterxOES, try loader("glConvolutionParameterxOES"));
        self.ConvolutionParameterxvOES = @ptrCast(glConvolutionParameterxvOES, try loader("glConvolutionParameterxvOES"));
        self.CopyBufferSubData = @ptrCast(glCopyBufferSubData, try loader("glCopyBufferSubData"));
        self.CopyColorSubTableEXT = @ptrCast(glCopyColorSubTableEXT, try loader("glCopyColorSubTableEXT"));
        self.CopyColorTableSGI = @ptrCast(glCopyColorTableSGI, try loader("glCopyColorTableSGI"));
        self.CopyConvolutionFilter1DEXT = @ptrCast(glCopyConvolutionFilter1DEXT, try loader("glCopyConvolutionFilter1DEXT"));
        self.CopyConvolutionFilter2DEXT = @ptrCast(glCopyConvolutionFilter2DEXT, try loader("glCopyConvolutionFilter2DEXT"));
        self.CopyImageSubData = @ptrCast(glCopyImageSubData, try loader("glCopyImageSubData"));
        self.CopyImageSubDataNV = @ptrCast(glCopyImageSubDataNV, try loader("glCopyImageSubDataNV"));
        self.CopyMultiTexImage1DEXT = @ptrCast(glCopyMultiTexImage1DEXT, try loader("glCopyMultiTexImage1DEXT"));
        self.CopyMultiTexImage2DEXT = @ptrCast(glCopyMultiTexImage2DEXT, try loader("glCopyMultiTexImage2DEXT"));
        self.CopyMultiTexSubImage1DEXT = @ptrCast(glCopyMultiTexSubImage1DEXT, try loader("glCopyMultiTexSubImage1DEXT"));
        self.CopyMultiTexSubImage2DEXT = @ptrCast(glCopyMultiTexSubImage2DEXT, try loader("glCopyMultiTexSubImage2DEXT"));
        self.CopyMultiTexSubImage3DEXT = @ptrCast(glCopyMultiTexSubImage3DEXT, try loader("glCopyMultiTexSubImage3DEXT"));
        self.CopyNamedBufferSubData = @ptrCast(glCopyNamedBufferSubData, try loader("glCopyNamedBufferSubData"));
        self.CopyPathNV = @ptrCast(glCopyPathNV, try loader("glCopyPathNV"));
        self.CopyTexImage1D = @ptrCast(glCopyTexImage1D, try loader("glCopyTexImage1D"));
        self.CopyTexImage1DEXT = @ptrCast(glCopyTexImage1DEXT, try loader("glCopyTexImage1DEXT"));
        self.CopyTexImage2D = @ptrCast(glCopyTexImage2D, try loader("glCopyTexImage2D"));
        self.CopyTexImage2DEXT = @ptrCast(glCopyTexImage2DEXT, try loader("glCopyTexImage2DEXT"));
        self.CopyTexSubImage1D = @ptrCast(glCopyTexSubImage1D, try loader("glCopyTexSubImage1D"));
        self.CopyTexSubImage1DEXT = @ptrCast(glCopyTexSubImage1DEXT, try loader("glCopyTexSubImage1DEXT"));
        self.CopyTexSubImage2D = @ptrCast(glCopyTexSubImage2D, try loader("glCopyTexSubImage2D"));
        self.CopyTexSubImage2DEXT = @ptrCast(glCopyTexSubImage2DEXT, try loader("glCopyTexSubImage2DEXT"));
        self.CopyTexSubImage3D = @ptrCast(glCopyTexSubImage3D, try loader("glCopyTexSubImage3D"));
        self.CopyTexSubImage3DEXT = @ptrCast(glCopyTexSubImage3DEXT, try loader("glCopyTexSubImage3DEXT"));
        self.CopyTextureImage1DEXT = @ptrCast(glCopyTextureImage1DEXT, try loader("glCopyTextureImage1DEXT"));
        self.CopyTextureImage2DEXT = @ptrCast(glCopyTextureImage2DEXT, try loader("glCopyTextureImage2DEXT"));
        self.CopyTextureSubImage1D = @ptrCast(glCopyTextureSubImage1D, try loader("glCopyTextureSubImage1D"));
        self.CopyTextureSubImage1DEXT = @ptrCast(glCopyTextureSubImage1DEXT, try loader("glCopyTextureSubImage1DEXT"));
        self.CopyTextureSubImage2D = @ptrCast(glCopyTextureSubImage2D, try loader("glCopyTextureSubImage2D"));
        self.CopyTextureSubImage2DEXT = @ptrCast(glCopyTextureSubImage2DEXT, try loader("glCopyTextureSubImage2DEXT"));
        self.CopyTextureSubImage3D = @ptrCast(glCopyTextureSubImage3D, try loader("glCopyTextureSubImage3D"));
        self.CopyTextureSubImage3DEXT = @ptrCast(glCopyTextureSubImage3DEXT, try loader("glCopyTextureSubImage3DEXT"));
        self.CoverFillPathInstancedNV = @ptrCast(glCoverFillPathInstancedNV, try loader("glCoverFillPathInstancedNV"));
        self.CoverFillPathNV = @ptrCast(glCoverFillPathNV, try loader("glCoverFillPathNV"));
        self.CoverStrokePathInstancedNV = @ptrCast(glCoverStrokePathInstancedNV, try loader("glCoverStrokePathInstancedNV"));
        self.CoverStrokePathNV = @ptrCast(glCoverStrokePathNV, try loader("glCoverStrokePathNV"));
        self.CoverageModulationNV = @ptrCast(glCoverageModulationNV, try loader("glCoverageModulationNV"));
        self.CoverageModulationTableNV = @ptrCast(glCoverageModulationTableNV, try loader("glCoverageModulationTableNV"));
        self.CreateBuffers = @ptrCast(glCreateBuffers, try loader("glCreateBuffers"));
        self.CreateCommandListsNV = @ptrCast(glCreateCommandListsNV, try loader("glCreateCommandListsNV"));
        self.CreateFramebuffers = @ptrCast(glCreateFramebuffers, try loader("glCreateFramebuffers"));
        self.CreateMemoryObjectsEXT = @ptrCast(glCreateMemoryObjectsEXT, try loader("glCreateMemoryObjectsEXT"));
        self.CreatePerfQueryINTEL = @ptrCast(glCreatePerfQueryINTEL, try loader("glCreatePerfQueryINTEL"));
        self.CreateProgram = @ptrCast(glCreateProgram, try loader("glCreateProgram"));
        self.CreateProgramObjectARB = @ptrCast(glCreateProgramObjectARB, try loader("glCreateProgramObjectARB"));
        self.CreateProgramPipelines = @ptrCast(glCreateProgramPipelines, try loader("glCreateProgramPipelines"));
        self.CreateProgressFenceNVX = @ptrCast(glCreateProgressFenceNVX, try loader("glCreateProgressFenceNVX"));
        self.CreateQueries = @ptrCast(glCreateQueries, try loader("glCreateQueries"));
        self.CreateRenderbuffers = @ptrCast(glCreateRenderbuffers, try loader("glCreateRenderbuffers"));
        self.CreateSamplers = @ptrCast(glCreateSamplers, try loader("glCreateSamplers"));
        self.CreateSemaphoresNV = @ptrCast(glCreateSemaphoresNV, try loader("glCreateSemaphoresNV"));
        self.CreateShader = @ptrCast(glCreateShader, try loader("glCreateShader"));
        self.CreateShaderObjectARB = @ptrCast(glCreateShaderObjectARB, try loader("glCreateShaderObjectARB"));
        self.CreateShaderProgramEXT = @ptrCast(glCreateShaderProgramEXT, try loader("glCreateShaderProgramEXT"));
        self.CreateShaderProgramv = @ptrCast(glCreateShaderProgramv, try loader("glCreateShaderProgramv"));
        self.CreateStatesNV = @ptrCast(glCreateStatesNV, try loader("glCreateStatesNV"));
        self.CreateSyncFromCLeventARB = @ptrCast(glCreateSyncFromCLeventARB, try loader("glCreateSyncFromCLeventARB"));
        self.CreateTextures = @ptrCast(glCreateTextures, try loader("glCreateTextures"));
        self.CreateTransformFeedbacks = @ptrCast(glCreateTransformFeedbacks, try loader("glCreateTransformFeedbacks"));
        self.CreateVertexArrays = @ptrCast(glCreateVertexArrays, try loader("glCreateVertexArrays"));
        self.CullFace = @ptrCast(glCullFace, try loader("glCullFace"));
        self.CullParameterdvEXT = @ptrCast(glCullParameterdvEXT, try loader("glCullParameterdvEXT"));
        self.CullParameterfvEXT = @ptrCast(glCullParameterfvEXT, try loader("glCullParameterfvEXT"));
        self.CurrentPaletteMatrixARB = @ptrCast(glCurrentPaletteMatrixARB, try loader("glCurrentPaletteMatrixARB"));
        self.DebugMessageCallback = @ptrCast(glDebugMessageCallback, try loader("glDebugMessageCallback"));
        self.DebugMessageCallbackAMD = @ptrCast(glDebugMessageCallbackAMD, try loader("glDebugMessageCallbackAMD"));
        self.DebugMessageCallbackARB = @ptrCast(glDebugMessageCallbackARB, try loader("glDebugMessageCallbackARB"));
        self.DebugMessageControl = @ptrCast(glDebugMessageControl, try loader("glDebugMessageControl"));
        self.DebugMessageControlARB = @ptrCast(glDebugMessageControlARB, try loader("glDebugMessageControlARB"));
        self.DebugMessageEnableAMD = @ptrCast(glDebugMessageEnableAMD, try loader("glDebugMessageEnableAMD"));
        self.DebugMessageInsert = @ptrCast(glDebugMessageInsert, try loader("glDebugMessageInsert"));
        self.DebugMessageInsertAMD = @ptrCast(glDebugMessageInsertAMD, try loader("glDebugMessageInsertAMD"));
        self.DebugMessageInsertARB = @ptrCast(glDebugMessageInsertARB, try loader("glDebugMessageInsertARB"));
        self.DeformSGIX = @ptrCast(glDeformSGIX, try loader("glDeformSGIX"));
        self.DeformationMap3dSGIX = @ptrCast(glDeformationMap3dSGIX, try loader("glDeformationMap3dSGIX"));
        self.DeformationMap3fSGIX = @ptrCast(glDeformationMap3fSGIX, try loader("glDeformationMap3fSGIX"));
        self.DeleteAsyncMarkersSGIX = @ptrCast(glDeleteAsyncMarkersSGIX, try loader("glDeleteAsyncMarkersSGIX"));
        self.DeleteBuffers = @ptrCast(glDeleteBuffers, try loader("glDeleteBuffers"));
        self.DeleteBuffersARB = @ptrCast(glDeleteBuffersARB, try loader("glDeleteBuffersARB"));
        self.DeleteCommandListsNV = @ptrCast(glDeleteCommandListsNV, try loader("glDeleteCommandListsNV"));
        self.DeleteFencesAPPLE = @ptrCast(glDeleteFencesAPPLE, try loader("glDeleteFencesAPPLE"));
        self.DeleteFencesNV = @ptrCast(glDeleteFencesNV, try loader("glDeleteFencesNV"));
        self.DeleteFragmentShaderATI = @ptrCast(glDeleteFragmentShaderATI, try loader("glDeleteFragmentShaderATI"));
        self.DeleteFramebuffers = @ptrCast(glDeleteFramebuffers, try loader("glDeleteFramebuffers"));
        self.DeleteFramebuffersEXT = @ptrCast(glDeleteFramebuffersEXT, try loader("glDeleteFramebuffersEXT"));
        self.DeleteMemoryObjectsEXT = @ptrCast(glDeleteMemoryObjectsEXT, try loader("glDeleteMemoryObjectsEXT"));
        self.DeleteNamedStringARB = @ptrCast(glDeleteNamedStringARB, try loader("glDeleteNamedStringARB"));
        self.DeleteNamesAMD = @ptrCast(glDeleteNamesAMD, try loader("glDeleteNamesAMD"));
        self.DeleteObjectARB = @ptrCast(glDeleteObjectARB, try loader("glDeleteObjectARB"));
        self.DeleteOcclusionQueriesNV = @ptrCast(glDeleteOcclusionQueriesNV, try loader("glDeleteOcclusionQueriesNV"));
        self.DeletePathsNV = @ptrCast(glDeletePathsNV, try loader("glDeletePathsNV"));
        self.DeletePerfMonitorsAMD = @ptrCast(glDeletePerfMonitorsAMD, try loader("glDeletePerfMonitorsAMD"));
        self.DeletePerfQueryINTEL = @ptrCast(glDeletePerfQueryINTEL, try loader("glDeletePerfQueryINTEL"));
        self.DeleteProgram = @ptrCast(glDeleteProgram, try loader("glDeleteProgram"));
        self.DeleteProgramPipelines = @ptrCast(glDeleteProgramPipelines, try loader("glDeleteProgramPipelines"));
        self.DeleteProgramsARB = @ptrCast(glDeleteProgramsARB, try loader("glDeleteProgramsARB"));
        self.DeleteProgramsNV = @ptrCast(glDeleteProgramsNV, try loader("glDeleteProgramsNV"));
        self.DeleteQueries = @ptrCast(glDeleteQueries, try loader("glDeleteQueries"));
        self.DeleteQueriesARB = @ptrCast(glDeleteQueriesARB, try loader("glDeleteQueriesARB"));
        self.DeleteQueryResourceTagNV = @ptrCast(glDeleteQueryResourceTagNV, try loader("glDeleteQueryResourceTagNV"));
        self.DeleteRenderbuffers = @ptrCast(glDeleteRenderbuffers, try loader("glDeleteRenderbuffers"));
        self.DeleteRenderbuffersEXT = @ptrCast(glDeleteRenderbuffersEXT, try loader("glDeleteRenderbuffersEXT"));
        self.DeleteSamplers = @ptrCast(glDeleteSamplers, try loader("glDeleteSamplers"));
        self.DeleteSemaphoresEXT = @ptrCast(glDeleteSemaphoresEXT, try loader("glDeleteSemaphoresEXT"));
        self.DeleteShader = @ptrCast(glDeleteShader, try loader("glDeleteShader"));
        self.DeleteStatesNV = @ptrCast(glDeleteStatesNV, try loader("glDeleteStatesNV"));
        self.DeleteSync = @ptrCast(glDeleteSync, try loader("glDeleteSync"));
        self.DeleteTextures = @ptrCast(glDeleteTextures, try loader("glDeleteTextures"));
        self.DeleteTexturesEXT = @ptrCast(glDeleteTexturesEXT, try loader("glDeleteTexturesEXT"));
        self.DeleteTransformFeedbacks = @ptrCast(glDeleteTransformFeedbacks, try loader("glDeleteTransformFeedbacks"));
        self.DeleteTransformFeedbacksNV = @ptrCast(glDeleteTransformFeedbacksNV, try loader("glDeleteTransformFeedbacksNV"));
        self.DeleteVertexArrays = @ptrCast(glDeleteVertexArrays, try loader("glDeleteVertexArrays"));
        self.DeleteVertexArraysAPPLE = @ptrCast(glDeleteVertexArraysAPPLE, try loader("glDeleteVertexArraysAPPLE"));
        self.DeleteVertexShaderEXT = @ptrCast(glDeleteVertexShaderEXT, try loader("glDeleteVertexShaderEXT"));
        self.DepthBoundsEXT = @ptrCast(glDepthBoundsEXT, try loader("glDepthBoundsEXT"));
        self.DepthBoundsdNV = @ptrCast(glDepthBoundsdNV, try loader("glDepthBoundsdNV"));
        self.DepthFunc = @ptrCast(glDepthFunc, try loader("glDepthFunc"));
        self.DepthMask = @ptrCast(glDepthMask, try loader("glDepthMask"));
        self.DepthRange = @ptrCast(glDepthRange, try loader("glDepthRange"));
        self.DepthRangeArraydvNV = @ptrCast(glDepthRangeArraydvNV, try loader("glDepthRangeArraydvNV"));
        self.DepthRangeArrayv = @ptrCast(glDepthRangeArrayv, try loader("glDepthRangeArrayv"));
        self.DepthRangeIndexed = @ptrCast(glDepthRangeIndexed, try loader("glDepthRangeIndexed"));
        self.DepthRangeIndexeddNV = @ptrCast(glDepthRangeIndexeddNV, try loader("glDepthRangeIndexeddNV"));
        self.DepthRangedNV = @ptrCast(glDepthRangedNV, try loader("glDepthRangedNV"));
        self.DepthRangef = @ptrCast(glDepthRangef, try loader("glDepthRangef"));
        self.DepthRangefOES = @ptrCast(glDepthRangefOES, try loader("glDepthRangefOES"));
        self.DepthRangexOES = @ptrCast(glDepthRangexOES, try loader("glDepthRangexOES"));
        self.DetachObjectARB = @ptrCast(glDetachObjectARB, try loader("glDetachObjectARB"));
        self.DetachShader = @ptrCast(glDetachShader, try loader("glDetachShader"));
        self.DetailTexFuncSGIS = @ptrCast(glDetailTexFuncSGIS, try loader("glDetailTexFuncSGIS"));
        self.Disable = @ptrCast(glDisable, try loader("glDisable"));
        self.DisableClientStateIndexedEXT = @ptrCast(glDisableClientStateIndexedEXT, try loader("glDisableClientStateIndexedEXT"));
        self.DisableClientStateiEXT = @ptrCast(glDisableClientStateiEXT, try loader("glDisableClientStateiEXT"));
        self.DisableIndexedEXT = @ptrCast(glDisableIndexedEXT, try loader("glDisableIndexedEXT"));
        self.DisableVariantClientStateEXT = @ptrCast(glDisableVariantClientStateEXT, try loader("glDisableVariantClientStateEXT"));
        self.DisableVertexArrayAttrib = @ptrCast(glDisableVertexArrayAttrib, try loader("glDisableVertexArrayAttrib"));
        self.DisableVertexArrayAttribEXT = @ptrCast(glDisableVertexArrayAttribEXT, try loader("glDisableVertexArrayAttribEXT"));
        self.DisableVertexArrayEXT = @ptrCast(glDisableVertexArrayEXT, try loader("glDisableVertexArrayEXT"));
        self.DisableVertexAttribAPPLE = @ptrCast(glDisableVertexAttribAPPLE, try loader("glDisableVertexAttribAPPLE"));
        self.DisableVertexAttribArray = @ptrCast(glDisableVertexAttribArray, try loader("glDisableVertexAttribArray"));
        self.DisableVertexAttribArrayARB = @ptrCast(glDisableVertexAttribArrayARB, try loader("glDisableVertexAttribArrayARB"));
        self.Disablei = @ptrCast(glDisablei, try loader("glDisablei"));
        self.DispatchCompute = @ptrCast(glDispatchCompute, try loader("glDispatchCompute"));
        self.DispatchComputeGroupSizeARB = @ptrCast(glDispatchComputeGroupSizeARB, try loader("glDispatchComputeGroupSizeARB"));
        self.DispatchComputeIndirect = @ptrCast(glDispatchComputeIndirect, try loader("glDispatchComputeIndirect"));
        self.DrawArrays = @ptrCast(glDrawArrays, try loader("glDrawArrays"));
        self.DrawArraysEXT = @ptrCast(glDrawArraysEXT, try loader("glDrawArraysEXT"));
        self.DrawArraysIndirect = @ptrCast(glDrawArraysIndirect, try loader("glDrawArraysIndirect"));
        self.DrawArraysInstanced = @ptrCast(glDrawArraysInstanced, try loader("glDrawArraysInstanced"));
        self.DrawArraysInstancedARB = @ptrCast(glDrawArraysInstancedARB, try loader("glDrawArraysInstancedARB"));
        self.DrawArraysInstancedBaseInstance = @ptrCast(glDrawArraysInstancedBaseInstance, try loader("glDrawArraysInstancedBaseInstance"));
        self.DrawArraysInstancedEXT = @ptrCast(glDrawArraysInstancedEXT, try loader("glDrawArraysInstancedEXT"));
        self.DrawBuffer = @ptrCast(glDrawBuffer, try loader("glDrawBuffer"));
        self.DrawBuffers = @ptrCast(glDrawBuffers, try loader("glDrawBuffers"));
        self.DrawBuffersARB = @ptrCast(glDrawBuffersARB, try loader("glDrawBuffersARB"));
        self.DrawBuffersATI = @ptrCast(glDrawBuffersATI, try loader("glDrawBuffersATI"));
        self.DrawCommandsAddressNV = @ptrCast(glDrawCommandsAddressNV, try loader("glDrawCommandsAddressNV"));
        self.DrawCommandsNV = @ptrCast(glDrawCommandsNV, try loader("glDrawCommandsNV"));
        self.DrawCommandsStatesAddressNV = @ptrCast(glDrawCommandsStatesAddressNV, try loader("glDrawCommandsStatesAddressNV"));
        self.DrawCommandsStatesNV = @ptrCast(glDrawCommandsStatesNV, try loader("glDrawCommandsStatesNV"));
        self.DrawElementArrayAPPLE = @ptrCast(glDrawElementArrayAPPLE, try loader("glDrawElementArrayAPPLE"));
        self.DrawElementArrayATI = @ptrCast(glDrawElementArrayATI, try loader("glDrawElementArrayATI"));
        self.DrawElements = @ptrCast(glDrawElements, try loader("glDrawElements"));
        self.DrawElementsBaseVertex = @ptrCast(glDrawElementsBaseVertex, try loader("glDrawElementsBaseVertex"));
        self.DrawElementsIndirect = @ptrCast(glDrawElementsIndirect, try loader("glDrawElementsIndirect"));
        self.DrawElementsInstanced = @ptrCast(glDrawElementsInstanced, try loader("glDrawElementsInstanced"));
        self.DrawElementsInstancedARB = @ptrCast(glDrawElementsInstancedARB, try loader("glDrawElementsInstancedARB"));
        self.DrawElementsInstancedBaseInstance = @ptrCast(glDrawElementsInstancedBaseInstance, try loader("glDrawElementsInstancedBaseInstance"));
        self.DrawElementsInstancedBaseVertex = @ptrCast(glDrawElementsInstancedBaseVertex, try loader("glDrawElementsInstancedBaseVertex"));
        self.DrawElementsInstancedBaseVertexBaseInstance = @ptrCast(glDrawElementsInstancedBaseVertexBaseInstance, try loader("glDrawElementsInstancedBaseVertexBaseInstance"));
        self.DrawElementsInstancedEXT = @ptrCast(glDrawElementsInstancedEXT, try loader("glDrawElementsInstancedEXT"));
        self.DrawMeshArraysSUN = @ptrCast(glDrawMeshArraysSUN, try loader("glDrawMeshArraysSUN"));
        self.DrawMeshTasksIndirectNV = @ptrCast(glDrawMeshTasksIndirectNV, try loader("glDrawMeshTasksIndirectNV"));
        self.DrawMeshTasksNV = @ptrCast(glDrawMeshTasksNV, try loader("glDrawMeshTasksNV"));
        self.DrawRangeElementArrayAPPLE = @ptrCast(glDrawRangeElementArrayAPPLE, try loader("glDrawRangeElementArrayAPPLE"));
        self.DrawRangeElementArrayATI = @ptrCast(glDrawRangeElementArrayATI, try loader("glDrawRangeElementArrayATI"));
        self.DrawRangeElements = @ptrCast(glDrawRangeElements, try loader("glDrawRangeElements"));
        self.DrawRangeElementsBaseVertex = @ptrCast(glDrawRangeElementsBaseVertex, try loader("glDrawRangeElementsBaseVertex"));
        self.DrawRangeElementsEXT = @ptrCast(glDrawRangeElementsEXT, try loader("glDrawRangeElementsEXT"));
        self.DrawTextureNV = @ptrCast(glDrawTextureNV, try loader("glDrawTextureNV"));
        self.DrawTransformFeedback = @ptrCast(glDrawTransformFeedback, try loader("glDrawTransformFeedback"));
        self.DrawTransformFeedbackInstanced = @ptrCast(glDrawTransformFeedbackInstanced, try loader("glDrawTransformFeedbackInstanced"));
        self.DrawTransformFeedbackNV = @ptrCast(glDrawTransformFeedbackNV, try loader("glDrawTransformFeedbackNV"));
        self.DrawTransformFeedbackStream = @ptrCast(glDrawTransformFeedbackStream, try loader("glDrawTransformFeedbackStream"));
        self.DrawTransformFeedbackStreamInstanced = @ptrCast(glDrawTransformFeedbackStreamInstanced, try loader("glDrawTransformFeedbackStreamInstanced"));
        self.DrawVkImageNV = @ptrCast(glDrawVkImageNV, try loader("glDrawVkImageNV"));
        self.EGLImageTargetTexStorageEXT = @ptrCast(glEGLImageTargetTexStorageEXT, try loader("glEGLImageTargetTexStorageEXT"));
        self.EGLImageTargetTextureStorageEXT = @ptrCast(glEGLImageTargetTextureStorageEXT, try loader("glEGLImageTargetTextureStorageEXT"));
        self.EdgeFlagFormatNV = @ptrCast(glEdgeFlagFormatNV, try loader("glEdgeFlagFormatNV"));
        self.EdgeFlagPointerEXT = @ptrCast(glEdgeFlagPointerEXT, try loader("glEdgeFlagPointerEXT"));
        self.EdgeFlagPointerListIBM = @ptrCast(glEdgeFlagPointerListIBM, try loader("glEdgeFlagPointerListIBM"));
        self.ElementPointerAPPLE = @ptrCast(glElementPointerAPPLE, try loader("glElementPointerAPPLE"));
        self.ElementPointerATI = @ptrCast(glElementPointerATI, try loader("glElementPointerATI"));
        self.Enable = @ptrCast(glEnable, try loader("glEnable"));
        self.EnableClientStateIndexedEXT = @ptrCast(glEnableClientStateIndexedEXT, try loader("glEnableClientStateIndexedEXT"));
        self.EnableClientStateiEXT = @ptrCast(glEnableClientStateiEXT, try loader("glEnableClientStateiEXT"));
        self.EnableIndexedEXT = @ptrCast(glEnableIndexedEXT, try loader("glEnableIndexedEXT"));
        self.EnableVariantClientStateEXT = @ptrCast(glEnableVariantClientStateEXT, try loader("glEnableVariantClientStateEXT"));
        self.EnableVertexArrayAttrib = @ptrCast(glEnableVertexArrayAttrib, try loader("glEnableVertexArrayAttrib"));
        self.EnableVertexArrayAttribEXT = @ptrCast(glEnableVertexArrayAttribEXT, try loader("glEnableVertexArrayAttribEXT"));
        self.EnableVertexArrayEXT = @ptrCast(glEnableVertexArrayEXT, try loader("glEnableVertexArrayEXT"));
        self.EnableVertexAttribAPPLE = @ptrCast(glEnableVertexAttribAPPLE, try loader("glEnableVertexAttribAPPLE"));
        self.EnableVertexAttribArray = @ptrCast(glEnableVertexAttribArray, try loader("glEnableVertexAttribArray"));
        self.EnableVertexAttribArrayARB = @ptrCast(glEnableVertexAttribArrayARB, try loader("glEnableVertexAttribArrayARB"));
        self.Enablei = @ptrCast(glEnablei, try loader("glEnablei"));
        self.EndConditionalRender = @ptrCast(glEndConditionalRender, try loader("glEndConditionalRender"));
        self.EndConditionalRenderNV = @ptrCast(glEndConditionalRenderNV, try loader("glEndConditionalRenderNV"));
        self.EndConditionalRenderNVX = @ptrCast(glEndConditionalRenderNVX, try loader("glEndConditionalRenderNVX"));
        self.EndFragmentShaderATI = @ptrCast(glEndFragmentShaderATI, try loader("glEndFragmentShaderATI"));
        self.EndOcclusionQueryNV = @ptrCast(glEndOcclusionQueryNV, try loader("glEndOcclusionQueryNV"));
        self.EndPerfMonitorAMD = @ptrCast(glEndPerfMonitorAMD, try loader("glEndPerfMonitorAMD"));
        self.EndPerfQueryINTEL = @ptrCast(glEndPerfQueryINTEL, try loader("glEndPerfQueryINTEL"));
        self.EndQuery = @ptrCast(glEndQuery, try loader("glEndQuery"));
        self.EndQueryARB = @ptrCast(glEndQueryARB, try loader("glEndQueryARB"));
        self.EndQueryIndexed = @ptrCast(glEndQueryIndexed, try loader("glEndQueryIndexed"));
        self.EndTransformFeedback = @ptrCast(glEndTransformFeedback, try loader("glEndTransformFeedback"));
        self.EndTransformFeedbackEXT = @ptrCast(glEndTransformFeedbackEXT, try loader("glEndTransformFeedbackEXT"));
        self.EndTransformFeedbackNV = @ptrCast(glEndTransformFeedbackNV, try loader("glEndTransformFeedbackNV"));
        self.EndVertexShaderEXT = @ptrCast(glEndVertexShaderEXT, try loader("glEndVertexShaderEXT"));
        self.EndVideoCaptureNV = @ptrCast(glEndVideoCaptureNV, try loader("glEndVideoCaptureNV"));
        self.EvalCoord1xOES = @ptrCast(glEvalCoord1xOES, try loader("glEvalCoord1xOES"));
        self.EvalCoord1xvOES = @ptrCast(glEvalCoord1xvOES, try loader("glEvalCoord1xvOES"));
        self.EvalCoord2xOES = @ptrCast(glEvalCoord2xOES, try loader("glEvalCoord2xOES"));
        self.EvalCoord2xvOES = @ptrCast(glEvalCoord2xvOES, try loader("glEvalCoord2xvOES"));
        self.EvalMapsNV = @ptrCast(glEvalMapsNV, try loader("glEvalMapsNV"));
        self.EvaluateDepthValuesARB = @ptrCast(glEvaluateDepthValuesARB, try loader("glEvaluateDepthValuesARB"));
        self.ExecuteProgramNV = @ptrCast(glExecuteProgramNV, try loader("glExecuteProgramNV"));
        self.ExtractComponentEXT = @ptrCast(glExtractComponentEXT, try loader("glExtractComponentEXT"));
        self.FeedbackBufferxOES = @ptrCast(glFeedbackBufferxOES, try loader("glFeedbackBufferxOES"));
        self.FenceSync = @ptrCast(glFenceSync, try loader("glFenceSync"));
        self.FinalCombinerInputNV = @ptrCast(glFinalCombinerInputNV, try loader("glFinalCombinerInputNV"));
        self.Finish = @ptrCast(glFinish, try loader("glFinish"));
        self.FinishAsyncSGIX = @ptrCast(glFinishAsyncSGIX, try loader("glFinishAsyncSGIX"));
        self.FinishFenceAPPLE = @ptrCast(glFinishFenceAPPLE, try loader("glFinishFenceAPPLE"));
        self.FinishFenceNV = @ptrCast(glFinishFenceNV, try loader("glFinishFenceNV"));
        self.FinishObjectAPPLE = @ptrCast(glFinishObjectAPPLE, try loader("glFinishObjectAPPLE"));
        self.FinishTextureSUNX = @ptrCast(glFinishTextureSUNX, try loader("glFinishTextureSUNX"));
        self.Flush = @ptrCast(glFlush, try loader("glFlush"));
        self.FlushMappedBufferRange = @ptrCast(glFlushMappedBufferRange, try loader("glFlushMappedBufferRange"));
        self.FlushMappedBufferRangeAPPLE = @ptrCast(glFlushMappedBufferRangeAPPLE, try loader("glFlushMappedBufferRangeAPPLE"));
        self.FlushMappedNamedBufferRange = @ptrCast(glFlushMappedNamedBufferRange, try loader("glFlushMappedNamedBufferRange"));
        self.FlushMappedNamedBufferRangeEXT = @ptrCast(glFlushMappedNamedBufferRangeEXT, try loader("glFlushMappedNamedBufferRangeEXT"));
        self.FlushPixelDataRangeNV = @ptrCast(glFlushPixelDataRangeNV, try loader("glFlushPixelDataRangeNV"));
        self.FlushRasterSGIX = @ptrCast(glFlushRasterSGIX, try loader("glFlushRasterSGIX"));
        self.FlushStaticDataIBM = @ptrCast(glFlushStaticDataIBM, try loader("glFlushStaticDataIBM"));
        self.FlushVertexArrayRangeAPPLE = @ptrCast(glFlushVertexArrayRangeAPPLE, try loader("glFlushVertexArrayRangeAPPLE"));
        self.FlushVertexArrayRangeNV = @ptrCast(glFlushVertexArrayRangeNV, try loader("glFlushVertexArrayRangeNV"));
        self.FogCoordFormatNV = @ptrCast(glFogCoordFormatNV, try loader("glFogCoordFormatNV"));
        self.FogCoordPointerEXT = @ptrCast(glFogCoordPointerEXT, try loader("glFogCoordPointerEXT"));
        self.FogCoordPointerListIBM = @ptrCast(glFogCoordPointerListIBM, try loader("glFogCoordPointerListIBM"));
        self.FogCoorddEXT = @ptrCast(glFogCoorddEXT, try loader("glFogCoorddEXT"));
        self.FogCoorddvEXT = @ptrCast(glFogCoorddvEXT, try loader("glFogCoorddvEXT"));
        self.FogCoordfEXT = @ptrCast(glFogCoordfEXT, try loader("glFogCoordfEXT"));
        self.FogCoordfvEXT = @ptrCast(glFogCoordfvEXT, try loader("glFogCoordfvEXT"));
        self.FogCoordhNV = @ptrCast(glFogCoordhNV, try loader("glFogCoordhNV"));
        self.FogCoordhvNV = @ptrCast(glFogCoordhvNV, try loader("glFogCoordhvNV"));
        self.FogFuncSGIS = @ptrCast(glFogFuncSGIS, try loader("glFogFuncSGIS"));
        self.FogxOES = @ptrCast(glFogxOES, try loader("glFogxOES"));
        self.FogxvOES = @ptrCast(glFogxvOES, try loader("glFogxvOES"));
        self.FragmentColorMaterialSGIX = @ptrCast(glFragmentColorMaterialSGIX, try loader("glFragmentColorMaterialSGIX"));
        self.FragmentCoverageColorNV = @ptrCast(glFragmentCoverageColorNV, try loader("glFragmentCoverageColorNV"));
        self.FragmentLightModelfSGIX = @ptrCast(glFragmentLightModelfSGIX, try loader("glFragmentLightModelfSGIX"));
        self.FragmentLightModelfvSGIX = @ptrCast(glFragmentLightModelfvSGIX, try loader("glFragmentLightModelfvSGIX"));
        self.FragmentLightModeliSGIX = @ptrCast(glFragmentLightModeliSGIX, try loader("glFragmentLightModeliSGIX"));
        self.FragmentLightModelivSGIX = @ptrCast(glFragmentLightModelivSGIX, try loader("glFragmentLightModelivSGIX"));
        self.FragmentLightfSGIX = @ptrCast(glFragmentLightfSGIX, try loader("glFragmentLightfSGIX"));
        self.FragmentLightfvSGIX = @ptrCast(glFragmentLightfvSGIX, try loader("glFragmentLightfvSGIX"));
        self.FragmentLightiSGIX = @ptrCast(glFragmentLightiSGIX, try loader("glFragmentLightiSGIX"));
        self.FragmentLightivSGIX = @ptrCast(glFragmentLightivSGIX, try loader("glFragmentLightivSGIX"));
        self.FragmentMaterialfSGIX = @ptrCast(glFragmentMaterialfSGIX, try loader("glFragmentMaterialfSGIX"));
        self.FragmentMaterialfvSGIX = @ptrCast(glFragmentMaterialfvSGIX, try loader("glFragmentMaterialfvSGIX"));
        self.FragmentMaterialiSGIX = @ptrCast(glFragmentMaterialiSGIX, try loader("glFragmentMaterialiSGIX"));
        self.FragmentMaterialivSGIX = @ptrCast(glFragmentMaterialivSGIX, try loader("glFragmentMaterialivSGIX"));
        self.FrameTerminatorGREMEDY = @ptrCast(glFrameTerminatorGREMEDY, try loader("glFrameTerminatorGREMEDY"));
        self.FrameZoomSGIX = @ptrCast(glFrameZoomSGIX, try loader("glFrameZoomSGIX"));
        self.FramebufferDrawBufferEXT = @ptrCast(glFramebufferDrawBufferEXT, try loader("glFramebufferDrawBufferEXT"));
        self.FramebufferDrawBuffersEXT = @ptrCast(glFramebufferDrawBuffersEXT, try loader("glFramebufferDrawBuffersEXT"));
        self.FramebufferFetchBarrierEXT = @ptrCast(glFramebufferFetchBarrierEXT, try loader("glFramebufferFetchBarrierEXT"));
        self.FramebufferParameteri = @ptrCast(glFramebufferParameteri, try loader("glFramebufferParameteri"));
        self.FramebufferParameteriMESA = @ptrCast(glFramebufferParameteriMESA, try loader("glFramebufferParameteriMESA"));
        self.FramebufferReadBufferEXT = @ptrCast(glFramebufferReadBufferEXT, try loader("glFramebufferReadBufferEXT"));
        self.FramebufferRenderbuffer = @ptrCast(glFramebufferRenderbuffer, try loader("glFramebufferRenderbuffer"));
        self.FramebufferRenderbufferEXT = @ptrCast(glFramebufferRenderbufferEXT, try loader("glFramebufferRenderbufferEXT"));
        self.FramebufferSampleLocationsfvARB = @ptrCast(glFramebufferSampleLocationsfvARB, try loader("glFramebufferSampleLocationsfvARB"));
        self.FramebufferSampleLocationsfvNV = @ptrCast(glFramebufferSampleLocationsfvNV, try loader("glFramebufferSampleLocationsfvNV"));
        self.FramebufferSamplePositionsfvAMD = @ptrCast(glFramebufferSamplePositionsfvAMD, try loader("glFramebufferSamplePositionsfvAMD"));
        self.FramebufferTexture = @ptrCast(glFramebufferTexture, try loader("glFramebufferTexture"));
        self.FramebufferTexture1D = @ptrCast(glFramebufferTexture1D, try loader("glFramebufferTexture1D"));
        self.FramebufferTexture1DEXT = @ptrCast(glFramebufferTexture1DEXT, try loader("glFramebufferTexture1DEXT"));
        self.FramebufferTexture2D = @ptrCast(glFramebufferTexture2D, try loader("glFramebufferTexture2D"));
        self.FramebufferTexture2DEXT = @ptrCast(glFramebufferTexture2DEXT, try loader("glFramebufferTexture2DEXT"));
        self.FramebufferTexture3D = @ptrCast(glFramebufferTexture3D, try loader("glFramebufferTexture3D"));
        self.FramebufferTexture3DEXT = @ptrCast(glFramebufferTexture3DEXT, try loader("glFramebufferTexture3DEXT"));
        self.FramebufferTextureARB = @ptrCast(glFramebufferTextureARB, try loader("glFramebufferTextureARB"));
        self.FramebufferTextureEXT = @ptrCast(glFramebufferTextureEXT, try loader("glFramebufferTextureEXT"));
        self.FramebufferTextureFaceARB = @ptrCast(glFramebufferTextureFaceARB, try loader("glFramebufferTextureFaceARB"));
        self.FramebufferTextureFaceEXT = @ptrCast(glFramebufferTextureFaceEXT, try loader("glFramebufferTextureFaceEXT"));
        self.FramebufferTextureLayer = @ptrCast(glFramebufferTextureLayer, try loader("glFramebufferTextureLayer"));
        self.FramebufferTextureLayerARB = @ptrCast(glFramebufferTextureLayerARB, try loader("glFramebufferTextureLayerARB"));
        self.FramebufferTextureLayerEXT = @ptrCast(glFramebufferTextureLayerEXT, try loader("glFramebufferTextureLayerEXT"));
        self.FramebufferTextureMultiviewOVR = @ptrCast(glFramebufferTextureMultiviewOVR, try loader("glFramebufferTextureMultiviewOVR"));
        self.FreeObjectBufferATI = @ptrCast(glFreeObjectBufferATI, try loader("glFreeObjectBufferATI"));
        self.FrontFace = @ptrCast(glFrontFace, try loader("glFrontFace"));
        self.FrustumfOES = @ptrCast(glFrustumfOES, try loader("glFrustumfOES"));
        self.FrustumxOES = @ptrCast(glFrustumxOES, try loader("glFrustumxOES"));
        self.GenAsyncMarkersSGIX = @ptrCast(glGenAsyncMarkersSGIX, try loader("glGenAsyncMarkersSGIX"));
        self.GenBuffers = @ptrCast(glGenBuffers, try loader("glGenBuffers"));
        self.GenBuffersARB = @ptrCast(glGenBuffersARB, try loader("glGenBuffersARB"));
        self.GenFencesAPPLE = @ptrCast(glGenFencesAPPLE, try loader("glGenFencesAPPLE"));
        self.GenFencesNV = @ptrCast(glGenFencesNV, try loader("glGenFencesNV"));
        self.GenFragmentShadersATI = @ptrCast(glGenFragmentShadersATI, try loader("glGenFragmentShadersATI"));
        self.GenFramebuffers = @ptrCast(glGenFramebuffers, try loader("glGenFramebuffers"));
        self.GenFramebuffersEXT = @ptrCast(glGenFramebuffersEXT, try loader("glGenFramebuffersEXT"));
        self.GenNamesAMD = @ptrCast(glGenNamesAMD, try loader("glGenNamesAMD"));
        self.GenOcclusionQueriesNV = @ptrCast(glGenOcclusionQueriesNV, try loader("glGenOcclusionQueriesNV"));
        self.GenPathsNV = @ptrCast(glGenPathsNV, try loader("glGenPathsNV"));
        self.GenPerfMonitorsAMD = @ptrCast(glGenPerfMonitorsAMD, try loader("glGenPerfMonitorsAMD"));
        self.GenProgramPipelines = @ptrCast(glGenProgramPipelines, try loader("glGenProgramPipelines"));
        self.GenProgramsARB = @ptrCast(glGenProgramsARB, try loader("glGenProgramsARB"));
        self.GenProgramsNV = @ptrCast(glGenProgramsNV, try loader("glGenProgramsNV"));
        self.GenQueries = @ptrCast(glGenQueries, try loader("glGenQueries"));
        self.GenQueriesARB = @ptrCast(glGenQueriesARB, try loader("glGenQueriesARB"));
        self.GenQueryResourceTagNV = @ptrCast(glGenQueryResourceTagNV, try loader("glGenQueryResourceTagNV"));
        self.GenRenderbuffers = @ptrCast(glGenRenderbuffers, try loader("glGenRenderbuffers"));
        self.GenRenderbuffersEXT = @ptrCast(glGenRenderbuffersEXT, try loader("glGenRenderbuffersEXT"));
        self.GenSamplers = @ptrCast(glGenSamplers, try loader("glGenSamplers"));
        self.GenSemaphoresEXT = @ptrCast(glGenSemaphoresEXT, try loader("glGenSemaphoresEXT"));
        self.GenSymbolsEXT = @ptrCast(glGenSymbolsEXT, try loader("glGenSymbolsEXT"));
        self.GenTextures = @ptrCast(glGenTextures, try loader("glGenTextures"));
        self.GenTexturesEXT = @ptrCast(glGenTexturesEXT, try loader("glGenTexturesEXT"));
        self.GenTransformFeedbacks = @ptrCast(glGenTransformFeedbacks, try loader("glGenTransformFeedbacks"));
        self.GenTransformFeedbacksNV = @ptrCast(glGenTransformFeedbacksNV, try loader("glGenTransformFeedbacksNV"));
        self.GenVertexArrays = @ptrCast(glGenVertexArrays, try loader("glGenVertexArrays"));
        self.GenVertexArraysAPPLE = @ptrCast(glGenVertexArraysAPPLE, try loader("glGenVertexArraysAPPLE"));
        self.GenVertexShadersEXT = @ptrCast(glGenVertexShadersEXT, try loader("glGenVertexShadersEXT"));
        self.GenerateMipmap = @ptrCast(glGenerateMipmap, try loader("glGenerateMipmap"));
        self.GenerateMipmapEXT = @ptrCast(glGenerateMipmapEXT, try loader("glGenerateMipmapEXT"));
        self.GenerateMultiTexMipmapEXT = @ptrCast(glGenerateMultiTexMipmapEXT, try loader("glGenerateMultiTexMipmapEXT"));
        self.GenerateTextureMipmap = @ptrCast(glGenerateTextureMipmap, try loader("glGenerateTextureMipmap"));
        self.GenerateTextureMipmapEXT = @ptrCast(glGenerateTextureMipmapEXT, try loader("glGenerateTextureMipmapEXT"));
        self.GetActiveAtomicCounterBufferiv = @ptrCast(glGetActiveAtomicCounterBufferiv, try loader("glGetActiveAtomicCounterBufferiv"));
        self.GetActiveAttrib = @ptrCast(glGetActiveAttrib, try loader("glGetActiveAttrib"));
        self.GetActiveAttribARB = @ptrCast(glGetActiveAttribARB, try loader("glGetActiveAttribARB"));
        self.GetActiveSubroutineName = @ptrCast(glGetActiveSubroutineName, try loader("glGetActiveSubroutineName"));
        self.GetActiveSubroutineUniformName = @ptrCast(glGetActiveSubroutineUniformName, try loader("glGetActiveSubroutineUniformName"));
        self.GetActiveSubroutineUniformiv = @ptrCast(glGetActiveSubroutineUniformiv, try loader("glGetActiveSubroutineUniformiv"));
        self.GetActiveUniform = @ptrCast(glGetActiveUniform, try loader("glGetActiveUniform"));
        self.GetActiveUniformARB = @ptrCast(glGetActiveUniformARB, try loader("glGetActiveUniformARB"));
        self.GetActiveUniformBlockName = @ptrCast(glGetActiveUniformBlockName, try loader("glGetActiveUniformBlockName"));
        self.GetActiveUniformBlockiv = @ptrCast(glGetActiveUniformBlockiv, try loader("glGetActiveUniformBlockiv"));
        self.GetActiveUniformName = @ptrCast(glGetActiveUniformName, try loader("glGetActiveUniformName"));
        self.GetActiveUniformsiv = @ptrCast(glGetActiveUniformsiv, try loader("glGetActiveUniformsiv"));
        self.GetActiveVaryingNV = @ptrCast(glGetActiveVaryingNV, try loader("glGetActiveVaryingNV"));
        self.GetArrayObjectfvATI = @ptrCast(glGetArrayObjectfvATI, try loader("glGetArrayObjectfvATI"));
        self.GetArrayObjectivATI = @ptrCast(glGetArrayObjectivATI, try loader("glGetArrayObjectivATI"));
        self.GetAttachedObjectsARB = @ptrCast(glGetAttachedObjectsARB, try loader("glGetAttachedObjectsARB"));
        self.GetAttachedShaders = @ptrCast(glGetAttachedShaders, try loader("glGetAttachedShaders"));
        self.GetAttribLocation = @ptrCast(glGetAttribLocation, try loader("glGetAttribLocation"));
        self.GetAttribLocationARB = @ptrCast(glGetAttribLocationARB, try loader("glGetAttribLocationARB"));
        self.GetBooleanIndexedvEXT = @ptrCast(glGetBooleanIndexedvEXT, try loader("glGetBooleanIndexedvEXT"));
        self.GetBooleani_v = @ptrCast(glGetBooleani_v, try loader("glGetBooleani_v"));
        self.GetBooleanv = @ptrCast(glGetBooleanv, try loader("glGetBooleanv"));
        self.GetBufferParameteri64v = @ptrCast(glGetBufferParameteri64v, try loader("glGetBufferParameteri64v"));
        self.GetBufferParameteriv = @ptrCast(glGetBufferParameteriv, try loader("glGetBufferParameteriv"));
        self.GetBufferParameterivARB = @ptrCast(glGetBufferParameterivARB, try loader("glGetBufferParameterivARB"));
        self.GetBufferParameterui64vNV = @ptrCast(glGetBufferParameterui64vNV, try loader("glGetBufferParameterui64vNV"));
        self.GetBufferPointerv = @ptrCast(glGetBufferPointerv, try loader("glGetBufferPointerv"));
        self.GetBufferPointervARB = @ptrCast(glGetBufferPointervARB, try loader("glGetBufferPointervARB"));
        self.GetBufferSubData = @ptrCast(glGetBufferSubData, try loader("glGetBufferSubData"));
        self.GetBufferSubDataARB = @ptrCast(glGetBufferSubDataARB, try loader("glGetBufferSubDataARB"));
        self.GetClipPlanefOES = @ptrCast(glGetClipPlanefOES, try loader("glGetClipPlanefOES"));
        self.GetClipPlanexOES = @ptrCast(glGetClipPlanexOES, try loader("glGetClipPlanexOES"));
        self.GetColorTableEXT = @ptrCast(glGetColorTableEXT, try loader("glGetColorTableEXT"));
        self.GetColorTableParameterfvEXT = @ptrCast(glGetColorTableParameterfvEXT, try loader("glGetColorTableParameterfvEXT"));
        self.GetColorTableParameterfvSGI = @ptrCast(glGetColorTableParameterfvSGI, try loader("glGetColorTableParameterfvSGI"));
        self.GetColorTableParameterivEXT = @ptrCast(glGetColorTableParameterivEXT, try loader("glGetColorTableParameterivEXT"));
        self.GetColorTableParameterivSGI = @ptrCast(glGetColorTableParameterivSGI, try loader("glGetColorTableParameterivSGI"));
        self.GetColorTableSGI = @ptrCast(glGetColorTableSGI, try loader("glGetColorTableSGI"));
        self.GetCombinerInputParameterfvNV = @ptrCast(glGetCombinerInputParameterfvNV, try loader("glGetCombinerInputParameterfvNV"));
        self.GetCombinerInputParameterivNV = @ptrCast(glGetCombinerInputParameterivNV, try loader("glGetCombinerInputParameterivNV"));
        self.GetCombinerOutputParameterfvNV = @ptrCast(glGetCombinerOutputParameterfvNV, try loader("glGetCombinerOutputParameterfvNV"));
        self.GetCombinerOutputParameterivNV = @ptrCast(glGetCombinerOutputParameterivNV, try loader("glGetCombinerOutputParameterivNV"));
        self.GetCombinerStageParameterfvNV = @ptrCast(glGetCombinerStageParameterfvNV, try loader("glGetCombinerStageParameterfvNV"));
        self.GetCommandHeaderNV = @ptrCast(glGetCommandHeaderNV, try loader("glGetCommandHeaderNV"));
        self.GetCompressedMultiTexImageEXT = @ptrCast(glGetCompressedMultiTexImageEXT, try loader("glGetCompressedMultiTexImageEXT"));
        self.GetCompressedTexImage = @ptrCast(glGetCompressedTexImage, try loader("glGetCompressedTexImage"));
        self.GetCompressedTexImageARB = @ptrCast(glGetCompressedTexImageARB, try loader("glGetCompressedTexImageARB"));
        self.GetCompressedTextureImage = @ptrCast(glGetCompressedTextureImage, try loader("glGetCompressedTextureImage"));
        self.GetCompressedTextureImageEXT = @ptrCast(glGetCompressedTextureImageEXT, try loader("glGetCompressedTextureImageEXT"));
        self.GetCompressedTextureSubImage = @ptrCast(glGetCompressedTextureSubImage, try loader("glGetCompressedTextureSubImage"));
        self.GetConvolutionFilterEXT = @ptrCast(glGetConvolutionFilterEXT, try loader("glGetConvolutionFilterEXT"));
        self.GetConvolutionParameterfvEXT = @ptrCast(glGetConvolutionParameterfvEXT, try loader("glGetConvolutionParameterfvEXT"));
        self.GetConvolutionParameterivEXT = @ptrCast(glGetConvolutionParameterivEXT, try loader("glGetConvolutionParameterivEXT"));
        self.GetConvolutionParameterxvOES = @ptrCast(glGetConvolutionParameterxvOES, try loader("glGetConvolutionParameterxvOES"));
        self.GetCoverageModulationTableNV = @ptrCast(glGetCoverageModulationTableNV, try loader("glGetCoverageModulationTableNV"));
        self.GetDebugMessageLog = @ptrCast(glGetDebugMessageLog, try loader("glGetDebugMessageLog"));
        self.GetDebugMessageLogAMD = @ptrCast(glGetDebugMessageLogAMD, try loader("glGetDebugMessageLogAMD"));
        self.GetDebugMessageLogARB = @ptrCast(glGetDebugMessageLogARB, try loader("glGetDebugMessageLogARB"));
        self.GetDetailTexFuncSGIS = @ptrCast(glGetDetailTexFuncSGIS, try loader("glGetDetailTexFuncSGIS"));
        self.GetDoubleIndexedvEXT = @ptrCast(glGetDoubleIndexedvEXT, try loader("glGetDoubleIndexedvEXT"));
        self.GetDoublei_v = @ptrCast(glGetDoublei_v, try loader("glGetDoublei_v"));
        self.GetDoublei_vEXT = @ptrCast(glGetDoublei_vEXT, try loader("glGetDoublei_vEXT"));
        self.GetDoublev = @ptrCast(glGetDoublev, try loader("glGetDoublev"));
        self.GetError = @ptrCast(glGetError, try loader("glGetError"));
        self.GetFenceivNV = @ptrCast(glGetFenceivNV, try loader("glGetFenceivNV"));
        self.GetFinalCombinerInputParameterfvNV = @ptrCast(glGetFinalCombinerInputParameterfvNV, try loader("glGetFinalCombinerInputParameterfvNV"));
        self.GetFinalCombinerInputParameterivNV = @ptrCast(glGetFinalCombinerInputParameterivNV, try loader("glGetFinalCombinerInputParameterivNV"));
        self.GetFirstPerfQueryIdINTEL = @ptrCast(glGetFirstPerfQueryIdINTEL, try loader("glGetFirstPerfQueryIdINTEL"));
        self.GetFixedvOES = @ptrCast(glGetFixedvOES, try loader("glGetFixedvOES"));
        self.GetFloatIndexedvEXT = @ptrCast(glGetFloatIndexedvEXT, try loader("glGetFloatIndexedvEXT"));
        self.GetFloati_v = @ptrCast(glGetFloati_v, try loader("glGetFloati_v"));
        self.GetFloati_vEXT = @ptrCast(glGetFloati_vEXT, try loader("glGetFloati_vEXT"));
        self.GetFloatv = @ptrCast(glGetFloatv, try loader("glGetFloatv"));
        self.GetFogFuncSGIS = @ptrCast(glGetFogFuncSGIS, try loader("glGetFogFuncSGIS"));
        self.GetFragDataIndex = @ptrCast(glGetFragDataIndex, try loader("glGetFragDataIndex"));
        self.GetFragDataLocation = @ptrCast(glGetFragDataLocation, try loader("glGetFragDataLocation"));
        self.GetFragDataLocationEXT = @ptrCast(glGetFragDataLocationEXT, try loader("glGetFragDataLocationEXT"));
        self.GetFragmentLightfvSGIX = @ptrCast(glGetFragmentLightfvSGIX, try loader("glGetFragmentLightfvSGIX"));
        self.GetFragmentLightivSGIX = @ptrCast(glGetFragmentLightivSGIX, try loader("glGetFragmentLightivSGIX"));
        self.GetFragmentMaterialfvSGIX = @ptrCast(glGetFragmentMaterialfvSGIX, try loader("glGetFragmentMaterialfvSGIX"));
        self.GetFragmentMaterialivSGIX = @ptrCast(glGetFragmentMaterialivSGIX, try loader("glGetFragmentMaterialivSGIX"));
        self.GetFramebufferAttachmentParameteriv = @ptrCast(glGetFramebufferAttachmentParameteriv, try loader("glGetFramebufferAttachmentParameteriv"));
        self.GetFramebufferAttachmentParameterivEXT = @ptrCast(glGetFramebufferAttachmentParameterivEXT, try loader("glGetFramebufferAttachmentParameterivEXT"));
        self.GetFramebufferParameterfvAMD = @ptrCast(glGetFramebufferParameterfvAMD, try loader("glGetFramebufferParameterfvAMD"));
        self.GetFramebufferParameteriv = @ptrCast(glGetFramebufferParameteriv, try loader("glGetFramebufferParameteriv"));
        self.GetFramebufferParameterivEXT = @ptrCast(glGetFramebufferParameterivEXT, try loader("glGetFramebufferParameterivEXT"));
        self.GetFramebufferParameterivMESA = @ptrCast(glGetFramebufferParameterivMESA, try loader("glGetFramebufferParameterivMESA"));
        self.GetGraphicsResetStatus = @ptrCast(glGetGraphicsResetStatus, try loader("glGetGraphicsResetStatus"));
        self.GetGraphicsResetStatusARB = @ptrCast(glGetGraphicsResetStatusARB, try loader("glGetGraphicsResetStatusARB"));
        self.GetHandleARB = @ptrCast(glGetHandleARB, try loader("glGetHandleARB"));
        self.GetHistogramEXT = @ptrCast(glGetHistogramEXT, try loader("glGetHistogramEXT"));
        self.GetHistogramParameterfvEXT = @ptrCast(glGetHistogramParameterfvEXT, try loader("glGetHistogramParameterfvEXT"));
        self.GetHistogramParameterivEXT = @ptrCast(glGetHistogramParameterivEXT, try loader("glGetHistogramParameterivEXT"));
        self.GetHistogramParameterxvOES = @ptrCast(glGetHistogramParameterxvOES, try loader("glGetHistogramParameterxvOES"));
        self.GetImageHandleARB = @ptrCast(glGetImageHandleARB, try loader("glGetImageHandleARB"));
        self.GetImageHandleNV = @ptrCast(glGetImageHandleNV, try loader("glGetImageHandleNV"));
        self.GetImageTransformParameterfvHP = @ptrCast(glGetImageTransformParameterfvHP, try loader("glGetImageTransformParameterfvHP"));
        self.GetImageTransformParameterivHP = @ptrCast(glGetImageTransformParameterivHP, try loader("glGetImageTransformParameterivHP"));
        self.GetInfoLogARB = @ptrCast(glGetInfoLogARB, try loader("glGetInfoLogARB"));
        self.GetInstrumentsSGIX = @ptrCast(glGetInstrumentsSGIX, try loader("glGetInstrumentsSGIX"));
        self.GetInteger64i_v = @ptrCast(glGetInteger64i_v, try loader("glGetInteger64i_v"));
        self.GetInteger64v = @ptrCast(glGetInteger64v, try loader("glGetInteger64v"));
        self.GetIntegerIndexedvEXT = @ptrCast(glGetIntegerIndexedvEXT, try loader("glGetIntegerIndexedvEXT"));
        self.GetIntegeri_v = @ptrCast(glGetIntegeri_v, try loader("glGetIntegeri_v"));
        self.GetIntegerui64i_vNV = @ptrCast(glGetIntegerui64i_vNV, try loader("glGetIntegerui64i_vNV"));
        self.GetIntegerui64vNV = @ptrCast(glGetIntegerui64vNV, try loader("glGetIntegerui64vNV"));
        self.GetIntegerv = @ptrCast(glGetIntegerv, try loader("glGetIntegerv"));
        self.GetInternalformatSampleivNV = @ptrCast(glGetInternalformatSampleivNV, try loader("glGetInternalformatSampleivNV"));
        self.GetInternalformati64v = @ptrCast(glGetInternalformati64v, try loader("glGetInternalformati64v"));
        self.GetInternalformativ = @ptrCast(glGetInternalformativ, try loader("glGetInternalformativ"));
        self.GetInvariantBooleanvEXT = @ptrCast(glGetInvariantBooleanvEXT, try loader("glGetInvariantBooleanvEXT"));
        self.GetInvariantFloatvEXT = @ptrCast(glGetInvariantFloatvEXT, try loader("glGetInvariantFloatvEXT"));
        self.GetInvariantIntegervEXT = @ptrCast(glGetInvariantIntegervEXT, try loader("glGetInvariantIntegervEXT"));
        self.GetLightxOES = @ptrCast(glGetLightxOES, try loader("glGetLightxOES"));
        self.GetListParameterfvSGIX = @ptrCast(glGetListParameterfvSGIX, try loader("glGetListParameterfvSGIX"));
        self.GetListParameterivSGIX = @ptrCast(glGetListParameterivSGIX, try loader("glGetListParameterivSGIX"));
        self.GetLocalConstantBooleanvEXT = @ptrCast(glGetLocalConstantBooleanvEXT, try loader("glGetLocalConstantBooleanvEXT"));
        self.GetLocalConstantFloatvEXT = @ptrCast(glGetLocalConstantFloatvEXT, try loader("glGetLocalConstantFloatvEXT"));
        self.GetLocalConstantIntegervEXT = @ptrCast(glGetLocalConstantIntegervEXT, try loader("glGetLocalConstantIntegervEXT"));
        self.GetMapAttribParameterfvNV = @ptrCast(glGetMapAttribParameterfvNV, try loader("glGetMapAttribParameterfvNV"));
        self.GetMapAttribParameterivNV = @ptrCast(glGetMapAttribParameterivNV, try loader("glGetMapAttribParameterivNV"));
        self.GetMapControlPointsNV = @ptrCast(glGetMapControlPointsNV, try loader("glGetMapControlPointsNV"));
        self.GetMapParameterfvNV = @ptrCast(glGetMapParameterfvNV, try loader("glGetMapParameterfvNV"));
        self.GetMapParameterivNV = @ptrCast(glGetMapParameterivNV, try loader("glGetMapParameterivNV"));
        self.GetMapxvOES = @ptrCast(glGetMapxvOES, try loader("glGetMapxvOES"));
        self.GetMaterialxOES = @ptrCast(glGetMaterialxOES, try loader("glGetMaterialxOES"));
        self.GetMemoryObjectDetachedResourcesuivNV = @ptrCast(glGetMemoryObjectDetachedResourcesuivNV, try loader("glGetMemoryObjectDetachedResourcesuivNV"));
        self.GetMemoryObjectParameterivEXT = @ptrCast(glGetMemoryObjectParameterivEXT, try loader("glGetMemoryObjectParameterivEXT"));
        self.GetMinmaxEXT = @ptrCast(glGetMinmaxEXT, try loader("glGetMinmaxEXT"));
        self.GetMinmaxParameterfvEXT = @ptrCast(glGetMinmaxParameterfvEXT, try loader("glGetMinmaxParameterfvEXT"));
        self.GetMinmaxParameterivEXT = @ptrCast(glGetMinmaxParameterivEXT, try loader("glGetMinmaxParameterivEXT"));
        self.GetMultiTexEnvfvEXT = @ptrCast(glGetMultiTexEnvfvEXT, try loader("glGetMultiTexEnvfvEXT"));
        self.GetMultiTexEnvivEXT = @ptrCast(glGetMultiTexEnvivEXT, try loader("glGetMultiTexEnvivEXT"));
        self.GetMultiTexGendvEXT = @ptrCast(glGetMultiTexGendvEXT, try loader("glGetMultiTexGendvEXT"));
        self.GetMultiTexGenfvEXT = @ptrCast(glGetMultiTexGenfvEXT, try loader("glGetMultiTexGenfvEXT"));
        self.GetMultiTexGenivEXT = @ptrCast(glGetMultiTexGenivEXT, try loader("glGetMultiTexGenivEXT"));
        self.GetMultiTexImageEXT = @ptrCast(glGetMultiTexImageEXT, try loader("glGetMultiTexImageEXT"));
        self.GetMultiTexLevelParameterfvEXT = @ptrCast(glGetMultiTexLevelParameterfvEXT, try loader("glGetMultiTexLevelParameterfvEXT"));
        self.GetMultiTexLevelParameterivEXT = @ptrCast(glGetMultiTexLevelParameterivEXT, try loader("glGetMultiTexLevelParameterivEXT"));
        self.GetMultiTexParameterIivEXT = @ptrCast(glGetMultiTexParameterIivEXT, try loader("glGetMultiTexParameterIivEXT"));
        self.GetMultiTexParameterIuivEXT = @ptrCast(glGetMultiTexParameterIuivEXT, try loader("glGetMultiTexParameterIuivEXT"));
        self.GetMultiTexParameterfvEXT = @ptrCast(glGetMultiTexParameterfvEXT, try loader("glGetMultiTexParameterfvEXT"));
        self.GetMultiTexParameterivEXT = @ptrCast(glGetMultiTexParameterivEXT, try loader("glGetMultiTexParameterivEXT"));
        self.GetMultisamplefv = @ptrCast(glGetMultisamplefv, try loader("glGetMultisamplefv"));
        self.GetMultisamplefvNV = @ptrCast(glGetMultisamplefvNV, try loader("glGetMultisamplefvNV"));
        self.GetNamedBufferParameteri64v = @ptrCast(glGetNamedBufferParameteri64v, try loader("glGetNamedBufferParameteri64v"));
        self.GetNamedBufferParameteriv = @ptrCast(glGetNamedBufferParameteriv, try loader("glGetNamedBufferParameteriv"));
        self.GetNamedBufferParameterivEXT = @ptrCast(glGetNamedBufferParameterivEXT, try loader("glGetNamedBufferParameterivEXT"));
        self.GetNamedBufferParameterui64vNV = @ptrCast(glGetNamedBufferParameterui64vNV, try loader("glGetNamedBufferParameterui64vNV"));
        self.GetNamedBufferPointerv = @ptrCast(glGetNamedBufferPointerv, try loader("glGetNamedBufferPointerv"));
        self.GetNamedBufferPointervEXT = @ptrCast(glGetNamedBufferPointervEXT, try loader("glGetNamedBufferPointervEXT"));
        self.GetNamedBufferSubData = @ptrCast(glGetNamedBufferSubData, try loader("glGetNamedBufferSubData"));
        self.GetNamedBufferSubDataEXT = @ptrCast(glGetNamedBufferSubDataEXT, try loader("glGetNamedBufferSubDataEXT"));
        self.GetNamedFramebufferAttachmentParameteriv = @ptrCast(glGetNamedFramebufferAttachmentParameteriv, try loader("glGetNamedFramebufferAttachmentParameteriv"));
        self.GetNamedFramebufferAttachmentParameterivEXT = @ptrCast(glGetNamedFramebufferAttachmentParameterivEXT, try loader("glGetNamedFramebufferAttachmentParameterivEXT"));
        self.GetNamedFramebufferParameterfvAMD = @ptrCast(glGetNamedFramebufferParameterfvAMD, try loader("glGetNamedFramebufferParameterfvAMD"));
        self.GetNamedFramebufferParameteriv = @ptrCast(glGetNamedFramebufferParameteriv, try loader("glGetNamedFramebufferParameteriv"));
        self.GetNamedFramebufferParameterivEXT = @ptrCast(glGetNamedFramebufferParameterivEXT, try loader("glGetNamedFramebufferParameterivEXT"));
        self.GetNamedProgramLocalParameterIivEXT = @ptrCast(glGetNamedProgramLocalParameterIivEXT, try loader("glGetNamedProgramLocalParameterIivEXT"));
        self.GetNamedProgramLocalParameterIuivEXT = @ptrCast(glGetNamedProgramLocalParameterIuivEXT, try loader("glGetNamedProgramLocalParameterIuivEXT"));
        self.GetNamedProgramLocalParameterdvEXT = @ptrCast(glGetNamedProgramLocalParameterdvEXT, try loader("glGetNamedProgramLocalParameterdvEXT"));
        self.GetNamedProgramLocalParameterfvEXT = @ptrCast(glGetNamedProgramLocalParameterfvEXT, try loader("glGetNamedProgramLocalParameterfvEXT"));
        self.GetNamedProgramStringEXT = @ptrCast(glGetNamedProgramStringEXT, try loader("glGetNamedProgramStringEXT"));
        self.GetNamedProgramivEXT = @ptrCast(glGetNamedProgramivEXT, try loader("glGetNamedProgramivEXT"));
        self.GetNamedRenderbufferParameteriv = @ptrCast(glGetNamedRenderbufferParameteriv, try loader("glGetNamedRenderbufferParameteriv"));
        self.GetNamedRenderbufferParameterivEXT = @ptrCast(glGetNamedRenderbufferParameterivEXT, try loader("glGetNamedRenderbufferParameterivEXT"));
        self.GetNamedStringARB = @ptrCast(glGetNamedStringARB, try loader("glGetNamedStringARB"));
        self.GetNamedStringivARB = @ptrCast(glGetNamedStringivARB, try loader("glGetNamedStringivARB"));
        self.GetNextPerfQueryIdINTEL = @ptrCast(glGetNextPerfQueryIdINTEL, try loader("glGetNextPerfQueryIdINTEL"));
        self.GetObjectBufferfvATI = @ptrCast(glGetObjectBufferfvATI, try loader("glGetObjectBufferfvATI"));
        self.GetObjectBufferivATI = @ptrCast(glGetObjectBufferivATI, try loader("glGetObjectBufferivATI"));
        self.GetObjectLabel = @ptrCast(glGetObjectLabel, try loader("glGetObjectLabel"));
        self.GetObjectLabelEXT = @ptrCast(glGetObjectLabelEXT, try loader("glGetObjectLabelEXT"));
        self.GetObjectParameterfvARB = @ptrCast(glGetObjectParameterfvARB, try loader("glGetObjectParameterfvARB"));
        self.GetObjectParameterivAPPLE = @ptrCast(glGetObjectParameterivAPPLE, try loader("glGetObjectParameterivAPPLE"));
        self.GetObjectParameterivARB = @ptrCast(glGetObjectParameterivARB, try loader("glGetObjectParameterivARB"));
        self.GetObjectPtrLabel = @ptrCast(glGetObjectPtrLabel, try loader("glGetObjectPtrLabel"));
        self.GetOcclusionQueryivNV = @ptrCast(glGetOcclusionQueryivNV, try loader("glGetOcclusionQueryivNV"));
        self.GetOcclusionQueryuivNV = @ptrCast(glGetOcclusionQueryuivNV, try loader("glGetOcclusionQueryuivNV"));
        self.GetPathCommandsNV = @ptrCast(glGetPathCommandsNV, try loader("glGetPathCommandsNV"));
        self.GetPathCoordsNV = @ptrCast(glGetPathCoordsNV, try loader("glGetPathCoordsNV"));
        self.GetPathDashArrayNV = @ptrCast(glGetPathDashArrayNV, try loader("glGetPathDashArrayNV"));
        self.GetPathLengthNV = @ptrCast(glGetPathLengthNV, try loader("glGetPathLengthNV"));
        self.GetPathMetricRangeNV = @ptrCast(glGetPathMetricRangeNV, try loader("glGetPathMetricRangeNV"));
        self.GetPathMetricsNV = @ptrCast(glGetPathMetricsNV, try loader("glGetPathMetricsNV"));
        self.GetPathParameterfvNV = @ptrCast(glGetPathParameterfvNV, try loader("glGetPathParameterfvNV"));
        self.GetPathParameterivNV = @ptrCast(glGetPathParameterivNV, try loader("glGetPathParameterivNV"));
        self.GetPathSpacingNV = @ptrCast(glGetPathSpacingNV, try loader("glGetPathSpacingNV"));
        self.GetPerfCounterInfoINTEL = @ptrCast(glGetPerfCounterInfoINTEL, try loader("glGetPerfCounterInfoINTEL"));
        self.GetPerfMonitorCounterDataAMD = @ptrCast(glGetPerfMonitorCounterDataAMD, try loader("glGetPerfMonitorCounterDataAMD"));
        self.GetPerfMonitorCounterInfoAMD = @ptrCast(glGetPerfMonitorCounterInfoAMD, try loader("glGetPerfMonitorCounterInfoAMD"));
        self.GetPerfMonitorCounterStringAMD = @ptrCast(glGetPerfMonitorCounterStringAMD, try loader("glGetPerfMonitorCounterStringAMD"));
        self.GetPerfMonitorCountersAMD = @ptrCast(glGetPerfMonitorCountersAMD, try loader("glGetPerfMonitorCountersAMD"));
        self.GetPerfMonitorGroupStringAMD = @ptrCast(glGetPerfMonitorGroupStringAMD, try loader("glGetPerfMonitorGroupStringAMD"));
        self.GetPerfMonitorGroupsAMD = @ptrCast(glGetPerfMonitorGroupsAMD, try loader("glGetPerfMonitorGroupsAMD"));
        self.GetPerfQueryDataINTEL = @ptrCast(glGetPerfQueryDataINTEL, try loader("glGetPerfQueryDataINTEL"));
        self.GetPerfQueryIdByNameINTEL = @ptrCast(glGetPerfQueryIdByNameINTEL, try loader("glGetPerfQueryIdByNameINTEL"));
        self.GetPerfQueryInfoINTEL = @ptrCast(glGetPerfQueryInfoINTEL, try loader("glGetPerfQueryInfoINTEL"));
        self.GetPixelMapxv = @ptrCast(glGetPixelMapxv, try loader("glGetPixelMapxv"));
        self.GetPixelTexGenParameterfvSGIS = @ptrCast(glGetPixelTexGenParameterfvSGIS, try loader("glGetPixelTexGenParameterfvSGIS"));
        self.GetPixelTexGenParameterivSGIS = @ptrCast(glGetPixelTexGenParameterivSGIS, try loader("glGetPixelTexGenParameterivSGIS"));
        self.GetPixelTransformParameterfvEXT = @ptrCast(glGetPixelTransformParameterfvEXT, try loader("glGetPixelTransformParameterfvEXT"));
        self.GetPixelTransformParameterivEXT = @ptrCast(glGetPixelTransformParameterivEXT, try loader("glGetPixelTransformParameterivEXT"));
        self.GetPointerIndexedvEXT = @ptrCast(glGetPointerIndexedvEXT, try loader("glGetPointerIndexedvEXT"));
        self.GetPointeri_vEXT = @ptrCast(glGetPointeri_vEXT, try loader("glGetPointeri_vEXT"));
        self.GetPointerv = @ptrCast(glGetPointerv, try loader("glGetPointerv"));
        self.GetPointervEXT = @ptrCast(glGetPointervEXT, try loader("glGetPointervEXT"));
        self.GetProgramBinary = @ptrCast(glGetProgramBinary, try loader("glGetProgramBinary"));
        self.GetProgramEnvParameterIivNV = @ptrCast(glGetProgramEnvParameterIivNV, try loader("glGetProgramEnvParameterIivNV"));
        self.GetProgramEnvParameterIuivNV = @ptrCast(glGetProgramEnvParameterIuivNV, try loader("glGetProgramEnvParameterIuivNV"));
        self.GetProgramEnvParameterdvARB = @ptrCast(glGetProgramEnvParameterdvARB, try loader("glGetProgramEnvParameterdvARB"));
        self.GetProgramEnvParameterfvARB = @ptrCast(glGetProgramEnvParameterfvARB, try loader("glGetProgramEnvParameterfvARB"));
        self.GetProgramInfoLog = @ptrCast(glGetProgramInfoLog, try loader("glGetProgramInfoLog"));
        self.GetProgramInterfaceiv = @ptrCast(glGetProgramInterfaceiv, try loader("glGetProgramInterfaceiv"));
        self.GetProgramLocalParameterIivNV = @ptrCast(glGetProgramLocalParameterIivNV, try loader("glGetProgramLocalParameterIivNV"));
        self.GetProgramLocalParameterIuivNV = @ptrCast(glGetProgramLocalParameterIuivNV, try loader("glGetProgramLocalParameterIuivNV"));
        self.GetProgramLocalParameterdvARB = @ptrCast(glGetProgramLocalParameterdvARB, try loader("glGetProgramLocalParameterdvARB"));
        self.GetProgramLocalParameterfvARB = @ptrCast(glGetProgramLocalParameterfvARB, try loader("glGetProgramLocalParameterfvARB"));
        self.GetProgramNamedParameterdvNV = @ptrCast(glGetProgramNamedParameterdvNV, try loader("glGetProgramNamedParameterdvNV"));
        self.GetProgramNamedParameterfvNV = @ptrCast(glGetProgramNamedParameterfvNV, try loader("glGetProgramNamedParameterfvNV"));
        self.GetProgramParameterdvNV = @ptrCast(glGetProgramParameterdvNV, try loader("glGetProgramParameterdvNV"));
        self.GetProgramParameterfvNV = @ptrCast(glGetProgramParameterfvNV, try loader("glGetProgramParameterfvNV"));
        self.GetProgramPipelineInfoLog = @ptrCast(glGetProgramPipelineInfoLog, try loader("glGetProgramPipelineInfoLog"));
        self.GetProgramPipelineiv = @ptrCast(glGetProgramPipelineiv, try loader("glGetProgramPipelineiv"));
        self.GetProgramResourceIndex = @ptrCast(glGetProgramResourceIndex, try loader("glGetProgramResourceIndex"));
        self.GetProgramResourceLocation = @ptrCast(glGetProgramResourceLocation, try loader("glGetProgramResourceLocation"));
        self.GetProgramResourceLocationIndex = @ptrCast(glGetProgramResourceLocationIndex, try loader("glGetProgramResourceLocationIndex"));
        self.GetProgramResourceName = @ptrCast(glGetProgramResourceName, try loader("glGetProgramResourceName"));
        self.GetProgramResourcefvNV = @ptrCast(glGetProgramResourcefvNV, try loader("glGetProgramResourcefvNV"));
        self.GetProgramResourceiv = @ptrCast(glGetProgramResourceiv, try loader("glGetProgramResourceiv"));
        self.GetProgramStageiv = @ptrCast(glGetProgramStageiv, try loader("glGetProgramStageiv"));
        self.GetProgramStringARB = @ptrCast(glGetProgramStringARB, try loader("glGetProgramStringARB"));
        self.GetProgramStringNV = @ptrCast(glGetProgramStringNV, try loader("glGetProgramStringNV"));
        self.GetProgramSubroutineParameteruivNV = @ptrCast(glGetProgramSubroutineParameteruivNV, try loader("glGetProgramSubroutineParameteruivNV"));
        self.GetProgramiv = @ptrCast(glGetProgramiv, try loader("glGetProgramiv"));
        self.GetProgramivARB = @ptrCast(glGetProgramivARB, try loader("glGetProgramivARB"));
        self.GetProgramivNV = @ptrCast(glGetProgramivNV, try loader("glGetProgramivNV"));
        self.GetQueryBufferObjecti64v = @ptrCast(glGetQueryBufferObjecti64v, try loader("glGetQueryBufferObjecti64v"));
        self.GetQueryBufferObjectiv = @ptrCast(glGetQueryBufferObjectiv, try loader("glGetQueryBufferObjectiv"));
        self.GetQueryBufferObjectui64v = @ptrCast(glGetQueryBufferObjectui64v, try loader("glGetQueryBufferObjectui64v"));
        self.GetQueryBufferObjectuiv = @ptrCast(glGetQueryBufferObjectuiv, try loader("glGetQueryBufferObjectuiv"));
        self.GetQueryIndexediv = @ptrCast(glGetQueryIndexediv, try loader("glGetQueryIndexediv"));
        self.GetQueryObjecti64v = @ptrCast(glGetQueryObjecti64v, try loader("glGetQueryObjecti64v"));
        self.GetQueryObjecti64vEXT = @ptrCast(glGetQueryObjecti64vEXT, try loader("glGetQueryObjecti64vEXT"));
        self.GetQueryObjectiv = @ptrCast(glGetQueryObjectiv, try loader("glGetQueryObjectiv"));
        self.GetQueryObjectivARB = @ptrCast(glGetQueryObjectivARB, try loader("glGetQueryObjectivARB"));
        self.GetQueryObjectui64v = @ptrCast(glGetQueryObjectui64v, try loader("glGetQueryObjectui64v"));
        self.GetQueryObjectui64vEXT = @ptrCast(glGetQueryObjectui64vEXT, try loader("glGetQueryObjectui64vEXT"));
        self.GetQueryObjectuiv = @ptrCast(glGetQueryObjectuiv, try loader("glGetQueryObjectuiv"));
        self.GetQueryObjectuivARB = @ptrCast(glGetQueryObjectuivARB, try loader("glGetQueryObjectuivARB"));
        self.GetQueryiv = @ptrCast(glGetQueryiv, try loader("glGetQueryiv"));
        self.GetQueryivARB = @ptrCast(glGetQueryivARB, try loader("glGetQueryivARB"));
        self.GetRenderbufferParameteriv = @ptrCast(glGetRenderbufferParameteriv, try loader("glGetRenderbufferParameteriv"));
        self.GetRenderbufferParameterivEXT = @ptrCast(glGetRenderbufferParameterivEXT, try loader("glGetRenderbufferParameterivEXT"));
        self.GetSamplerParameterIiv = @ptrCast(glGetSamplerParameterIiv, try loader("glGetSamplerParameterIiv"));
        self.GetSamplerParameterIuiv = @ptrCast(glGetSamplerParameterIuiv, try loader("glGetSamplerParameterIuiv"));
        self.GetSamplerParameterfv = @ptrCast(glGetSamplerParameterfv, try loader("glGetSamplerParameterfv"));
        self.GetSamplerParameteriv = @ptrCast(glGetSamplerParameteriv, try loader("glGetSamplerParameteriv"));
        self.GetSemaphoreParameterivNV = @ptrCast(glGetSemaphoreParameterivNV, try loader("glGetSemaphoreParameterivNV"));
        self.GetSemaphoreParameterui64vEXT = @ptrCast(glGetSemaphoreParameterui64vEXT, try loader("glGetSemaphoreParameterui64vEXT"));
        self.GetSeparableFilterEXT = @ptrCast(glGetSeparableFilterEXT, try loader("glGetSeparableFilterEXT"));
        self.GetShaderInfoLog = @ptrCast(glGetShaderInfoLog, try loader("glGetShaderInfoLog"));
        self.GetShaderPrecisionFormat = @ptrCast(glGetShaderPrecisionFormat, try loader("glGetShaderPrecisionFormat"));
        self.GetShaderSource = @ptrCast(glGetShaderSource, try loader("glGetShaderSource"));
        self.GetShaderSourceARB = @ptrCast(glGetShaderSourceARB, try loader("glGetShaderSourceARB"));
        self.GetShaderiv = @ptrCast(glGetShaderiv, try loader("glGetShaderiv"));
        self.GetShadingRateImagePaletteNV = @ptrCast(glGetShadingRateImagePaletteNV, try loader("glGetShadingRateImagePaletteNV"));
        self.GetShadingRateSampleLocationivNV = @ptrCast(glGetShadingRateSampleLocationivNV, try loader("glGetShadingRateSampleLocationivNV"));
        self.GetSharpenTexFuncSGIS = @ptrCast(glGetSharpenTexFuncSGIS, try loader("glGetSharpenTexFuncSGIS"));
        self.GetStageIndexNV = @ptrCast(glGetStageIndexNV, try loader("glGetStageIndexNV"));
        self.GetString = @ptrCast(glGetString, try loader("glGetString"));
        self.GetStringi = @ptrCast(glGetStringi, try loader("glGetStringi"));
        self.GetSubroutineIndex = @ptrCast(glGetSubroutineIndex, try loader("glGetSubroutineIndex"));
        self.GetSubroutineUniformLocation = @ptrCast(glGetSubroutineUniformLocation, try loader("glGetSubroutineUniformLocation"));
        self.GetSynciv = @ptrCast(glGetSynciv, try loader("glGetSynciv"));
        self.GetTexBumpParameterfvATI = @ptrCast(glGetTexBumpParameterfvATI, try loader("glGetTexBumpParameterfvATI"));
        self.GetTexBumpParameterivATI = @ptrCast(glGetTexBumpParameterivATI, try loader("glGetTexBumpParameterivATI"));
        self.GetTexEnvxvOES = @ptrCast(glGetTexEnvxvOES, try loader("glGetTexEnvxvOES"));
        self.GetTexFilterFuncSGIS = @ptrCast(glGetTexFilterFuncSGIS, try loader("glGetTexFilterFuncSGIS"));
        self.GetTexGenxvOES = @ptrCast(glGetTexGenxvOES, try loader("glGetTexGenxvOES"));
        self.GetTexImage = @ptrCast(glGetTexImage, try loader("glGetTexImage"));
        self.GetTexLevelParameterfv = @ptrCast(glGetTexLevelParameterfv, try loader("glGetTexLevelParameterfv"));
        self.GetTexLevelParameteriv = @ptrCast(glGetTexLevelParameteriv, try loader("glGetTexLevelParameteriv"));
        self.GetTexLevelParameterxvOES = @ptrCast(glGetTexLevelParameterxvOES, try loader("glGetTexLevelParameterxvOES"));
        self.GetTexParameterIiv = @ptrCast(glGetTexParameterIiv, try loader("glGetTexParameterIiv"));
        self.GetTexParameterIivEXT = @ptrCast(glGetTexParameterIivEXT, try loader("glGetTexParameterIivEXT"));
        self.GetTexParameterIuiv = @ptrCast(glGetTexParameterIuiv, try loader("glGetTexParameterIuiv"));
        self.GetTexParameterIuivEXT = @ptrCast(glGetTexParameterIuivEXT, try loader("glGetTexParameterIuivEXT"));
        self.GetTexParameterPointervAPPLE = @ptrCast(glGetTexParameterPointervAPPLE, try loader("glGetTexParameterPointervAPPLE"));
        self.GetTexParameterfv = @ptrCast(glGetTexParameterfv, try loader("glGetTexParameterfv"));
        self.GetTexParameteriv = @ptrCast(glGetTexParameteriv, try loader("glGetTexParameteriv"));
        self.GetTexParameterxvOES = @ptrCast(glGetTexParameterxvOES, try loader("glGetTexParameterxvOES"));
        self.GetTextureHandleARB = @ptrCast(glGetTextureHandleARB, try loader("glGetTextureHandleARB"));
        self.GetTextureHandleNV = @ptrCast(glGetTextureHandleNV, try loader("glGetTextureHandleNV"));
        self.GetTextureImage = @ptrCast(glGetTextureImage, try loader("glGetTextureImage"));
        self.GetTextureImageEXT = @ptrCast(glGetTextureImageEXT, try loader("glGetTextureImageEXT"));
        self.GetTextureLevelParameterfv = @ptrCast(glGetTextureLevelParameterfv, try loader("glGetTextureLevelParameterfv"));
        self.GetTextureLevelParameterfvEXT = @ptrCast(glGetTextureLevelParameterfvEXT, try loader("glGetTextureLevelParameterfvEXT"));
        self.GetTextureLevelParameteriv = @ptrCast(glGetTextureLevelParameteriv, try loader("glGetTextureLevelParameteriv"));
        self.GetTextureLevelParameterivEXT = @ptrCast(glGetTextureLevelParameterivEXT, try loader("glGetTextureLevelParameterivEXT"));
        self.GetTextureParameterIiv = @ptrCast(glGetTextureParameterIiv, try loader("glGetTextureParameterIiv"));
        self.GetTextureParameterIivEXT = @ptrCast(glGetTextureParameterIivEXT, try loader("glGetTextureParameterIivEXT"));
        self.GetTextureParameterIuiv = @ptrCast(glGetTextureParameterIuiv, try loader("glGetTextureParameterIuiv"));
        self.GetTextureParameterIuivEXT = @ptrCast(glGetTextureParameterIuivEXT, try loader("glGetTextureParameterIuivEXT"));
        self.GetTextureParameterfv = @ptrCast(glGetTextureParameterfv, try loader("glGetTextureParameterfv"));
        self.GetTextureParameterfvEXT = @ptrCast(glGetTextureParameterfvEXT, try loader("glGetTextureParameterfvEXT"));
        self.GetTextureParameteriv = @ptrCast(glGetTextureParameteriv, try loader("glGetTextureParameteriv"));
        self.GetTextureParameterivEXT = @ptrCast(glGetTextureParameterivEXT, try loader("glGetTextureParameterivEXT"));
        self.GetTextureSamplerHandleARB = @ptrCast(glGetTextureSamplerHandleARB, try loader("glGetTextureSamplerHandleARB"));
        self.GetTextureSamplerHandleNV = @ptrCast(glGetTextureSamplerHandleNV, try loader("glGetTextureSamplerHandleNV"));
        self.GetTextureSubImage = @ptrCast(glGetTextureSubImage, try loader("glGetTextureSubImage"));
        self.GetTrackMatrixivNV = @ptrCast(glGetTrackMatrixivNV, try loader("glGetTrackMatrixivNV"));
        self.GetTransformFeedbackVarying = @ptrCast(glGetTransformFeedbackVarying, try loader("glGetTransformFeedbackVarying"));
        self.GetTransformFeedbackVaryingEXT = @ptrCast(glGetTransformFeedbackVaryingEXT, try loader("glGetTransformFeedbackVaryingEXT"));
        self.GetTransformFeedbackVaryingNV = @ptrCast(glGetTransformFeedbackVaryingNV, try loader("glGetTransformFeedbackVaryingNV"));
        self.GetTransformFeedbacki64_v = @ptrCast(glGetTransformFeedbacki64_v, try loader("glGetTransformFeedbacki64_v"));
        self.GetTransformFeedbacki_v = @ptrCast(glGetTransformFeedbacki_v, try loader("glGetTransformFeedbacki_v"));
        self.GetTransformFeedbackiv = @ptrCast(glGetTransformFeedbackiv, try loader("glGetTransformFeedbackiv"));
        self.GetUniformBlockIndex = @ptrCast(glGetUniformBlockIndex, try loader("glGetUniformBlockIndex"));
        self.GetUniformBufferSizeEXT = @ptrCast(glGetUniformBufferSizeEXT, try loader("glGetUniformBufferSizeEXT"));
        self.GetUniformIndices = @ptrCast(glGetUniformIndices, try loader("glGetUniformIndices"));
        self.GetUniformLocation = @ptrCast(glGetUniformLocation, try loader("glGetUniformLocation"));
        self.GetUniformLocationARB = @ptrCast(glGetUniformLocationARB, try loader("glGetUniformLocationARB"));
        self.GetUniformOffsetEXT = @ptrCast(glGetUniformOffsetEXT, try loader("glGetUniformOffsetEXT"));
        self.GetUniformSubroutineuiv = @ptrCast(glGetUniformSubroutineuiv, try loader("glGetUniformSubroutineuiv"));
        self.GetUniformdv = @ptrCast(glGetUniformdv, try loader("glGetUniformdv"));
        self.GetUniformfv = @ptrCast(glGetUniformfv, try loader("glGetUniformfv"));
        self.GetUniformfvARB = @ptrCast(glGetUniformfvARB, try loader("glGetUniformfvARB"));
        self.GetUniformi64vARB = @ptrCast(glGetUniformi64vARB, try loader("glGetUniformi64vARB"));
        self.GetUniformi64vNV = @ptrCast(glGetUniformi64vNV, try loader("glGetUniformi64vNV"));
        self.GetUniformiv = @ptrCast(glGetUniformiv, try loader("glGetUniformiv"));
        self.GetUniformivARB = @ptrCast(glGetUniformivARB, try loader("glGetUniformivARB"));
        self.GetUniformui64vARB = @ptrCast(glGetUniformui64vARB, try loader("glGetUniformui64vARB"));
        self.GetUniformui64vNV = @ptrCast(glGetUniformui64vNV, try loader("glGetUniformui64vNV"));
        self.GetUniformuiv = @ptrCast(glGetUniformuiv, try loader("glGetUniformuiv"));
        self.GetUniformuivEXT = @ptrCast(glGetUniformuivEXT, try loader("glGetUniformuivEXT"));
        self.GetUnsignedBytei_vEXT = @ptrCast(glGetUnsignedBytei_vEXT, try loader("glGetUnsignedBytei_vEXT"));
        self.GetUnsignedBytevEXT = @ptrCast(glGetUnsignedBytevEXT, try loader("glGetUnsignedBytevEXT"));
        self.GetVariantArrayObjectfvATI = @ptrCast(glGetVariantArrayObjectfvATI, try loader("glGetVariantArrayObjectfvATI"));
        self.GetVariantArrayObjectivATI = @ptrCast(glGetVariantArrayObjectivATI, try loader("glGetVariantArrayObjectivATI"));
        self.GetVariantBooleanvEXT = @ptrCast(glGetVariantBooleanvEXT, try loader("glGetVariantBooleanvEXT"));
        self.GetVariantFloatvEXT = @ptrCast(glGetVariantFloatvEXT, try loader("glGetVariantFloatvEXT"));
        self.GetVariantIntegervEXT = @ptrCast(glGetVariantIntegervEXT, try loader("glGetVariantIntegervEXT"));
        self.GetVariantPointervEXT = @ptrCast(glGetVariantPointervEXT, try loader("glGetVariantPointervEXT"));
        self.GetVaryingLocationNV = @ptrCast(glGetVaryingLocationNV, try loader("glGetVaryingLocationNV"));
        self.GetVertexArrayIndexed64iv = @ptrCast(glGetVertexArrayIndexed64iv, try loader("glGetVertexArrayIndexed64iv"));
        self.GetVertexArrayIndexediv = @ptrCast(glGetVertexArrayIndexediv, try loader("glGetVertexArrayIndexediv"));
        self.GetVertexArrayIntegeri_vEXT = @ptrCast(glGetVertexArrayIntegeri_vEXT, try loader("glGetVertexArrayIntegeri_vEXT"));
        self.GetVertexArrayIntegervEXT = @ptrCast(glGetVertexArrayIntegervEXT, try loader("glGetVertexArrayIntegervEXT"));
        self.GetVertexArrayPointeri_vEXT = @ptrCast(glGetVertexArrayPointeri_vEXT, try loader("glGetVertexArrayPointeri_vEXT"));
        self.GetVertexArrayPointervEXT = @ptrCast(glGetVertexArrayPointervEXT, try loader("glGetVertexArrayPointervEXT"));
        self.GetVertexArrayiv = @ptrCast(glGetVertexArrayiv, try loader("glGetVertexArrayiv"));
        self.GetVertexAttribArrayObjectfvATI = @ptrCast(glGetVertexAttribArrayObjectfvATI, try loader("glGetVertexAttribArrayObjectfvATI"));
        self.GetVertexAttribArrayObjectivATI = @ptrCast(glGetVertexAttribArrayObjectivATI, try loader("glGetVertexAttribArrayObjectivATI"));
        self.GetVertexAttribIiv = @ptrCast(glGetVertexAttribIiv, try loader("glGetVertexAttribIiv"));
        self.GetVertexAttribIivEXT = @ptrCast(glGetVertexAttribIivEXT, try loader("glGetVertexAttribIivEXT"));
        self.GetVertexAttribIuiv = @ptrCast(glGetVertexAttribIuiv, try loader("glGetVertexAttribIuiv"));
        self.GetVertexAttribIuivEXT = @ptrCast(glGetVertexAttribIuivEXT, try loader("glGetVertexAttribIuivEXT"));
        self.GetVertexAttribLdv = @ptrCast(glGetVertexAttribLdv, try loader("glGetVertexAttribLdv"));
        self.GetVertexAttribLdvEXT = @ptrCast(glGetVertexAttribLdvEXT, try loader("glGetVertexAttribLdvEXT"));
        self.GetVertexAttribLi64vNV = @ptrCast(glGetVertexAttribLi64vNV, try loader("glGetVertexAttribLi64vNV"));
        self.GetVertexAttribLui64vARB = @ptrCast(glGetVertexAttribLui64vARB, try loader("glGetVertexAttribLui64vARB"));
        self.GetVertexAttribLui64vNV = @ptrCast(glGetVertexAttribLui64vNV, try loader("glGetVertexAttribLui64vNV"));
        self.GetVertexAttribPointerv = @ptrCast(glGetVertexAttribPointerv, try loader("glGetVertexAttribPointerv"));
        self.GetVertexAttribPointervARB = @ptrCast(glGetVertexAttribPointervARB, try loader("glGetVertexAttribPointervARB"));
        self.GetVertexAttribPointervNV = @ptrCast(glGetVertexAttribPointervNV, try loader("glGetVertexAttribPointervNV"));
        self.GetVertexAttribdv = @ptrCast(glGetVertexAttribdv, try loader("glGetVertexAttribdv"));
        self.GetVertexAttribdvARB = @ptrCast(glGetVertexAttribdvARB, try loader("glGetVertexAttribdvARB"));
        self.GetVertexAttribdvNV = @ptrCast(glGetVertexAttribdvNV, try loader("glGetVertexAttribdvNV"));
        self.GetVertexAttribfv = @ptrCast(glGetVertexAttribfv, try loader("glGetVertexAttribfv"));
        self.GetVertexAttribfvARB = @ptrCast(glGetVertexAttribfvARB, try loader("glGetVertexAttribfvARB"));
        self.GetVertexAttribfvNV = @ptrCast(glGetVertexAttribfvNV, try loader("glGetVertexAttribfvNV"));
        self.GetVertexAttribiv = @ptrCast(glGetVertexAttribiv, try loader("glGetVertexAttribiv"));
        self.GetVertexAttribivARB = @ptrCast(glGetVertexAttribivARB, try loader("glGetVertexAttribivARB"));
        self.GetVertexAttribivNV = @ptrCast(glGetVertexAttribivNV, try loader("glGetVertexAttribivNV"));
        self.GetVideoCaptureStreamdvNV = @ptrCast(glGetVideoCaptureStreamdvNV, try loader("glGetVideoCaptureStreamdvNV"));
        self.GetVideoCaptureStreamfvNV = @ptrCast(glGetVideoCaptureStreamfvNV, try loader("glGetVideoCaptureStreamfvNV"));
        self.GetVideoCaptureStreamivNV = @ptrCast(glGetVideoCaptureStreamivNV, try loader("glGetVideoCaptureStreamivNV"));
        self.GetVideoCaptureivNV = @ptrCast(glGetVideoCaptureivNV, try loader("glGetVideoCaptureivNV"));
        self.GetVideoi64vNV = @ptrCast(glGetVideoi64vNV, try loader("glGetVideoi64vNV"));
        self.GetVideoivNV = @ptrCast(glGetVideoivNV, try loader("glGetVideoivNV"));
        self.GetVideoui64vNV = @ptrCast(glGetVideoui64vNV, try loader("glGetVideoui64vNV"));
        self.GetVideouivNV = @ptrCast(glGetVideouivNV, try loader("glGetVideouivNV"));
        self.GetVkProcAddrNV = @ptrCast(glGetVkProcAddrNV, try loader("glGetVkProcAddrNV"));
        self.GetnCompressedTexImageARB = @ptrCast(glGetnCompressedTexImageARB, try loader("glGetnCompressedTexImageARB"));
        self.GetnTexImageARB = @ptrCast(glGetnTexImageARB, try loader("glGetnTexImageARB"));
        self.GetnUniformdvARB = @ptrCast(glGetnUniformdvARB, try loader("glGetnUniformdvARB"));
        self.GetnUniformfv = @ptrCast(glGetnUniformfv, try loader("glGetnUniformfv"));
        self.GetnUniformfvARB = @ptrCast(glGetnUniformfvARB, try loader("glGetnUniformfvARB"));
        self.GetnUniformi64vARB = @ptrCast(glGetnUniformi64vARB, try loader("glGetnUniformi64vARB"));
        self.GetnUniformiv = @ptrCast(glGetnUniformiv, try loader("glGetnUniformiv"));
        self.GetnUniformivARB = @ptrCast(glGetnUniformivARB, try loader("glGetnUniformivARB"));
        self.GetnUniformui64vARB = @ptrCast(glGetnUniformui64vARB, try loader("glGetnUniformui64vARB"));
        self.GetnUniformuiv = @ptrCast(glGetnUniformuiv, try loader("glGetnUniformuiv"));
        self.GetnUniformuivARB = @ptrCast(glGetnUniformuivARB, try loader("glGetnUniformuivARB"));
        self.GlobalAlphaFactorbSUN = @ptrCast(glGlobalAlphaFactorbSUN, try loader("glGlobalAlphaFactorbSUN"));
        self.GlobalAlphaFactordSUN = @ptrCast(glGlobalAlphaFactordSUN, try loader("glGlobalAlphaFactordSUN"));
        self.GlobalAlphaFactorfSUN = @ptrCast(glGlobalAlphaFactorfSUN, try loader("glGlobalAlphaFactorfSUN"));
        self.GlobalAlphaFactoriSUN = @ptrCast(glGlobalAlphaFactoriSUN, try loader("glGlobalAlphaFactoriSUN"));
        self.GlobalAlphaFactorsSUN = @ptrCast(glGlobalAlphaFactorsSUN, try loader("glGlobalAlphaFactorsSUN"));
        self.GlobalAlphaFactorubSUN = @ptrCast(glGlobalAlphaFactorubSUN, try loader("glGlobalAlphaFactorubSUN"));
        self.GlobalAlphaFactoruiSUN = @ptrCast(glGlobalAlphaFactoruiSUN, try loader("glGlobalAlphaFactoruiSUN"));
        self.GlobalAlphaFactorusSUN = @ptrCast(glGlobalAlphaFactorusSUN, try loader("glGlobalAlphaFactorusSUN"));
        self.Hint = @ptrCast(glHint, try loader("glHint"));
        self.HintPGI = @ptrCast(glHintPGI, try loader("glHintPGI"));
        self.HistogramEXT = @ptrCast(glHistogramEXT, try loader("glHistogramEXT"));
        self.IglooInterfaceSGIX = @ptrCast(glIglooInterfaceSGIX, try loader("glIglooInterfaceSGIX"));
        self.ImageTransformParameterfHP = @ptrCast(glImageTransformParameterfHP, try loader("glImageTransformParameterfHP"));
        self.ImageTransformParameterfvHP = @ptrCast(glImageTransformParameterfvHP, try loader("glImageTransformParameterfvHP"));
        self.ImageTransformParameteriHP = @ptrCast(glImageTransformParameteriHP, try loader("glImageTransformParameteriHP"));
        self.ImageTransformParameterivHP = @ptrCast(glImageTransformParameterivHP, try loader("glImageTransformParameterivHP"));
        self.ImportMemoryFdEXT = @ptrCast(glImportMemoryFdEXT, try loader("glImportMemoryFdEXT"));
        self.ImportMemoryWin32HandleEXT = @ptrCast(glImportMemoryWin32HandleEXT, try loader("glImportMemoryWin32HandleEXT"));
        self.ImportMemoryWin32NameEXT = @ptrCast(glImportMemoryWin32NameEXT, try loader("glImportMemoryWin32NameEXT"));
        self.ImportSemaphoreFdEXT = @ptrCast(glImportSemaphoreFdEXT, try loader("glImportSemaphoreFdEXT"));
        self.ImportSemaphoreWin32HandleEXT = @ptrCast(glImportSemaphoreWin32HandleEXT, try loader("glImportSemaphoreWin32HandleEXT"));
        self.ImportSemaphoreWin32NameEXT = @ptrCast(glImportSemaphoreWin32NameEXT, try loader("glImportSemaphoreWin32NameEXT"));
        self.ImportSyncEXT = @ptrCast(glImportSyncEXT, try loader("glImportSyncEXT"));
        self.IndexFormatNV = @ptrCast(glIndexFormatNV, try loader("glIndexFormatNV"));
        self.IndexFuncEXT = @ptrCast(glIndexFuncEXT, try loader("glIndexFuncEXT"));
        self.IndexMaterialEXT = @ptrCast(glIndexMaterialEXT, try loader("glIndexMaterialEXT"));
        self.IndexPointerEXT = @ptrCast(glIndexPointerEXT, try loader("glIndexPointerEXT"));
        self.IndexPointerListIBM = @ptrCast(glIndexPointerListIBM, try loader("glIndexPointerListIBM"));
        self.IndexxOES = @ptrCast(glIndexxOES, try loader("glIndexxOES"));
        self.IndexxvOES = @ptrCast(glIndexxvOES, try loader("glIndexxvOES"));
        self.InsertComponentEXT = @ptrCast(glInsertComponentEXT, try loader("glInsertComponentEXT"));
        self.InsertEventMarkerEXT = @ptrCast(glInsertEventMarkerEXT, try loader("glInsertEventMarkerEXT"));
        self.InstrumentsBufferSGIX = @ptrCast(glInstrumentsBufferSGIX, try loader("glInstrumentsBufferSGIX"));
        self.InterpolatePathsNV = @ptrCast(glInterpolatePathsNV, try loader("glInterpolatePathsNV"));
        self.InvalidateBufferData = @ptrCast(glInvalidateBufferData, try loader("glInvalidateBufferData"));
        self.InvalidateBufferSubData = @ptrCast(glInvalidateBufferSubData, try loader("glInvalidateBufferSubData"));
        self.InvalidateFramebuffer = @ptrCast(glInvalidateFramebuffer, try loader("glInvalidateFramebuffer"));
        self.InvalidateNamedFramebufferData = @ptrCast(glInvalidateNamedFramebufferData, try loader("glInvalidateNamedFramebufferData"));
        self.InvalidateNamedFramebufferSubData = @ptrCast(glInvalidateNamedFramebufferSubData, try loader("glInvalidateNamedFramebufferSubData"));
        self.InvalidateSubFramebuffer = @ptrCast(glInvalidateSubFramebuffer, try loader("glInvalidateSubFramebuffer"));
        self.InvalidateTexImage = @ptrCast(glInvalidateTexImage, try loader("glInvalidateTexImage"));
        self.InvalidateTexSubImage = @ptrCast(glInvalidateTexSubImage, try loader("glInvalidateTexSubImage"));
        self.IsAsyncMarkerSGIX = @ptrCast(glIsAsyncMarkerSGIX, try loader("glIsAsyncMarkerSGIX"));
        self.IsBuffer = @ptrCast(glIsBuffer, try loader("glIsBuffer"));
        self.IsBufferARB = @ptrCast(glIsBufferARB, try loader("glIsBufferARB"));
        self.IsBufferResidentNV = @ptrCast(glIsBufferResidentNV, try loader("glIsBufferResidentNV"));
        self.IsCommandListNV = @ptrCast(glIsCommandListNV, try loader("glIsCommandListNV"));
        self.IsEnabled = @ptrCast(glIsEnabled, try loader("glIsEnabled"));
        self.IsEnabledIndexedEXT = @ptrCast(glIsEnabledIndexedEXT, try loader("glIsEnabledIndexedEXT"));
        self.IsEnabledi = @ptrCast(glIsEnabledi, try loader("glIsEnabledi"));
        self.IsFenceAPPLE = @ptrCast(glIsFenceAPPLE, try loader("glIsFenceAPPLE"));
        self.IsFenceNV = @ptrCast(glIsFenceNV, try loader("glIsFenceNV"));
        self.IsFramebuffer = @ptrCast(glIsFramebuffer, try loader("glIsFramebuffer"));
        self.IsFramebufferEXT = @ptrCast(glIsFramebufferEXT, try loader("glIsFramebufferEXT"));
        self.IsImageHandleResidentARB = @ptrCast(glIsImageHandleResidentARB, try loader("glIsImageHandleResidentARB"));
        self.IsImageHandleResidentNV = @ptrCast(glIsImageHandleResidentNV, try loader("glIsImageHandleResidentNV"));
        self.IsMemoryObjectEXT = @ptrCast(glIsMemoryObjectEXT, try loader("glIsMemoryObjectEXT"));
        self.IsNameAMD = @ptrCast(glIsNameAMD, try loader("glIsNameAMD"));
        self.IsNamedBufferResidentNV = @ptrCast(glIsNamedBufferResidentNV, try loader("glIsNamedBufferResidentNV"));
        self.IsNamedStringARB = @ptrCast(glIsNamedStringARB, try loader("glIsNamedStringARB"));
        self.IsObjectBufferATI = @ptrCast(glIsObjectBufferATI, try loader("glIsObjectBufferATI"));
        self.IsOcclusionQueryNV = @ptrCast(glIsOcclusionQueryNV, try loader("glIsOcclusionQueryNV"));
        self.IsPathNV = @ptrCast(glIsPathNV, try loader("glIsPathNV"));
        self.IsPointInFillPathNV = @ptrCast(glIsPointInFillPathNV, try loader("glIsPointInFillPathNV"));
        self.IsPointInStrokePathNV = @ptrCast(glIsPointInStrokePathNV, try loader("glIsPointInStrokePathNV"));
        self.IsProgram = @ptrCast(glIsProgram, try loader("glIsProgram"));
        self.IsProgramARB = @ptrCast(glIsProgramARB, try loader("glIsProgramARB"));
        self.IsProgramNV = @ptrCast(glIsProgramNV, try loader("glIsProgramNV"));
        self.IsProgramPipeline = @ptrCast(glIsProgramPipeline, try loader("glIsProgramPipeline"));
        self.IsQuery = @ptrCast(glIsQuery, try loader("glIsQuery"));
        self.IsQueryARB = @ptrCast(glIsQueryARB, try loader("glIsQueryARB"));
        self.IsRenderbuffer = @ptrCast(glIsRenderbuffer, try loader("glIsRenderbuffer"));
        self.IsRenderbufferEXT = @ptrCast(glIsRenderbufferEXT, try loader("glIsRenderbufferEXT"));
        self.IsSampler = @ptrCast(glIsSampler, try loader("glIsSampler"));
        self.IsSemaphoreEXT = @ptrCast(glIsSemaphoreEXT, try loader("glIsSemaphoreEXT"));
        self.IsShader = @ptrCast(glIsShader, try loader("glIsShader"));
        self.IsStateNV = @ptrCast(glIsStateNV, try loader("glIsStateNV"));
        self.IsSync = @ptrCast(glIsSync, try loader("glIsSync"));
        self.IsTexture = @ptrCast(glIsTexture, try loader("glIsTexture"));
        self.IsTextureEXT = @ptrCast(glIsTextureEXT, try loader("glIsTextureEXT"));
        self.IsTextureHandleResidentARB = @ptrCast(glIsTextureHandleResidentARB, try loader("glIsTextureHandleResidentARB"));
        self.IsTextureHandleResidentNV = @ptrCast(glIsTextureHandleResidentNV, try loader("glIsTextureHandleResidentNV"));
        self.IsTransformFeedback = @ptrCast(glIsTransformFeedback, try loader("glIsTransformFeedback"));
        self.IsTransformFeedbackNV = @ptrCast(glIsTransformFeedbackNV, try loader("glIsTransformFeedbackNV"));
        self.IsVariantEnabledEXT = @ptrCast(glIsVariantEnabledEXT, try loader("glIsVariantEnabledEXT"));
        self.IsVertexArray = @ptrCast(glIsVertexArray, try loader("glIsVertexArray"));
        self.IsVertexArrayAPPLE = @ptrCast(glIsVertexArrayAPPLE, try loader("glIsVertexArrayAPPLE"));
        self.IsVertexAttribEnabledAPPLE = @ptrCast(glIsVertexAttribEnabledAPPLE, try loader("glIsVertexAttribEnabledAPPLE"));
        self.LGPUCopyImageSubDataNVX = @ptrCast(glLGPUCopyImageSubDataNVX, try loader("glLGPUCopyImageSubDataNVX"));
        self.LGPUInterlockNVX = @ptrCast(glLGPUInterlockNVX, try loader("glLGPUInterlockNVX"));
        self.LGPUNamedBufferSubDataNVX = @ptrCast(glLGPUNamedBufferSubDataNVX, try loader("glLGPUNamedBufferSubDataNVX"));
        self.LabelObjectEXT = @ptrCast(glLabelObjectEXT, try loader("glLabelObjectEXT"));
        self.LightEnviSGIX = @ptrCast(glLightEnviSGIX, try loader("glLightEnviSGIX"));
        self.LightModelxOES = @ptrCast(glLightModelxOES, try loader("glLightModelxOES"));
        self.LightModelxvOES = @ptrCast(glLightModelxvOES, try loader("glLightModelxvOES"));
        self.LightxOES = @ptrCast(glLightxOES, try loader("glLightxOES"));
        self.LightxvOES = @ptrCast(glLightxvOES, try loader("glLightxvOES"));
        self.LineWidth = @ptrCast(glLineWidth, try loader("glLineWidth"));
        self.LineWidthxOES = @ptrCast(glLineWidthxOES, try loader("glLineWidthxOES"));
        self.LinkProgram = @ptrCast(glLinkProgram, try loader("glLinkProgram"));
        self.LinkProgramARB = @ptrCast(glLinkProgramARB, try loader("glLinkProgramARB"));
        self.ListDrawCommandsStatesClientNV = @ptrCast(glListDrawCommandsStatesClientNV, try loader("glListDrawCommandsStatesClientNV"));
        self.ListParameterfSGIX = @ptrCast(glListParameterfSGIX, try loader("glListParameterfSGIX"));
        self.ListParameterfvSGIX = @ptrCast(glListParameterfvSGIX, try loader("glListParameterfvSGIX"));
        self.ListParameteriSGIX = @ptrCast(glListParameteriSGIX, try loader("glListParameteriSGIX"));
        self.ListParameterivSGIX = @ptrCast(glListParameterivSGIX, try loader("glListParameterivSGIX"));
        self.LoadIdentityDeformationMapSGIX = @ptrCast(glLoadIdentityDeformationMapSGIX, try loader("glLoadIdentityDeformationMapSGIX"));
        self.LoadMatrixxOES = @ptrCast(glLoadMatrixxOES, try loader("glLoadMatrixxOES"));
        self.LoadProgramNV = @ptrCast(glLoadProgramNV, try loader("glLoadProgramNV"));
        self.LoadTransposeMatrixdARB = @ptrCast(glLoadTransposeMatrixdARB, try loader("glLoadTransposeMatrixdARB"));
        self.LoadTransposeMatrixfARB = @ptrCast(glLoadTransposeMatrixfARB, try loader("glLoadTransposeMatrixfARB"));
        self.LoadTransposeMatrixxOES = @ptrCast(glLoadTransposeMatrixxOES, try loader("glLoadTransposeMatrixxOES"));
        self.LockArraysEXT = @ptrCast(glLockArraysEXT, try loader("glLockArraysEXT"));
        self.LogicOp = @ptrCast(glLogicOp, try loader("glLogicOp"));
        self.MakeBufferNonResidentNV = @ptrCast(glMakeBufferNonResidentNV, try loader("glMakeBufferNonResidentNV"));
        self.MakeBufferResidentNV = @ptrCast(glMakeBufferResidentNV, try loader("glMakeBufferResidentNV"));
        self.MakeImageHandleNonResidentARB = @ptrCast(glMakeImageHandleNonResidentARB, try loader("glMakeImageHandleNonResidentARB"));
        self.MakeImageHandleNonResidentNV = @ptrCast(glMakeImageHandleNonResidentNV, try loader("glMakeImageHandleNonResidentNV"));
        self.MakeImageHandleResidentARB = @ptrCast(glMakeImageHandleResidentARB, try loader("glMakeImageHandleResidentARB"));
        self.MakeImageHandleResidentNV = @ptrCast(glMakeImageHandleResidentNV, try loader("glMakeImageHandleResidentNV"));
        self.MakeNamedBufferNonResidentNV = @ptrCast(glMakeNamedBufferNonResidentNV, try loader("glMakeNamedBufferNonResidentNV"));
        self.MakeNamedBufferResidentNV = @ptrCast(glMakeNamedBufferResidentNV, try loader("glMakeNamedBufferResidentNV"));
        self.MakeTextureHandleNonResidentARB = @ptrCast(glMakeTextureHandleNonResidentARB, try loader("glMakeTextureHandleNonResidentARB"));
        self.MakeTextureHandleNonResidentNV = @ptrCast(glMakeTextureHandleNonResidentNV, try loader("glMakeTextureHandleNonResidentNV"));
        self.MakeTextureHandleResidentARB = @ptrCast(glMakeTextureHandleResidentARB, try loader("glMakeTextureHandleResidentARB"));
        self.MakeTextureHandleResidentNV = @ptrCast(glMakeTextureHandleResidentNV, try loader("glMakeTextureHandleResidentNV"));
        self.Map1xOES = @ptrCast(glMap1xOES, try loader("glMap1xOES"));
        self.Map2xOES = @ptrCast(glMap2xOES, try loader("glMap2xOES"));
        self.MapBuffer = @ptrCast(glMapBuffer, try loader("glMapBuffer"));
        self.MapBufferARB = @ptrCast(glMapBufferARB, try loader("glMapBufferARB"));
        self.MapBufferRange = @ptrCast(glMapBufferRange, try loader("glMapBufferRange"));
        self.MapControlPointsNV = @ptrCast(glMapControlPointsNV, try loader("glMapControlPointsNV"));
        self.MapGrid1xOES = @ptrCast(glMapGrid1xOES, try loader("glMapGrid1xOES"));
        self.MapGrid2xOES = @ptrCast(glMapGrid2xOES, try loader("glMapGrid2xOES"));
        self.MapNamedBuffer = @ptrCast(glMapNamedBuffer, try loader("glMapNamedBuffer"));
        self.MapNamedBufferEXT = @ptrCast(glMapNamedBufferEXT, try loader("glMapNamedBufferEXT"));
        self.MapNamedBufferRange = @ptrCast(glMapNamedBufferRange, try loader("glMapNamedBufferRange"));
        self.MapNamedBufferRangeEXT = @ptrCast(glMapNamedBufferRangeEXT, try loader("glMapNamedBufferRangeEXT"));
        self.MapObjectBufferATI = @ptrCast(glMapObjectBufferATI, try loader("glMapObjectBufferATI"));
        self.MapParameterfvNV = @ptrCast(glMapParameterfvNV, try loader("glMapParameterfvNV"));
        self.MapParameterivNV = @ptrCast(glMapParameterivNV, try loader("glMapParameterivNV"));
        self.MapTexture2DINTEL = @ptrCast(glMapTexture2DINTEL, try loader("glMapTexture2DINTEL"));
        self.MapVertexAttrib1dAPPLE = @ptrCast(glMapVertexAttrib1dAPPLE, try loader("glMapVertexAttrib1dAPPLE"));
        self.MapVertexAttrib1fAPPLE = @ptrCast(glMapVertexAttrib1fAPPLE, try loader("glMapVertexAttrib1fAPPLE"));
        self.MapVertexAttrib2dAPPLE = @ptrCast(glMapVertexAttrib2dAPPLE, try loader("glMapVertexAttrib2dAPPLE"));
        self.MapVertexAttrib2fAPPLE = @ptrCast(glMapVertexAttrib2fAPPLE, try loader("glMapVertexAttrib2fAPPLE"));
        self.MaterialxOES = @ptrCast(glMaterialxOES, try loader("glMaterialxOES"));
        self.MaterialxvOES = @ptrCast(glMaterialxvOES, try loader("glMaterialxvOES"));
        self.MatrixFrustumEXT = @ptrCast(glMatrixFrustumEXT, try loader("glMatrixFrustumEXT"));
        self.MatrixIndexPointerARB = @ptrCast(glMatrixIndexPointerARB, try loader("glMatrixIndexPointerARB"));
        self.MatrixIndexubvARB = @ptrCast(glMatrixIndexubvARB, try loader("glMatrixIndexubvARB"));
        self.MatrixIndexuivARB = @ptrCast(glMatrixIndexuivARB, try loader("glMatrixIndexuivARB"));
        self.MatrixIndexusvARB = @ptrCast(glMatrixIndexusvARB, try loader("glMatrixIndexusvARB"));
        self.MatrixLoad3x2fNV = @ptrCast(glMatrixLoad3x2fNV, try loader("glMatrixLoad3x2fNV"));
        self.MatrixLoad3x3fNV = @ptrCast(glMatrixLoad3x3fNV, try loader("glMatrixLoad3x3fNV"));
        self.MatrixLoadIdentityEXT = @ptrCast(glMatrixLoadIdentityEXT, try loader("glMatrixLoadIdentityEXT"));
        self.MatrixLoadTranspose3x3fNV = @ptrCast(glMatrixLoadTranspose3x3fNV, try loader("glMatrixLoadTranspose3x3fNV"));
        self.MatrixLoadTransposedEXT = @ptrCast(glMatrixLoadTransposedEXT, try loader("glMatrixLoadTransposedEXT"));
        self.MatrixLoadTransposefEXT = @ptrCast(glMatrixLoadTransposefEXT, try loader("glMatrixLoadTransposefEXT"));
        self.MatrixLoaddEXT = @ptrCast(glMatrixLoaddEXT, try loader("glMatrixLoaddEXT"));
        self.MatrixLoadfEXT = @ptrCast(glMatrixLoadfEXT, try loader("glMatrixLoadfEXT"));
        self.MatrixMult3x2fNV = @ptrCast(glMatrixMult3x2fNV, try loader("glMatrixMult3x2fNV"));
        self.MatrixMult3x3fNV = @ptrCast(glMatrixMult3x3fNV, try loader("glMatrixMult3x3fNV"));
        self.MatrixMultTranspose3x3fNV = @ptrCast(glMatrixMultTranspose3x3fNV, try loader("glMatrixMultTranspose3x3fNV"));
        self.MatrixMultTransposedEXT = @ptrCast(glMatrixMultTransposedEXT, try loader("glMatrixMultTransposedEXT"));
        self.MatrixMultTransposefEXT = @ptrCast(glMatrixMultTransposefEXT, try loader("glMatrixMultTransposefEXT"));
        self.MatrixMultdEXT = @ptrCast(glMatrixMultdEXT, try loader("glMatrixMultdEXT"));
        self.MatrixMultfEXT = @ptrCast(glMatrixMultfEXT, try loader("glMatrixMultfEXT"));
        self.MatrixOrthoEXT = @ptrCast(glMatrixOrthoEXT, try loader("glMatrixOrthoEXT"));
        self.MatrixPopEXT = @ptrCast(glMatrixPopEXT, try loader("glMatrixPopEXT"));
        self.MatrixPushEXT = @ptrCast(glMatrixPushEXT, try loader("glMatrixPushEXT"));
        self.MatrixRotatedEXT = @ptrCast(glMatrixRotatedEXT, try loader("glMatrixRotatedEXT"));
        self.MatrixRotatefEXT = @ptrCast(glMatrixRotatefEXT, try loader("glMatrixRotatefEXT"));
        self.MatrixScaledEXT = @ptrCast(glMatrixScaledEXT, try loader("glMatrixScaledEXT"));
        self.MatrixScalefEXT = @ptrCast(glMatrixScalefEXT, try loader("glMatrixScalefEXT"));
        self.MatrixTranslatedEXT = @ptrCast(glMatrixTranslatedEXT, try loader("glMatrixTranslatedEXT"));
        self.MatrixTranslatefEXT = @ptrCast(glMatrixTranslatefEXT, try loader("glMatrixTranslatefEXT"));
        self.MaxShaderCompilerThreadsARB = @ptrCast(glMaxShaderCompilerThreadsARB, try loader("glMaxShaderCompilerThreadsARB"));
        self.MaxShaderCompilerThreadsKHR = @ptrCast(glMaxShaderCompilerThreadsKHR, try loader("glMaxShaderCompilerThreadsKHR"));
        self.MemoryBarrier = @ptrCast(glMemoryBarrier, try loader("glMemoryBarrier"));
        self.MemoryBarrierByRegion = @ptrCast(glMemoryBarrierByRegion, try loader("glMemoryBarrierByRegion"));
        self.MemoryBarrierEXT = @ptrCast(glMemoryBarrierEXT, try loader("glMemoryBarrierEXT"));
        self.MemoryObjectParameterivEXT = @ptrCast(glMemoryObjectParameterivEXT, try loader("glMemoryObjectParameterivEXT"));
        self.MinSampleShadingARB = @ptrCast(glMinSampleShadingARB, try loader("glMinSampleShadingARB"));
        self.MinmaxEXT = @ptrCast(glMinmaxEXT, try loader("glMinmaxEXT"));
        self.MultMatrixxOES = @ptrCast(glMultMatrixxOES, try loader("glMultMatrixxOES"));
        self.MultTransposeMatrixdARB = @ptrCast(glMultTransposeMatrixdARB, try loader("glMultTransposeMatrixdARB"));
        self.MultTransposeMatrixfARB = @ptrCast(glMultTransposeMatrixfARB, try loader("glMultTransposeMatrixfARB"));
        self.MultTransposeMatrixxOES = @ptrCast(glMultTransposeMatrixxOES, try loader("glMultTransposeMatrixxOES"));
        self.MultiDrawArrays = @ptrCast(glMultiDrawArrays, try loader("glMultiDrawArrays"));
        self.MultiDrawArraysEXT = @ptrCast(glMultiDrawArraysEXT, try loader("glMultiDrawArraysEXT"));
        self.MultiDrawArraysIndirect = @ptrCast(glMultiDrawArraysIndirect, try loader("glMultiDrawArraysIndirect"));
        self.MultiDrawArraysIndirectAMD = @ptrCast(glMultiDrawArraysIndirectAMD, try loader("glMultiDrawArraysIndirectAMD"));
        self.MultiDrawArraysIndirectBindlessCountNV = @ptrCast(glMultiDrawArraysIndirectBindlessCountNV, try loader("glMultiDrawArraysIndirectBindlessCountNV"));
        self.MultiDrawArraysIndirectBindlessNV = @ptrCast(glMultiDrawArraysIndirectBindlessNV, try loader("glMultiDrawArraysIndirectBindlessNV"));
        self.MultiDrawArraysIndirectCountARB = @ptrCast(glMultiDrawArraysIndirectCountARB, try loader("glMultiDrawArraysIndirectCountARB"));
        self.MultiDrawElementArrayAPPLE = @ptrCast(glMultiDrawElementArrayAPPLE, try loader("glMultiDrawElementArrayAPPLE"));
        self.MultiDrawElements = @ptrCast(glMultiDrawElements, try loader("glMultiDrawElements"));
        self.MultiDrawElementsBaseVertex = @ptrCast(glMultiDrawElementsBaseVertex, try loader("glMultiDrawElementsBaseVertex"));
        self.MultiDrawElementsEXT = @ptrCast(glMultiDrawElementsEXT, try loader("glMultiDrawElementsEXT"));
        self.MultiDrawElementsIndirect = @ptrCast(glMultiDrawElementsIndirect, try loader("glMultiDrawElementsIndirect"));
        self.MultiDrawElementsIndirectAMD = @ptrCast(glMultiDrawElementsIndirectAMD, try loader("glMultiDrawElementsIndirectAMD"));
        self.MultiDrawElementsIndirectBindlessCountNV = @ptrCast(glMultiDrawElementsIndirectBindlessCountNV, try loader("glMultiDrawElementsIndirectBindlessCountNV"));
        self.MultiDrawElementsIndirectBindlessNV = @ptrCast(glMultiDrawElementsIndirectBindlessNV, try loader("glMultiDrawElementsIndirectBindlessNV"));
        self.MultiDrawElementsIndirectCountARB = @ptrCast(glMultiDrawElementsIndirectCountARB, try loader("glMultiDrawElementsIndirectCountARB"));
        self.MultiDrawMeshTasksIndirectCountNV = @ptrCast(glMultiDrawMeshTasksIndirectCountNV, try loader("glMultiDrawMeshTasksIndirectCountNV"));
        self.MultiDrawMeshTasksIndirectNV = @ptrCast(glMultiDrawMeshTasksIndirectNV, try loader("glMultiDrawMeshTasksIndirectNV"));
        self.MultiDrawRangeElementArrayAPPLE = @ptrCast(glMultiDrawRangeElementArrayAPPLE, try loader("glMultiDrawRangeElementArrayAPPLE"));
        self.MultiModeDrawArraysIBM = @ptrCast(glMultiModeDrawArraysIBM, try loader("glMultiModeDrawArraysIBM"));
        self.MultiModeDrawElementsIBM = @ptrCast(glMultiModeDrawElementsIBM, try loader("glMultiModeDrawElementsIBM"));
        self.MultiTexBufferEXT = @ptrCast(glMultiTexBufferEXT, try loader("glMultiTexBufferEXT"));
        self.MultiTexCoord1bOES = @ptrCast(glMultiTexCoord1bOES, try loader("glMultiTexCoord1bOES"));
        self.MultiTexCoord1bvOES = @ptrCast(glMultiTexCoord1bvOES, try loader("glMultiTexCoord1bvOES"));
        self.MultiTexCoord1dARB = @ptrCast(glMultiTexCoord1dARB, try loader("glMultiTexCoord1dARB"));
        self.MultiTexCoord1dvARB = @ptrCast(glMultiTexCoord1dvARB, try loader("glMultiTexCoord1dvARB"));
        self.MultiTexCoord1fARB = @ptrCast(glMultiTexCoord1fARB, try loader("glMultiTexCoord1fARB"));
        self.MultiTexCoord1fvARB = @ptrCast(glMultiTexCoord1fvARB, try loader("glMultiTexCoord1fvARB"));
        self.MultiTexCoord1hNV = @ptrCast(glMultiTexCoord1hNV, try loader("glMultiTexCoord1hNV"));
        self.MultiTexCoord1hvNV = @ptrCast(glMultiTexCoord1hvNV, try loader("glMultiTexCoord1hvNV"));
        self.MultiTexCoord1iARB = @ptrCast(glMultiTexCoord1iARB, try loader("glMultiTexCoord1iARB"));
        self.MultiTexCoord1ivARB = @ptrCast(glMultiTexCoord1ivARB, try loader("glMultiTexCoord1ivARB"));
        self.MultiTexCoord1sARB = @ptrCast(glMultiTexCoord1sARB, try loader("glMultiTexCoord1sARB"));
        self.MultiTexCoord1svARB = @ptrCast(glMultiTexCoord1svARB, try loader("glMultiTexCoord1svARB"));
        self.MultiTexCoord1xOES = @ptrCast(glMultiTexCoord1xOES, try loader("glMultiTexCoord1xOES"));
        self.MultiTexCoord1xvOES = @ptrCast(glMultiTexCoord1xvOES, try loader("glMultiTexCoord1xvOES"));
        self.MultiTexCoord2bOES = @ptrCast(glMultiTexCoord2bOES, try loader("glMultiTexCoord2bOES"));
        self.MultiTexCoord2bvOES = @ptrCast(glMultiTexCoord2bvOES, try loader("glMultiTexCoord2bvOES"));
        self.MultiTexCoord2dARB = @ptrCast(glMultiTexCoord2dARB, try loader("glMultiTexCoord2dARB"));
        self.MultiTexCoord2dvARB = @ptrCast(glMultiTexCoord2dvARB, try loader("glMultiTexCoord2dvARB"));
        self.MultiTexCoord2fARB = @ptrCast(glMultiTexCoord2fARB, try loader("glMultiTexCoord2fARB"));
        self.MultiTexCoord2fvARB = @ptrCast(glMultiTexCoord2fvARB, try loader("glMultiTexCoord2fvARB"));
        self.MultiTexCoord2hNV = @ptrCast(glMultiTexCoord2hNV, try loader("glMultiTexCoord2hNV"));
        self.MultiTexCoord2hvNV = @ptrCast(glMultiTexCoord2hvNV, try loader("glMultiTexCoord2hvNV"));
        self.MultiTexCoord2iARB = @ptrCast(glMultiTexCoord2iARB, try loader("glMultiTexCoord2iARB"));
        self.MultiTexCoord2ivARB = @ptrCast(glMultiTexCoord2ivARB, try loader("glMultiTexCoord2ivARB"));
        self.MultiTexCoord2sARB = @ptrCast(glMultiTexCoord2sARB, try loader("glMultiTexCoord2sARB"));
        self.MultiTexCoord2svARB = @ptrCast(glMultiTexCoord2svARB, try loader("glMultiTexCoord2svARB"));
        self.MultiTexCoord2xOES = @ptrCast(glMultiTexCoord2xOES, try loader("glMultiTexCoord2xOES"));
        self.MultiTexCoord2xvOES = @ptrCast(glMultiTexCoord2xvOES, try loader("glMultiTexCoord2xvOES"));
        self.MultiTexCoord3bOES = @ptrCast(glMultiTexCoord3bOES, try loader("glMultiTexCoord3bOES"));
        self.MultiTexCoord3bvOES = @ptrCast(glMultiTexCoord3bvOES, try loader("glMultiTexCoord3bvOES"));
        self.MultiTexCoord3dARB = @ptrCast(glMultiTexCoord3dARB, try loader("glMultiTexCoord3dARB"));
        self.MultiTexCoord3dvARB = @ptrCast(glMultiTexCoord3dvARB, try loader("glMultiTexCoord3dvARB"));
        self.MultiTexCoord3fARB = @ptrCast(glMultiTexCoord3fARB, try loader("glMultiTexCoord3fARB"));
        self.MultiTexCoord3fvARB = @ptrCast(glMultiTexCoord3fvARB, try loader("glMultiTexCoord3fvARB"));
        self.MultiTexCoord3hNV = @ptrCast(glMultiTexCoord3hNV, try loader("glMultiTexCoord3hNV"));
        self.MultiTexCoord3hvNV = @ptrCast(glMultiTexCoord3hvNV, try loader("glMultiTexCoord3hvNV"));
        self.MultiTexCoord3iARB = @ptrCast(glMultiTexCoord3iARB, try loader("glMultiTexCoord3iARB"));
        self.MultiTexCoord3ivARB = @ptrCast(glMultiTexCoord3ivARB, try loader("glMultiTexCoord3ivARB"));
        self.MultiTexCoord3sARB = @ptrCast(glMultiTexCoord3sARB, try loader("glMultiTexCoord3sARB"));
        self.MultiTexCoord3svARB = @ptrCast(glMultiTexCoord3svARB, try loader("glMultiTexCoord3svARB"));
        self.MultiTexCoord3xOES = @ptrCast(glMultiTexCoord3xOES, try loader("glMultiTexCoord3xOES"));
        self.MultiTexCoord3xvOES = @ptrCast(glMultiTexCoord3xvOES, try loader("glMultiTexCoord3xvOES"));
        self.MultiTexCoord4bOES = @ptrCast(glMultiTexCoord4bOES, try loader("glMultiTexCoord4bOES"));
        self.MultiTexCoord4bvOES = @ptrCast(glMultiTexCoord4bvOES, try loader("glMultiTexCoord4bvOES"));
        self.MultiTexCoord4dARB = @ptrCast(glMultiTexCoord4dARB, try loader("glMultiTexCoord4dARB"));
        self.MultiTexCoord4dvARB = @ptrCast(glMultiTexCoord4dvARB, try loader("glMultiTexCoord4dvARB"));
        self.MultiTexCoord4fARB = @ptrCast(glMultiTexCoord4fARB, try loader("glMultiTexCoord4fARB"));
        self.MultiTexCoord4fvARB = @ptrCast(glMultiTexCoord4fvARB, try loader("glMultiTexCoord4fvARB"));
        self.MultiTexCoord4hNV = @ptrCast(glMultiTexCoord4hNV, try loader("glMultiTexCoord4hNV"));
        self.MultiTexCoord4hvNV = @ptrCast(glMultiTexCoord4hvNV, try loader("glMultiTexCoord4hvNV"));
        self.MultiTexCoord4iARB = @ptrCast(glMultiTexCoord4iARB, try loader("glMultiTexCoord4iARB"));
        self.MultiTexCoord4ivARB = @ptrCast(glMultiTexCoord4ivARB, try loader("glMultiTexCoord4ivARB"));
        self.MultiTexCoord4sARB = @ptrCast(glMultiTexCoord4sARB, try loader("glMultiTexCoord4sARB"));
        self.MultiTexCoord4svARB = @ptrCast(glMultiTexCoord4svARB, try loader("glMultiTexCoord4svARB"));
        self.MultiTexCoord4xOES = @ptrCast(glMultiTexCoord4xOES, try loader("glMultiTexCoord4xOES"));
        self.MultiTexCoord4xvOES = @ptrCast(glMultiTexCoord4xvOES, try loader("glMultiTexCoord4xvOES"));
        self.MultiTexCoordPointerEXT = @ptrCast(glMultiTexCoordPointerEXT, try loader("glMultiTexCoordPointerEXT"));
        self.MultiTexEnvfEXT = @ptrCast(glMultiTexEnvfEXT, try loader("glMultiTexEnvfEXT"));
        self.MultiTexEnvfvEXT = @ptrCast(glMultiTexEnvfvEXT, try loader("glMultiTexEnvfvEXT"));
        self.MultiTexEnviEXT = @ptrCast(glMultiTexEnviEXT, try loader("glMultiTexEnviEXT"));
        self.MultiTexEnvivEXT = @ptrCast(glMultiTexEnvivEXT, try loader("glMultiTexEnvivEXT"));
        self.MultiTexGendEXT = @ptrCast(glMultiTexGendEXT, try loader("glMultiTexGendEXT"));
        self.MultiTexGendvEXT = @ptrCast(glMultiTexGendvEXT, try loader("glMultiTexGendvEXT"));
        self.MultiTexGenfEXT = @ptrCast(glMultiTexGenfEXT, try loader("glMultiTexGenfEXT"));
        self.MultiTexGenfvEXT = @ptrCast(glMultiTexGenfvEXT, try loader("glMultiTexGenfvEXT"));
        self.MultiTexGeniEXT = @ptrCast(glMultiTexGeniEXT, try loader("glMultiTexGeniEXT"));
        self.MultiTexGenivEXT = @ptrCast(glMultiTexGenivEXT, try loader("glMultiTexGenivEXT"));
        self.MultiTexImage1DEXT = @ptrCast(glMultiTexImage1DEXT, try loader("glMultiTexImage1DEXT"));
        self.MultiTexImage2DEXT = @ptrCast(glMultiTexImage2DEXT, try loader("glMultiTexImage2DEXT"));
        self.MultiTexImage3DEXT = @ptrCast(glMultiTexImage3DEXT, try loader("glMultiTexImage3DEXT"));
        self.MultiTexParameterIivEXT = @ptrCast(glMultiTexParameterIivEXT, try loader("glMultiTexParameterIivEXT"));
        self.MultiTexParameterIuivEXT = @ptrCast(glMultiTexParameterIuivEXT, try loader("glMultiTexParameterIuivEXT"));
        self.MultiTexParameterfEXT = @ptrCast(glMultiTexParameterfEXT, try loader("glMultiTexParameterfEXT"));
        self.MultiTexParameterfvEXT = @ptrCast(glMultiTexParameterfvEXT, try loader("glMultiTexParameterfvEXT"));
        self.MultiTexParameteriEXT = @ptrCast(glMultiTexParameteriEXT, try loader("glMultiTexParameteriEXT"));
        self.MultiTexParameterivEXT = @ptrCast(glMultiTexParameterivEXT, try loader("glMultiTexParameterivEXT"));
        self.MultiTexRenderbufferEXT = @ptrCast(glMultiTexRenderbufferEXT, try loader("glMultiTexRenderbufferEXT"));
        self.MultiTexSubImage1DEXT = @ptrCast(glMultiTexSubImage1DEXT, try loader("glMultiTexSubImage1DEXT"));
        self.MultiTexSubImage2DEXT = @ptrCast(glMultiTexSubImage2DEXT, try loader("glMultiTexSubImage2DEXT"));
        self.MultiTexSubImage3DEXT = @ptrCast(glMultiTexSubImage3DEXT, try loader("glMultiTexSubImage3DEXT"));
        self.MulticastBarrierNV = @ptrCast(glMulticastBarrierNV, try loader("glMulticastBarrierNV"));
        self.MulticastBlitFramebufferNV = @ptrCast(glMulticastBlitFramebufferNV, try loader("glMulticastBlitFramebufferNV"));
        self.MulticastBufferSubDataNV = @ptrCast(glMulticastBufferSubDataNV, try loader("glMulticastBufferSubDataNV"));
        self.MulticastCopyBufferSubDataNV = @ptrCast(glMulticastCopyBufferSubDataNV, try loader("glMulticastCopyBufferSubDataNV"));
        self.MulticastCopyImageSubDataNV = @ptrCast(glMulticastCopyImageSubDataNV, try loader("glMulticastCopyImageSubDataNV"));
        self.MulticastFramebufferSampleLocationsfvNV = @ptrCast(glMulticastFramebufferSampleLocationsfvNV, try loader("glMulticastFramebufferSampleLocationsfvNV"));
        self.MulticastGetQueryObjecti64vNV = @ptrCast(glMulticastGetQueryObjecti64vNV, try loader("glMulticastGetQueryObjecti64vNV"));
        self.MulticastGetQueryObjectivNV = @ptrCast(glMulticastGetQueryObjectivNV, try loader("glMulticastGetQueryObjectivNV"));
        self.MulticastGetQueryObjectui64vNV = @ptrCast(glMulticastGetQueryObjectui64vNV, try loader("glMulticastGetQueryObjectui64vNV"));
        self.MulticastGetQueryObjectuivNV = @ptrCast(glMulticastGetQueryObjectuivNV, try loader("glMulticastGetQueryObjectuivNV"));
        self.MulticastScissorArrayvNVX = @ptrCast(glMulticastScissorArrayvNVX, try loader("glMulticastScissorArrayvNVX"));
        self.MulticastViewportArrayvNVX = @ptrCast(glMulticastViewportArrayvNVX, try loader("glMulticastViewportArrayvNVX"));
        self.MulticastViewportPositionWScaleNVX = @ptrCast(glMulticastViewportPositionWScaleNVX, try loader("glMulticastViewportPositionWScaleNVX"));
        self.MulticastWaitSyncNV = @ptrCast(glMulticastWaitSyncNV, try loader("glMulticastWaitSyncNV"));
        self.NamedBufferAttachMemoryNV = @ptrCast(glNamedBufferAttachMemoryNV, try loader("glNamedBufferAttachMemoryNV"));
        self.NamedBufferData = @ptrCast(glNamedBufferData, try loader("glNamedBufferData"));
        self.NamedBufferDataEXT = @ptrCast(glNamedBufferDataEXT, try loader("glNamedBufferDataEXT"));
        self.NamedBufferPageCommitmentARB = @ptrCast(glNamedBufferPageCommitmentARB, try loader("glNamedBufferPageCommitmentARB"));
        self.NamedBufferPageCommitmentEXT = @ptrCast(glNamedBufferPageCommitmentEXT, try loader("glNamedBufferPageCommitmentEXT"));
        self.NamedBufferPageCommitmentMemNV = @ptrCast(glNamedBufferPageCommitmentMemNV, try loader("glNamedBufferPageCommitmentMemNV"));
        self.NamedBufferStorage = @ptrCast(glNamedBufferStorage, try loader("glNamedBufferStorage"));
        self.NamedBufferStorageEXT = @ptrCast(glNamedBufferStorageEXT, try loader("glNamedBufferStorageEXT"));
        self.NamedBufferStorageExternalEXT = @ptrCast(glNamedBufferStorageExternalEXT, try loader("glNamedBufferStorageExternalEXT"));
        self.NamedBufferStorageMemEXT = @ptrCast(glNamedBufferStorageMemEXT, try loader("glNamedBufferStorageMemEXT"));
        self.NamedBufferSubData = @ptrCast(glNamedBufferSubData, try loader("glNamedBufferSubData"));
        self.NamedBufferSubDataEXT = @ptrCast(glNamedBufferSubDataEXT, try loader("glNamedBufferSubDataEXT"));
        self.NamedCopyBufferSubDataEXT = @ptrCast(glNamedCopyBufferSubDataEXT, try loader("glNamedCopyBufferSubDataEXT"));
        self.NamedFramebufferDrawBuffer = @ptrCast(glNamedFramebufferDrawBuffer, try loader("glNamedFramebufferDrawBuffer"));
        self.NamedFramebufferDrawBuffers = @ptrCast(glNamedFramebufferDrawBuffers, try loader("glNamedFramebufferDrawBuffers"));
        self.NamedFramebufferParameteri = @ptrCast(glNamedFramebufferParameteri, try loader("glNamedFramebufferParameteri"));
        self.NamedFramebufferParameteriEXT = @ptrCast(glNamedFramebufferParameteriEXT, try loader("glNamedFramebufferParameteriEXT"));
        self.NamedFramebufferReadBuffer = @ptrCast(glNamedFramebufferReadBuffer, try loader("glNamedFramebufferReadBuffer"));
        self.NamedFramebufferRenderbuffer = @ptrCast(glNamedFramebufferRenderbuffer, try loader("glNamedFramebufferRenderbuffer"));
        self.NamedFramebufferRenderbufferEXT = @ptrCast(glNamedFramebufferRenderbufferEXT, try loader("glNamedFramebufferRenderbufferEXT"));
        self.NamedFramebufferSampleLocationsfvARB = @ptrCast(glNamedFramebufferSampleLocationsfvARB, try loader("glNamedFramebufferSampleLocationsfvARB"));
        self.NamedFramebufferSampleLocationsfvNV = @ptrCast(glNamedFramebufferSampleLocationsfvNV, try loader("glNamedFramebufferSampleLocationsfvNV"));
        self.NamedFramebufferSamplePositionsfvAMD = @ptrCast(glNamedFramebufferSamplePositionsfvAMD, try loader("glNamedFramebufferSamplePositionsfvAMD"));
        self.NamedFramebufferTexture = @ptrCast(glNamedFramebufferTexture, try loader("glNamedFramebufferTexture"));
        self.NamedFramebufferTexture1DEXT = @ptrCast(glNamedFramebufferTexture1DEXT, try loader("glNamedFramebufferTexture1DEXT"));
        self.NamedFramebufferTexture2DEXT = @ptrCast(glNamedFramebufferTexture2DEXT, try loader("glNamedFramebufferTexture2DEXT"));
        self.NamedFramebufferTexture3DEXT = @ptrCast(glNamedFramebufferTexture3DEXT, try loader("glNamedFramebufferTexture3DEXT"));
        self.NamedFramebufferTextureEXT = @ptrCast(glNamedFramebufferTextureEXT, try loader("glNamedFramebufferTextureEXT"));
        self.NamedFramebufferTextureFaceEXT = @ptrCast(glNamedFramebufferTextureFaceEXT, try loader("glNamedFramebufferTextureFaceEXT"));
        self.NamedFramebufferTextureLayer = @ptrCast(glNamedFramebufferTextureLayer, try loader("glNamedFramebufferTextureLayer"));
        self.NamedFramebufferTextureLayerEXT = @ptrCast(glNamedFramebufferTextureLayerEXT, try loader("glNamedFramebufferTextureLayerEXT"));
        self.NamedProgramLocalParameter4dEXT = @ptrCast(glNamedProgramLocalParameter4dEXT, try loader("glNamedProgramLocalParameter4dEXT"));
        self.NamedProgramLocalParameter4dvEXT = @ptrCast(glNamedProgramLocalParameter4dvEXT, try loader("glNamedProgramLocalParameter4dvEXT"));
        self.NamedProgramLocalParameter4fEXT = @ptrCast(glNamedProgramLocalParameter4fEXT, try loader("glNamedProgramLocalParameter4fEXT"));
        self.NamedProgramLocalParameter4fvEXT = @ptrCast(glNamedProgramLocalParameter4fvEXT, try loader("glNamedProgramLocalParameter4fvEXT"));
        self.NamedProgramLocalParameterI4iEXT = @ptrCast(glNamedProgramLocalParameterI4iEXT, try loader("glNamedProgramLocalParameterI4iEXT"));
        self.NamedProgramLocalParameterI4ivEXT = @ptrCast(glNamedProgramLocalParameterI4ivEXT, try loader("glNamedProgramLocalParameterI4ivEXT"));
        self.NamedProgramLocalParameterI4uiEXT = @ptrCast(glNamedProgramLocalParameterI4uiEXT, try loader("glNamedProgramLocalParameterI4uiEXT"));
        self.NamedProgramLocalParameterI4uivEXT = @ptrCast(glNamedProgramLocalParameterI4uivEXT, try loader("glNamedProgramLocalParameterI4uivEXT"));
        self.NamedProgramLocalParameters4fvEXT = @ptrCast(glNamedProgramLocalParameters4fvEXT, try loader("glNamedProgramLocalParameters4fvEXT"));
        self.NamedProgramLocalParametersI4ivEXT = @ptrCast(glNamedProgramLocalParametersI4ivEXT, try loader("glNamedProgramLocalParametersI4ivEXT"));
        self.NamedProgramLocalParametersI4uivEXT = @ptrCast(glNamedProgramLocalParametersI4uivEXT, try loader("glNamedProgramLocalParametersI4uivEXT"));
        self.NamedProgramStringEXT = @ptrCast(glNamedProgramStringEXT, try loader("glNamedProgramStringEXT"));
        self.NamedRenderbufferStorage = @ptrCast(glNamedRenderbufferStorage, try loader("glNamedRenderbufferStorage"));
        self.NamedRenderbufferStorageEXT = @ptrCast(glNamedRenderbufferStorageEXT, try loader("glNamedRenderbufferStorageEXT"));
        self.NamedRenderbufferStorageMultisample = @ptrCast(glNamedRenderbufferStorageMultisample, try loader("glNamedRenderbufferStorageMultisample"));
        self.NamedRenderbufferStorageMultisampleAdvancedAMD = @ptrCast(glNamedRenderbufferStorageMultisampleAdvancedAMD, try loader("glNamedRenderbufferStorageMultisampleAdvancedAMD"));
        self.NamedRenderbufferStorageMultisampleCoverageEXT = @ptrCast(glNamedRenderbufferStorageMultisampleCoverageEXT, try loader("glNamedRenderbufferStorageMultisampleCoverageEXT"));
        self.NamedRenderbufferStorageMultisampleEXT = @ptrCast(glNamedRenderbufferStorageMultisampleEXT, try loader("glNamedRenderbufferStorageMultisampleEXT"));
        self.NamedStringARB = @ptrCast(glNamedStringARB, try loader("glNamedStringARB"));
        self.NewObjectBufferATI = @ptrCast(glNewObjectBufferATI, try loader("glNewObjectBufferATI"));
        self.Normal3fVertex3fSUN = @ptrCast(glNormal3fVertex3fSUN, try loader("glNormal3fVertex3fSUN"));
        self.Normal3fVertex3fvSUN = @ptrCast(glNormal3fVertex3fvSUN, try loader("glNormal3fVertex3fvSUN"));
        self.Normal3hNV = @ptrCast(glNormal3hNV, try loader("glNormal3hNV"));
        self.Normal3hvNV = @ptrCast(glNormal3hvNV, try loader("glNormal3hvNV"));
        self.Normal3xOES = @ptrCast(glNormal3xOES, try loader("glNormal3xOES"));
        self.Normal3xvOES = @ptrCast(glNormal3xvOES, try loader("glNormal3xvOES"));
        self.NormalFormatNV = @ptrCast(glNormalFormatNV, try loader("glNormalFormatNV"));
        self.NormalPointerEXT = @ptrCast(glNormalPointerEXT, try loader("glNormalPointerEXT"));
        self.NormalPointerListIBM = @ptrCast(glNormalPointerListIBM, try loader("glNormalPointerListIBM"));
        self.NormalPointervINTEL = @ptrCast(glNormalPointervINTEL, try loader("glNormalPointervINTEL"));
        self.NormalStream3bATI = @ptrCast(glNormalStream3bATI, try loader("glNormalStream3bATI"));
        self.NormalStream3bvATI = @ptrCast(glNormalStream3bvATI, try loader("glNormalStream3bvATI"));
        self.NormalStream3dATI = @ptrCast(glNormalStream3dATI, try loader("glNormalStream3dATI"));
        self.NormalStream3dvATI = @ptrCast(glNormalStream3dvATI, try loader("glNormalStream3dvATI"));
        self.NormalStream3fATI = @ptrCast(glNormalStream3fATI, try loader("glNormalStream3fATI"));
        self.NormalStream3fvATI = @ptrCast(glNormalStream3fvATI, try loader("glNormalStream3fvATI"));
        self.NormalStream3iATI = @ptrCast(glNormalStream3iATI, try loader("glNormalStream3iATI"));
        self.NormalStream3ivATI = @ptrCast(glNormalStream3ivATI, try loader("glNormalStream3ivATI"));
        self.NormalStream3sATI = @ptrCast(glNormalStream3sATI, try loader("glNormalStream3sATI"));
        self.NormalStream3svATI = @ptrCast(glNormalStream3svATI, try loader("glNormalStream3svATI"));
        self.ObjectLabel = @ptrCast(glObjectLabel, try loader("glObjectLabel"));
        self.ObjectPtrLabel = @ptrCast(glObjectPtrLabel, try loader("glObjectPtrLabel"));
        self.ObjectPurgeableAPPLE = @ptrCast(glObjectPurgeableAPPLE, try loader("glObjectPurgeableAPPLE"));
        self.ObjectUnpurgeableAPPLE = @ptrCast(glObjectUnpurgeableAPPLE, try loader("glObjectUnpurgeableAPPLE"));
        self.OrthofOES = @ptrCast(glOrthofOES, try loader("glOrthofOES"));
        self.OrthoxOES = @ptrCast(glOrthoxOES, try loader("glOrthoxOES"));
        self.PNTrianglesfATI = @ptrCast(glPNTrianglesfATI, try loader("glPNTrianglesfATI"));
        self.PNTrianglesiATI = @ptrCast(glPNTrianglesiATI, try loader("glPNTrianglesiATI"));
        self.PassTexCoordATI = @ptrCast(glPassTexCoordATI, try loader("glPassTexCoordATI"));
        self.PassThroughxOES = @ptrCast(glPassThroughxOES, try loader("glPassThroughxOES"));
        self.PatchParameterfv = @ptrCast(glPatchParameterfv, try loader("glPatchParameterfv"));
        self.PatchParameteri = @ptrCast(glPatchParameteri, try loader("glPatchParameteri"));
        self.PathCommandsNV = @ptrCast(glPathCommandsNV, try loader("glPathCommandsNV"));
        self.PathCoordsNV = @ptrCast(glPathCoordsNV, try loader("glPathCoordsNV"));
        self.PathCoverDepthFuncNV = @ptrCast(glPathCoverDepthFuncNV, try loader("glPathCoverDepthFuncNV"));
        self.PathDashArrayNV = @ptrCast(glPathDashArrayNV, try loader("glPathDashArrayNV"));
        self.PathGlyphIndexArrayNV = @ptrCast(glPathGlyphIndexArrayNV, try loader("glPathGlyphIndexArrayNV"));
        self.PathGlyphIndexRangeNV = @ptrCast(glPathGlyphIndexRangeNV, try loader("glPathGlyphIndexRangeNV"));
        self.PathGlyphRangeNV = @ptrCast(glPathGlyphRangeNV, try loader("glPathGlyphRangeNV"));
        self.PathGlyphsNV = @ptrCast(glPathGlyphsNV, try loader("glPathGlyphsNV"));
        self.PathMemoryGlyphIndexArrayNV = @ptrCast(glPathMemoryGlyphIndexArrayNV, try loader("glPathMemoryGlyphIndexArrayNV"));
        self.PathParameterfNV = @ptrCast(glPathParameterfNV, try loader("glPathParameterfNV"));
        self.PathParameterfvNV = @ptrCast(glPathParameterfvNV, try loader("glPathParameterfvNV"));
        self.PathParameteriNV = @ptrCast(glPathParameteriNV, try loader("glPathParameteriNV"));
        self.PathParameterivNV = @ptrCast(glPathParameterivNV, try loader("glPathParameterivNV"));
        self.PathStencilDepthOffsetNV = @ptrCast(glPathStencilDepthOffsetNV, try loader("glPathStencilDepthOffsetNV"));
        self.PathStencilFuncNV = @ptrCast(glPathStencilFuncNV, try loader("glPathStencilFuncNV"));
        self.PathStringNV = @ptrCast(glPathStringNV, try loader("glPathStringNV"));
        self.PathSubCommandsNV = @ptrCast(glPathSubCommandsNV, try loader("glPathSubCommandsNV"));
        self.PathSubCoordsNV = @ptrCast(glPathSubCoordsNV, try loader("glPathSubCoordsNV"));
        self.PauseTransformFeedback = @ptrCast(glPauseTransformFeedback, try loader("glPauseTransformFeedback"));
        self.PauseTransformFeedbackNV = @ptrCast(glPauseTransformFeedbackNV, try loader("glPauseTransformFeedbackNV"));
        self.PixelDataRangeNV = @ptrCast(glPixelDataRangeNV, try loader("glPixelDataRangeNV"));
        self.PixelMapx = @ptrCast(glPixelMapx, try loader("glPixelMapx"));
        self.PixelStoref = @ptrCast(glPixelStoref, try loader("glPixelStoref"));
        self.PixelStorei = @ptrCast(glPixelStorei, try loader("glPixelStorei"));
        self.PixelStorex = @ptrCast(glPixelStorex, try loader("glPixelStorex"));
        self.PixelTexGenParameterfSGIS = @ptrCast(glPixelTexGenParameterfSGIS, try loader("glPixelTexGenParameterfSGIS"));
        self.PixelTexGenParameterfvSGIS = @ptrCast(glPixelTexGenParameterfvSGIS, try loader("glPixelTexGenParameterfvSGIS"));
        self.PixelTexGenParameteriSGIS = @ptrCast(glPixelTexGenParameteriSGIS, try loader("glPixelTexGenParameteriSGIS"));
        self.PixelTexGenParameterivSGIS = @ptrCast(glPixelTexGenParameterivSGIS, try loader("glPixelTexGenParameterivSGIS"));
        self.PixelTexGenSGIX = @ptrCast(glPixelTexGenSGIX, try loader("glPixelTexGenSGIX"));
        self.PixelTransferxOES = @ptrCast(glPixelTransferxOES, try loader("glPixelTransferxOES"));
        self.PixelTransformParameterfEXT = @ptrCast(glPixelTransformParameterfEXT, try loader("glPixelTransformParameterfEXT"));
        self.PixelTransformParameterfvEXT = @ptrCast(glPixelTransformParameterfvEXT, try loader("glPixelTransformParameterfvEXT"));
        self.PixelTransformParameteriEXT = @ptrCast(glPixelTransformParameteriEXT, try loader("glPixelTransformParameteriEXT"));
        self.PixelTransformParameterivEXT = @ptrCast(glPixelTransformParameterivEXT, try loader("glPixelTransformParameterivEXT"));
        self.PixelZoomxOES = @ptrCast(glPixelZoomxOES, try loader("glPixelZoomxOES"));
        self.PointAlongPathNV = @ptrCast(glPointAlongPathNV, try loader("glPointAlongPathNV"));
        self.PointParameterf = @ptrCast(glPointParameterf, try loader("glPointParameterf"));
        self.PointParameterfARB = @ptrCast(glPointParameterfARB, try loader("glPointParameterfARB"));
        self.PointParameterfEXT = @ptrCast(glPointParameterfEXT, try loader("glPointParameterfEXT"));
        self.PointParameterfSGIS = @ptrCast(glPointParameterfSGIS, try loader("glPointParameterfSGIS"));
        self.PointParameterfv = @ptrCast(glPointParameterfv, try loader("glPointParameterfv"));
        self.PointParameterfvARB = @ptrCast(glPointParameterfvARB, try loader("glPointParameterfvARB"));
        self.PointParameterfvEXT = @ptrCast(glPointParameterfvEXT, try loader("glPointParameterfvEXT"));
        self.PointParameterfvSGIS = @ptrCast(glPointParameterfvSGIS, try loader("glPointParameterfvSGIS"));
        self.PointParameteri = @ptrCast(glPointParameteri, try loader("glPointParameteri"));
        self.PointParameteriNV = @ptrCast(glPointParameteriNV, try loader("glPointParameteriNV"));
        self.PointParameteriv = @ptrCast(glPointParameteriv, try loader("glPointParameteriv"));
        self.PointParameterivNV = @ptrCast(glPointParameterivNV, try loader("glPointParameterivNV"));
        self.PointParameterxvOES = @ptrCast(glPointParameterxvOES, try loader("glPointParameterxvOES"));
        self.PointSize = @ptrCast(glPointSize, try loader("glPointSize"));
        self.PointSizexOES = @ptrCast(glPointSizexOES, try loader("glPointSizexOES"));
        self.PollAsyncSGIX = @ptrCast(glPollAsyncSGIX, try loader("glPollAsyncSGIX"));
        self.PollInstrumentsSGIX = @ptrCast(glPollInstrumentsSGIX, try loader("glPollInstrumentsSGIX"));
        self.PolygonMode = @ptrCast(glPolygonMode, try loader("glPolygonMode"));
        self.PolygonOffset = @ptrCast(glPolygonOffset, try loader("glPolygonOffset"));
        self.PolygonOffsetClamp = @ptrCast(glPolygonOffsetClamp, try loader("glPolygonOffsetClamp"));
        self.PolygonOffsetClampEXT = @ptrCast(glPolygonOffsetClampEXT, try loader("glPolygonOffsetClampEXT"));
        self.PolygonOffsetEXT = @ptrCast(glPolygonOffsetEXT, try loader("glPolygonOffsetEXT"));
        self.PolygonOffsetxOES = @ptrCast(glPolygonOffsetxOES, try loader("glPolygonOffsetxOES"));
        self.PopDebugGroup = @ptrCast(glPopDebugGroup, try loader("glPopDebugGroup"));
        self.PopGroupMarkerEXT = @ptrCast(glPopGroupMarkerEXT, try loader("glPopGroupMarkerEXT"));
        self.PresentFrameDualFillNV = @ptrCast(glPresentFrameDualFillNV, try loader("glPresentFrameDualFillNV"));
        self.PresentFrameKeyedNV = @ptrCast(glPresentFrameKeyedNV, try loader("glPresentFrameKeyedNV"));
        self.PrimitiveBoundingBoxARB = @ptrCast(glPrimitiveBoundingBoxARB, try loader("glPrimitiveBoundingBoxARB"));
        self.PrimitiveRestartIndex = @ptrCast(glPrimitiveRestartIndex, try loader("glPrimitiveRestartIndex"));
        self.PrimitiveRestartIndexNV = @ptrCast(glPrimitiveRestartIndexNV, try loader("glPrimitiveRestartIndexNV"));
        self.PrimitiveRestartNV = @ptrCast(glPrimitiveRestartNV, try loader("glPrimitiveRestartNV"));
        self.PrioritizeTexturesEXT = @ptrCast(glPrioritizeTexturesEXT, try loader("glPrioritizeTexturesEXT"));
        self.PrioritizeTexturesxOES = @ptrCast(glPrioritizeTexturesxOES, try loader("glPrioritizeTexturesxOES"));
        self.ProgramBinary = @ptrCast(glProgramBinary, try loader("glProgramBinary"));
        self.ProgramBufferParametersIivNV = @ptrCast(glProgramBufferParametersIivNV, try loader("glProgramBufferParametersIivNV"));
        self.ProgramBufferParametersIuivNV = @ptrCast(glProgramBufferParametersIuivNV, try loader("glProgramBufferParametersIuivNV"));
        self.ProgramBufferParametersfvNV = @ptrCast(glProgramBufferParametersfvNV, try loader("glProgramBufferParametersfvNV"));
        self.ProgramEnvParameter4dARB = @ptrCast(glProgramEnvParameter4dARB, try loader("glProgramEnvParameter4dARB"));
        self.ProgramEnvParameter4dvARB = @ptrCast(glProgramEnvParameter4dvARB, try loader("glProgramEnvParameter4dvARB"));
        self.ProgramEnvParameter4fARB = @ptrCast(glProgramEnvParameter4fARB, try loader("glProgramEnvParameter4fARB"));
        self.ProgramEnvParameter4fvARB = @ptrCast(glProgramEnvParameter4fvARB, try loader("glProgramEnvParameter4fvARB"));
        self.ProgramEnvParameterI4iNV = @ptrCast(glProgramEnvParameterI4iNV, try loader("glProgramEnvParameterI4iNV"));
        self.ProgramEnvParameterI4ivNV = @ptrCast(glProgramEnvParameterI4ivNV, try loader("glProgramEnvParameterI4ivNV"));
        self.ProgramEnvParameterI4uiNV = @ptrCast(glProgramEnvParameterI4uiNV, try loader("glProgramEnvParameterI4uiNV"));
        self.ProgramEnvParameterI4uivNV = @ptrCast(glProgramEnvParameterI4uivNV, try loader("glProgramEnvParameterI4uivNV"));
        self.ProgramEnvParameters4fvEXT = @ptrCast(glProgramEnvParameters4fvEXT, try loader("glProgramEnvParameters4fvEXT"));
        self.ProgramEnvParametersI4ivNV = @ptrCast(glProgramEnvParametersI4ivNV, try loader("glProgramEnvParametersI4ivNV"));
        self.ProgramEnvParametersI4uivNV = @ptrCast(glProgramEnvParametersI4uivNV, try loader("glProgramEnvParametersI4uivNV"));
        self.ProgramLocalParameter4dARB = @ptrCast(glProgramLocalParameter4dARB, try loader("glProgramLocalParameter4dARB"));
        self.ProgramLocalParameter4dvARB = @ptrCast(glProgramLocalParameter4dvARB, try loader("glProgramLocalParameter4dvARB"));
        self.ProgramLocalParameter4fARB = @ptrCast(glProgramLocalParameter4fARB, try loader("glProgramLocalParameter4fARB"));
        self.ProgramLocalParameter4fvARB = @ptrCast(glProgramLocalParameter4fvARB, try loader("glProgramLocalParameter4fvARB"));
        self.ProgramLocalParameterI4iNV = @ptrCast(glProgramLocalParameterI4iNV, try loader("glProgramLocalParameterI4iNV"));
        self.ProgramLocalParameterI4ivNV = @ptrCast(glProgramLocalParameterI4ivNV, try loader("glProgramLocalParameterI4ivNV"));
        self.ProgramLocalParameterI4uiNV = @ptrCast(glProgramLocalParameterI4uiNV, try loader("glProgramLocalParameterI4uiNV"));
        self.ProgramLocalParameterI4uivNV = @ptrCast(glProgramLocalParameterI4uivNV, try loader("glProgramLocalParameterI4uivNV"));
        self.ProgramLocalParameters4fvEXT = @ptrCast(glProgramLocalParameters4fvEXT, try loader("glProgramLocalParameters4fvEXT"));
        self.ProgramLocalParametersI4ivNV = @ptrCast(glProgramLocalParametersI4ivNV, try loader("glProgramLocalParametersI4ivNV"));
        self.ProgramLocalParametersI4uivNV = @ptrCast(glProgramLocalParametersI4uivNV, try loader("glProgramLocalParametersI4uivNV"));
        self.ProgramNamedParameter4dNV = @ptrCast(glProgramNamedParameter4dNV, try loader("glProgramNamedParameter4dNV"));
        self.ProgramNamedParameter4dvNV = @ptrCast(glProgramNamedParameter4dvNV, try loader("glProgramNamedParameter4dvNV"));
        self.ProgramNamedParameter4fNV = @ptrCast(glProgramNamedParameter4fNV, try loader("glProgramNamedParameter4fNV"));
        self.ProgramNamedParameter4fvNV = @ptrCast(glProgramNamedParameter4fvNV, try loader("glProgramNamedParameter4fvNV"));
        self.ProgramParameter4dNV = @ptrCast(glProgramParameter4dNV, try loader("glProgramParameter4dNV"));
        self.ProgramParameter4dvNV = @ptrCast(glProgramParameter4dvNV, try loader("glProgramParameter4dvNV"));
        self.ProgramParameter4fNV = @ptrCast(glProgramParameter4fNV, try loader("glProgramParameter4fNV"));
        self.ProgramParameter4fvNV = @ptrCast(glProgramParameter4fvNV, try loader("glProgramParameter4fvNV"));
        self.ProgramParameteri = @ptrCast(glProgramParameteri, try loader("glProgramParameteri"));
        self.ProgramParameteriARB = @ptrCast(glProgramParameteriARB, try loader("glProgramParameteriARB"));
        self.ProgramParameteriEXT = @ptrCast(glProgramParameteriEXT, try loader("glProgramParameteriEXT"));
        self.ProgramParameters4dvNV = @ptrCast(glProgramParameters4dvNV, try loader("glProgramParameters4dvNV"));
        self.ProgramParameters4fvNV = @ptrCast(glProgramParameters4fvNV, try loader("glProgramParameters4fvNV"));
        self.ProgramPathFragmentInputGenNV = @ptrCast(glProgramPathFragmentInputGenNV, try loader("glProgramPathFragmentInputGenNV"));
        self.ProgramStringARB = @ptrCast(glProgramStringARB, try loader("glProgramStringARB"));
        self.ProgramSubroutineParametersuivNV = @ptrCast(glProgramSubroutineParametersuivNV, try loader("glProgramSubroutineParametersuivNV"));
        self.ProgramUniform1d = @ptrCast(glProgramUniform1d, try loader("glProgramUniform1d"));
        self.ProgramUniform1dEXT = @ptrCast(glProgramUniform1dEXT, try loader("glProgramUniform1dEXT"));
        self.ProgramUniform1dv = @ptrCast(glProgramUniform1dv, try loader("glProgramUniform1dv"));
        self.ProgramUniform1dvEXT = @ptrCast(glProgramUniform1dvEXT, try loader("glProgramUniform1dvEXT"));
        self.ProgramUniform1f = @ptrCast(glProgramUniform1f, try loader("glProgramUniform1f"));
        self.ProgramUniform1fEXT = @ptrCast(glProgramUniform1fEXT, try loader("glProgramUniform1fEXT"));
        self.ProgramUniform1fv = @ptrCast(glProgramUniform1fv, try loader("glProgramUniform1fv"));
        self.ProgramUniform1fvEXT = @ptrCast(glProgramUniform1fvEXT, try loader("glProgramUniform1fvEXT"));
        self.ProgramUniform1i = @ptrCast(glProgramUniform1i, try loader("glProgramUniform1i"));
        self.ProgramUniform1i64ARB = @ptrCast(glProgramUniform1i64ARB, try loader("glProgramUniform1i64ARB"));
        self.ProgramUniform1i64NV = @ptrCast(glProgramUniform1i64NV, try loader("glProgramUniform1i64NV"));
        self.ProgramUniform1i64vARB = @ptrCast(glProgramUniform1i64vARB, try loader("glProgramUniform1i64vARB"));
        self.ProgramUniform1i64vNV = @ptrCast(glProgramUniform1i64vNV, try loader("glProgramUniform1i64vNV"));
        self.ProgramUniform1iEXT = @ptrCast(glProgramUniform1iEXT, try loader("glProgramUniform1iEXT"));
        self.ProgramUniform1iv = @ptrCast(glProgramUniform1iv, try loader("glProgramUniform1iv"));
        self.ProgramUniform1ivEXT = @ptrCast(glProgramUniform1ivEXT, try loader("glProgramUniform1ivEXT"));
        self.ProgramUniform1ui = @ptrCast(glProgramUniform1ui, try loader("glProgramUniform1ui"));
        self.ProgramUniform1ui64ARB = @ptrCast(glProgramUniform1ui64ARB, try loader("glProgramUniform1ui64ARB"));
        self.ProgramUniform1ui64NV = @ptrCast(glProgramUniform1ui64NV, try loader("glProgramUniform1ui64NV"));
        self.ProgramUniform1ui64vARB = @ptrCast(glProgramUniform1ui64vARB, try loader("glProgramUniform1ui64vARB"));
        self.ProgramUniform1ui64vNV = @ptrCast(glProgramUniform1ui64vNV, try loader("glProgramUniform1ui64vNV"));
        self.ProgramUniform1uiEXT = @ptrCast(glProgramUniform1uiEXT, try loader("glProgramUniform1uiEXT"));
        self.ProgramUniform1uiv = @ptrCast(glProgramUniform1uiv, try loader("glProgramUniform1uiv"));
        self.ProgramUniform1uivEXT = @ptrCast(glProgramUniform1uivEXT, try loader("glProgramUniform1uivEXT"));
        self.ProgramUniform2d = @ptrCast(glProgramUniform2d, try loader("glProgramUniform2d"));
        self.ProgramUniform2dEXT = @ptrCast(glProgramUniform2dEXT, try loader("glProgramUniform2dEXT"));
        self.ProgramUniform2dv = @ptrCast(glProgramUniform2dv, try loader("glProgramUniform2dv"));
        self.ProgramUniform2dvEXT = @ptrCast(glProgramUniform2dvEXT, try loader("glProgramUniform2dvEXT"));
        self.ProgramUniform2f = @ptrCast(glProgramUniform2f, try loader("glProgramUniform2f"));
        self.ProgramUniform2fEXT = @ptrCast(glProgramUniform2fEXT, try loader("glProgramUniform2fEXT"));
        self.ProgramUniform2fv = @ptrCast(glProgramUniform2fv, try loader("glProgramUniform2fv"));
        self.ProgramUniform2fvEXT = @ptrCast(glProgramUniform2fvEXT, try loader("glProgramUniform2fvEXT"));
        self.ProgramUniform2i = @ptrCast(glProgramUniform2i, try loader("glProgramUniform2i"));
        self.ProgramUniform2i64ARB = @ptrCast(glProgramUniform2i64ARB, try loader("glProgramUniform2i64ARB"));
        self.ProgramUniform2i64NV = @ptrCast(glProgramUniform2i64NV, try loader("glProgramUniform2i64NV"));
        self.ProgramUniform2i64vARB = @ptrCast(glProgramUniform2i64vARB, try loader("glProgramUniform2i64vARB"));
        self.ProgramUniform2i64vNV = @ptrCast(glProgramUniform2i64vNV, try loader("glProgramUniform2i64vNV"));
        self.ProgramUniform2iEXT = @ptrCast(glProgramUniform2iEXT, try loader("glProgramUniform2iEXT"));
        self.ProgramUniform2iv = @ptrCast(glProgramUniform2iv, try loader("glProgramUniform2iv"));
        self.ProgramUniform2ivEXT = @ptrCast(glProgramUniform2ivEXT, try loader("glProgramUniform2ivEXT"));
        self.ProgramUniform2ui = @ptrCast(glProgramUniform2ui, try loader("glProgramUniform2ui"));
        self.ProgramUniform2ui64ARB = @ptrCast(glProgramUniform2ui64ARB, try loader("glProgramUniform2ui64ARB"));
        self.ProgramUniform2ui64NV = @ptrCast(glProgramUniform2ui64NV, try loader("glProgramUniform2ui64NV"));
        self.ProgramUniform2ui64vARB = @ptrCast(glProgramUniform2ui64vARB, try loader("glProgramUniform2ui64vARB"));
        self.ProgramUniform2ui64vNV = @ptrCast(glProgramUniform2ui64vNV, try loader("glProgramUniform2ui64vNV"));
        self.ProgramUniform2uiEXT = @ptrCast(glProgramUniform2uiEXT, try loader("glProgramUniform2uiEXT"));
        self.ProgramUniform2uiv = @ptrCast(glProgramUniform2uiv, try loader("glProgramUniform2uiv"));
        self.ProgramUniform2uivEXT = @ptrCast(glProgramUniform2uivEXT, try loader("glProgramUniform2uivEXT"));
        self.ProgramUniform3d = @ptrCast(glProgramUniform3d, try loader("glProgramUniform3d"));
        self.ProgramUniform3dEXT = @ptrCast(glProgramUniform3dEXT, try loader("glProgramUniform3dEXT"));
        self.ProgramUniform3dv = @ptrCast(glProgramUniform3dv, try loader("glProgramUniform3dv"));
        self.ProgramUniform3dvEXT = @ptrCast(glProgramUniform3dvEXT, try loader("glProgramUniform3dvEXT"));
        self.ProgramUniform3f = @ptrCast(glProgramUniform3f, try loader("glProgramUniform3f"));
        self.ProgramUniform3fEXT = @ptrCast(glProgramUniform3fEXT, try loader("glProgramUniform3fEXT"));
        self.ProgramUniform3fv = @ptrCast(glProgramUniform3fv, try loader("glProgramUniform3fv"));
        self.ProgramUniform3fvEXT = @ptrCast(glProgramUniform3fvEXT, try loader("glProgramUniform3fvEXT"));
        self.ProgramUniform3i = @ptrCast(glProgramUniform3i, try loader("glProgramUniform3i"));
        self.ProgramUniform3i64ARB = @ptrCast(glProgramUniform3i64ARB, try loader("glProgramUniform3i64ARB"));
        self.ProgramUniform3i64NV = @ptrCast(glProgramUniform3i64NV, try loader("glProgramUniform3i64NV"));
        self.ProgramUniform3i64vARB = @ptrCast(glProgramUniform3i64vARB, try loader("glProgramUniform3i64vARB"));
        self.ProgramUniform3i64vNV = @ptrCast(glProgramUniform3i64vNV, try loader("glProgramUniform3i64vNV"));
        self.ProgramUniform3iEXT = @ptrCast(glProgramUniform3iEXT, try loader("glProgramUniform3iEXT"));
        self.ProgramUniform3iv = @ptrCast(glProgramUniform3iv, try loader("glProgramUniform3iv"));
        self.ProgramUniform3ivEXT = @ptrCast(glProgramUniform3ivEXT, try loader("glProgramUniform3ivEXT"));
        self.ProgramUniform3ui = @ptrCast(glProgramUniform3ui, try loader("glProgramUniform3ui"));
        self.ProgramUniform3ui64ARB = @ptrCast(glProgramUniform3ui64ARB, try loader("glProgramUniform3ui64ARB"));
        self.ProgramUniform3ui64NV = @ptrCast(glProgramUniform3ui64NV, try loader("glProgramUniform3ui64NV"));
        self.ProgramUniform3ui64vARB = @ptrCast(glProgramUniform3ui64vARB, try loader("glProgramUniform3ui64vARB"));
        self.ProgramUniform3ui64vNV = @ptrCast(glProgramUniform3ui64vNV, try loader("glProgramUniform3ui64vNV"));
        self.ProgramUniform3uiEXT = @ptrCast(glProgramUniform3uiEXT, try loader("glProgramUniform3uiEXT"));
        self.ProgramUniform3uiv = @ptrCast(glProgramUniform3uiv, try loader("glProgramUniform3uiv"));
        self.ProgramUniform3uivEXT = @ptrCast(glProgramUniform3uivEXT, try loader("glProgramUniform3uivEXT"));
        self.ProgramUniform4d = @ptrCast(glProgramUniform4d, try loader("glProgramUniform4d"));
        self.ProgramUniform4dEXT = @ptrCast(glProgramUniform4dEXT, try loader("glProgramUniform4dEXT"));
        self.ProgramUniform4dv = @ptrCast(glProgramUniform4dv, try loader("glProgramUniform4dv"));
        self.ProgramUniform4dvEXT = @ptrCast(glProgramUniform4dvEXT, try loader("glProgramUniform4dvEXT"));
        self.ProgramUniform4f = @ptrCast(glProgramUniform4f, try loader("glProgramUniform4f"));
        self.ProgramUniform4fEXT = @ptrCast(glProgramUniform4fEXT, try loader("glProgramUniform4fEXT"));
        self.ProgramUniform4fv = @ptrCast(glProgramUniform4fv, try loader("glProgramUniform4fv"));
        self.ProgramUniform4fvEXT = @ptrCast(glProgramUniform4fvEXT, try loader("glProgramUniform4fvEXT"));
        self.ProgramUniform4i = @ptrCast(glProgramUniform4i, try loader("glProgramUniform4i"));
        self.ProgramUniform4i64ARB = @ptrCast(glProgramUniform4i64ARB, try loader("glProgramUniform4i64ARB"));
        self.ProgramUniform4i64NV = @ptrCast(glProgramUniform4i64NV, try loader("glProgramUniform4i64NV"));
        self.ProgramUniform4i64vARB = @ptrCast(glProgramUniform4i64vARB, try loader("glProgramUniform4i64vARB"));
        self.ProgramUniform4i64vNV = @ptrCast(glProgramUniform4i64vNV, try loader("glProgramUniform4i64vNV"));
        self.ProgramUniform4iEXT = @ptrCast(glProgramUniform4iEXT, try loader("glProgramUniform4iEXT"));
        self.ProgramUniform4iv = @ptrCast(glProgramUniform4iv, try loader("glProgramUniform4iv"));
        self.ProgramUniform4ivEXT = @ptrCast(glProgramUniform4ivEXT, try loader("glProgramUniform4ivEXT"));
        self.ProgramUniform4ui = @ptrCast(glProgramUniform4ui, try loader("glProgramUniform4ui"));
        self.ProgramUniform4ui64ARB = @ptrCast(glProgramUniform4ui64ARB, try loader("glProgramUniform4ui64ARB"));
        self.ProgramUniform4ui64NV = @ptrCast(glProgramUniform4ui64NV, try loader("glProgramUniform4ui64NV"));
        self.ProgramUniform4ui64vARB = @ptrCast(glProgramUniform4ui64vARB, try loader("glProgramUniform4ui64vARB"));
        self.ProgramUniform4ui64vNV = @ptrCast(glProgramUniform4ui64vNV, try loader("glProgramUniform4ui64vNV"));
        self.ProgramUniform4uiEXT = @ptrCast(glProgramUniform4uiEXT, try loader("glProgramUniform4uiEXT"));
        self.ProgramUniform4uiv = @ptrCast(glProgramUniform4uiv, try loader("glProgramUniform4uiv"));
        self.ProgramUniform4uivEXT = @ptrCast(glProgramUniform4uivEXT, try loader("glProgramUniform4uivEXT"));
        self.ProgramUniformHandleui64ARB = @ptrCast(glProgramUniformHandleui64ARB, try loader("glProgramUniformHandleui64ARB"));
        self.ProgramUniformHandleui64NV = @ptrCast(glProgramUniformHandleui64NV, try loader("glProgramUniformHandleui64NV"));
        self.ProgramUniformHandleui64vARB = @ptrCast(glProgramUniformHandleui64vARB, try loader("glProgramUniformHandleui64vARB"));
        self.ProgramUniformHandleui64vNV = @ptrCast(glProgramUniformHandleui64vNV, try loader("glProgramUniformHandleui64vNV"));
        self.ProgramUniformMatrix2dv = @ptrCast(glProgramUniformMatrix2dv, try loader("glProgramUniformMatrix2dv"));
        self.ProgramUniformMatrix2dvEXT = @ptrCast(glProgramUniformMatrix2dvEXT, try loader("glProgramUniformMatrix2dvEXT"));
        self.ProgramUniformMatrix2fv = @ptrCast(glProgramUniformMatrix2fv, try loader("glProgramUniformMatrix2fv"));
        self.ProgramUniformMatrix2fvEXT = @ptrCast(glProgramUniformMatrix2fvEXT, try loader("glProgramUniformMatrix2fvEXT"));
        self.ProgramUniformMatrix2x3dv = @ptrCast(glProgramUniformMatrix2x3dv, try loader("glProgramUniformMatrix2x3dv"));
        self.ProgramUniformMatrix2x3dvEXT = @ptrCast(glProgramUniformMatrix2x3dvEXT, try loader("glProgramUniformMatrix2x3dvEXT"));
        self.ProgramUniformMatrix2x3fv = @ptrCast(glProgramUniformMatrix2x3fv, try loader("glProgramUniformMatrix2x3fv"));
        self.ProgramUniformMatrix2x3fvEXT = @ptrCast(glProgramUniformMatrix2x3fvEXT, try loader("glProgramUniformMatrix2x3fvEXT"));
        self.ProgramUniformMatrix2x4dv = @ptrCast(glProgramUniformMatrix2x4dv, try loader("glProgramUniformMatrix2x4dv"));
        self.ProgramUniformMatrix2x4dvEXT = @ptrCast(glProgramUniformMatrix2x4dvEXT, try loader("glProgramUniformMatrix2x4dvEXT"));
        self.ProgramUniformMatrix2x4fv = @ptrCast(glProgramUniformMatrix2x4fv, try loader("glProgramUniformMatrix2x4fv"));
        self.ProgramUniformMatrix2x4fvEXT = @ptrCast(glProgramUniformMatrix2x4fvEXT, try loader("glProgramUniformMatrix2x4fvEXT"));
        self.ProgramUniformMatrix3dv = @ptrCast(glProgramUniformMatrix3dv, try loader("glProgramUniformMatrix3dv"));
        self.ProgramUniformMatrix3dvEXT = @ptrCast(glProgramUniformMatrix3dvEXT, try loader("glProgramUniformMatrix3dvEXT"));
        self.ProgramUniformMatrix3fv = @ptrCast(glProgramUniformMatrix3fv, try loader("glProgramUniformMatrix3fv"));
        self.ProgramUniformMatrix3fvEXT = @ptrCast(glProgramUniformMatrix3fvEXT, try loader("glProgramUniformMatrix3fvEXT"));
        self.ProgramUniformMatrix3x2dv = @ptrCast(glProgramUniformMatrix3x2dv, try loader("glProgramUniformMatrix3x2dv"));
        self.ProgramUniformMatrix3x2dvEXT = @ptrCast(glProgramUniformMatrix3x2dvEXT, try loader("glProgramUniformMatrix3x2dvEXT"));
        self.ProgramUniformMatrix3x2fv = @ptrCast(glProgramUniformMatrix3x2fv, try loader("glProgramUniformMatrix3x2fv"));
        self.ProgramUniformMatrix3x2fvEXT = @ptrCast(glProgramUniformMatrix3x2fvEXT, try loader("glProgramUniformMatrix3x2fvEXT"));
        self.ProgramUniformMatrix3x4dv = @ptrCast(glProgramUniformMatrix3x4dv, try loader("glProgramUniformMatrix3x4dv"));
        self.ProgramUniformMatrix3x4dvEXT = @ptrCast(glProgramUniformMatrix3x4dvEXT, try loader("glProgramUniformMatrix3x4dvEXT"));
        self.ProgramUniformMatrix3x4fv = @ptrCast(glProgramUniformMatrix3x4fv, try loader("glProgramUniformMatrix3x4fv"));
        self.ProgramUniformMatrix3x4fvEXT = @ptrCast(glProgramUniformMatrix3x4fvEXT, try loader("glProgramUniformMatrix3x4fvEXT"));
        self.ProgramUniformMatrix4dv = @ptrCast(glProgramUniformMatrix4dv, try loader("glProgramUniformMatrix4dv"));
        self.ProgramUniformMatrix4dvEXT = @ptrCast(glProgramUniformMatrix4dvEXT, try loader("glProgramUniformMatrix4dvEXT"));
        self.ProgramUniformMatrix4fv = @ptrCast(glProgramUniformMatrix4fv, try loader("glProgramUniformMatrix4fv"));
        self.ProgramUniformMatrix4fvEXT = @ptrCast(glProgramUniformMatrix4fvEXT, try loader("glProgramUniformMatrix4fvEXT"));
        self.ProgramUniformMatrix4x2dv = @ptrCast(glProgramUniformMatrix4x2dv, try loader("glProgramUniformMatrix4x2dv"));
        self.ProgramUniformMatrix4x2dvEXT = @ptrCast(glProgramUniformMatrix4x2dvEXT, try loader("glProgramUniformMatrix4x2dvEXT"));
        self.ProgramUniformMatrix4x2fv = @ptrCast(glProgramUniformMatrix4x2fv, try loader("glProgramUniformMatrix4x2fv"));
        self.ProgramUniformMatrix4x2fvEXT = @ptrCast(glProgramUniformMatrix4x2fvEXT, try loader("glProgramUniformMatrix4x2fvEXT"));
        self.ProgramUniformMatrix4x3dv = @ptrCast(glProgramUniformMatrix4x3dv, try loader("glProgramUniformMatrix4x3dv"));
        self.ProgramUniformMatrix4x3dvEXT = @ptrCast(glProgramUniformMatrix4x3dvEXT, try loader("glProgramUniformMatrix4x3dvEXT"));
        self.ProgramUniformMatrix4x3fv = @ptrCast(glProgramUniformMatrix4x3fv, try loader("glProgramUniformMatrix4x3fv"));
        self.ProgramUniformMatrix4x3fvEXT = @ptrCast(glProgramUniformMatrix4x3fvEXT, try loader("glProgramUniformMatrix4x3fvEXT"));
        self.ProgramUniformui64NV = @ptrCast(glProgramUniformui64NV, try loader("glProgramUniformui64NV"));
        self.ProgramUniformui64vNV = @ptrCast(glProgramUniformui64vNV, try loader("glProgramUniformui64vNV"));
        self.ProgramVertexLimitNV = @ptrCast(glProgramVertexLimitNV, try loader("glProgramVertexLimitNV"));
        self.ProvokingVertex = @ptrCast(glProvokingVertex, try loader("glProvokingVertex"));
        self.ProvokingVertexEXT = @ptrCast(glProvokingVertexEXT, try loader("glProvokingVertexEXT"));
        self.PushClientAttribDefaultEXT = @ptrCast(glPushClientAttribDefaultEXT, try loader("glPushClientAttribDefaultEXT"));
        self.PushDebugGroup = @ptrCast(glPushDebugGroup, try loader("glPushDebugGroup"));
        self.PushGroupMarkerEXT = @ptrCast(glPushGroupMarkerEXT, try loader("glPushGroupMarkerEXT"));
        self.QueryCounter = @ptrCast(glQueryCounter, try loader("glQueryCounter"));
        self.QueryMatrixxOES = @ptrCast(glQueryMatrixxOES, try loader("glQueryMatrixxOES"));
        self.QueryObjectParameteruiAMD = @ptrCast(glQueryObjectParameteruiAMD, try loader("glQueryObjectParameteruiAMD"));
        self.QueryResourceNV = @ptrCast(glQueryResourceNV, try loader("glQueryResourceNV"));
        self.QueryResourceTagNV = @ptrCast(glQueryResourceTagNV, try loader("glQueryResourceTagNV"));
        self.RasterPos2xOES = @ptrCast(glRasterPos2xOES, try loader("glRasterPos2xOES"));
        self.RasterPos2xvOES = @ptrCast(glRasterPos2xvOES, try loader("glRasterPos2xvOES"));
        self.RasterPos3xOES = @ptrCast(glRasterPos3xOES, try loader("glRasterPos3xOES"));
        self.RasterPos3xvOES = @ptrCast(glRasterPos3xvOES, try loader("glRasterPos3xvOES"));
        self.RasterPos4xOES = @ptrCast(glRasterPos4xOES, try loader("glRasterPos4xOES"));
        self.RasterPos4xvOES = @ptrCast(glRasterPos4xvOES, try loader("glRasterPos4xvOES"));
        self.RasterSamplesEXT = @ptrCast(glRasterSamplesEXT, try loader("glRasterSamplesEXT"));
        self.ReadBuffer = @ptrCast(glReadBuffer, try loader("glReadBuffer"));
        self.ReadInstrumentsSGIX = @ptrCast(glReadInstrumentsSGIX, try loader("glReadInstrumentsSGIX"));
        self.ReadPixels = @ptrCast(glReadPixels, try loader("glReadPixels"));
        self.ReadnPixels = @ptrCast(glReadnPixels, try loader("glReadnPixels"));
        self.ReadnPixelsARB = @ptrCast(glReadnPixelsARB, try loader("glReadnPixelsARB"));
        self.RectxOES = @ptrCast(glRectxOES, try loader("glRectxOES"));
        self.RectxvOES = @ptrCast(glRectxvOES, try loader("glRectxvOES"));
        self.ReferencePlaneSGIX = @ptrCast(glReferencePlaneSGIX, try loader("glReferencePlaneSGIX"));
        self.ReleaseKeyedMutexWin32EXT = @ptrCast(glReleaseKeyedMutexWin32EXT, try loader("glReleaseKeyedMutexWin32EXT"));
        self.ReleaseShaderCompiler = @ptrCast(glReleaseShaderCompiler, try loader("glReleaseShaderCompiler"));
        self.RenderGpuMaskNV = @ptrCast(glRenderGpuMaskNV, try loader("glRenderGpuMaskNV"));
        self.RenderbufferStorage = @ptrCast(glRenderbufferStorage, try loader("glRenderbufferStorage"));
        self.RenderbufferStorageEXT = @ptrCast(glRenderbufferStorageEXT, try loader("glRenderbufferStorageEXT"));
        self.RenderbufferStorageMultisample = @ptrCast(glRenderbufferStorageMultisample, try loader("glRenderbufferStorageMultisample"));
        self.RenderbufferStorageMultisampleAdvancedAMD = @ptrCast(glRenderbufferStorageMultisampleAdvancedAMD, try loader("glRenderbufferStorageMultisampleAdvancedAMD"));
        self.RenderbufferStorageMultisampleCoverageNV = @ptrCast(glRenderbufferStorageMultisampleCoverageNV, try loader("glRenderbufferStorageMultisampleCoverageNV"));
        self.RenderbufferStorageMultisampleEXT = @ptrCast(glRenderbufferStorageMultisampleEXT, try loader("glRenderbufferStorageMultisampleEXT"));
        self.ReplacementCodePointerSUN = @ptrCast(glReplacementCodePointerSUN, try loader("glReplacementCodePointerSUN"));
        self.ReplacementCodeubSUN = @ptrCast(glReplacementCodeubSUN, try loader("glReplacementCodeubSUN"));
        self.ReplacementCodeubvSUN = @ptrCast(glReplacementCodeubvSUN, try loader("glReplacementCodeubvSUN"));
        self.ReplacementCodeuiColor3fVertex3fSUN = @ptrCast(glReplacementCodeuiColor3fVertex3fSUN, try loader("glReplacementCodeuiColor3fVertex3fSUN"));
        self.ReplacementCodeuiColor3fVertex3fvSUN = @ptrCast(glReplacementCodeuiColor3fVertex3fvSUN, try loader("glReplacementCodeuiColor3fVertex3fvSUN"));
        self.ReplacementCodeuiColor4fNormal3fVertex3fSUN = @ptrCast(glReplacementCodeuiColor4fNormal3fVertex3fSUN, try loader("glReplacementCodeuiColor4fNormal3fVertex3fSUN"));
        self.ReplacementCodeuiColor4fNormal3fVertex3fvSUN = @ptrCast(glReplacementCodeuiColor4fNormal3fVertex3fvSUN, try loader("glReplacementCodeuiColor4fNormal3fVertex3fvSUN"));
        self.ReplacementCodeuiColor4ubVertex3fSUN = @ptrCast(glReplacementCodeuiColor4ubVertex3fSUN, try loader("glReplacementCodeuiColor4ubVertex3fSUN"));
        self.ReplacementCodeuiColor4ubVertex3fvSUN = @ptrCast(glReplacementCodeuiColor4ubVertex3fvSUN, try loader("glReplacementCodeuiColor4ubVertex3fvSUN"));
        self.ReplacementCodeuiNormal3fVertex3fSUN = @ptrCast(glReplacementCodeuiNormal3fVertex3fSUN, try loader("glReplacementCodeuiNormal3fVertex3fSUN"));
        self.ReplacementCodeuiNormal3fVertex3fvSUN = @ptrCast(glReplacementCodeuiNormal3fVertex3fvSUN, try loader("glReplacementCodeuiNormal3fVertex3fvSUN"));
        self.ReplacementCodeuiSUN = @ptrCast(glReplacementCodeuiSUN, try loader("glReplacementCodeuiSUN"));
        self.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = @ptrCast(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, try loader("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"));
        self.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = @ptrCast(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, try loader("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"));
        self.ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = @ptrCast(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, try loader("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"));
        self.ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = @ptrCast(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, try loader("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"));
        self.ReplacementCodeuiTexCoord2fVertex3fSUN = @ptrCast(glReplacementCodeuiTexCoord2fVertex3fSUN, try loader("glReplacementCodeuiTexCoord2fVertex3fSUN"));
        self.ReplacementCodeuiTexCoord2fVertex3fvSUN = @ptrCast(glReplacementCodeuiTexCoord2fVertex3fvSUN, try loader("glReplacementCodeuiTexCoord2fVertex3fvSUN"));
        self.ReplacementCodeuiVertex3fSUN = @ptrCast(glReplacementCodeuiVertex3fSUN, try loader("glReplacementCodeuiVertex3fSUN"));
        self.ReplacementCodeuiVertex3fvSUN = @ptrCast(glReplacementCodeuiVertex3fvSUN, try loader("glReplacementCodeuiVertex3fvSUN"));
        self.ReplacementCodeuivSUN = @ptrCast(glReplacementCodeuivSUN, try loader("glReplacementCodeuivSUN"));
        self.ReplacementCodeusSUN = @ptrCast(glReplacementCodeusSUN, try loader("glReplacementCodeusSUN"));
        self.ReplacementCodeusvSUN = @ptrCast(glReplacementCodeusvSUN, try loader("glReplacementCodeusvSUN"));
        self.RequestResidentProgramsNV = @ptrCast(glRequestResidentProgramsNV, try loader("glRequestResidentProgramsNV"));
        self.ResetHistogramEXT = @ptrCast(glResetHistogramEXT, try loader("glResetHistogramEXT"));
        self.ResetMemoryObjectParameterNV = @ptrCast(glResetMemoryObjectParameterNV, try loader("glResetMemoryObjectParameterNV"));
        self.ResetMinmaxEXT = @ptrCast(glResetMinmaxEXT, try loader("glResetMinmaxEXT"));
        self.ResizeBuffersMESA = @ptrCast(glResizeBuffersMESA, try loader("glResizeBuffersMESA"));
        self.ResolveDepthValuesNV = @ptrCast(glResolveDepthValuesNV, try loader("glResolveDepthValuesNV"));
        self.ResumeTransformFeedback = @ptrCast(glResumeTransformFeedback, try loader("glResumeTransformFeedback"));
        self.ResumeTransformFeedbackNV = @ptrCast(glResumeTransformFeedbackNV, try loader("glResumeTransformFeedbackNV"));
        self.RotatexOES = @ptrCast(glRotatexOES, try loader("glRotatexOES"));
        self.SampleCoverage = @ptrCast(glSampleCoverage, try loader("glSampleCoverage"));
        self.SampleCoverageARB = @ptrCast(glSampleCoverageARB, try loader("glSampleCoverageARB"));
        self.SampleMapATI = @ptrCast(glSampleMapATI, try loader("glSampleMapATI"));
        self.SampleMaskEXT = @ptrCast(glSampleMaskEXT, try loader("glSampleMaskEXT"));
        self.SampleMaskIndexedNV = @ptrCast(glSampleMaskIndexedNV, try loader("glSampleMaskIndexedNV"));
        self.SampleMaskSGIS = @ptrCast(glSampleMaskSGIS, try loader("glSampleMaskSGIS"));
        self.SampleMaski = @ptrCast(glSampleMaski, try loader("glSampleMaski"));
        self.SamplePatternEXT = @ptrCast(glSamplePatternEXT, try loader("glSamplePatternEXT"));
        self.SamplePatternSGIS = @ptrCast(glSamplePatternSGIS, try loader("glSamplePatternSGIS"));
        self.SamplerParameterIiv = @ptrCast(glSamplerParameterIiv, try loader("glSamplerParameterIiv"));
        self.SamplerParameterIuiv = @ptrCast(glSamplerParameterIuiv, try loader("glSamplerParameterIuiv"));
        self.SamplerParameterf = @ptrCast(glSamplerParameterf, try loader("glSamplerParameterf"));
        self.SamplerParameterfv = @ptrCast(glSamplerParameterfv, try loader("glSamplerParameterfv"));
        self.SamplerParameteri = @ptrCast(glSamplerParameteri, try loader("glSamplerParameteri"));
        self.SamplerParameteriv = @ptrCast(glSamplerParameteriv, try loader("glSamplerParameteriv"));
        self.ScalexOES = @ptrCast(glScalexOES, try loader("glScalexOES"));
        self.Scissor = @ptrCast(glScissor, try loader("glScissor"));
        self.ScissorArrayv = @ptrCast(glScissorArrayv, try loader("glScissorArrayv"));
        self.ScissorExclusiveArrayvNV = @ptrCast(glScissorExclusiveArrayvNV, try loader("glScissorExclusiveArrayvNV"));
        self.ScissorExclusiveNV = @ptrCast(glScissorExclusiveNV, try loader("glScissorExclusiveNV"));
        self.ScissorIndexed = @ptrCast(glScissorIndexed, try loader("glScissorIndexed"));
        self.ScissorIndexedv = @ptrCast(glScissorIndexedv, try loader("glScissorIndexedv"));
        self.SecondaryColor3bEXT = @ptrCast(glSecondaryColor3bEXT, try loader("glSecondaryColor3bEXT"));
        self.SecondaryColor3bvEXT = @ptrCast(glSecondaryColor3bvEXT, try loader("glSecondaryColor3bvEXT"));
        self.SecondaryColor3dEXT = @ptrCast(glSecondaryColor3dEXT, try loader("glSecondaryColor3dEXT"));
        self.SecondaryColor3dvEXT = @ptrCast(glSecondaryColor3dvEXT, try loader("glSecondaryColor3dvEXT"));
        self.SecondaryColor3fEXT = @ptrCast(glSecondaryColor3fEXT, try loader("glSecondaryColor3fEXT"));
        self.SecondaryColor3fvEXT = @ptrCast(glSecondaryColor3fvEXT, try loader("glSecondaryColor3fvEXT"));
        self.SecondaryColor3hNV = @ptrCast(glSecondaryColor3hNV, try loader("glSecondaryColor3hNV"));
        self.SecondaryColor3hvNV = @ptrCast(glSecondaryColor3hvNV, try loader("glSecondaryColor3hvNV"));
        self.SecondaryColor3iEXT = @ptrCast(glSecondaryColor3iEXT, try loader("glSecondaryColor3iEXT"));
        self.SecondaryColor3ivEXT = @ptrCast(glSecondaryColor3ivEXT, try loader("glSecondaryColor3ivEXT"));
        self.SecondaryColor3sEXT = @ptrCast(glSecondaryColor3sEXT, try loader("glSecondaryColor3sEXT"));
        self.SecondaryColor3svEXT = @ptrCast(glSecondaryColor3svEXT, try loader("glSecondaryColor3svEXT"));
        self.SecondaryColor3ubEXT = @ptrCast(glSecondaryColor3ubEXT, try loader("glSecondaryColor3ubEXT"));
        self.SecondaryColor3ubvEXT = @ptrCast(glSecondaryColor3ubvEXT, try loader("glSecondaryColor3ubvEXT"));
        self.SecondaryColor3uiEXT = @ptrCast(glSecondaryColor3uiEXT, try loader("glSecondaryColor3uiEXT"));
        self.SecondaryColor3uivEXT = @ptrCast(glSecondaryColor3uivEXT, try loader("glSecondaryColor3uivEXT"));
        self.SecondaryColor3usEXT = @ptrCast(glSecondaryColor3usEXT, try loader("glSecondaryColor3usEXT"));
        self.SecondaryColor3usvEXT = @ptrCast(glSecondaryColor3usvEXT, try loader("glSecondaryColor3usvEXT"));
        self.SecondaryColorFormatNV = @ptrCast(glSecondaryColorFormatNV, try loader("glSecondaryColorFormatNV"));
        self.SecondaryColorPointerEXT = @ptrCast(glSecondaryColorPointerEXT, try loader("glSecondaryColorPointerEXT"));
        self.SecondaryColorPointerListIBM = @ptrCast(glSecondaryColorPointerListIBM, try loader("glSecondaryColorPointerListIBM"));
        self.SelectPerfMonitorCountersAMD = @ptrCast(glSelectPerfMonitorCountersAMD, try loader("glSelectPerfMonitorCountersAMD"));
        self.SemaphoreParameterivNV = @ptrCast(glSemaphoreParameterivNV, try loader("glSemaphoreParameterivNV"));
        self.SemaphoreParameterui64vEXT = @ptrCast(glSemaphoreParameterui64vEXT, try loader("glSemaphoreParameterui64vEXT"));
        self.SeparableFilter2DEXT = @ptrCast(glSeparableFilter2DEXT, try loader("glSeparableFilter2DEXT"));
        self.SetFenceAPPLE = @ptrCast(glSetFenceAPPLE, try loader("glSetFenceAPPLE"));
        self.SetFenceNV = @ptrCast(glSetFenceNV, try loader("glSetFenceNV"));
        self.SetFragmentShaderConstantATI = @ptrCast(glSetFragmentShaderConstantATI, try loader("glSetFragmentShaderConstantATI"));
        self.SetInvariantEXT = @ptrCast(glSetInvariantEXT, try loader("glSetInvariantEXT"));
        self.SetLocalConstantEXT = @ptrCast(glSetLocalConstantEXT, try loader("glSetLocalConstantEXT"));
        self.SetMultisamplefvAMD = @ptrCast(glSetMultisamplefvAMD, try loader("glSetMultisamplefvAMD"));
        self.ShaderBinary = @ptrCast(glShaderBinary, try loader("glShaderBinary"));
        self.ShaderOp1EXT = @ptrCast(glShaderOp1EXT, try loader("glShaderOp1EXT"));
        self.ShaderOp2EXT = @ptrCast(glShaderOp2EXT, try loader("glShaderOp2EXT"));
        self.ShaderOp3EXT = @ptrCast(glShaderOp3EXT, try loader("glShaderOp3EXT"));
        self.ShaderSource = @ptrCast(glShaderSource, try loader("glShaderSource"));
        self.ShaderSourceARB = @ptrCast(glShaderSourceARB, try loader("glShaderSourceARB"));
        self.ShaderStorageBlockBinding = @ptrCast(glShaderStorageBlockBinding, try loader("glShaderStorageBlockBinding"));
        self.ShadingRateImageBarrierNV = @ptrCast(glShadingRateImageBarrierNV, try loader("glShadingRateImageBarrierNV"));
        self.ShadingRateImagePaletteNV = @ptrCast(glShadingRateImagePaletteNV, try loader("glShadingRateImagePaletteNV"));
        self.ShadingRateSampleOrderCustomNV = @ptrCast(glShadingRateSampleOrderCustomNV, try loader("glShadingRateSampleOrderCustomNV"));
        self.ShadingRateSampleOrderNV = @ptrCast(glShadingRateSampleOrderNV, try loader("glShadingRateSampleOrderNV"));
        self.SharpenTexFuncSGIS = @ptrCast(glSharpenTexFuncSGIS, try loader("glSharpenTexFuncSGIS"));
        self.SignalSemaphoreEXT = @ptrCast(glSignalSemaphoreEXT, try loader("glSignalSemaphoreEXT"));
        self.SignalSemaphoreui64NVX = @ptrCast(glSignalSemaphoreui64NVX, try loader("glSignalSemaphoreui64NVX"));
        self.SignalVkFenceNV = @ptrCast(glSignalVkFenceNV, try loader("glSignalVkFenceNV"));
        self.SignalVkSemaphoreNV = @ptrCast(glSignalVkSemaphoreNV, try loader("glSignalVkSemaphoreNV"));
        self.SpecializeShaderARB = @ptrCast(glSpecializeShaderARB, try loader("glSpecializeShaderARB"));
        self.SpriteParameterfSGIX = @ptrCast(glSpriteParameterfSGIX, try loader("glSpriteParameterfSGIX"));
        self.SpriteParameterfvSGIX = @ptrCast(glSpriteParameterfvSGIX, try loader("glSpriteParameterfvSGIX"));
        self.SpriteParameteriSGIX = @ptrCast(glSpriteParameteriSGIX, try loader("glSpriteParameteriSGIX"));
        self.SpriteParameterivSGIX = @ptrCast(glSpriteParameterivSGIX, try loader("glSpriteParameterivSGIX"));
        self.StartInstrumentsSGIX = @ptrCast(glStartInstrumentsSGIX, try loader("glStartInstrumentsSGIX"));
        self.StateCaptureNV = @ptrCast(glStateCaptureNV, try loader("glStateCaptureNV"));
        self.StencilClearTagEXT = @ptrCast(glStencilClearTagEXT, try loader("glStencilClearTagEXT"));
        self.StencilFillPathInstancedNV = @ptrCast(glStencilFillPathInstancedNV, try loader("glStencilFillPathInstancedNV"));
        self.StencilFillPathNV = @ptrCast(glStencilFillPathNV, try loader("glStencilFillPathNV"));
        self.StencilFunc = @ptrCast(glStencilFunc, try loader("glStencilFunc"));
        self.StencilFuncSeparate = @ptrCast(glStencilFuncSeparate, try loader("glStencilFuncSeparate"));
        self.StencilFuncSeparateATI = @ptrCast(glStencilFuncSeparateATI, try loader("glStencilFuncSeparateATI"));
        self.StencilMask = @ptrCast(glStencilMask, try loader("glStencilMask"));
        self.StencilMaskSeparate = @ptrCast(glStencilMaskSeparate, try loader("glStencilMaskSeparate"));
        self.StencilOp = @ptrCast(glStencilOp, try loader("glStencilOp"));
        self.StencilOpSeparate = @ptrCast(glStencilOpSeparate, try loader("glStencilOpSeparate"));
        self.StencilOpSeparateATI = @ptrCast(glStencilOpSeparateATI, try loader("glStencilOpSeparateATI"));
        self.StencilOpValueAMD = @ptrCast(glStencilOpValueAMD, try loader("glStencilOpValueAMD"));
        self.StencilStrokePathInstancedNV = @ptrCast(glStencilStrokePathInstancedNV, try loader("glStencilStrokePathInstancedNV"));
        self.StencilStrokePathNV = @ptrCast(glStencilStrokePathNV, try loader("glStencilStrokePathNV"));
        self.StencilThenCoverFillPathInstancedNV = @ptrCast(glStencilThenCoverFillPathInstancedNV, try loader("glStencilThenCoverFillPathInstancedNV"));
        self.StencilThenCoverFillPathNV = @ptrCast(glStencilThenCoverFillPathNV, try loader("glStencilThenCoverFillPathNV"));
        self.StencilThenCoverStrokePathInstancedNV = @ptrCast(glStencilThenCoverStrokePathInstancedNV, try loader("glStencilThenCoverStrokePathInstancedNV"));
        self.StencilThenCoverStrokePathNV = @ptrCast(glStencilThenCoverStrokePathNV, try loader("glStencilThenCoverStrokePathNV"));
        self.StopInstrumentsSGIX = @ptrCast(glStopInstrumentsSGIX, try loader("glStopInstrumentsSGIX"));
        self.StringMarkerGREMEDY = @ptrCast(glStringMarkerGREMEDY, try loader("glStringMarkerGREMEDY"));
        self.SubpixelPrecisionBiasNV = @ptrCast(glSubpixelPrecisionBiasNV, try loader("glSubpixelPrecisionBiasNV"));
        self.SwizzleEXT = @ptrCast(glSwizzleEXT, try loader("glSwizzleEXT"));
        self.SyncTextureINTEL = @ptrCast(glSyncTextureINTEL, try loader("glSyncTextureINTEL"));
        self.TagSampleBufferSGIX = @ptrCast(glTagSampleBufferSGIX, try loader("glTagSampleBufferSGIX"));
        self.Tangent3bEXT = @ptrCast(glTangent3bEXT, try loader("glTangent3bEXT"));
        self.Tangent3bvEXT = @ptrCast(glTangent3bvEXT, try loader("glTangent3bvEXT"));
        self.Tangent3dEXT = @ptrCast(glTangent3dEXT, try loader("glTangent3dEXT"));
        self.Tangent3dvEXT = @ptrCast(glTangent3dvEXT, try loader("glTangent3dvEXT"));
        self.Tangent3fEXT = @ptrCast(glTangent3fEXT, try loader("glTangent3fEXT"));
        self.Tangent3fvEXT = @ptrCast(glTangent3fvEXT, try loader("glTangent3fvEXT"));
        self.Tangent3iEXT = @ptrCast(glTangent3iEXT, try loader("glTangent3iEXT"));
        self.Tangent3ivEXT = @ptrCast(glTangent3ivEXT, try loader("glTangent3ivEXT"));
        self.Tangent3sEXT = @ptrCast(glTangent3sEXT, try loader("glTangent3sEXT"));
        self.Tangent3svEXT = @ptrCast(glTangent3svEXT, try loader("glTangent3svEXT"));
        self.TangentPointerEXT = @ptrCast(glTangentPointerEXT, try loader("glTangentPointerEXT"));
        self.TbufferMask3DFX = @ptrCast(glTbufferMask3DFX, try loader("glTbufferMask3DFX"));
        self.TessellationFactorAMD = @ptrCast(glTessellationFactorAMD, try loader("glTessellationFactorAMD"));
        self.TessellationModeAMD = @ptrCast(glTessellationModeAMD, try loader("glTessellationModeAMD"));
        self.TestFenceAPPLE = @ptrCast(glTestFenceAPPLE, try loader("glTestFenceAPPLE"));
        self.TestFenceNV = @ptrCast(glTestFenceNV, try loader("glTestFenceNV"));
        self.TestObjectAPPLE = @ptrCast(glTestObjectAPPLE, try loader("glTestObjectAPPLE"));
        self.TexAttachMemoryNV = @ptrCast(glTexAttachMemoryNV, try loader("glTexAttachMemoryNV"));
        self.TexBuffer = @ptrCast(glTexBuffer, try loader("glTexBuffer"));
        self.TexBufferARB = @ptrCast(glTexBufferARB, try loader("glTexBufferARB"));
        self.TexBufferEXT = @ptrCast(glTexBufferEXT, try loader("glTexBufferEXT"));
        self.TexBufferRange = @ptrCast(glTexBufferRange, try loader("glTexBufferRange"));
        self.TexBumpParameterfvATI = @ptrCast(glTexBumpParameterfvATI, try loader("glTexBumpParameterfvATI"));
        self.TexBumpParameterivATI = @ptrCast(glTexBumpParameterivATI, try loader("glTexBumpParameterivATI"));
        self.TexCoord1bOES = @ptrCast(glTexCoord1bOES, try loader("glTexCoord1bOES"));
        self.TexCoord1bvOES = @ptrCast(glTexCoord1bvOES, try loader("glTexCoord1bvOES"));
        self.TexCoord1hNV = @ptrCast(glTexCoord1hNV, try loader("glTexCoord1hNV"));
        self.TexCoord1hvNV = @ptrCast(glTexCoord1hvNV, try loader("glTexCoord1hvNV"));
        self.TexCoord1xOES = @ptrCast(glTexCoord1xOES, try loader("glTexCoord1xOES"));
        self.TexCoord1xvOES = @ptrCast(glTexCoord1xvOES, try loader("glTexCoord1xvOES"));
        self.TexCoord2bOES = @ptrCast(glTexCoord2bOES, try loader("glTexCoord2bOES"));
        self.TexCoord2bvOES = @ptrCast(glTexCoord2bvOES, try loader("glTexCoord2bvOES"));
        self.TexCoord2fColor3fVertex3fSUN = @ptrCast(glTexCoord2fColor3fVertex3fSUN, try loader("glTexCoord2fColor3fVertex3fSUN"));
        self.TexCoord2fColor3fVertex3fvSUN = @ptrCast(glTexCoord2fColor3fVertex3fvSUN, try loader("glTexCoord2fColor3fVertex3fvSUN"));
        self.TexCoord2fColor4fNormal3fVertex3fSUN = @ptrCast(glTexCoord2fColor4fNormal3fVertex3fSUN, try loader("glTexCoord2fColor4fNormal3fVertex3fSUN"));
        self.TexCoord2fColor4fNormal3fVertex3fvSUN = @ptrCast(glTexCoord2fColor4fNormal3fVertex3fvSUN, try loader("glTexCoord2fColor4fNormal3fVertex3fvSUN"));
        self.TexCoord2fColor4ubVertex3fSUN = @ptrCast(glTexCoord2fColor4ubVertex3fSUN, try loader("glTexCoord2fColor4ubVertex3fSUN"));
        self.TexCoord2fColor4ubVertex3fvSUN = @ptrCast(glTexCoord2fColor4ubVertex3fvSUN, try loader("glTexCoord2fColor4ubVertex3fvSUN"));
        self.TexCoord2fNormal3fVertex3fSUN = @ptrCast(glTexCoord2fNormal3fVertex3fSUN, try loader("glTexCoord2fNormal3fVertex3fSUN"));
        self.TexCoord2fNormal3fVertex3fvSUN = @ptrCast(glTexCoord2fNormal3fVertex3fvSUN, try loader("glTexCoord2fNormal3fVertex3fvSUN"));
        self.TexCoord2fVertex3fSUN = @ptrCast(glTexCoord2fVertex3fSUN, try loader("glTexCoord2fVertex3fSUN"));
        self.TexCoord2fVertex3fvSUN = @ptrCast(glTexCoord2fVertex3fvSUN, try loader("glTexCoord2fVertex3fvSUN"));
        self.TexCoord2hNV = @ptrCast(glTexCoord2hNV, try loader("glTexCoord2hNV"));
        self.TexCoord2hvNV = @ptrCast(glTexCoord2hvNV, try loader("glTexCoord2hvNV"));
        self.TexCoord2xOES = @ptrCast(glTexCoord2xOES, try loader("glTexCoord2xOES"));
        self.TexCoord2xvOES = @ptrCast(glTexCoord2xvOES, try loader("glTexCoord2xvOES"));
        self.TexCoord3bOES = @ptrCast(glTexCoord3bOES, try loader("glTexCoord3bOES"));
        self.TexCoord3bvOES = @ptrCast(glTexCoord3bvOES, try loader("glTexCoord3bvOES"));
        self.TexCoord3hNV = @ptrCast(glTexCoord3hNV, try loader("glTexCoord3hNV"));
        self.TexCoord3hvNV = @ptrCast(glTexCoord3hvNV, try loader("glTexCoord3hvNV"));
        self.TexCoord3xOES = @ptrCast(glTexCoord3xOES, try loader("glTexCoord3xOES"));
        self.TexCoord3xvOES = @ptrCast(glTexCoord3xvOES, try loader("glTexCoord3xvOES"));
        self.TexCoord4bOES = @ptrCast(glTexCoord4bOES, try loader("glTexCoord4bOES"));
        self.TexCoord4bvOES = @ptrCast(glTexCoord4bvOES, try loader("glTexCoord4bvOES"));
        self.TexCoord4fColor4fNormal3fVertex4fSUN = @ptrCast(glTexCoord4fColor4fNormal3fVertex4fSUN, try loader("glTexCoord4fColor4fNormal3fVertex4fSUN"));
        self.TexCoord4fColor4fNormal3fVertex4fvSUN = @ptrCast(glTexCoord4fColor4fNormal3fVertex4fvSUN, try loader("glTexCoord4fColor4fNormal3fVertex4fvSUN"));
        self.TexCoord4fVertex4fSUN = @ptrCast(glTexCoord4fVertex4fSUN, try loader("glTexCoord4fVertex4fSUN"));
        self.TexCoord4fVertex4fvSUN = @ptrCast(glTexCoord4fVertex4fvSUN, try loader("glTexCoord4fVertex4fvSUN"));
        self.TexCoord4hNV = @ptrCast(glTexCoord4hNV, try loader("glTexCoord4hNV"));
        self.TexCoord4hvNV = @ptrCast(glTexCoord4hvNV, try loader("glTexCoord4hvNV"));
        self.TexCoord4xOES = @ptrCast(glTexCoord4xOES, try loader("glTexCoord4xOES"));
        self.TexCoord4xvOES = @ptrCast(glTexCoord4xvOES, try loader("glTexCoord4xvOES"));
        self.TexCoordFormatNV = @ptrCast(glTexCoordFormatNV, try loader("glTexCoordFormatNV"));
        self.TexCoordPointerEXT = @ptrCast(glTexCoordPointerEXT, try loader("glTexCoordPointerEXT"));
        self.TexCoordPointerListIBM = @ptrCast(glTexCoordPointerListIBM, try loader("glTexCoordPointerListIBM"));
        self.TexCoordPointervINTEL = @ptrCast(glTexCoordPointervINTEL, try loader("glTexCoordPointervINTEL"));
        self.TexEnvxOES = @ptrCast(glTexEnvxOES, try loader("glTexEnvxOES"));
        self.TexEnvxvOES = @ptrCast(glTexEnvxvOES, try loader("glTexEnvxvOES"));
        self.TexFilterFuncSGIS = @ptrCast(glTexFilterFuncSGIS, try loader("glTexFilterFuncSGIS"));
        self.TexGenxOES = @ptrCast(glTexGenxOES, try loader("glTexGenxOES"));
        self.TexGenxvOES = @ptrCast(glTexGenxvOES, try loader("glTexGenxvOES"));
        self.TexImage1D = @ptrCast(glTexImage1D, try loader("glTexImage1D"));
        self.TexImage2D = @ptrCast(glTexImage2D, try loader("glTexImage2D"));
        self.TexImage2DMultisample = @ptrCast(glTexImage2DMultisample, try loader("glTexImage2DMultisample"));
        self.TexImage2DMultisampleCoverageNV = @ptrCast(glTexImage2DMultisampleCoverageNV, try loader("glTexImage2DMultisampleCoverageNV"));
        self.TexImage3D = @ptrCast(glTexImage3D, try loader("glTexImage3D"));
        self.TexImage3DEXT = @ptrCast(glTexImage3DEXT, try loader("glTexImage3DEXT"));
        self.TexImage3DMultisample = @ptrCast(glTexImage3DMultisample, try loader("glTexImage3DMultisample"));
        self.TexImage3DMultisampleCoverageNV = @ptrCast(glTexImage3DMultisampleCoverageNV, try loader("glTexImage3DMultisampleCoverageNV"));
        self.TexImage4DSGIS = @ptrCast(glTexImage4DSGIS, try loader("glTexImage4DSGIS"));
        self.TexPageCommitmentARB = @ptrCast(glTexPageCommitmentARB, try loader("glTexPageCommitmentARB"));
        self.TexPageCommitmentMemNV = @ptrCast(glTexPageCommitmentMemNV, try loader("glTexPageCommitmentMemNV"));
        self.TexParameterIiv = @ptrCast(glTexParameterIiv, try loader("glTexParameterIiv"));
        self.TexParameterIivEXT = @ptrCast(glTexParameterIivEXT, try loader("glTexParameterIivEXT"));
        self.TexParameterIuiv = @ptrCast(glTexParameterIuiv, try loader("glTexParameterIuiv"));
        self.TexParameterIuivEXT = @ptrCast(glTexParameterIuivEXT, try loader("glTexParameterIuivEXT"));
        self.TexParameterf = @ptrCast(glTexParameterf, try loader("glTexParameterf"));
        self.TexParameterfv = @ptrCast(glTexParameterfv, try loader("glTexParameterfv"));
        self.TexParameteri = @ptrCast(glTexParameteri, try loader("glTexParameteri"));
        self.TexParameteriv = @ptrCast(glTexParameteriv, try loader("glTexParameteriv"));
        self.TexParameterxOES = @ptrCast(glTexParameterxOES, try loader("glTexParameterxOES"));
        self.TexParameterxvOES = @ptrCast(glTexParameterxvOES, try loader("glTexParameterxvOES"));
        self.TexRenderbufferNV = @ptrCast(glTexRenderbufferNV, try loader("glTexRenderbufferNV"));
        self.TexStorage1D = @ptrCast(glTexStorage1D, try loader("glTexStorage1D"));
        self.TexStorage2D = @ptrCast(glTexStorage2D, try loader("glTexStorage2D"));
        self.TexStorage2DMultisample = @ptrCast(glTexStorage2DMultisample, try loader("glTexStorage2DMultisample"));
        self.TexStorage3D = @ptrCast(glTexStorage3D, try loader("glTexStorage3D"));
        self.TexStorage3DMultisample = @ptrCast(glTexStorage3DMultisample, try loader("glTexStorage3DMultisample"));
        self.TexStorageMem1DEXT = @ptrCast(glTexStorageMem1DEXT, try loader("glTexStorageMem1DEXT"));
        self.TexStorageMem2DEXT = @ptrCast(glTexStorageMem2DEXT, try loader("glTexStorageMem2DEXT"));
        self.TexStorageMem2DMultisampleEXT = @ptrCast(glTexStorageMem2DMultisampleEXT, try loader("glTexStorageMem2DMultisampleEXT"));
        self.TexStorageMem3DEXT = @ptrCast(glTexStorageMem3DEXT, try loader("glTexStorageMem3DEXT"));
        self.TexStorageMem3DMultisampleEXT = @ptrCast(glTexStorageMem3DMultisampleEXT, try loader("glTexStorageMem3DMultisampleEXT"));
        self.TexStorageSparseAMD = @ptrCast(glTexStorageSparseAMD, try loader("glTexStorageSparseAMD"));
        self.TexSubImage1D = @ptrCast(glTexSubImage1D, try loader("glTexSubImage1D"));
        self.TexSubImage1DEXT = @ptrCast(glTexSubImage1DEXT, try loader("glTexSubImage1DEXT"));
        self.TexSubImage2D = @ptrCast(glTexSubImage2D, try loader("glTexSubImage2D"));
        self.TexSubImage2DEXT = @ptrCast(glTexSubImage2DEXT, try loader("glTexSubImage2DEXT"));
        self.TexSubImage3D = @ptrCast(glTexSubImage3D, try loader("glTexSubImage3D"));
        self.TexSubImage3DEXT = @ptrCast(glTexSubImage3DEXT, try loader("glTexSubImage3DEXT"));
        self.TexSubImage4DSGIS = @ptrCast(glTexSubImage4DSGIS, try loader("glTexSubImage4DSGIS"));
        self.TextureAttachMemoryNV = @ptrCast(glTextureAttachMemoryNV, try loader("glTextureAttachMemoryNV"));
        self.TextureBarrier = @ptrCast(glTextureBarrier, try loader("glTextureBarrier"));
        self.TextureBarrierNV = @ptrCast(glTextureBarrierNV, try loader("glTextureBarrierNV"));
        self.TextureBuffer = @ptrCast(glTextureBuffer, try loader("glTextureBuffer"));
        self.TextureBufferEXT = @ptrCast(glTextureBufferEXT, try loader("glTextureBufferEXT"));
        self.TextureBufferRange = @ptrCast(glTextureBufferRange, try loader("glTextureBufferRange"));
        self.TextureBufferRangeEXT = @ptrCast(glTextureBufferRangeEXT, try loader("glTextureBufferRangeEXT"));
        self.TextureColorMaskSGIS = @ptrCast(glTextureColorMaskSGIS, try loader("glTextureColorMaskSGIS"));
        self.TextureImage1DEXT = @ptrCast(glTextureImage1DEXT, try loader("glTextureImage1DEXT"));
        self.TextureImage2DEXT = @ptrCast(glTextureImage2DEXT, try loader("glTextureImage2DEXT"));
        self.TextureImage2DMultisampleCoverageNV = @ptrCast(glTextureImage2DMultisampleCoverageNV, try loader("glTextureImage2DMultisampleCoverageNV"));
        self.TextureImage2DMultisampleNV = @ptrCast(glTextureImage2DMultisampleNV, try loader("glTextureImage2DMultisampleNV"));
        self.TextureImage3DEXT = @ptrCast(glTextureImage3DEXT, try loader("glTextureImage3DEXT"));
        self.TextureImage3DMultisampleCoverageNV = @ptrCast(glTextureImage3DMultisampleCoverageNV, try loader("glTextureImage3DMultisampleCoverageNV"));
        self.TextureImage3DMultisampleNV = @ptrCast(glTextureImage3DMultisampleNV, try loader("glTextureImage3DMultisampleNV"));
        self.TextureLightEXT = @ptrCast(glTextureLightEXT, try loader("glTextureLightEXT"));
        self.TextureMaterialEXT = @ptrCast(glTextureMaterialEXT, try loader("glTextureMaterialEXT"));
        self.TextureNormalEXT = @ptrCast(glTextureNormalEXT, try loader("glTextureNormalEXT"));
        self.TexturePageCommitmentEXT = @ptrCast(glTexturePageCommitmentEXT, try loader("glTexturePageCommitmentEXT"));
        self.TexturePageCommitmentMemNV = @ptrCast(glTexturePageCommitmentMemNV, try loader("glTexturePageCommitmentMemNV"));
        self.TextureParameterIiv = @ptrCast(glTextureParameterIiv, try loader("glTextureParameterIiv"));
        self.TextureParameterIivEXT = @ptrCast(glTextureParameterIivEXT, try loader("glTextureParameterIivEXT"));
        self.TextureParameterIuiv = @ptrCast(glTextureParameterIuiv, try loader("glTextureParameterIuiv"));
        self.TextureParameterIuivEXT = @ptrCast(glTextureParameterIuivEXT, try loader("glTextureParameterIuivEXT"));
        self.TextureParameterf = @ptrCast(glTextureParameterf, try loader("glTextureParameterf"));
        self.TextureParameterfEXT = @ptrCast(glTextureParameterfEXT, try loader("glTextureParameterfEXT"));
        self.TextureParameterfv = @ptrCast(glTextureParameterfv, try loader("glTextureParameterfv"));
        self.TextureParameterfvEXT = @ptrCast(glTextureParameterfvEXT, try loader("glTextureParameterfvEXT"));
        self.TextureParameteri = @ptrCast(glTextureParameteri, try loader("glTextureParameteri"));
        self.TextureParameteriEXT = @ptrCast(glTextureParameteriEXT, try loader("glTextureParameteriEXT"));
        self.TextureParameteriv = @ptrCast(glTextureParameteriv, try loader("glTextureParameteriv"));
        self.TextureParameterivEXT = @ptrCast(glTextureParameterivEXT, try loader("glTextureParameterivEXT"));
        self.TextureRangeAPPLE = @ptrCast(glTextureRangeAPPLE, try loader("glTextureRangeAPPLE"));
        self.TextureRenderbufferEXT = @ptrCast(glTextureRenderbufferEXT, try loader("glTextureRenderbufferEXT"));
        self.TextureStorage1D = @ptrCast(glTextureStorage1D, try loader("glTextureStorage1D"));
        self.TextureStorage1DEXT = @ptrCast(glTextureStorage1DEXT, try loader("glTextureStorage1DEXT"));
        self.TextureStorage2D = @ptrCast(glTextureStorage2D, try loader("glTextureStorage2D"));
        self.TextureStorage2DEXT = @ptrCast(glTextureStorage2DEXT, try loader("glTextureStorage2DEXT"));
        self.TextureStorage2DMultisample = @ptrCast(glTextureStorage2DMultisample, try loader("glTextureStorage2DMultisample"));
        self.TextureStorage2DMultisampleEXT = @ptrCast(glTextureStorage2DMultisampleEXT, try loader("glTextureStorage2DMultisampleEXT"));
        self.TextureStorage3D = @ptrCast(glTextureStorage3D, try loader("glTextureStorage3D"));
        self.TextureStorage3DEXT = @ptrCast(glTextureStorage3DEXT, try loader("glTextureStorage3DEXT"));
        self.TextureStorage3DMultisample = @ptrCast(glTextureStorage3DMultisample, try loader("glTextureStorage3DMultisample"));
        self.TextureStorage3DMultisampleEXT = @ptrCast(glTextureStorage3DMultisampleEXT, try loader("glTextureStorage3DMultisampleEXT"));
        self.TextureStorageMem1DEXT = @ptrCast(glTextureStorageMem1DEXT, try loader("glTextureStorageMem1DEXT"));
        self.TextureStorageMem2DEXT = @ptrCast(glTextureStorageMem2DEXT, try loader("glTextureStorageMem2DEXT"));
        self.TextureStorageMem2DMultisampleEXT = @ptrCast(glTextureStorageMem2DMultisampleEXT, try loader("glTextureStorageMem2DMultisampleEXT"));
        self.TextureStorageMem3DEXT = @ptrCast(glTextureStorageMem3DEXT, try loader("glTextureStorageMem3DEXT"));
        self.TextureStorageMem3DMultisampleEXT = @ptrCast(glTextureStorageMem3DMultisampleEXT, try loader("glTextureStorageMem3DMultisampleEXT"));
        self.TextureStorageSparseAMD = @ptrCast(glTextureStorageSparseAMD, try loader("glTextureStorageSparseAMD"));
        self.TextureSubImage1D = @ptrCast(glTextureSubImage1D, try loader("glTextureSubImage1D"));
        self.TextureSubImage1DEXT = @ptrCast(glTextureSubImage1DEXT, try loader("glTextureSubImage1DEXT"));
        self.TextureSubImage2D = @ptrCast(glTextureSubImage2D, try loader("glTextureSubImage2D"));
        self.TextureSubImage2DEXT = @ptrCast(glTextureSubImage2DEXT, try loader("glTextureSubImage2DEXT"));
        self.TextureSubImage3D = @ptrCast(glTextureSubImage3D, try loader("glTextureSubImage3D"));
        self.TextureSubImage3DEXT = @ptrCast(glTextureSubImage3DEXT, try loader("glTextureSubImage3DEXT"));
        self.TextureView = @ptrCast(glTextureView, try loader("glTextureView"));
        self.TrackMatrixNV = @ptrCast(glTrackMatrixNV, try loader("glTrackMatrixNV"));
        self.TransformFeedbackAttribsNV = @ptrCast(glTransformFeedbackAttribsNV, try loader("glTransformFeedbackAttribsNV"));
        self.TransformFeedbackBufferBase = @ptrCast(glTransformFeedbackBufferBase, try loader("glTransformFeedbackBufferBase"));
        self.TransformFeedbackBufferRange = @ptrCast(glTransformFeedbackBufferRange, try loader("glTransformFeedbackBufferRange"));
        self.TransformFeedbackStreamAttribsNV = @ptrCast(glTransformFeedbackStreamAttribsNV, try loader("glTransformFeedbackStreamAttribsNV"));
        self.TransformFeedbackVaryings = @ptrCast(glTransformFeedbackVaryings, try loader("glTransformFeedbackVaryings"));
        self.TransformFeedbackVaryingsEXT = @ptrCast(glTransformFeedbackVaryingsEXT, try loader("glTransformFeedbackVaryingsEXT"));
        self.TransformFeedbackVaryingsNV = @ptrCast(glTransformFeedbackVaryingsNV, try loader("glTransformFeedbackVaryingsNV"));
        self.TransformPathNV = @ptrCast(glTransformPathNV, try loader("glTransformPathNV"));
        self.TranslatexOES = @ptrCast(glTranslatexOES, try loader("glTranslatexOES"));
        self.Uniform1d = @ptrCast(glUniform1d, try loader("glUniform1d"));
        self.Uniform1dv = @ptrCast(glUniform1dv, try loader("glUniform1dv"));
        self.Uniform1f = @ptrCast(glUniform1f, try loader("glUniform1f"));
        self.Uniform1fARB = @ptrCast(glUniform1fARB, try loader("glUniform1fARB"));
        self.Uniform1fv = @ptrCast(glUniform1fv, try loader("glUniform1fv"));
        self.Uniform1fvARB = @ptrCast(glUniform1fvARB, try loader("glUniform1fvARB"));
        self.Uniform1i = @ptrCast(glUniform1i, try loader("glUniform1i"));
        self.Uniform1i64ARB = @ptrCast(glUniform1i64ARB, try loader("glUniform1i64ARB"));
        self.Uniform1i64NV = @ptrCast(glUniform1i64NV, try loader("glUniform1i64NV"));
        self.Uniform1i64vARB = @ptrCast(glUniform1i64vARB, try loader("glUniform1i64vARB"));
        self.Uniform1i64vNV = @ptrCast(glUniform1i64vNV, try loader("glUniform1i64vNV"));
        self.Uniform1iARB = @ptrCast(glUniform1iARB, try loader("glUniform1iARB"));
        self.Uniform1iv = @ptrCast(glUniform1iv, try loader("glUniform1iv"));
        self.Uniform1ivARB = @ptrCast(glUniform1ivARB, try loader("glUniform1ivARB"));
        self.Uniform1ui = @ptrCast(glUniform1ui, try loader("glUniform1ui"));
        self.Uniform1ui64ARB = @ptrCast(glUniform1ui64ARB, try loader("glUniform1ui64ARB"));
        self.Uniform1ui64NV = @ptrCast(glUniform1ui64NV, try loader("glUniform1ui64NV"));
        self.Uniform1ui64vARB = @ptrCast(glUniform1ui64vARB, try loader("glUniform1ui64vARB"));
        self.Uniform1ui64vNV = @ptrCast(glUniform1ui64vNV, try loader("glUniform1ui64vNV"));
        self.Uniform1uiEXT = @ptrCast(glUniform1uiEXT, try loader("glUniform1uiEXT"));
        self.Uniform1uiv = @ptrCast(glUniform1uiv, try loader("glUniform1uiv"));
        self.Uniform1uivEXT = @ptrCast(glUniform1uivEXT, try loader("glUniform1uivEXT"));
        self.Uniform2d = @ptrCast(glUniform2d, try loader("glUniform2d"));
        self.Uniform2dv = @ptrCast(glUniform2dv, try loader("glUniform2dv"));
        self.Uniform2f = @ptrCast(glUniform2f, try loader("glUniform2f"));
        self.Uniform2fARB = @ptrCast(glUniform2fARB, try loader("glUniform2fARB"));
        self.Uniform2fv = @ptrCast(glUniform2fv, try loader("glUniform2fv"));
        self.Uniform2fvARB = @ptrCast(glUniform2fvARB, try loader("glUniform2fvARB"));
        self.Uniform2i = @ptrCast(glUniform2i, try loader("glUniform2i"));
        self.Uniform2i64ARB = @ptrCast(glUniform2i64ARB, try loader("glUniform2i64ARB"));
        self.Uniform2i64NV = @ptrCast(glUniform2i64NV, try loader("glUniform2i64NV"));
        self.Uniform2i64vARB = @ptrCast(glUniform2i64vARB, try loader("glUniform2i64vARB"));
        self.Uniform2i64vNV = @ptrCast(glUniform2i64vNV, try loader("glUniform2i64vNV"));
        self.Uniform2iARB = @ptrCast(glUniform2iARB, try loader("glUniform2iARB"));
        self.Uniform2iv = @ptrCast(glUniform2iv, try loader("glUniform2iv"));
        self.Uniform2ivARB = @ptrCast(glUniform2ivARB, try loader("glUniform2ivARB"));
        self.Uniform2ui = @ptrCast(glUniform2ui, try loader("glUniform2ui"));
        self.Uniform2ui64ARB = @ptrCast(glUniform2ui64ARB, try loader("glUniform2ui64ARB"));
        self.Uniform2ui64NV = @ptrCast(glUniform2ui64NV, try loader("glUniform2ui64NV"));
        self.Uniform2ui64vARB = @ptrCast(glUniform2ui64vARB, try loader("glUniform2ui64vARB"));
        self.Uniform2ui64vNV = @ptrCast(glUniform2ui64vNV, try loader("glUniform2ui64vNV"));
        self.Uniform2uiEXT = @ptrCast(glUniform2uiEXT, try loader("glUniform2uiEXT"));
        self.Uniform2uiv = @ptrCast(glUniform2uiv, try loader("glUniform2uiv"));
        self.Uniform2uivEXT = @ptrCast(glUniform2uivEXT, try loader("glUniform2uivEXT"));
        self.Uniform3d = @ptrCast(glUniform3d, try loader("glUniform3d"));
        self.Uniform3dv = @ptrCast(glUniform3dv, try loader("glUniform3dv"));
        self.Uniform3f = @ptrCast(glUniform3f, try loader("glUniform3f"));
        self.Uniform3fARB = @ptrCast(glUniform3fARB, try loader("glUniform3fARB"));
        self.Uniform3fv = @ptrCast(glUniform3fv, try loader("glUniform3fv"));
        self.Uniform3fvARB = @ptrCast(glUniform3fvARB, try loader("glUniform3fvARB"));
        self.Uniform3i = @ptrCast(glUniform3i, try loader("glUniform3i"));
        self.Uniform3i64ARB = @ptrCast(glUniform3i64ARB, try loader("glUniform3i64ARB"));
        self.Uniform3i64NV = @ptrCast(glUniform3i64NV, try loader("glUniform3i64NV"));
        self.Uniform3i64vARB = @ptrCast(glUniform3i64vARB, try loader("glUniform3i64vARB"));
        self.Uniform3i64vNV = @ptrCast(glUniform3i64vNV, try loader("glUniform3i64vNV"));
        self.Uniform3iARB = @ptrCast(glUniform3iARB, try loader("glUniform3iARB"));
        self.Uniform3iv = @ptrCast(glUniform3iv, try loader("glUniform3iv"));
        self.Uniform3ivARB = @ptrCast(glUniform3ivARB, try loader("glUniform3ivARB"));
        self.Uniform3ui = @ptrCast(glUniform3ui, try loader("glUniform3ui"));
        self.Uniform3ui64ARB = @ptrCast(glUniform3ui64ARB, try loader("glUniform3ui64ARB"));
        self.Uniform3ui64NV = @ptrCast(glUniform3ui64NV, try loader("glUniform3ui64NV"));
        self.Uniform3ui64vARB = @ptrCast(glUniform3ui64vARB, try loader("glUniform3ui64vARB"));
        self.Uniform3ui64vNV = @ptrCast(glUniform3ui64vNV, try loader("glUniform3ui64vNV"));
        self.Uniform3uiEXT = @ptrCast(glUniform3uiEXT, try loader("glUniform3uiEXT"));
        self.Uniform3uiv = @ptrCast(glUniform3uiv, try loader("glUniform3uiv"));
        self.Uniform3uivEXT = @ptrCast(glUniform3uivEXT, try loader("glUniform3uivEXT"));
        self.Uniform4d = @ptrCast(glUniform4d, try loader("glUniform4d"));
        self.Uniform4dv = @ptrCast(glUniform4dv, try loader("glUniform4dv"));
        self.Uniform4f = @ptrCast(glUniform4f, try loader("glUniform4f"));
        self.Uniform4fARB = @ptrCast(glUniform4fARB, try loader("glUniform4fARB"));
        self.Uniform4fv = @ptrCast(glUniform4fv, try loader("glUniform4fv"));
        self.Uniform4fvARB = @ptrCast(glUniform4fvARB, try loader("glUniform4fvARB"));
        self.Uniform4i = @ptrCast(glUniform4i, try loader("glUniform4i"));
        self.Uniform4i64ARB = @ptrCast(glUniform4i64ARB, try loader("glUniform4i64ARB"));
        self.Uniform4i64NV = @ptrCast(glUniform4i64NV, try loader("glUniform4i64NV"));
        self.Uniform4i64vARB = @ptrCast(glUniform4i64vARB, try loader("glUniform4i64vARB"));
        self.Uniform4i64vNV = @ptrCast(glUniform4i64vNV, try loader("glUniform4i64vNV"));
        self.Uniform4iARB = @ptrCast(glUniform4iARB, try loader("glUniform4iARB"));
        self.Uniform4iv = @ptrCast(glUniform4iv, try loader("glUniform4iv"));
        self.Uniform4ivARB = @ptrCast(glUniform4ivARB, try loader("glUniform4ivARB"));
        self.Uniform4ui = @ptrCast(glUniform4ui, try loader("glUniform4ui"));
        self.Uniform4ui64ARB = @ptrCast(glUniform4ui64ARB, try loader("glUniform4ui64ARB"));
        self.Uniform4ui64NV = @ptrCast(glUniform4ui64NV, try loader("glUniform4ui64NV"));
        self.Uniform4ui64vARB = @ptrCast(glUniform4ui64vARB, try loader("glUniform4ui64vARB"));
        self.Uniform4ui64vNV = @ptrCast(glUniform4ui64vNV, try loader("glUniform4ui64vNV"));
        self.Uniform4uiEXT = @ptrCast(glUniform4uiEXT, try loader("glUniform4uiEXT"));
        self.Uniform4uiv = @ptrCast(glUniform4uiv, try loader("glUniform4uiv"));
        self.Uniform4uivEXT = @ptrCast(glUniform4uivEXT, try loader("glUniform4uivEXT"));
        self.UniformBlockBinding = @ptrCast(glUniformBlockBinding, try loader("glUniformBlockBinding"));
        self.UniformBufferEXT = @ptrCast(glUniformBufferEXT, try loader("glUniformBufferEXT"));
        self.UniformHandleui64ARB = @ptrCast(glUniformHandleui64ARB, try loader("glUniformHandleui64ARB"));
        self.UniformHandleui64NV = @ptrCast(glUniformHandleui64NV, try loader("glUniformHandleui64NV"));
        self.UniformHandleui64vARB = @ptrCast(glUniformHandleui64vARB, try loader("glUniformHandleui64vARB"));
        self.UniformHandleui64vNV = @ptrCast(glUniformHandleui64vNV, try loader("glUniformHandleui64vNV"));
        self.UniformMatrix2dv = @ptrCast(glUniformMatrix2dv, try loader("glUniformMatrix2dv"));
        self.UniformMatrix2fv = @ptrCast(glUniformMatrix2fv, try loader("glUniformMatrix2fv"));
        self.UniformMatrix2fvARB = @ptrCast(glUniformMatrix2fvARB, try loader("glUniformMatrix2fvARB"));
        self.UniformMatrix2x3dv = @ptrCast(glUniformMatrix2x3dv, try loader("glUniformMatrix2x3dv"));
        self.UniformMatrix2x3fv = @ptrCast(glUniformMatrix2x3fv, try loader("glUniformMatrix2x3fv"));
        self.UniformMatrix2x4dv = @ptrCast(glUniformMatrix2x4dv, try loader("glUniformMatrix2x4dv"));
        self.UniformMatrix2x4fv = @ptrCast(glUniformMatrix2x4fv, try loader("glUniformMatrix2x4fv"));
        self.UniformMatrix3dv = @ptrCast(glUniformMatrix3dv, try loader("glUniformMatrix3dv"));
        self.UniformMatrix3fv = @ptrCast(glUniformMatrix3fv, try loader("glUniformMatrix3fv"));
        self.UniformMatrix3fvARB = @ptrCast(glUniformMatrix3fvARB, try loader("glUniformMatrix3fvARB"));
        self.UniformMatrix3x2dv = @ptrCast(glUniformMatrix3x2dv, try loader("glUniformMatrix3x2dv"));
        self.UniformMatrix3x2fv = @ptrCast(glUniformMatrix3x2fv, try loader("glUniformMatrix3x2fv"));
        self.UniformMatrix3x4dv = @ptrCast(glUniformMatrix3x4dv, try loader("glUniformMatrix3x4dv"));
        self.UniformMatrix3x4fv = @ptrCast(glUniformMatrix3x4fv, try loader("glUniformMatrix3x4fv"));
        self.UniformMatrix4dv = @ptrCast(glUniformMatrix4dv, try loader("glUniformMatrix4dv"));
        self.UniformMatrix4fv = @ptrCast(glUniformMatrix4fv, try loader("glUniformMatrix4fv"));
        self.UniformMatrix4fvARB = @ptrCast(glUniformMatrix4fvARB, try loader("glUniformMatrix4fvARB"));
        self.UniformMatrix4x2dv = @ptrCast(glUniformMatrix4x2dv, try loader("glUniformMatrix4x2dv"));
        self.UniformMatrix4x2fv = @ptrCast(glUniformMatrix4x2fv, try loader("glUniformMatrix4x2fv"));
        self.UniformMatrix4x3dv = @ptrCast(glUniformMatrix4x3dv, try loader("glUniformMatrix4x3dv"));
        self.UniformMatrix4x3fv = @ptrCast(glUniformMatrix4x3fv, try loader("glUniformMatrix4x3fv"));
        self.UniformSubroutinesuiv = @ptrCast(glUniformSubroutinesuiv, try loader("glUniformSubroutinesuiv"));
        self.Uniformui64NV = @ptrCast(glUniformui64NV, try loader("glUniformui64NV"));
        self.Uniformui64vNV = @ptrCast(glUniformui64vNV, try loader("glUniformui64vNV"));
        self.UnlockArraysEXT = @ptrCast(glUnlockArraysEXT, try loader("glUnlockArraysEXT"));
        self.UnmapBuffer = @ptrCast(glUnmapBuffer, try loader("glUnmapBuffer"));
        self.UnmapBufferARB = @ptrCast(glUnmapBufferARB, try loader("glUnmapBufferARB"));
        self.UnmapNamedBuffer = @ptrCast(glUnmapNamedBuffer, try loader("glUnmapNamedBuffer"));
        self.UnmapNamedBufferEXT = @ptrCast(glUnmapNamedBufferEXT, try loader("glUnmapNamedBufferEXT"));
        self.UnmapObjectBufferATI = @ptrCast(glUnmapObjectBufferATI, try loader("glUnmapObjectBufferATI"));
        self.UnmapTexture2DINTEL = @ptrCast(glUnmapTexture2DINTEL, try loader("glUnmapTexture2DINTEL"));
        self.UpdateObjectBufferATI = @ptrCast(glUpdateObjectBufferATI, try loader("glUpdateObjectBufferATI"));
        self.UploadGpuMaskNVX = @ptrCast(glUploadGpuMaskNVX, try loader("glUploadGpuMaskNVX"));
        self.UseProgram = @ptrCast(glUseProgram, try loader("glUseProgram"));
        self.UseProgramObjectARB = @ptrCast(glUseProgramObjectARB, try loader("glUseProgramObjectARB"));
        self.UseProgramStages = @ptrCast(glUseProgramStages, try loader("glUseProgramStages"));
        self.UseShaderProgramEXT = @ptrCast(glUseShaderProgramEXT, try loader("glUseShaderProgramEXT"));
        self.VDPAUFiniNV = @ptrCast(glVDPAUFiniNV, try loader("glVDPAUFiniNV"));
        self.VDPAUGetSurfaceivNV = @ptrCast(glVDPAUGetSurfaceivNV, try loader("glVDPAUGetSurfaceivNV"));
        self.VDPAUInitNV = @ptrCast(glVDPAUInitNV, try loader("glVDPAUInitNV"));
        self.VDPAUIsSurfaceNV = @ptrCast(glVDPAUIsSurfaceNV, try loader("glVDPAUIsSurfaceNV"));
        self.VDPAUMapSurfacesNV = @ptrCast(glVDPAUMapSurfacesNV, try loader("glVDPAUMapSurfacesNV"));
        self.VDPAURegisterOutputSurfaceNV = @ptrCast(glVDPAURegisterOutputSurfaceNV, try loader("glVDPAURegisterOutputSurfaceNV"));
        self.VDPAURegisterVideoSurfaceNV = @ptrCast(glVDPAURegisterVideoSurfaceNV, try loader("glVDPAURegisterVideoSurfaceNV"));
        self.VDPAURegisterVideoSurfaceWithPictureStructureNV = @ptrCast(glVDPAURegisterVideoSurfaceWithPictureStructureNV, try loader("glVDPAURegisterVideoSurfaceWithPictureStructureNV"));
        self.VDPAUSurfaceAccessNV = @ptrCast(glVDPAUSurfaceAccessNV, try loader("glVDPAUSurfaceAccessNV"));
        self.VDPAUUnmapSurfacesNV = @ptrCast(glVDPAUUnmapSurfacesNV, try loader("glVDPAUUnmapSurfacesNV"));
        self.VDPAUUnregisterSurfaceNV = @ptrCast(glVDPAUUnregisterSurfaceNV, try loader("glVDPAUUnregisterSurfaceNV"));
        self.ValidateProgram = @ptrCast(glValidateProgram, try loader("glValidateProgram"));
        self.ValidateProgramARB = @ptrCast(glValidateProgramARB, try loader("glValidateProgramARB"));
        self.ValidateProgramPipeline = @ptrCast(glValidateProgramPipeline, try loader("glValidateProgramPipeline"));
        self.VariantArrayObjectATI = @ptrCast(glVariantArrayObjectATI, try loader("glVariantArrayObjectATI"));
        self.VariantPointerEXT = @ptrCast(glVariantPointerEXT, try loader("glVariantPointerEXT"));
        self.VariantbvEXT = @ptrCast(glVariantbvEXT, try loader("glVariantbvEXT"));
        self.VariantdvEXT = @ptrCast(glVariantdvEXT, try loader("glVariantdvEXT"));
        self.VariantfvEXT = @ptrCast(glVariantfvEXT, try loader("glVariantfvEXT"));
        self.VariantivEXT = @ptrCast(glVariantivEXT, try loader("glVariantivEXT"));
        self.VariantsvEXT = @ptrCast(glVariantsvEXT, try loader("glVariantsvEXT"));
        self.VariantubvEXT = @ptrCast(glVariantubvEXT, try loader("glVariantubvEXT"));
        self.VariantuivEXT = @ptrCast(glVariantuivEXT, try loader("glVariantuivEXT"));
        self.VariantusvEXT = @ptrCast(glVariantusvEXT, try loader("glVariantusvEXT"));
        self.Vertex2bOES = @ptrCast(glVertex2bOES, try loader("glVertex2bOES"));
        self.Vertex2bvOES = @ptrCast(glVertex2bvOES, try loader("glVertex2bvOES"));
        self.Vertex2hNV = @ptrCast(glVertex2hNV, try loader("glVertex2hNV"));
        self.Vertex2hvNV = @ptrCast(glVertex2hvNV, try loader("glVertex2hvNV"));
        self.Vertex2xOES = @ptrCast(glVertex2xOES, try loader("glVertex2xOES"));
        self.Vertex2xvOES = @ptrCast(glVertex2xvOES, try loader("glVertex2xvOES"));
        self.Vertex3bOES = @ptrCast(glVertex3bOES, try loader("glVertex3bOES"));
        self.Vertex3bvOES = @ptrCast(glVertex3bvOES, try loader("glVertex3bvOES"));
        self.Vertex3hNV = @ptrCast(glVertex3hNV, try loader("glVertex3hNV"));
        self.Vertex3hvNV = @ptrCast(glVertex3hvNV, try loader("glVertex3hvNV"));
        self.Vertex3xOES = @ptrCast(glVertex3xOES, try loader("glVertex3xOES"));
        self.Vertex3xvOES = @ptrCast(glVertex3xvOES, try loader("glVertex3xvOES"));
        self.Vertex4bOES = @ptrCast(glVertex4bOES, try loader("glVertex4bOES"));
        self.Vertex4bvOES = @ptrCast(glVertex4bvOES, try loader("glVertex4bvOES"));
        self.Vertex4hNV = @ptrCast(glVertex4hNV, try loader("glVertex4hNV"));
        self.Vertex4hvNV = @ptrCast(glVertex4hvNV, try loader("glVertex4hvNV"));
        self.Vertex4xOES = @ptrCast(glVertex4xOES, try loader("glVertex4xOES"));
        self.Vertex4xvOES = @ptrCast(glVertex4xvOES, try loader("glVertex4xvOES"));
        self.VertexArrayAttribBinding = @ptrCast(glVertexArrayAttribBinding, try loader("glVertexArrayAttribBinding"));
        self.VertexArrayAttribFormat = @ptrCast(glVertexArrayAttribFormat, try loader("glVertexArrayAttribFormat"));
        self.VertexArrayAttribIFormat = @ptrCast(glVertexArrayAttribIFormat, try loader("glVertexArrayAttribIFormat"));
        self.VertexArrayAttribLFormat = @ptrCast(glVertexArrayAttribLFormat, try loader("glVertexArrayAttribLFormat"));
        self.VertexArrayBindVertexBufferEXT = @ptrCast(glVertexArrayBindVertexBufferEXT, try loader("glVertexArrayBindVertexBufferEXT"));
        self.VertexArrayBindingDivisor = @ptrCast(glVertexArrayBindingDivisor, try loader("glVertexArrayBindingDivisor"));
        self.VertexArrayColorOffsetEXT = @ptrCast(glVertexArrayColorOffsetEXT, try loader("glVertexArrayColorOffsetEXT"));
        self.VertexArrayEdgeFlagOffsetEXT = @ptrCast(glVertexArrayEdgeFlagOffsetEXT, try loader("glVertexArrayEdgeFlagOffsetEXT"));
        self.VertexArrayElementBuffer = @ptrCast(glVertexArrayElementBuffer, try loader("glVertexArrayElementBuffer"));
        self.VertexArrayFogCoordOffsetEXT = @ptrCast(glVertexArrayFogCoordOffsetEXT, try loader("glVertexArrayFogCoordOffsetEXT"));
        self.VertexArrayIndexOffsetEXT = @ptrCast(glVertexArrayIndexOffsetEXT, try loader("glVertexArrayIndexOffsetEXT"));
        self.VertexArrayMultiTexCoordOffsetEXT = @ptrCast(glVertexArrayMultiTexCoordOffsetEXT, try loader("glVertexArrayMultiTexCoordOffsetEXT"));
        self.VertexArrayNormalOffsetEXT = @ptrCast(glVertexArrayNormalOffsetEXT, try loader("glVertexArrayNormalOffsetEXT"));
        self.VertexArrayParameteriAPPLE = @ptrCast(glVertexArrayParameteriAPPLE, try loader("glVertexArrayParameteriAPPLE"));
        self.VertexArrayRangeAPPLE = @ptrCast(glVertexArrayRangeAPPLE, try loader("glVertexArrayRangeAPPLE"));
        self.VertexArrayRangeNV = @ptrCast(glVertexArrayRangeNV, try loader("glVertexArrayRangeNV"));
        self.VertexArraySecondaryColorOffsetEXT = @ptrCast(glVertexArraySecondaryColorOffsetEXT, try loader("glVertexArraySecondaryColorOffsetEXT"));
        self.VertexArrayTexCoordOffsetEXT = @ptrCast(glVertexArrayTexCoordOffsetEXT, try loader("glVertexArrayTexCoordOffsetEXT"));
        self.VertexArrayVertexAttribBindingEXT = @ptrCast(glVertexArrayVertexAttribBindingEXT, try loader("glVertexArrayVertexAttribBindingEXT"));
        self.VertexArrayVertexAttribDivisorEXT = @ptrCast(glVertexArrayVertexAttribDivisorEXT, try loader("glVertexArrayVertexAttribDivisorEXT"));
        self.VertexArrayVertexAttribFormatEXT = @ptrCast(glVertexArrayVertexAttribFormatEXT, try loader("glVertexArrayVertexAttribFormatEXT"));
        self.VertexArrayVertexAttribIFormatEXT = @ptrCast(glVertexArrayVertexAttribIFormatEXT, try loader("glVertexArrayVertexAttribIFormatEXT"));
        self.VertexArrayVertexAttribIOffsetEXT = @ptrCast(glVertexArrayVertexAttribIOffsetEXT, try loader("glVertexArrayVertexAttribIOffsetEXT"));
        self.VertexArrayVertexAttribLFormatEXT = @ptrCast(glVertexArrayVertexAttribLFormatEXT, try loader("glVertexArrayVertexAttribLFormatEXT"));
        self.VertexArrayVertexAttribLOffsetEXT = @ptrCast(glVertexArrayVertexAttribLOffsetEXT, try loader("glVertexArrayVertexAttribLOffsetEXT"));
        self.VertexArrayVertexAttribOffsetEXT = @ptrCast(glVertexArrayVertexAttribOffsetEXT, try loader("glVertexArrayVertexAttribOffsetEXT"));
        self.VertexArrayVertexBindingDivisorEXT = @ptrCast(glVertexArrayVertexBindingDivisorEXT, try loader("glVertexArrayVertexBindingDivisorEXT"));
        self.VertexArrayVertexBuffer = @ptrCast(glVertexArrayVertexBuffer, try loader("glVertexArrayVertexBuffer"));
        self.VertexArrayVertexBuffers = @ptrCast(glVertexArrayVertexBuffers, try loader("glVertexArrayVertexBuffers"));
        self.VertexArrayVertexOffsetEXT = @ptrCast(glVertexArrayVertexOffsetEXT, try loader("glVertexArrayVertexOffsetEXT"));
        self.VertexAttrib1d = @ptrCast(glVertexAttrib1d, try loader("glVertexAttrib1d"));
        self.VertexAttrib1dARB = @ptrCast(glVertexAttrib1dARB, try loader("glVertexAttrib1dARB"));
        self.VertexAttrib1dNV = @ptrCast(glVertexAttrib1dNV, try loader("glVertexAttrib1dNV"));
        self.VertexAttrib1dv = @ptrCast(glVertexAttrib1dv, try loader("glVertexAttrib1dv"));
        self.VertexAttrib1dvARB = @ptrCast(glVertexAttrib1dvARB, try loader("glVertexAttrib1dvARB"));
        self.VertexAttrib1dvNV = @ptrCast(glVertexAttrib1dvNV, try loader("glVertexAttrib1dvNV"));
        self.VertexAttrib1f = @ptrCast(glVertexAttrib1f, try loader("glVertexAttrib1f"));
        self.VertexAttrib1fARB = @ptrCast(glVertexAttrib1fARB, try loader("glVertexAttrib1fARB"));
        self.VertexAttrib1fNV = @ptrCast(glVertexAttrib1fNV, try loader("glVertexAttrib1fNV"));
        self.VertexAttrib1fv = @ptrCast(glVertexAttrib1fv, try loader("glVertexAttrib1fv"));
        self.VertexAttrib1fvARB = @ptrCast(glVertexAttrib1fvARB, try loader("glVertexAttrib1fvARB"));
        self.VertexAttrib1fvNV = @ptrCast(glVertexAttrib1fvNV, try loader("glVertexAttrib1fvNV"));
        self.VertexAttrib1hNV = @ptrCast(glVertexAttrib1hNV, try loader("glVertexAttrib1hNV"));
        self.VertexAttrib1hvNV = @ptrCast(glVertexAttrib1hvNV, try loader("glVertexAttrib1hvNV"));
        self.VertexAttrib1s = @ptrCast(glVertexAttrib1s, try loader("glVertexAttrib1s"));
        self.VertexAttrib1sARB = @ptrCast(glVertexAttrib1sARB, try loader("glVertexAttrib1sARB"));
        self.VertexAttrib1sNV = @ptrCast(glVertexAttrib1sNV, try loader("glVertexAttrib1sNV"));
        self.VertexAttrib1sv = @ptrCast(glVertexAttrib1sv, try loader("glVertexAttrib1sv"));
        self.VertexAttrib1svARB = @ptrCast(glVertexAttrib1svARB, try loader("glVertexAttrib1svARB"));
        self.VertexAttrib1svNV = @ptrCast(glVertexAttrib1svNV, try loader("glVertexAttrib1svNV"));
        self.VertexAttrib2d = @ptrCast(glVertexAttrib2d, try loader("glVertexAttrib2d"));
        self.VertexAttrib2dARB = @ptrCast(glVertexAttrib2dARB, try loader("glVertexAttrib2dARB"));
        self.VertexAttrib2dNV = @ptrCast(glVertexAttrib2dNV, try loader("glVertexAttrib2dNV"));
        self.VertexAttrib2dv = @ptrCast(glVertexAttrib2dv, try loader("glVertexAttrib2dv"));
        self.VertexAttrib2dvARB = @ptrCast(glVertexAttrib2dvARB, try loader("glVertexAttrib2dvARB"));
        self.VertexAttrib2dvNV = @ptrCast(glVertexAttrib2dvNV, try loader("glVertexAttrib2dvNV"));
        self.VertexAttrib2f = @ptrCast(glVertexAttrib2f, try loader("glVertexAttrib2f"));
        self.VertexAttrib2fARB = @ptrCast(glVertexAttrib2fARB, try loader("glVertexAttrib2fARB"));
        self.VertexAttrib2fNV = @ptrCast(glVertexAttrib2fNV, try loader("glVertexAttrib2fNV"));
        self.VertexAttrib2fv = @ptrCast(glVertexAttrib2fv, try loader("glVertexAttrib2fv"));
        self.VertexAttrib2fvARB = @ptrCast(glVertexAttrib2fvARB, try loader("glVertexAttrib2fvARB"));
        self.VertexAttrib2fvNV = @ptrCast(glVertexAttrib2fvNV, try loader("glVertexAttrib2fvNV"));
        self.VertexAttrib2hNV = @ptrCast(glVertexAttrib2hNV, try loader("glVertexAttrib2hNV"));
        self.VertexAttrib2hvNV = @ptrCast(glVertexAttrib2hvNV, try loader("glVertexAttrib2hvNV"));
        self.VertexAttrib2s = @ptrCast(glVertexAttrib2s, try loader("glVertexAttrib2s"));
        self.VertexAttrib2sARB = @ptrCast(glVertexAttrib2sARB, try loader("glVertexAttrib2sARB"));
        self.VertexAttrib2sNV = @ptrCast(glVertexAttrib2sNV, try loader("glVertexAttrib2sNV"));
        self.VertexAttrib2sv = @ptrCast(glVertexAttrib2sv, try loader("glVertexAttrib2sv"));
        self.VertexAttrib2svARB = @ptrCast(glVertexAttrib2svARB, try loader("glVertexAttrib2svARB"));
        self.VertexAttrib2svNV = @ptrCast(glVertexAttrib2svNV, try loader("glVertexAttrib2svNV"));
        self.VertexAttrib3d = @ptrCast(glVertexAttrib3d, try loader("glVertexAttrib3d"));
        self.VertexAttrib3dARB = @ptrCast(glVertexAttrib3dARB, try loader("glVertexAttrib3dARB"));
        self.VertexAttrib3dNV = @ptrCast(glVertexAttrib3dNV, try loader("glVertexAttrib3dNV"));
        self.VertexAttrib3dv = @ptrCast(glVertexAttrib3dv, try loader("glVertexAttrib3dv"));
        self.VertexAttrib3dvARB = @ptrCast(glVertexAttrib3dvARB, try loader("glVertexAttrib3dvARB"));
        self.VertexAttrib3dvNV = @ptrCast(glVertexAttrib3dvNV, try loader("glVertexAttrib3dvNV"));
        self.VertexAttrib3f = @ptrCast(glVertexAttrib3f, try loader("glVertexAttrib3f"));
        self.VertexAttrib3fARB = @ptrCast(glVertexAttrib3fARB, try loader("glVertexAttrib3fARB"));
        self.VertexAttrib3fNV = @ptrCast(glVertexAttrib3fNV, try loader("glVertexAttrib3fNV"));
        self.VertexAttrib3fv = @ptrCast(glVertexAttrib3fv, try loader("glVertexAttrib3fv"));
        self.VertexAttrib3fvARB = @ptrCast(glVertexAttrib3fvARB, try loader("glVertexAttrib3fvARB"));
        self.VertexAttrib3fvNV = @ptrCast(glVertexAttrib3fvNV, try loader("glVertexAttrib3fvNV"));
        self.VertexAttrib3hNV = @ptrCast(glVertexAttrib3hNV, try loader("glVertexAttrib3hNV"));
        self.VertexAttrib3hvNV = @ptrCast(glVertexAttrib3hvNV, try loader("glVertexAttrib3hvNV"));
        self.VertexAttrib3s = @ptrCast(glVertexAttrib3s, try loader("glVertexAttrib3s"));
        self.VertexAttrib3sARB = @ptrCast(glVertexAttrib3sARB, try loader("glVertexAttrib3sARB"));
        self.VertexAttrib3sNV = @ptrCast(glVertexAttrib3sNV, try loader("glVertexAttrib3sNV"));
        self.VertexAttrib3sv = @ptrCast(glVertexAttrib3sv, try loader("glVertexAttrib3sv"));
        self.VertexAttrib3svARB = @ptrCast(glVertexAttrib3svARB, try loader("glVertexAttrib3svARB"));
        self.VertexAttrib3svNV = @ptrCast(glVertexAttrib3svNV, try loader("glVertexAttrib3svNV"));
        self.VertexAttrib4Nbv = @ptrCast(glVertexAttrib4Nbv, try loader("glVertexAttrib4Nbv"));
        self.VertexAttrib4NbvARB = @ptrCast(glVertexAttrib4NbvARB, try loader("glVertexAttrib4NbvARB"));
        self.VertexAttrib4Niv = @ptrCast(glVertexAttrib4Niv, try loader("glVertexAttrib4Niv"));
        self.VertexAttrib4NivARB = @ptrCast(glVertexAttrib4NivARB, try loader("glVertexAttrib4NivARB"));
        self.VertexAttrib4Nsv = @ptrCast(glVertexAttrib4Nsv, try loader("glVertexAttrib4Nsv"));
        self.VertexAttrib4NsvARB = @ptrCast(glVertexAttrib4NsvARB, try loader("glVertexAttrib4NsvARB"));
        self.VertexAttrib4Nub = @ptrCast(glVertexAttrib4Nub, try loader("glVertexAttrib4Nub"));
        self.VertexAttrib4NubARB = @ptrCast(glVertexAttrib4NubARB, try loader("glVertexAttrib4NubARB"));
        self.VertexAttrib4Nubv = @ptrCast(glVertexAttrib4Nubv, try loader("glVertexAttrib4Nubv"));
        self.VertexAttrib4NubvARB = @ptrCast(glVertexAttrib4NubvARB, try loader("glVertexAttrib4NubvARB"));
        self.VertexAttrib4Nuiv = @ptrCast(glVertexAttrib4Nuiv, try loader("glVertexAttrib4Nuiv"));
        self.VertexAttrib4NuivARB = @ptrCast(glVertexAttrib4NuivARB, try loader("glVertexAttrib4NuivARB"));
        self.VertexAttrib4Nusv = @ptrCast(glVertexAttrib4Nusv, try loader("glVertexAttrib4Nusv"));
        self.VertexAttrib4NusvARB = @ptrCast(glVertexAttrib4NusvARB, try loader("glVertexAttrib4NusvARB"));
        self.VertexAttrib4bv = @ptrCast(glVertexAttrib4bv, try loader("glVertexAttrib4bv"));
        self.VertexAttrib4bvARB = @ptrCast(glVertexAttrib4bvARB, try loader("glVertexAttrib4bvARB"));
        self.VertexAttrib4d = @ptrCast(glVertexAttrib4d, try loader("glVertexAttrib4d"));
        self.VertexAttrib4dARB = @ptrCast(glVertexAttrib4dARB, try loader("glVertexAttrib4dARB"));
        self.VertexAttrib4dNV = @ptrCast(glVertexAttrib4dNV, try loader("glVertexAttrib4dNV"));
        self.VertexAttrib4dv = @ptrCast(glVertexAttrib4dv, try loader("glVertexAttrib4dv"));
        self.VertexAttrib4dvARB = @ptrCast(glVertexAttrib4dvARB, try loader("glVertexAttrib4dvARB"));
        self.VertexAttrib4dvNV = @ptrCast(glVertexAttrib4dvNV, try loader("glVertexAttrib4dvNV"));
        self.VertexAttrib4f = @ptrCast(glVertexAttrib4f, try loader("glVertexAttrib4f"));
        self.VertexAttrib4fARB = @ptrCast(glVertexAttrib4fARB, try loader("glVertexAttrib4fARB"));
        self.VertexAttrib4fNV = @ptrCast(glVertexAttrib4fNV, try loader("glVertexAttrib4fNV"));
        self.VertexAttrib4fv = @ptrCast(glVertexAttrib4fv, try loader("glVertexAttrib4fv"));
        self.VertexAttrib4fvARB = @ptrCast(glVertexAttrib4fvARB, try loader("glVertexAttrib4fvARB"));
        self.VertexAttrib4fvNV = @ptrCast(glVertexAttrib4fvNV, try loader("glVertexAttrib4fvNV"));
        self.VertexAttrib4hNV = @ptrCast(glVertexAttrib4hNV, try loader("glVertexAttrib4hNV"));
        self.VertexAttrib4hvNV = @ptrCast(glVertexAttrib4hvNV, try loader("glVertexAttrib4hvNV"));
        self.VertexAttrib4iv = @ptrCast(glVertexAttrib4iv, try loader("glVertexAttrib4iv"));
        self.VertexAttrib4ivARB = @ptrCast(glVertexAttrib4ivARB, try loader("glVertexAttrib4ivARB"));
        self.VertexAttrib4s = @ptrCast(glVertexAttrib4s, try loader("glVertexAttrib4s"));
        self.VertexAttrib4sARB = @ptrCast(glVertexAttrib4sARB, try loader("glVertexAttrib4sARB"));
        self.VertexAttrib4sNV = @ptrCast(glVertexAttrib4sNV, try loader("glVertexAttrib4sNV"));
        self.VertexAttrib4sv = @ptrCast(glVertexAttrib4sv, try loader("glVertexAttrib4sv"));
        self.VertexAttrib4svARB = @ptrCast(glVertexAttrib4svARB, try loader("glVertexAttrib4svARB"));
        self.VertexAttrib4svNV = @ptrCast(glVertexAttrib4svNV, try loader("glVertexAttrib4svNV"));
        self.VertexAttrib4ubNV = @ptrCast(glVertexAttrib4ubNV, try loader("glVertexAttrib4ubNV"));
        self.VertexAttrib4ubv = @ptrCast(glVertexAttrib4ubv, try loader("glVertexAttrib4ubv"));
        self.VertexAttrib4ubvARB = @ptrCast(glVertexAttrib4ubvARB, try loader("glVertexAttrib4ubvARB"));
        self.VertexAttrib4ubvNV = @ptrCast(glVertexAttrib4ubvNV, try loader("glVertexAttrib4ubvNV"));
        self.VertexAttrib4uiv = @ptrCast(glVertexAttrib4uiv, try loader("glVertexAttrib4uiv"));
        self.VertexAttrib4uivARB = @ptrCast(glVertexAttrib4uivARB, try loader("glVertexAttrib4uivARB"));
        self.VertexAttrib4usv = @ptrCast(glVertexAttrib4usv, try loader("glVertexAttrib4usv"));
        self.VertexAttrib4usvARB = @ptrCast(glVertexAttrib4usvARB, try loader("glVertexAttrib4usvARB"));
        self.VertexAttribArrayObjectATI = @ptrCast(glVertexAttribArrayObjectATI, try loader("glVertexAttribArrayObjectATI"));
        self.VertexAttribBinding = @ptrCast(glVertexAttribBinding, try loader("glVertexAttribBinding"));
        self.VertexAttribDivisor = @ptrCast(glVertexAttribDivisor, try loader("glVertexAttribDivisor"));
        self.VertexAttribDivisorARB = @ptrCast(glVertexAttribDivisorARB, try loader("glVertexAttribDivisorARB"));
        self.VertexAttribFormat = @ptrCast(glVertexAttribFormat, try loader("glVertexAttribFormat"));
        self.VertexAttribFormatNV = @ptrCast(glVertexAttribFormatNV, try loader("glVertexAttribFormatNV"));
        self.VertexAttribI1i = @ptrCast(glVertexAttribI1i, try loader("glVertexAttribI1i"));
        self.VertexAttribI1iEXT = @ptrCast(glVertexAttribI1iEXT, try loader("glVertexAttribI1iEXT"));
        self.VertexAttribI1iv = @ptrCast(glVertexAttribI1iv, try loader("glVertexAttribI1iv"));
        self.VertexAttribI1ivEXT = @ptrCast(glVertexAttribI1ivEXT, try loader("glVertexAttribI1ivEXT"));
        self.VertexAttribI1ui = @ptrCast(glVertexAttribI1ui, try loader("glVertexAttribI1ui"));
        self.VertexAttribI1uiEXT = @ptrCast(glVertexAttribI1uiEXT, try loader("glVertexAttribI1uiEXT"));
        self.VertexAttribI1uiv = @ptrCast(glVertexAttribI1uiv, try loader("glVertexAttribI1uiv"));
        self.VertexAttribI1uivEXT = @ptrCast(glVertexAttribI1uivEXT, try loader("glVertexAttribI1uivEXT"));
        self.VertexAttribI2i = @ptrCast(glVertexAttribI2i, try loader("glVertexAttribI2i"));
        self.VertexAttribI2iEXT = @ptrCast(glVertexAttribI2iEXT, try loader("glVertexAttribI2iEXT"));
        self.VertexAttribI2iv = @ptrCast(glVertexAttribI2iv, try loader("glVertexAttribI2iv"));
        self.VertexAttribI2ivEXT = @ptrCast(glVertexAttribI2ivEXT, try loader("glVertexAttribI2ivEXT"));
        self.VertexAttribI2ui = @ptrCast(glVertexAttribI2ui, try loader("glVertexAttribI2ui"));
        self.VertexAttribI2uiEXT = @ptrCast(glVertexAttribI2uiEXT, try loader("glVertexAttribI2uiEXT"));
        self.VertexAttribI2uiv = @ptrCast(glVertexAttribI2uiv, try loader("glVertexAttribI2uiv"));
        self.VertexAttribI2uivEXT = @ptrCast(glVertexAttribI2uivEXT, try loader("glVertexAttribI2uivEXT"));
        self.VertexAttribI3i = @ptrCast(glVertexAttribI3i, try loader("glVertexAttribI3i"));
        self.VertexAttribI3iEXT = @ptrCast(glVertexAttribI3iEXT, try loader("glVertexAttribI3iEXT"));
        self.VertexAttribI3iv = @ptrCast(glVertexAttribI3iv, try loader("glVertexAttribI3iv"));
        self.VertexAttribI3ivEXT = @ptrCast(glVertexAttribI3ivEXT, try loader("glVertexAttribI3ivEXT"));
        self.VertexAttribI3ui = @ptrCast(glVertexAttribI3ui, try loader("glVertexAttribI3ui"));
        self.VertexAttribI3uiEXT = @ptrCast(glVertexAttribI3uiEXT, try loader("glVertexAttribI3uiEXT"));
        self.VertexAttribI3uiv = @ptrCast(glVertexAttribI3uiv, try loader("glVertexAttribI3uiv"));
        self.VertexAttribI3uivEXT = @ptrCast(glVertexAttribI3uivEXT, try loader("glVertexAttribI3uivEXT"));
        self.VertexAttribI4bv = @ptrCast(glVertexAttribI4bv, try loader("glVertexAttribI4bv"));
        self.VertexAttribI4bvEXT = @ptrCast(glVertexAttribI4bvEXT, try loader("glVertexAttribI4bvEXT"));
        self.VertexAttribI4i = @ptrCast(glVertexAttribI4i, try loader("glVertexAttribI4i"));
        self.VertexAttribI4iEXT = @ptrCast(glVertexAttribI4iEXT, try loader("glVertexAttribI4iEXT"));
        self.VertexAttribI4iv = @ptrCast(glVertexAttribI4iv, try loader("glVertexAttribI4iv"));
        self.VertexAttribI4ivEXT = @ptrCast(glVertexAttribI4ivEXT, try loader("glVertexAttribI4ivEXT"));
        self.VertexAttribI4sv = @ptrCast(glVertexAttribI4sv, try loader("glVertexAttribI4sv"));
        self.VertexAttribI4svEXT = @ptrCast(glVertexAttribI4svEXT, try loader("glVertexAttribI4svEXT"));
        self.VertexAttribI4ubv = @ptrCast(glVertexAttribI4ubv, try loader("glVertexAttribI4ubv"));
        self.VertexAttribI4ubvEXT = @ptrCast(glVertexAttribI4ubvEXT, try loader("glVertexAttribI4ubvEXT"));
        self.VertexAttribI4ui = @ptrCast(glVertexAttribI4ui, try loader("glVertexAttribI4ui"));
        self.VertexAttribI4uiEXT = @ptrCast(glVertexAttribI4uiEXT, try loader("glVertexAttribI4uiEXT"));
        self.VertexAttribI4uiv = @ptrCast(glVertexAttribI4uiv, try loader("glVertexAttribI4uiv"));
        self.VertexAttribI4uivEXT = @ptrCast(glVertexAttribI4uivEXT, try loader("glVertexAttribI4uivEXT"));
        self.VertexAttribI4usv = @ptrCast(glVertexAttribI4usv, try loader("glVertexAttribI4usv"));
        self.VertexAttribI4usvEXT = @ptrCast(glVertexAttribI4usvEXT, try loader("glVertexAttribI4usvEXT"));
        self.VertexAttribIFormat = @ptrCast(glVertexAttribIFormat, try loader("glVertexAttribIFormat"));
        self.VertexAttribIFormatNV = @ptrCast(glVertexAttribIFormatNV, try loader("glVertexAttribIFormatNV"));
        self.VertexAttribIPointer = @ptrCast(glVertexAttribIPointer, try loader("glVertexAttribIPointer"));
        self.VertexAttribIPointerEXT = @ptrCast(glVertexAttribIPointerEXT, try loader("glVertexAttribIPointerEXT"));
        self.VertexAttribL1d = @ptrCast(glVertexAttribL1d, try loader("glVertexAttribL1d"));
        self.VertexAttribL1dEXT = @ptrCast(glVertexAttribL1dEXT, try loader("glVertexAttribL1dEXT"));
        self.VertexAttribL1dv = @ptrCast(glVertexAttribL1dv, try loader("glVertexAttribL1dv"));
        self.VertexAttribL1dvEXT = @ptrCast(glVertexAttribL1dvEXT, try loader("glVertexAttribL1dvEXT"));
        self.VertexAttribL1i64NV = @ptrCast(glVertexAttribL1i64NV, try loader("glVertexAttribL1i64NV"));
        self.VertexAttribL1i64vNV = @ptrCast(glVertexAttribL1i64vNV, try loader("glVertexAttribL1i64vNV"));
        self.VertexAttribL1ui64ARB = @ptrCast(glVertexAttribL1ui64ARB, try loader("glVertexAttribL1ui64ARB"));
        self.VertexAttribL1ui64NV = @ptrCast(glVertexAttribL1ui64NV, try loader("glVertexAttribL1ui64NV"));
        self.VertexAttribL1ui64vARB = @ptrCast(glVertexAttribL1ui64vARB, try loader("glVertexAttribL1ui64vARB"));
        self.VertexAttribL1ui64vNV = @ptrCast(glVertexAttribL1ui64vNV, try loader("glVertexAttribL1ui64vNV"));
        self.VertexAttribL2d = @ptrCast(glVertexAttribL2d, try loader("glVertexAttribL2d"));
        self.VertexAttribL2dEXT = @ptrCast(glVertexAttribL2dEXT, try loader("glVertexAttribL2dEXT"));
        self.VertexAttribL2dv = @ptrCast(glVertexAttribL2dv, try loader("glVertexAttribL2dv"));
        self.VertexAttribL2dvEXT = @ptrCast(glVertexAttribL2dvEXT, try loader("glVertexAttribL2dvEXT"));
        self.VertexAttribL2i64NV = @ptrCast(glVertexAttribL2i64NV, try loader("glVertexAttribL2i64NV"));
        self.VertexAttribL2i64vNV = @ptrCast(glVertexAttribL2i64vNV, try loader("glVertexAttribL2i64vNV"));
        self.VertexAttribL2ui64NV = @ptrCast(glVertexAttribL2ui64NV, try loader("glVertexAttribL2ui64NV"));
        self.VertexAttribL2ui64vNV = @ptrCast(glVertexAttribL2ui64vNV, try loader("glVertexAttribL2ui64vNV"));
        self.VertexAttribL3d = @ptrCast(glVertexAttribL3d, try loader("glVertexAttribL3d"));
        self.VertexAttribL3dEXT = @ptrCast(glVertexAttribL3dEXT, try loader("glVertexAttribL3dEXT"));
        self.VertexAttribL3dv = @ptrCast(glVertexAttribL3dv, try loader("glVertexAttribL3dv"));
        self.VertexAttribL3dvEXT = @ptrCast(glVertexAttribL3dvEXT, try loader("glVertexAttribL3dvEXT"));
        self.VertexAttribL3i64NV = @ptrCast(glVertexAttribL3i64NV, try loader("glVertexAttribL3i64NV"));
        self.VertexAttribL3i64vNV = @ptrCast(glVertexAttribL3i64vNV, try loader("glVertexAttribL3i64vNV"));
        self.VertexAttribL3ui64NV = @ptrCast(glVertexAttribL3ui64NV, try loader("glVertexAttribL3ui64NV"));
        self.VertexAttribL3ui64vNV = @ptrCast(glVertexAttribL3ui64vNV, try loader("glVertexAttribL3ui64vNV"));
        self.VertexAttribL4d = @ptrCast(glVertexAttribL4d, try loader("glVertexAttribL4d"));
        self.VertexAttribL4dEXT = @ptrCast(glVertexAttribL4dEXT, try loader("glVertexAttribL4dEXT"));
        self.VertexAttribL4dv = @ptrCast(glVertexAttribL4dv, try loader("glVertexAttribL4dv"));
        self.VertexAttribL4dvEXT = @ptrCast(glVertexAttribL4dvEXT, try loader("glVertexAttribL4dvEXT"));
        self.VertexAttribL4i64NV = @ptrCast(glVertexAttribL4i64NV, try loader("glVertexAttribL4i64NV"));
        self.VertexAttribL4i64vNV = @ptrCast(glVertexAttribL4i64vNV, try loader("glVertexAttribL4i64vNV"));
        self.VertexAttribL4ui64NV = @ptrCast(glVertexAttribL4ui64NV, try loader("glVertexAttribL4ui64NV"));
        self.VertexAttribL4ui64vNV = @ptrCast(glVertexAttribL4ui64vNV, try loader("glVertexAttribL4ui64vNV"));
        self.VertexAttribLFormat = @ptrCast(glVertexAttribLFormat, try loader("glVertexAttribLFormat"));
        self.VertexAttribLFormatNV = @ptrCast(glVertexAttribLFormatNV, try loader("glVertexAttribLFormatNV"));
        self.VertexAttribLPointer = @ptrCast(glVertexAttribLPointer, try loader("glVertexAttribLPointer"));
        self.VertexAttribLPointerEXT = @ptrCast(glVertexAttribLPointerEXT, try loader("glVertexAttribLPointerEXT"));
        self.VertexAttribP1ui = @ptrCast(glVertexAttribP1ui, try loader("glVertexAttribP1ui"));
        self.VertexAttribP1uiv = @ptrCast(glVertexAttribP1uiv, try loader("glVertexAttribP1uiv"));
        self.VertexAttribP2ui = @ptrCast(glVertexAttribP2ui, try loader("glVertexAttribP2ui"));
        self.VertexAttribP2uiv = @ptrCast(glVertexAttribP2uiv, try loader("glVertexAttribP2uiv"));
        self.VertexAttribP3ui = @ptrCast(glVertexAttribP3ui, try loader("glVertexAttribP3ui"));
        self.VertexAttribP3uiv = @ptrCast(glVertexAttribP3uiv, try loader("glVertexAttribP3uiv"));
        self.VertexAttribP4ui = @ptrCast(glVertexAttribP4ui, try loader("glVertexAttribP4ui"));
        self.VertexAttribP4uiv = @ptrCast(glVertexAttribP4uiv, try loader("glVertexAttribP4uiv"));
        self.VertexAttribParameteriAMD = @ptrCast(glVertexAttribParameteriAMD, try loader("glVertexAttribParameteriAMD"));
        self.VertexAttribPointer = @ptrCast(glVertexAttribPointer, try loader("glVertexAttribPointer"));
        self.VertexAttribPointerARB = @ptrCast(glVertexAttribPointerARB, try loader("glVertexAttribPointerARB"));
        self.VertexAttribPointerNV = @ptrCast(glVertexAttribPointerNV, try loader("glVertexAttribPointerNV"));
        self.VertexAttribs1dvNV = @ptrCast(glVertexAttribs1dvNV, try loader("glVertexAttribs1dvNV"));
        self.VertexAttribs1fvNV = @ptrCast(glVertexAttribs1fvNV, try loader("glVertexAttribs1fvNV"));
        self.VertexAttribs1hvNV = @ptrCast(glVertexAttribs1hvNV, try loader("glVertexAttribs1hvNV"));
        self.VertexAttribs1svNV = @ptrCast(glVertexAttribs1svNV, try loader("glVertexAttribs1svNV"));
        self.VertexAttribs2dvNV = @ptrCast(glVertexAttribs2dvNV, try loader("glVertexAttribs2dvNV"));
        self.VertexAttribs2fvNV = @ptrCast(glVertexAttribs2fvNV, try loader("glVertexAttribs2fvNV"));
        self.VertexAttribs2hvNV = @ptrCast(glVertexAttribs2hvNV, try loader("glVertexAttribs2hvNV"));
        self.VertexAttribs2svNV = @ptrCast(glVertexAttribs2svNV, try loader("glVertexAttribs2svNV"));
        self.VertexAttribs3dvNV = @ptrCast(glVertexAttribs3dvNV, try loader("glVertexAttribs3dvNV"));
        self.VertexAttribs3fvNV = @ptrCast(glVertexAttribs3fvNV, try loader("glVertexAttribs3fvNV"));
        self.VertexAttribs3hvNV = @ptrCast(glVertexAttribs3hvNV, try loader("glVertexAttribs3hvNV"));
        self.VertexAttribs3svNV = @ptrCast(glVertexAttribs3svNV, try loader("glVertexAttribs3svNV"));
        self.VertexAttribs4dvNV = @ptrCast(glVertexAttribs4dvNV, try loader("glVertexAttribs4dvNV"));
        self.VertexAttribs4fvNV = @ptrCast(glVertexAttribs4fvNV, try loader("glVertexAttribs4fvNV"));
        self.VertexAttribs4hvNV = @ptrCast(glVertexAttribs4hvNV, try loader("glVertexAttribs4hvNV"));
        self.VertexAttribs4svNV = @ptrCast(glVertexAttribs4svNV, try loader("glVertexAttribs4svNV"));
        self.VertexAttribs4ubvNV = @ptrCast(glVertexAttribs4ubvNV, try loader("glVertexAttribs4ubvNV"));
        self.VertexBindingDivisor = @ptrCast(glVertexBindingDivisor, try loader("glVertexBindingDivisor"));
        self.VertexBlendARB = @ptrCast(glVertexBlendARB, try loader("glVertexBlendARB"));
        self.VertexBlendEnvfATI = @ptrCast(glVertexBlendEnvfATI, try loader("glVertexBlendEnvfATI"));
        self.VertexBlendEnviATI = @ptrCast(glVertexBlendEnviATI, try loader("glVertexBlendEnviATI"));
        self.VertexFormatNV = @ptrCast(glVertexFormatNV, try loader("glVertexFormatNV"));
        self.VertexPointerEXT = @ptrCast(glVertexPointerEXT, try loader("glVertexPointerEXT"));
        self.VertexPointerListIBM = @ptrCast(glVertexPointerListIBM, try loader("glVertexPointerListIBM"));
        self.VertexPointervINTEL = @ptrCast(glVertexPointervINTEL, try loader("glVertexPointervINTEL"));
        self.VertexStream1dATI = @ptrCast(glVertexStream1dATI, try loader("glVertexStream1dATI"));
        self.VertexStream1dvATI = @ptrCast(glVertexStream1dvATI, try loader("glVertexStream1dvATI"));
        self.VertexStream1fATI = @ptrCast(glVertexStream1fATI, try loader("glVertexStream1fATI"));
        self.VertexStream1fvATI = @ptrCast(glVertexStream1fvATI, try loader("glVertexStream1fvATI"));
        self.VertexStream1iATI = @ptrCast(glVertexStream1iATI, try loader("glVertexStream1iATI"));
        self.VertexStream1ivATI = @ptrCast(glVertexStream1ivATI, try loader("glVertexStream1ivATI"));
        self.VertexStream1sATI = @ptrCast(glVertexStream1sATI, try loader("glVertexStream1sATI"));
        self.VertexStream1svATI = @ptrCast(glVertexStream1svATI, try loader("glVertexStream1svATI"));
        self.VertexStream2dATI = @ptrCast(glVertexStream2dATI, try loader("glVertexStream2dATI"));
        self.VertexStream2dvATI = @ptrCast(glVertexStream2dvATI, try loader("glVertexStream2dvATI"));
        self.VertexStream2fATI = @ptrCast(glVertexStream2fATI, try loader("glVertexStream2fATI"));
        self.VertexStream2fvATI = @ptrCast(glVertexStream2fvATI, try loader("glVertexStream2fvATI"));
        self.VertexStream2iATI = @ptrCast(glVertexStream2iATI, try loader("glVertexStream2iATI"));
        self.VertexStream2ivATI = @ptrCast(glVertexStream2ivATI, try loader("glVertexStream2ivATI"));
        self.VertexStream2sATI = @ptrCast(glVertexStream2sATI, try loader("glVertexStream2sATI"));
        self.VertexStream2svATI = @ptrCast(glVertexStream2svATI, try loader("glVertexStream2svATI"));
        self.VertexStream3dATI = @ptrCast(glVertexStream3dATI, try loader("glVertexStream3dATI"));
        self.VertexStream3dvATI = @ptrCast(glVertexStream3dvATI, try loader("glVertexStream3dvATI"));
        self.VertexStream3fATI = @ptrCast(glVertexStream3fATI, try loader("glVertexStream3fATI"));
        self.VertexStream3fvATI = @ptrCast(glVertexStream3fvATI, try loader("glVertexStream3fvATI"));
        self.VertexStream3iATI = @ptrCast(glVertexStream3iATI, try loader("glVertexStream3iATI"));
        self.VertexStream3ivATI = @ptrCast(glVertexStream3ivATI, try loader("glVertexStream3ivATI"));
        self.VertexStream3sATI = @ptrCast(glVertexStream3sATI, try loader("glVertexStream3sATI"));
        self.VertexStream3svATI = @ptrCast(glVertexStream3svATI, try loader("glVertexStream3svATI"));
        self.VertexStream4dATI = @ptrCast(glVertexStream4dATI, try loader("glVertexStream4dATI"));
        self.VertexStream4dvATI = @ptrCast(glVertexStream4dvATI, try loader("glVertexStream4dvATI"));
        self.VertexStream4fATI = @ptrCast(glVertexStream4fATI, try loader("glVertexStream4fATI"));
        self.VertexStream4fvATI = @ptrCast(glVertexStream4fvATI, try loader("glVertexStream4fvATI"));
        self.VertexStream4iATI = @ptrCast(glVertexStream4iATI, try loader("glVertexStream4iATI"));
        self.VertexStream4ivATI = @ptrCast(glVertexStream4ivATI, try loader("glVertexStream4ivATI"));
        self.VertexStream4sATI = @ptrCast(glVertexStream4sATI, try loader("glVertexStream4sATI"));
        self.VertexStream4svATI = @ptrCast(glVertexStream4svATI, try loader("glVertexStream4svATI"));
        self.VertexWeightPointerEXT = @ptrCast(glVertexWeightPointerEXT, try loader("glVertexWeightPointerEXT"));
        self.VertexWeightfEXT = @ptrCast(glVertexWeightfEXT, try loader("glVertexWeightfEXT"));
        self.VertexWeightfvEXT = @ptrCast(glVertexWeightfvEXT, try loader("glVertexWeightfvEXT"));
        self.VertexWeighthNV = @ptrCast(glVertexWeighthNV, try loader("glVertexWeighthNV"));
        self.VertexWeighthvNV = @ptrCast(glVertexWeighthvNV, try loader("glVertexWeighthvNV"));
        self.VideoCaptureNV = @ptrCast(glVideoCaptureNV, try loader("glVideoCaptureNV"));
        self.VideoCaptureStreamParameterdvNV = @ptrCast(glVideoCaptureStreamParameterdvNV, try loader("glVideoCaptureStreamParameterdvNV"));
        self.VideoCaptureStreamParameterfvNV = @ptrCast(glVideoCaptureStreamParameterfvNV, try loader("glVideoCaptureStreamParameterfvNV"));
        self.VideoCaptureStreamParameterivNV = @ptrCast(glVideoCaptureStreamParameterivNV, try loader("glVideoCaptureStreamParameterivNV"));
        self.Viewport = @ptrCast(glViewport, try loader("glViewport"));
        self.ViewportArrayv = @ptrCast(glViewportArrayv, try loader("glViewportArrayv"));
        self.ViewportIndexedf = @ptrCast(glViewportIndexedf, try loader("glViewportIndexedf"));
        self.ViewportIndexedfv = @ptrCast(glViewportIndexedfv, try loader("glViewportIndexedfv"));
        self.ViewportPositionWScaleNV = @ptrCast(glViewportPositionWScaleNV, try loader("glViewportPositionWScaleNV"));
        self.ViewportSwizzleNV = @ptrCast(glViewportSwizzleNV, try loader("glViewportSwizzleNV"));
        self.WaitSemaphoreEXT = @ptrCast(glWaitSemaphoreEXT, try loader("glWaitSemaphoreEXT"));
        self.WaitSemaphoreui64NVX = @ptrCast(glWaitSemaphoreui64NVX, try loader("glWaitSemaphoreui64NVX"));
        self.WaitSync = @ptrCast(glWaitSync, try loader("glWaitSync"));
        self.WaitVkSemaphoreNV = @ptrCast(glWaitVkSemaphoreNV, try loader("glWaitVkSemaphoreNV"));
        self.WeightPathsNV = @ptrCast(glWeightPathsNV, try loader("glWeightPathsNV"));
        self.WeightPointerARB = @ptrCast(glWeightPointerARB, try loader("glWeightPointerARB"));
        self.WeightbvARB = @ptrCast(glWeightbvARB, try loader("glWeightbvARB"));
        self.WeightdvARB = @ptrCast(glWeightdvARB, try loader("glWeightdvARB"));
        self.WeightfvARB = @ptrCast(glWeightfvARB, try loader("glWeightfvARB"));
        self.WeightivARB = @ptrCast(glWeightivARB, try loader("glWeightivARB"));
        self.WeightsvARB = @ptrCast(glWeightsvARB, try loader("glWeightsvARB"));
        self.WeightubvARB = @ptrCast(glWeightubvARB, try loader("glWeightubvARB"));
        self.WeightuivARB = @ptrCast(glWeightuivARB, try loader("glWeightuivARB"));
        self.WeightusvARB = @ptrCast(glWeightusvARB, try loader("glWeightusvARB"));
        self.WindowPos2dARB = @ptrCast(glWindowPos2dARB, try loader("glWindowPos2dARB"));
        self.WindowPos2dMESA = @ptrCast(glWindowPos2dMESA, try loader("glWindowPos2dMESA"));
        self.WindowPos2dvARB = @ptrCast(glWindowPos2dvARB, try loader("glWindowPos2dvARB"));
        self.WindowPos2dvMESA = @ptrCast(glWindowPos2dvMESA, try loader("glWindowPos2dvMESA"));
        self.WindowPos2fARB = @ptrCast(glWindowPos2fARB, try loader("glWindowPos2fARB"));
        self.WindowPos2fMESA = @ptrCast(glWindowPos2fMESA, try loader("glWindowPos2fMESA"));
        self.WindowPos2fvARB = @ptrCast(glWindowPos2fvARB, try loader("glWindowPos2fvARB"));
        self.WindowPos2fvMESA = @ptrCast(glWindowPos2fvMESA, try loader("glWindowPos2fvMESA"));
        self.WindowPos2iARB = @ptrCast(glWindowPos2iARB, try loader("glWindowPos2iARB"));
        self.WindowPos2iMESA = @ptrCast(glWindowPos2iMESA, try loader("glWindowPos2iMESA"));
        self.WindowPos2ivARB = @ptrCast(glWindowPos2ivARB, try loader("glWindowPos2ivARB"));
        self.WindowPos2ivMESA = @ptrCast(glWindowPos2ivMESA, try loader("glWindowPos2ivMESA"));
        self.WindowPos2sARB = @ptrCast(glWindowPos2sARB, try loader("glWindowPos2sARB"));
        self.WindowPos2sMESA = @ptrCast(glWindowPos2sMESA, try loader("glWindowPos2sMESA"));
        self.WindowPos2svARB = @ptrCast(glWindowPos2svARB, try loader("glWindowPos2svARB"));
        self.WindowPos2svMESA = @ptrCast(glWindowPos2svMESA, try loader("glWindowPos2svMESA"));
        self.WindowPos3dARB = @ptrCast(glWindowPos3dARB, try loader("glWindowPos3dARB"));
        self.WindowPos3dMESA = @ptrCast(glWindowPos3dMESA, try loader("glWindowPos3dMESA"));
        self.WindowPos3dvARB = @ptrCast(glWindowPos3dvARB, try loader("glWindowPos3dvARB"));
        self.WindowPos3dvMESA = @ptrCast(glWindowPos3dvMESA, try loader("glWindowPos3dvMESA"));
        self.WindowPos3fARB = @ptrCast(glWindowPos3fARB, try loader("glWindowPos3fARB"));
        self.WindowPos3fMESA = @ptrCast(glWindowPos3fMESA, try loader("glWindowPos3fMESA"));
        self.WindowPos3fvARB = @ptrCast(glWindowPos3fvARB, try loader("glWindowPos3fvARB"));
        self.WindowPos3fvMESA = @ptrCast(glWindowPos3fvMESA, try loader("glWindowPos3fvMESA"));
        self.WindowPos3iARB = @ptrCast(glWindowPos3iARB, try loader("glWindowPos3iARB"));
        self.WindowPos3iMESA = @ptrCast(glWindowPos3iMESA, try loader("glWindowPos3iMESA"));
        self.WindowPos3ivARB = @ptrCast(glWindowPos3ivARB, try loader("glWindowPos3ivARB"));
        self.WindowPos3ivMESA = @ptrCast(glWindowPos3ivMESA, try loader("glWindowPos3ivMESA"));
        self.WindowPos3sARB = @ptrCast(glWindowPos3sARB, try loader("glWindowPos3sARB"));
        self.WindowPos3sMESA = @ptrCast(glWindowPos3sMESA, try loader("glWindowPos3sMESA"));
        self.WindowPos3svARB = @ptrCast(glWindowPos3svARB, try loader("glWindowPos3svARB"));
        self.WindowPos3svMESA = @ptrCast(glWindowPos3svMESA, try loader("glWindowPos3svMESA"));
        self.WindowPos4dMESA = @ptrCast(glWindowPos4dMESA, try loader("glWindowPos4dMESA"));
        self.WindowPos4dvMESA = @ptrCast(glWindowPos4dvMESA, try loader("glWindowPos4dvMESA"));
        self.WindowPos4fMESA = @ptrCast(glWindowPos4fMESA, try loader("glWindowPos4fMESA"));
        self.WindowPos4fvMESA = @ptrCast(glWindowPos4fvMESA, try loader("glWindowPos4fvMESA"));
        self.WindowPos4iMESA = @ptrCast(glWindowPos4iMESA, try loader("glWindowPos4iMESA"));
        self.WindowPos4ivMESA = @ptrCast(glWindowPos4ivMESA, try loader("glWindowPos4ivMESA"));
        self.WindowPos4sMESA = @ptrCast(glWindowPos4sMESA, try loader("glWindowPos4sMESA"));
        self.WindowPos4svMESA = @ptrCast(glWindowPos4svMESA, try loader("glWindowPos4svMESA"));
        self.WindowRectanglesEXT = @ptrCast(glWindowRectanglesEXT, try loader("glWindowRectanglesEXT"));
        self.WriteMaskEXT = @ptrCast(glWriteMaskEXT, try loader("glWriteMaskEXT"));
    }
};
