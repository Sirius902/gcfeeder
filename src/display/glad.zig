const std = @import("std");

const GLproc = fn () callconv(.C) void;

const GLvoid = c_void;

const GLbyte = i8;
const GLubyte = u8;
const GLchar = u8;
const GLboolean = u8;

const GLshort = i16;
const GLushort = u16;

const GLint = i32;
const GLuint = u32;
const GLint64 = i64;
const GLuint64 = u64;

const GLintptr = isize;
const GLsizeiptr = usize;
const GLintptrARB = isize;
const GLsizeiptrARB = usize;
const GLint64EXT = i64;
const GLuint64EXT = u64;

const GLsizei = u32;
const GLclampx = i32;
const GLfixed = i32;
const GLhalf = f16;
const GLhalfNV = f16;
const GLhalfARB = f16;

const GLenum = u32;
const GLbitfield = u32;

const GLfloat = f32;
const GLdouble = f64;
const GLclampf = f32;
const GLclampd = f64;

const GLcharARB = u8;

const GLhandleARB = if (std.builtin.os.tag == .macos) *c_void else GLuint;

const __GLsync = enum(GLenum) { _ };

const GLsync = *const __GLsync;

const _cl_context = enum(GLenum) { _ };

const _cl_event = enum(GLenum) { _ };

const GLvdpauSurfaceNV = GLintptr;
const GLeglClientBufferEXT = *const c_void;
const GLeglImageOES = *const c_void;

const GLDEBUGPROC = fn (
    source: GLenum,
    type_: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *c_void,
) callconv(.C) void;
const GLDEBUGPROCARB = fn (
    source: GLenum,
    type_: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *c_void,
) callconv(.C) void;
const GLDEBUGPROCKHR = fn (
    source: GLenum,
    type_: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *GLvoid,
) callconv(.C) void;
const GLDEBUGPROCAMD = fn (
    id: GLuint,
    category: GLenum,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *GLvoid,
) callconv(.C) void;
const GLVULKANPROCNV = fn () callconv(.C) void;

const glAccumxOES = fn (op: GLenum, value: GLfixed) callconv(.C) void;
const glAcquireKeyedMutexWin32EXT = fn (memory: GLuint, key: GLuint64, timeout: GLuint) callconv(.C) GLboolean;
const glActiveProgramEXT = fn (program: GLuint) callconv(.C) void;
const glActiveShaderProgram = fn (pipeline: GLuint, program: GLuint) callconv(.C) void;
const glActiveStencilFaceEXT = fn (face: GLenum) callconv(.C) void;
const glActiveTexture = fn (texture: GLenum) callconv(.C) void;
const glActiveTextureARB = fn (texture: GLenum) callconv(.C) void;
const glActiveVaryingNV = fn (program: GLuint, name: [*c]const GLchar) callconv(.C) void;
const glAlphaFragmentOp1ATI = fn (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) callconv(.C) void;
const glAlphaFragmentOp2ATI = fn (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) callconv(.C) void;
const glAlphaFragmentOp3ATI = fn (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) callconv(.C) void;
const glAlphaFuncxOES = fn (func: GLenum, ref: GLfixed) callconv(.C) void;
const glAlphaToCoverageDitherControlNV = fn (mode: GLenum) callconv(.C) void;
const glApplyFramebufferAttachmentCMAAINTEL = fn () callconv(.C) void;
const glApplyTextureEXT = fn (mode: GLenum) callconv(.C) void;
const glAreProgramsResidentNV = fn (n: GLsizei, programs: [*c]const GLuint, residences: [*c]GLboolean) callconv(.C) GLboolean;
const glAreTexturesResidentEXT = fn (n: GLsizei, textures: [*c]const GLuint, residences: [*c]GLboolean) callconv(.C) GLboolean;
const glArrayElementEXT = fn (i: GLint) callconv(.C) void;
const glArrayObjectATI = fn (array: GLenum, size: GLint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) callconv(.C) void;
const glAsyncCopyBufferSubDataNVX = fn (waitSemaphoreCount: GLsizei, waitSemaphoreArray: [*c]const GLuint, fenceValueArray: [*c]const GLuint64, readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr, signalSemaphoreCount: GLsizei, signalSemaphoreArray: [*c]const GLuint, signalValueArray: [*c]const GLuint64) callconv(.C) GLuint;
const glAsyncCopyImageSubDataNVX = fn (waitSemaphoreCount: GLsizei, waitSemaphoreArray: [*c]const GLuint, waitValueArray: [*c]const GLuint64, srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei, signalSemaphoreCount: GLsizei, signalSemaphoreArray: [*c]const GLuint, signalValueArray: [*c]const GLuint64) callconv(.C) GLuint;
const glAsyncMarkerSGIX = fn (marker: GLuint) callconv(.C) void;
const glAttachObjectARB = fn (containerObj: GLhandleARB, obj: GLhandleARB) callconv(.C) void;
const glAttachShader = fn (program: GLuint, shader: GLuint) callconv(.C) void;
const glBeginConditionalRender = fn (id: GLuint, mode: GLenum) callconv(.C) void;
const glBeginConditionalRenderNV = fn (id: GLuint, mode: GLenum) callconv(.C) void;
const glBeginConditionalRenderNVX = fn (id: GLuint) callconv(.C) void;
const glBeginFragmentShaderATI = fn () callconv(.C) void;
const glBeginOcclusionQueryNV = fn (id: GLuint) callconv(.C) void;
const glBeginPerfMonitorAMD = fn (monitor: GLuint) callconv(.C) void;
const glBeginPerfQueryINTEL = fn (queryHandle: GLuint) callconv(.C) void;
const glBeginQuery = fn (target: GLenum, id: GLuint) callconv(.C) void;
const glBeginQueryARB = fn (target: GLenum, id: GLuint) callconv(.C) void;
const glBeginQueryIndexed = fn (target: GLenum, index: GLuint, id: GLuint) callconv(.C) void;
const glBeginTransformFeedback = fn (primitiveMode: GLenum) callconv(.C) void;
const glBeginTransformFeedbackEXT = fn (primitiveMode: GLenum) callconv(.C) void;
const glBeginTransformFeedbackNV = fn (primitiveMode: GLenum) callconv(.C) void;
const glBeginVertexShaderEXT = fn () callconv(.C) void;
const glBeginVideoCaptureNV = fn (video_capture_slot: GLuint) callconv(.C) void;
const glBindAttribLocation = fn (program: GLuint, index: GLuint, name: [*c]const GLchar) callconv(.C) void;
const glBindAttribLocationARB = fn (programObj: GLhandleARB, index: GLuint, name: [*c]const GLcharARB) callconv(.C) void;
const glBindBuffer = fn (target: GLenum, buffer: GLuint) callconv(.C) void;
const glBindBufferARB = fn (target: GLenum, buffer: GLuint) callconv(.C) void;
const glBindBufferBase = fn (target: GLenum, index: GLuint, buffer: GLuint) callconv(.C) void;
const glBindBufferBaseEXT = fn (target: GLenum, index: GLuint, buffer: GLuint) callconv(.C) void;
const glBindBufferBaseNV = fn (target: GLenum, index: GLuint, buffer: GLuint) callconv(.C) void;
const glBindBufferOffsetEXT = fn (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) callconv(.C) void;
const glBindBufferOffsetNV = fn (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) callconv(.C) void;
const glBindBufferRange = fn (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glBindBufferRangeEXT = fn (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glBindBufferRangeNV = fn (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glBindBuffersBase = fn (target: GLenum, first: GLuint, count: GLsizei, buffers: [*c]const GLuint) callconv(.C) void;
const glBindBuffersRange = fn (target: GLenum, first: GLuint, count: GLsizei, buffers: [*c]const GLuint, offsets: [*c]const GLintptr, sizes: [*c]const GLsizeiptr) callconv(.C) void;
const glBindFragDataLocation = fn (program: GLuint, color: GLuint, name: [*c]const GLchar) callconv(.C) void;
const glBindFragDataLocationEXT = fn (program: GLuint, color: GLuint, name: [*c]const GLchar) callconv(.C) void;
const glBindFragDataLocationIndexed = fn (program: GLuint, colorNumber: GLuint, index: GLuint, name: [*c]const GLchar) callconv(.C) void;
const glBindFragmentShaderATI = fn (id: GLuint) callconv(.C) void;
const glBindFramebuffer = fn (target: GLenum, framebuffer: GLuint) callconv(.C) void;
const glBindFramebufferEXT = fn (target: GLenum, framebuffer: GLuint) callconv(.C) void;
const glBindImageTexture = fn (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) callconv(.C) void;
const glBindImageTextureEXT = fn (index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) callconv(.C) void;
const glBindImageTextures = fn (first: GLuint, count: GLsizei, textures: [*c]const GLuint) callconv(.C) void;
const glBindLightParameterEXT = fn (light: GLenum, value: GLenum) callconv(.C) GLuint;
const glBindMaterialParameterEXT = fn (face: GLenum, value: GLenum) callconv(.C) GLuint;
const glBindMultiTextureEXT = fn (texunit: GLenum, target: GLenum, texture: GLuint) callconv(.C) void;
const glBindParameterEXT = fn (value: GLenum) callconv(.C) GLuint;
const glBindProgramARB = fn (target: GLenum, program: GLuint) callconv(.C) void;
const glBindProgramNV = fn (target: GLenum, id: GLuint) callconv(.C) void;
const glBindProgramPipeline = fn (pipeline: GLuint) callconv(.C) void;
const glBindRenderbuffer = fn (target: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glBindRenderbufferEXT = fn (target: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glBindSampler = fn (unit: GLuint, sampler: GLuint) callconv(.C) void;
const glBindSamplers = fn (first: GLuint, count: GLsizei, samplers: [*c]const GLuint) callconv(.C) void;
const glBindShadingRateImageNV = fn (texture: GLuint) callconv(.C) void;
const glBindTexGenParameterEXT = fn (unit: GLenum, coord: GLenum, value: GLenum) callconv(.C) GLuint;
const glBindTexture = fn (target: GLenum, texture: GLuint) callconv(.C) void;
const glBindTextureEXT = fn (target: GLenum, texture: GLuint) callconv(.C) void;
const glBindTextureUnit = fn (unit: GLuint, texture: GLuint) callconv(.C) void;
const glBindTextureUnitParameterEXT = fn (unit: GLenum, value: GLenum) callconv(.C) GLuint;
const glBindTextures = fn (first: GLuint, count: GLsizei, textures: [*c]const GLuint) callconv(.C) void;
const glBindTransformFeedback = fn (target: GLenum, id: GLuint) callconv(.C) void;
const glBindTransformFeedbackNV = fn (target: GLenum, id: GLuint) callconv(.C) void;
const glBindVertexArray = fn (array: GLuint) callconv(.C) void;
const glBindVertexArrayAPPLE = fn (array: GLuint) callconv(.C) void;
const glBindVertexBuffer = fn (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) callconv(.C) void;
const glBindVertexBuffers = fn (first: GLuint, count: GLsizei, buffers: [*c]const GLuint, offsets: [*c]const GLintptr, strides: [*c]const GLsizei) callconv(.C) void;
const glBindVertexShaderEXT = fn (id: GLuint) callconv(.C) void;
const glBindVideoCaptureStreamBufferNV = fn (video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB) callconv(.C) void;
const glBindVideoCaptureStreamTextureNV = fn (video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) callconv(.C) void;
const glBinormal3bEXT = fn (bx: GLbyte, by: GLbyte, bz: GLbyte) callconv(.C) void;
const glBinormal3bvEXT = fn (v: [*c]const GLbyte) callconv(.C) void;
const glBinormal3dEXT = fn (bx: GLdouble, by: GLdouble, bz: GLdouble) callconv(.C) void;
const glBinormal3dvEXT = fn (v: [*c]const GLdouble) callconv(.C) void;
const glBinormal3fEXT = fn (bx: GLfloat, by: GLfloat, bz: GLfloat) callconv(.C) void;
const glBinormal3fvEXT = fn (v: [*c]const GLfloat) callconv(.C) void;
const glBinormal3iEXT = fn (bx: GLint, by: GLint, bz: GLint) callconv(.C) void;
const glBinormal3ivEXT = fn (v: [*c]const GLint) callconv(.C) void;
const glBinormal3sEXT = fn (bx: GLshort, by: GLshort, bz: GLshort) callconv(.C) void;
const glBinormal3svEXT = fn (v: [*c]const GLshort) callconv(.C) void;
const glBinormalPointerEXT = fn (type_: GLenum, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glBitmapxOES = fn (width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: [*c]const GLubyte) callconv(.C) void;
const glBlendBarrierKHR = fn () callconv(.C) void;
const glBlendBarrierNV = fn () callconv(.C) void;
const glBlendColor = fn (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) callconv(.C) void;
const glBlendColorEXT = fn (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) callconv(.C) void;
const glBlendColorxOES = fn (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) callconv(.C) void;
const glBlendEquation = fn (mode: GLenum) callconv(.C) void;
const glBlendEquationEXT = fn (mode: GLenum) callconv(.C) void;
const glBlendEquationIndexedAMD = fn (buf: GLuint, mode: GLenum) callconv(.C) void;
const glBlendEquationSeparate = fn (modeRGB: GLenum, modeAlpha: GLenum) callconv(.C) void;
const glBlendEquationSeparateEXT = fn (modeRGB: GLenum, modeAlpha: GLenum) callconv(.C) void;
const glBlendEquationSeparateIndexedAMD = fn (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) callconv(.C) void;
const glBlendEquationSeparateiARB = fn (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) callconv(.C) void;
const glBlendEquationiARB = fn (buf: GLuint, mode: GLenum) callconv(.C) void;
const glBlendFunc = fn (sfactor: GLenum, dfactor: GLenum) callconv(.C) void;
const glBlendFuncIndexedAMD = fn (buf: GLuint, src: GLenum, dst: GLenum) callconv(.C) void;
const glBlendFuncSeparate = fn (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) callconv(.C) void;
const glBlendFuncSeparateEXT = fn (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) callconv(.C) void;
const glBlendFuncSeparateINGR = fn (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) callconv(.C) void;
const glBlendFuncSeparateIndexedAMD = fn (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) callconv(.C) void;
const glBlendFuncSeparateiARB = fn (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) callconv(.C) void;
const glBlendFunciARB = fn (buf: GLuint, src: GLenum, dst: GLenum) callconv(.C) void;
const glBlendParameteriNV = fn (pname: GLenum, value: GLint) callconv(.C) void;
const glBlitFramebuffer = fn (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) callconv(.C) void;
const glBlitFramebufferEXT = fn (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) callconv(.C) void;
const glBlitNamedFramebuffer = fn (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) callconv(.C) void;
const glBufferAddressRangeNV = fn (pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) callconv(.C) void;
const glBufferAttachMemoryNV = fn (target: GLenum, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glBufferData = fn (target: GLenum, size: GLsizeiptr, data: ?*const c_void, usage: GLenum) callconv(.C) void;
const glBufferDataARB = fn (target: GLenum, size: GLsizeiptrARB, data: ?*const c_void, usage: GLenum) callconv(.C) void;
const glBufferPageCommitmentARB = fn (target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) callconv(.C) void;
const glBufferPageCommitmentMemNV = fn (target: GLenum, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) callconv(.C) void;
const glBufferParameteriAPPLE = fn (target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glBufferStorage = fn (target: GLenum, size: GLsizeiptr, data: ?*const c_void, flags: GLbitfield) callconv(.C) void;
const glBufferStorageExternalEXT = fn (target: GLenum, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) callconv(.C) void;
const glBufferStorageMemEXT = fn (target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glBufferSubData = fn (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: ?*const c_void) callconv(.C) void;
const glBufferSubDataARB = fn (target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: ?*const c_void) callconv(.C) void;
const glCallCommandListNV = fn (list: GLuint) callconv(.C) void;
const glCheckFramebufferStatus = fn (target: GLenum) callconv(.C) GLenum;
const glCheckFramebufferStatusEXT = fn (target: GLenum) callconv(.C) GLenum;
const glCheckNamedFramebufferStatus = fn (framebuffer: GLuint, target: GLenum) callconv(.C) GLenum;
const glCheckNamedFramebufferStatusEXT = fn (framebuffer: GLuint, target: GLenum) callconv(.C) GLenum;
const glClampColor = fn (target: GLenum, clamp: GLenum) callconv(.C) void;
const glClampColorARB = fn (target: GLenum, clamp: GLenum) callconv(.C) void;
const glClear = fn (mask: GLbitfield) callconv(.C) void;
const glClearAccumxOES = fn (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) callconv(.C) void;
const glClearBufferData = fn (target: GLenum, internalformat: GLenum, format: GLenum, type_: GLenum, data: ?*const c_void) callconv(.C) void;
const glClearBufferSubData = fn (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: ?*const c_void) callconv(.C) void;
const glClearBufferfi = fn (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) callconv(.C) void;
const glClearBufferfv = fn (buffer: GLenum, drawbuffer: GLint, value: [*c]const GLfloat) callconv(.C) void;
const glClearBufferiv = fn (buffer: GLenum, drawbuffer: GLint, value: [*c]const GLint) callconv(.C) void;
const glClearBufferuiv = fn (buffer: GLenum, drawbuffer: GLint, value: [*c]const GLuint) callconv(.C) void;
const glClearColor = fn (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) callconv(.C) void;
const glClearColorIiEXT = fn (red: GLint, green: GLint, blue: GLint, alpha: GLint) callconv(.C) void;
const glClearColorIuiEXT = fn (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) callconv(.C) void;
const glClearColorxOES = fn (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) callconv(.C) void;
const glClearDepth = fn (depth: GLdouble) callconv(.C) void;
const glClearDepthdNV = fn (depth: GLdouble) callconv(.C) void;
const glClearDepthf = fn (d: GLfloat) callconv(.C) void;
const glClearDepthfOES = fn (depth: GLclampf) callconv(.C) void;
const glClearDepthxOES = fn (depth: GLfixed) callconv(.C) void;
const glClearNamedBufferData = fn (buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, data: ?*const c_void) callconv(.C) void;
const glClearNamedBufferDataEXT = fn (buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, data: ?*const c_void) callconv(.C) void;
const glClearNamedBufferSubData = fn (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: ?*const c_void) callconv(.C) void;
const glClearNamedBufferSubDataEXT = fn (buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: ?*const c_void) callconv(.C) void;
const glClearNamedFramebufferfi = fn (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) callconv(.C) void;
const glClearNamedFramebufferfv = fn (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: [*c]const GLfloat) callconv(.C) void;
const glClearNamedFramebufferiv = fn (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: [*c]const GLint) callconv(.C) void;
const glClearNamedFramebufferuiv = fn (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: [*c]const GLuint) callconv(.C) void;
const glClearStencil = fn (s: GLint) callconv(.C) void;
const glClearTexImage = fn (texture: GLuint, level: GLint, format: GLenum, type_: GLenum, data: ?*const c_void) callconv(.C) void;
const glClearTexSubImage = fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, data: ?*const c_void) callconv(.C) void;
const glClientActiveTextureARB = fn (texture: GLenum) callconv(.C) void;
const glClientActiveVertexStreamATI = fn (stream: GLenum) callconv(.C) void;
const glClientAttribDefaultEXT = fn (mask: GLbitfield) callconv(.C) void;
const glClientWaitSemaphoreui64NVX = fn (fenceObjectCount: GLsizei, semaphoreArray: [*c]const GLuint, fenceValueArray: [*c]const GLuint64) callconv(.C) void;
const glClientWaitSync = fn (sync: GLsync, flags: GLbitfield, timeout: GLuint64) callconv(.C) GLenum;
const glClipControl = fn (origin: GLenum, depth: GLenum) callconv(.C) void;
const glClipPlanefOES = fn (plane: GLenum, equation: [*c]const GLfloat) callconv(.C) void;
const glClipPlanexOES = fn (plane: GLenum, equation: [*c]const GLfixed) callconv(.C) void;
const glColor3fVertex3fSUN = fn (r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glColor3fVertex3fvSUN = fn (c: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glColor3hNV = fn (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) callconv(.C) void;
const glColor3hvNV = fn (v: [*c]const GLhalfNV) callconv(.C) void;
const glColor3xOES = fn (red: GLfixed, green: GLfixed, blue: GLfixed) callconv(.C) void;
const glColor3xvOES = fn (components: [*c]const GLfixed) callconv(.C) void;
const glColor4fNormal3fVertex3fSUN = fn (r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glColor4fNormal3fVertex3fvSUN = fn (c: [*c]const GLfloat, n: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glColor4hNV = fn (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) callconv(.C) void;
const glColor4hvNV = fn (v: [*c]const GLhalfNV) callconv(.C) void;
const glColor4ubVertex2fSUN = fn (r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) callconv(.C) void;
const glColor4ubVertex2fvSUN = fn (c: [*c]const GLubyte, v: [*c]const GLfloat) callconv(.C) void;
const glColor4ubVertex3fSUN = fn (r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glColor4ubVertex3fvSUN = fn (c: [*c]const GLubyte, v: [*c]const GLfloat) callconv(.C) void;
const glColor4xOES = fn (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) callconv(.C) void;
const glColor4xvOES = fn (components: [*c]const GLfixed) callconv(.C) void;
const glColorFormatNV = fn (size: GLint, type_: GLenum, stride: GLsizei) callconv(.C) void;
const glColorFragmentOp1ATI = fn (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) callconv(.C) void;
const glColorFragmentOp2ATI = fn (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) callconv(.C) void;
const glColorFragmentOp3ATI = fn (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) callconv(.C) void;
const glColorMask = fn (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) callconv(.C) void;
const glColorMaskIndexedEXT = fn (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) callconv(.C) void;
const glColorMaski = fn (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) callconv(.C) void;
const glColorPointerEXT = fn (size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glColorPointerListIBM = fn (size: GLint, type_: GLenum, stride: GLint, pointer: ?*const ?*const c_void, ptrstride: GLint) callconv(.C) void;
const glColorPointervINTEL = fn (size: GLint, type_: GLenum, pointer: ?*const ?*const c_void) callconv(.C) void;
const glColorSubTableEXT = fn (target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: ?*const c_void) callconv(.C) void;
const glColorTableEXT = fn (target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: ?*const c_void) callconv(.C) void;
const glColorTableParameterfvSGI = fn (target: GLenum, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glColorTableParameterivSGI = fn (target: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glColorTableSGI = fn (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: ?*const c_void) callconv(.C) void;
const glCombinerInputNV = fn (stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) callconv(.C) void;
const glCombinerOutputNV = fn (stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) callconv(.C) void;
const glCombinerParameterfNV = fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glCombinerParameterfvNV = fn (pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glCombinerParameteriNV = fn (pname: GLenum, param: GLint) callconv(.C) void;
const glCombinerParameterivNV = fn (pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glCombinerStageParameterfvNV = fn (stage: GLenum, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glCommandListSegmentsNV = fn (list: GLuint, segments: GLuint) callconv(.C) void;
const glCompileCommandListNV = fn (list: GLuint) callconv(.C) void;
const glCompileShader = fn (shader: GLuint) callconv(.C) void;
const glCompileShaderARB = fn (shaderObj: GLhandleARB) callconv(.C) void;
const glCompileShaderIncludeARB = fn (shader: GLuint, count: GLsizei, path: [*c]const [*c]const GLchar, length: [*c]const GLint) callconv(.C) void;
const glCompressedMultiTexImage1DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: ?*const c_void) callconv(.C) void;
const glCompressedMultiTexImage2DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: ?*const c_void) callconv(.C) void;
const glCompressedMultiTexImage3DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: ?*const c_void) callconv(.C) void;
const glCompressedMultiTexSubImage1DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: ?*const c_void) callconv(.C) void;
const glCompressedMultiTexSubImage2DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: ?*const c_void) callconv(.C) void;
const glCompressedMultiTexSubImage3DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: ?*const c_void) callconv(.C) void;
const glCompressedTexImage1D = fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTexImage1DARB = fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTexImage2D = fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTexImage2DARB = fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTexImage3D = fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTexImage3DARB = fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTexSubImage1D = fn (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTexSubImage1DARB = fn (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTexSubImage2D = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTexSubImage2DARB = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTexSubImage3D = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTexSubImage3DARB = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTextureImage1DEXT = fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: ?*const c_void) callconv(.C) void;
const glCompressedTextureImage2DEXT = fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: ?*const c_void) callconv(.C) void;
const glCompressedTextureImage3DEXT = fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: ?*const c_void) callconv(.C) void;
const glCompressedTextureSubImage1D = fn (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTextureSubImage1DEXT = fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: ?*const c_void) callconv(.C) void;
const glCompressedTextureSubImage2D = fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTextureSubImage2DEXT = fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: ?*const c_void) callconv(.C) void;
const glCompressedTextureSubImage3D = fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const c_void) callconv(.C) void;
const glCompressedTextureSubImage3DEXT = fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: ?*const c_void) callconv(.C) void;
const glConservativeRasterParameterfNV = fn (pname: GLenum, value: GLfloat) callconv(.C) void;
const glConservativeRasterParameteriNV = fn (pname: GLenum, param: GLint) callconv(.C) void;
const glConvolutionFilter1DEXT = fn (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: ?*const c_void) callconv(.C) void;
const glConvolutionFilter2DEXT = fn (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: ?*const c_void) callconv(.C) void;
const glConvolutionParameterfEXT = fn (target: GLenum, pname: GLenum, params: GLfloat) callconv(.C) void;
const glConvolutionParameterfvEXT = fn (target: GLenum, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glConvolutionParameteriEXT = fn (target: GLenum, pname: GLenum, params: GLint) callconv(.C) void;
const glConvolutionParameterivEXT = fn (target: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glConvolutionParameterxOES = fn (target: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glConvolutionParameterxvOES = fn (target: GLenum, pname: GLenum, params: [*c]const GLfixed) callconv(.C) void;
const glCopyBufferSubData = fn (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glCopyColorSubTableEXT = fn (target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyColorTableSGI = fn (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyConvolutionFilter1DEXT = fn (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyConvolutionFilter2DEXT = fn (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyImageSubData = fn (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) callconv(.C) void;
const glCopyImageSubDataNV = fn (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) callconv(.C) void;
const glCopyMultiTexImage1DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) callconv(.C) void;
const glCopyMultiTexImage2DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) callconv(.C) void;
const glCopyMultiTexSubImage1DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyMultiTexSubImage2DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyMultiTexSubImage3DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyNamedBufferSubData = fn (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glCopyPathNV = fn (resultPath: GLuint, srcPath: GLuint) callconv(.C) void;
const glCopyTexImage1D = fn (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) callconv(.C) void;
const glCopyTexImage1DEXT = fn (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) callconv(.C) void;
const glCopyTexImage2D = fn (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) callconv(.C) void;
const glCopyTexImage2DEXT = fn (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) callconv(.C) void;
const glCopyTexSubImage1D = fn (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyTexSubImage1DEXT = fn (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyTexSubImage2D = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTexSubImage2DEXT = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTexSubImage3D = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTexSubImage3DEXT = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTextureImage1DEXT = fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) callconv(.C) void;
const glCopyTextureImage2DEXT = fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) callconv(.C) void;
const glCopyTextureSubImage1D = fn (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyTextureSubImage1DEXT = fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) callconv(.C) void;
const glCopyTextureSubImage2D = fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTextureSubImage2DEXT = fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTextureSubImage3D = fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCopyTextureSubImage3DEXT = fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glCoverFillPathInstancedNV = fn (numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: [*c]const GLfloat) callconv(.C) void;
const glCoverFillPathNV = fn (path: GLuint, coverMode: GLenum) callconv(.C) void;
const glCoverStrokePathInstancedNV = fn (numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: [*c]const GLfloat) callconv(.C) void;
const glCoverStrokePathNV = fn (path: GLuint, coverMode: GLenum) callconv(.C) void;
const glCoverageModulationNV = fn (components: GLenum) callconv(.C) void;
const glCoverageModulationTableNV = fn (n: GLsizei, v: [*c]const GLfloat) callconv(.C) void;
const glCreateBuffers = fn (n: GLsizei, buffers: [*c]GLuint) callconv(.C) void;
const glCreateCommandListsNV = fn (n: GLsizei, lists: [*c]GLuint) callconv(.C) void;
const glCreateFramebuffers = fn (n: GLsizei, framebuffers: [*c]GLuint) callconv(.C) void;
const glCreateMemoryObjectsEXT = fn (n: GLsizei, memoryObjects: [*c]GLuint) callconv(.C) void;
const glCreatePerfQueryINTEL = fn (queryId: GLuint, queryHandle: [*c]GLuint) callconv(.C) void;
const glCreateProgram = fn () callconv(.C) GLuint;
const glCreateProgramObjectARB = fn () callconv(.C) GLhandleARB;
const glCreateProgramPipelines = fn (n: GLsizei, pipelines: [*c]GLuint) callconv(.C) void;
const glCreateProgressFenceNVX = fn () callconv(.C) GLuint;
const glCreateQueries = fn (target: GLenum, n: GLsizei, ids: [*c]GLuint) callconv(.C) void;
const glCreateRenderbuffers = fn (n: GLsizei, renderbuffers: [*c]GLuint) callconv(.C) void;
const glCreateSamplers = fn (n: GLsizei, samplers: [*c]GLuint) callconv(.C) void;
const glCreateSemaphoresNV = fn (n: GLsizei, semaphores: [*c]GLuint) callconv(.C) void;
const glCreateShader = fn (type_: GLenum) callconv(.C) GLuint;
const glCreateShaderObjectARB = fn (shaderType: GLenum) callconv(.C) GLhandleARB;
const glCreateShaderProgramEXT = fn (type_: GLenum, string: [*c]const GLchar) callconv(.C) GLuint;
const glCreateShaderProgramv = fn (type_: GLenum, count: GLsizei, strings: [*c]const [*c]const GLchar) callconv(.C) GLuint;
const glCreateStatesNV = fn (n: GLsizei, states: [*c]GLuint) callconv(.C) void;
const glCreateSyncFromCLeventARB = fn (context: [*c]_cl_context, event: [*c]_cl_event, flags: GLbitfield) callconv(.C) GLsync;
const glCreateTextures = fn (target: GLenum, n: GLsizei, textures: [*c]GLuint) callconv(.C) void;
const glCreateTransformFeedbacks = fn (n: GLsizei, ids: [*c]GLuint) callconv(.C) void;
const glCreateVertexArrays = fn (n: GLsizei, arrays: [*c]GLuint) callconv(.C) void;
const glCullFace = fn (mode: GLenum) callconv(.C) void;
const glCullParameterdvEXT = fn (pname: GLenum, params: [*c]GLdouble) callconv(.C) void;
const glCullParameterfvEXT = fn (pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glCurrentPaletteMatrixARB = fn (index: GLint) callconv(.C) void;
const glDebugMessageCallback = fn (callback: GLDEBUGPROC, userParam: ?*const c_void) callconv(.C) void;
const glDebugMessageCallbackAMD = fn (callback: GLDEBUGPROCAMD, userParam: ?*c_void) callconv(.C) void;
const glDebugMessageCallbackARB = fn (callback: GLDEBUGPROCARB, userParam: ?*const c_void) callconv(.C) void;
const glDebugMessageControl = fn (source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: [*c]const GLuint, enabled: GLboolean) callconv(.C) void;
const glDebugMessageControlARB = fn (source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: [*c]const GLuint, enabled: GLboolean) callconv(.C) void;
const glDebugMessageEnableAMD = fn (category: GLenum, severity: GLenum, count: GLsizei, ids: [*c]const GLuint, enabled: GLboolean) callconv(.C) void;
const glDebugMessageInsert = fn (source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: [*c]const GLchar) callconv(.C) void;
const glDebugMessageInsertAMD = fn (category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: [*c]const GLchar) callconv(.C) void;
const glDebugMessageInsertARB = fn (source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: [*c]const GLchar) callconv(.C) void;
const glDeformSGIX = fn (mask: GLbitfield) callconv(.C) void;
const glDeformationMap3dSGIX = fn (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: [*c]const GLdouble) callconv(.C) void;
const glDeformationMap3fSGIX = fn (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: [*c]const GLfloat) callconv(.C) void;
const glDeleteAsyncMarkersSGIX = fn (marker: GLuint, range: GLsizei) callconv(.C) void;
const glDeleteBuffers = fn (n: GLsizei, buffers: [*c]const GLuint) callconv(.C) void;
const glDeleteBuffersARB = fn (n: GLsizei, buffers: [*c]const GLuint) callconv(.C) void;
const glDeleteCommandListsNV = fn (n: GLsizei, lists: [*c]const GLuint) callconv(.C) void;
const glDeleteFencesAPPLE = fn (n: GLsizei, fences: [*c]const GLuint) callconv(.C) void;
const glDeleteFencesNV = fn (n: GLsizei, fences: [*c]const GLuint) callconv(.C) void;
const glDeleteFragmentShaderATI = fn (id: GLuint) callconv(.C) void;
const glDeleteFramebuffers = fn (n: GLsizei, framebuffers: [*c]const GLuint) callconv(.C) void;
const glDeleteFramebuffersEXT = fn (n: GLsizei, framebuffers: [*c]const GLuint) callconv(.C) void;
const glDeleteMemoryObjectsEXT = fn (n: GLsizei, memoryObjects: [*c]const GLuint) callconv(.C) void;
const glDeleteNamedStringARB = fn (namelen: GLint, name: [*c]const GLchar) callconv(.C) void;
const glDeleteNamesAMD = fn (identifier: GLenum, num: GLuint, names: [*c]const GLuint) callconv(.C) void;
const glDeleteObjectARB = fn (obj: GLhandleARB) callconv(.C) void;
const glDeleteOcclusionQueriesNV = fn (n: GLsizei, ids: [*c]const GLuint) callconv(.C) void;
const glDeletePathsNV = fn (path: GLuint, range: GLsizei) callconv(.C) void;
const glDeletePerfMonitorsAMD = fn (n: GLsizei, monitors: [*c]GLuint) callconv(.C) void;
const glDeletePerfQueryINTEL = fn (queryHandle: GLuint) callconv(.C) void;
const glDeleteProgram = fn (program: GLuint) callconv(.C) void;
const glDeleteProgramPipelines = fn (n: GLsizei, pipelines: [*c]const GLuint) callconv(.C) void;
const glDeleteProgramsARB = fn (n: GLsizei, programs: [*c]const GLuint) callconv(.C) void;
const glDeleteProgramsNV = fn (n: GLsizei, programs: [*c]const GLuint) callconv(.C) void;
const glDeleteQueries = fn (n: GLsizei, ids: [*c]const GLuint) callconv(.C) void;
const glDeleteQueriesARB = fn (n: GLsizei, ids: [*c]const GLuint) callconv(.C) void;
const glDeleteQueryResourceTagNV = fn (n: GLsizei, tagIds: [*c]const GLint) callconv(.C) void;
const glDeleteRenderbuffers = fn (n: GLsizei, renderbuffers: [*c]const GLuint) callconv(.C) void;
const glDeleteRenderbuffersEXT = fn (n: GLsizei, renderbuffers: [*c]const GLuint) callconv(.C) void;
const glDeleteSamplers = fn (count: GLsizei, samplers: [*c]const GLuint) callconv(.C) void;
const glDeleteSemaphoresEXT = fn (n: GLsizei, semaphores: [*c]const GLuint) callconv(.C) void;
const glDeleteShader = fn (shader: GLuint) callconv(.C) void;
const glDeleteStatesNV = fn (n: GLsizei, states: [*c]const GLuint) callconv(.C) void;
const glDeleteSync = fn (sync: GLsync) callconv(.C) void;
const glDeleteTextures = fn (n: GLsizei, textures: [*c]const GLuint) callconv(.C) void;
const glDeleteTexturesEXT = fn (n: GLsizei, textures: [*c]const GLuint) callconv(.C) void;
const glDeleteTransformFeedbacks = fn (n: GLsizei, ids: [*c]const GLuint) callconv(.C) void;
const glDeleteTransformFeedbacksNV = fn (n: GLsizei, ids: [*c]const GLuint) callconv(.C) void;
const glDeleteVertexArrays = fn (n: GLsizei, arrays: [*c]const GLuint) callconv(.C) void;
const glDeleteVertexArraysAPPLE = fn (n: GLsizei, arrays: [*c]const GLuint) callconv(.C) void;
const glDeleteVertexShaderEXT = fn (id: GLuint) callconv(.C) void;
const glDepthBoundsEXT = fn (zmin: GLclampd, zmax: GLclampd) callconv(.C) void;
const glDepthBoundsdNV = fn (zmin: GLdouble, zmax: GLdouble) callconv(.C) void;
const glDepthFunc = fn (func: GLenum) callconv(.C) void;
const glDepthMask = fn (flag: GLboolean) callconv(.C) void;
const glDepthRange = fn (n: GLdouble, f: GLdouble) callconv(.C) void;
const glDepthRangeArraydvNV = fn (first: GLuint, count: GLsizei, v: [*c]const GLdouble) callconv(.C) void;
const glDepthRangeArrayv = fn (first: GLuint, count: GLsizei, v: [*c]const GLdouble) callconv(.C) void;
const glDepthRangeIndexed = fn (index: GLuint, n: GLdouble, f: GLdouble) callconv(.C) void;
const glDepthRangeIndexeddNV = fn (index: GLuint, n: GLdouble, f: GLdouble) callconv(.C) void;
const glDepthRangedNV = fn (zNear: GLdouble, zFar: GLdouble) callconv(.C) void;
const glDepthRangef = fn (n: GLfloat, f: GLfloat) callconv(.C) void;
const glDepthRangefOES = fn (n: GLclampf, f: GLclampf) callconv(.C) void;
const glDepthRangexOES = fn (n: GLfixed, f: GLfixed) callconv(.C) void;
const glDetachObjectARB = fn (containerObj: GLhandleARB, attachedObj: GLhandleARB) callconv(.C) void;
const glDetachShader = fn (program: GLuint, shader: GLuint) callconv(.C) void;
const glDetailTexFuncSGIS = fn (target: GLenum, n: GLsizei, points: [*c]const GLfloat) callconv(.C) void;
const glDisable = fn (cap: GLenum) callconv(.C) void;
const glDisableClientStateIndexedEXT = fn (array: GLenum, index: GLuint) callconv(.C) void;
const glDisableClientStateiEXT = fn (array: GLenum, index: GLuint) callconv(.C) void;
const glDisableIndexedEXT = fn (target: GLenum, index: GLuint) callconv(.C) void;
const glDisableVariantClientStateEXT = fn (id: GLuint) callconv(.C) void;
const glDisableVertexArrayAttrib = fn (vaobj: GLuint, index: GLuint) callconv(.C) void;
const glDisableVertexArrayAttribEXT = fn (vaobj: GLuint, index: GLuint) callconv(.C) void;
const glDisableVertexArrayEXT = fn (vaobj: GLuint, array: GLenum) callconv(.C) void;
const glDisableVertexAttribAPPLE = fn (index: GLuint, pname: GLenum) callconv(.C) void;
const glDisableVertexAttribArray = fn (index: GLuint) callconv(.C) void;
const glDisableVertexAttribArrayARB = fn (index: GLuint) callconv(.C) void;
const glDisablei = fn (target: GLenum, index: GLuint) callconv(.C) void;
const glDispatchCompute = fn (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) callconv(.C) void;
const glDispatchComputeGroupSizeARB = fn (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) callconv(.C) void;
const glDispatchComputeIndirect = fn (indirect: GLintptr) callconv(.C) void;
const glDrawArrays = fn (mode: GLenum, first: GLint, count: GLsizei) callconv(.C) void;
const glDrawArraysEXT = fn (mode: GLenum, first: GLint, count: GLsizei) callconv(.C) void;
const glDrawArraysIndirect = fn (mode: GLenum, indirect: ?*const c_void) callconv(.C) void;
const glDrawArraysInstanced = fn (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) callconv(.C) void;
const glDrawArraysInstancedARB = fn (mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) callconv(.C) void;
const glDrawArraysInstancedBaseInstance = fn (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) callconv(.C) void;
const glDrawArraysInstancedEXT = fn (mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) callconv(.C) void;
const glDrawBuffer = fn (buf: GLenum) callconv(.C) void;
const glDrawBuffers = fn (n: GLsizei, bufs: [*c]const GLenum) callconv(.C) void;
const glDrawBuffersARB = fn (n: GLsizei, bufs: [*c]const GLenum) callconv(.C) void;
const glDrawBuffersATI = fn (n: GLsizei, bufs: [*c]const GLenum) callconv(.C) void;
const glDrawCommandsAddressNV = fn (primitiveMode: GLenum, indirects: [*c]const GLuint64, sizes: [*c]const GLsizei, count: GLuint) callconv(.C) void;
const glDrawCommandsNV = fn (primitiveMode: GLenum, buffer: GLuint, indirects: [*c]const GLintptr, sizes: [*c]const GLsizei, count: GLuint) callconv(.C) void;
const glDrawCommandsStatesAddressNV = fn (indirects: [*c]const GLuint64, sizes: [*c]const GLsizei, states: [*c]const GLuint, fbos: [*c]const GLuint, count: GLuint) callconv(.C) void;
const glDrawCommandsStatesNV = fn (buffer: GLuint, indirects: [*c]const GLintptr, sizes: [*c]const GLsizei, states: [*c]const GLuint, fbos: [*c]const GLuint, count: GLuint) callconv(.C) void;
const glDrawElementArrayAPPLE = fn (mode: GLenum, first: GLint, count: GLsizei) callconv(.C) void;
const glDrawElementArrayATI = fn (mode: GLenum, count: GLsizei) callconv(.C) void;
const glDrawElements = fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: ?*const c_void) callconv(.C) void;
const glDrawElementsBaseVertex = fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: ?*const c_void, basevertex: GLint) callconv(.C) void;
const glDrawElementsIndirect = fn (mode: GLenum, type_: GLenum, indirect: ?*const c_void) callconv(.C) void;
const glDrawElementsInstanced = fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: ?*const c_void, instancecount: GLsizei) callconv(.C) void;
const glDrawElementsInstancedARB = fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: ?*const c_void, primcount: GLsizei) callconv(.C) void;
const glDrawElementsInstancedBaseInstance = fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: ?*const c_void, instancecount: GLsizei, baseinstance: GLuint) callconv(.C) void;
const glDrawElementsInstancedBaseVertex = fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: ?*const c_void, instancecount: GLsizei, basevertex: GLint) callconv(.C) void;
const glDrawElementsInstancedBaseVertexBaseInstance = fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: ?*const c_void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) callconv(.C) void;
const glDrawElementsInstancedEXT = fn (mode: GLenum, count: GLsizei, type_: GLenum, indices: ?*const c_void, primcount: GLsizei) callconv(.C) void;
const glDrawMeshArraysSUN = fn (mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) callconv(.C) void;
const glDrawMeshTasksIndirectNV = fn (indirect: GLintptr) callconv(.C) void;
const glDrawMeshTasksNV = fn (first: GLuint, count: GLuint) callconv(.C) void;
const glDrawRangeElementArrayAPPLE = fn (mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei) callconv(.C) void;
const glDrawRangeElementArrayATI = fn (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei) callconv(.C) void;
const glDrawRangeElements = fn (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: ?*const c_void) callconv(.C) void;
const glDrawRangeElementsBaseVertex = fn (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: ?*const c_void, basevertex: GLint) callconv(.C) void;
const glDrawRangeElementsEXT = fn (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: ?*const c_void) callconv(.C) void;
const glDrawTextureNV = fn (texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) callconv(.C) void;
const glDrawTransformFeedback = fn (mode: GLenum, id: GLuint) callconv(.C) void;
const glDrawTransformFeedbackInstanced = fn (mode: GLenum, id: GLuint, instancecount: GLsizei) callconv(.C) void;
const glDrawTransformFeedbackNV = fn (mode: GLenum, id: GLuint) callconv(.C) void;
const glDrawTransformFeedbackStream = fn (mode: GLenum, id: GLuint, stream: GLuint) callconv(.C) void;
const glDrawTransformFeedbackStreamInstanced = fn (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) callconv(.C) void;
const glDrawVkImageNV = fn (vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) callconv(.C) void;
const glEGLImageTargetTexStorageEXT = fn (target: GLenum, image: GLeglImageOES, attrib_list: [*c]const GLint) callconv(.C) void;
const glEGLImageTargetTextureStorageEXT = fn (texture: GLuint, image: GLeglImageOES, attrib_list: [*c]const GLint) callconv(.C) void;
const glEdgeFlagFormatNV = fn (stride: GLsizei) callconv(.C) void;
const glEdgeFlagPointerEXT = fn (stride: GLsizei, count: GLsizei, pointer: [*c]const GLboolean) callconv(.C) void;
const glEdgeFlagPointerListIBM = fn (stride: GLint, pointer: [*c]const [*c]const GLboolean, ptrstride: GLint) callconv(.C) void;
const glElementPointerAPPLE = fn (type_: GLenum, pointer: ?*const c_void) callconv(.C) void;
const glElementPointerATI = fn (type_: GLenum, pointer: ?*const c_void) callconv(.C) void;
const glEnable = fn (cap: GLenum) callconv(.C) void;
const glEnableClientStateIndexedEXT = fn (array: GLenum, index: GLuint) callconv(.C) void;
const glEnableClientStateiEXT = fn (array: GLenum, index: GLuint) callconv(.C) void;
const glEnableIndexedEXT = fn (target: GLenum, index: GLuint) callconv(.C) void;
const glEnableVariantClientStateEXT = fn (id: GLuint) callconv(.C) void;
const glEnableVertexArrayAttrib = fn (vaobj: GLuint, index: GLuint) callconv(.C) void;
const glEnableVertexArrayAttribEXT = fn (vaobj: GLuint, index: GLuint) callconv(.C) void;
const glEnableVertexArrayEXT = fn (vaobj: GLuint, array: GLenum) callconv(.C) void;
const glEnableVertexAttribAPPLE = fn (index: GLuint, pname: GLenum) callconv(.C) void;
const glEnableVertexAttribArray = fn (index: GLuint) callconv(.C) void;
const glEnableVertexAttribArrayARB = fn (index: GLuint) callconv(.C) void;
const glEnablei = fn (target: GLenum, index: GLuint) callconv(.C) void;
const glEndConditionalRender = fn () callconv(.C) void;
const glEndConditionalRenderNV = fn () callconv(.C) void;
const glEndConditionalRenderNVX = fn () callconv(.C) void;
const glEndFragmentShaderATI = fn () callconv(.C) void;
const glEndOcclusionQueryNV = fn () callconv(.C) void;
const glEndPerfMonitorAMD = fn (monitor: GLuint) callconv(.C) void;
const glEndPerfQueryINTEL = fn (queryHandle: GLuint) callconv(.C) void;
const glEndQuery = fn (target: GLenum) callconv(.C) void;
const glEndQueryARB = fn (target: GLenum) callconv(.C) void;
const glEndQueryIndexed = fn (target: GLenum, index: GLuint) callconv(.C) void;
const glEndTransformFeedback = fn () callconv(.C) void;
const glEndTransformFeedbackEXT = fn () callconv(.C) void;
const glEndTransformFeedbackNV = fn () callconv(.C) void;
const glEndVertexShaderEXT = fn () callconv(.C) void;
const glEndVideoCaptureNV = fn (video_capture_slot: GLuint) callconv(.C) void;
const glEvalCoord1xOES = fn (u: GLfixed) callconv(.C) void;
const glEvalCoord1xvOES = fn (coords: [*c]const GLfixed) callconv(.C) void;
const glEvalCoord2xOES = fn (u: GLfixed, v: GLfixed) callconv(.C) void;
const glEvalCoord2xvOES = fn (coords: [*c]const GLfixed) callconv(.C) void;
const glEvalMapsNV = fn (target: GLenum, mode: GLenum) callconv(.C) void;
const glEvaluateDepthValuesARB = fn () callconv(.C) void;
const glExecuteProgramNV = fn (target: GLenum, id: GLuint, params: [*c]const GLfloat) callconv(.C) void;
const glExtractComponentEXT = fn (res: GLuint, src: GLuint, num: GLuint) callconv(.C) void;
const glFeedbackBufferxOES = fn (n: GLsizei, type_: GLenum, buffer: [*c]const GLfixed) callconv(.C) void;
const glFenceSync = fn (condition: GLenum, flags: GLbitfield) callconv(.C) GLsync;
const glFinalCombinerInputNV = fn (variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) callconv(.C) void;
const glFinish = fn () callconv(.C) void;
const glFinishAsyncSGIX = fn (markerp: [*c]GLuint) callconv(.C) GLint;
const glFinishFenceAPPLE = fn (fence: GLuint) callconv(.C) void;
const glFinishFenceNV = fn (fence: GLuint) callconv(.C) void;
const glFinishObjectAPPLE = fn (object: GLenum, name: GLint) callconv(.C) void;
const glFinishTextureSUNX = fn () callconv(.C) void;
const glFlush = fn () callconv(.C) void;
const glFlushMappedBufferRange = fn (target: GLenum, offset: GLintptr, length: GLsizeiptr) callconv(.C) void;
const glFlushMappedBufferRangeAPPLE = fn (target: GLenum, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glFlushMappedNamedBufferRange = fn (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) callconv(.C) void;
const glFlushMappedNamedBufferRangeEXT = fn (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) callconv(.C) void;
const glFlushPixelDataRangeNV = fn (target: GLenum) callconv(.C) void;
const glFlushRasterSGIX = fn () callconv(.C) void;
const glFlushStaticDataIBM = fn (target: GLenum) callconv(.C) void;
const glFlushVertexArrayRangeAPPLE = fn (length: GLsizei, pointer: ?*c_void) callconv(.C) void;
const glFlushVertexArrayRangeNV = fn () callconv(.C) void;
const glFogCoordFormatNV = fn (type_: GLenum, stride: GLsizei) callconv(.C) void;
const glFogCoordPointerEXT = fn (type_: GLenum, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glFogCoordPointerListIBM = fn (type_: GLenum, stride: GLint, pointer: ?*const ?*const c_void, ptrstride: GLint) callconv(.C) void;
const glFogCoorddEXT = fn (coord: GLdouble) callconv(.C) void;
const glFogCoorddvEXT = fn (coord: [*c]const GLdouble) callconv(.C) void;
const glFogCoordfEXT = fn (coord: GLfloat) callconv(.C) void;
const glFogCoordfvEXT = fn (coord: [*c]const GLfloat) callconv(.C) void;
const glFogCoordhNV = fn (fog: GLhalfNV) callconv(.C) void;
const glFogCoordhvNV = fn (fog: [*c]const GLhalfNV) callconv(.C) void;
const glFogFuncSGIS = fn (n: GLsizei, points: [*c]const GLfloat) callconv(.C) void;
const glFogxOES = fn (pname: GLenum, param: GLfixed) callconv(.C) void;
const glFogxvOES = fn (pname: GLenum, param: [*c]const GLfixed) callconv(.C) void;
const glFragmentColorMaterialSGIX = fn (face: GLenum, mode: GLenum) callconv(.C) void;
const glFragmentCoverageColorNV = fn (color: GLuint) callconv(.C) void;
const glFragmentLightModelfSGIX = fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glFragmentLightModelfvSGIX = fn (pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glFragmentLightModeliSGIX = fn (pname: GLenum, param: GLint) callconv(.C) void;
const glFragmentLightModelivSGIX = fn (pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glFragmentLightfSGIX = fn (light: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glFragmentLightfvSGIX = fn (light: GLenum, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glFragmentLightiSGIX = fn (light: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glFragmentLightivSGIX = fn (light: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glFragmentMaterialfSGIX = fn (face: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glFragmentMaterialfvSGIX = fn (face: GLenum, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glFragmentMaterialiSGIX = fn (face: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glFragmentMaterialivSGIX = fn (face: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glFrameTerminatorGREMEDY = fn () callconv(.C) void;
const glFrameZoomSGIX = fn (factor: GLint) callconv(.C) void;
const glFramebufferDrawBufferEXT = fn (framebuffer: GLuint, mode: GLenum) callconv(.C) void;
const glFramebufferDrawBuffersEXT = fn (framebuffer: GLuint, n: GLsizei, bufs: [*c]const GLenum) callconv(.C) void;
const glFramebufferFetchBarrierEXT = fn () callconv(.C) void;
const glFramebufferParameteri = fn (target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glFramebufferParameteriMESA = fn (target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glFramebufferReadBufferEXT = fn (framebuffer: GLuint, mode: GLenum) callconv(.C) void;
const glFramebufferRenderbuffer = fn (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glFramebufferRenderbufferEXT = fn (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glFramebufferSampleLocationsfvARB = fn (target: GLenum, start: GLuint, count: GLsizei, v: [*c]const GLfloat) callconv(.C) void;
const glFramebufferSampleLocationsfvNV = fn (target: GLenum, start: GLuint, count: GLsizei, v: [*c]const GLfloat) callconv(.C) void;
const glFramebufferSamplePositionsfvAMD = fn (target: GLenum, numsamples: GLuint, pixelindex: GLuint, values: [*c]const GLfloat) callconv(.C) void;
const glFramebufferTexture = fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTexture1D = fn (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTexture1DEXT = fn (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTexture2D = fn (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTexture2DEXT = fn (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTexture3D = fn (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) callconv(.C) void;
const glFramebufferTexture3DEXT = fn (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) callconv(.C) void;
const glFramebufferTextureARB = fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTextureEXT = fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glFramebufferTextureFaceARB = fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) callconv(.C) void;
const glFramebufferTextureFaceEXT = fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) callconv(.C) void;
const glFramebufferTextureLayer = fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) callconv(.C) void;
const glFramebufferTextureLayerARB = fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) callconv(.C) void;
const glFramebufferTextureLayerEXT = fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) callconv(.C) void;
const glFramebufferTextureMultiviewOVR = fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei) callconv(.C) void;
const glFreeObjectBufferATI = fn (buffer: GLuint) callconv(.C) void;
const glFrontFace = fn (mode: GLenum) callconv(.C) void;
const glFrustumfOES = fn (l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) callconv(.C) void;
const glFrustumxOES = fn (l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) callconv(.C) void;
const glGenAsyncMarkersSGIX = fn (range: GLsizei) callconv(.C) GLuint;
const glGenBuffers = fn (n: GLsizei, buffers: [*c]GLuint) callconv(.C) void;
const glGenBuffersARB = fn (n: GLsizei, buffers: [*c]GLuint) callconv(.C) void;
const glGenFencesAPPLE = fn (n: GLsizei, fences: [*c]GLuint) callconv(.C) void;
const glGenFencesNV = fn (n: GLsizei, fences: [*c]GLuint) callconv(.C) void;
const glGenFragmentShadersATI = fn (range: GLuint) callconv(.C) GLuint;
const glGenFramebuffers = fn (n: GLsizei, framebuffers: [*c]GLuint) callconv(.C) void;
const glGenFramebuffersEXT = fn (n: GLsizei, framebuffers: [*c]GLuint) callconv(.C) void;
const glGenNamesAMD = fn (identifier: GLenum, num: GLuint, names: [*c]GLuint) callconv(.C) void;
const glGenOcclusionQueriesNV = fn (n: GLsizei, ids: [*c]GLuint) callconv(.C) void;
const glGenPathsNV = fn (range: GLsizei) callconv(.C) GLuint;
const glGenPerfMonitorsAMD = fn (n: GLsizei, monitors: [*c]GLuint) callconv(.C) void;
const glGenProgramPipelines = fn (n: GLsizei, pipelines: [*c]GLuint) callconv(.C) void;
const glGenProgramsARB = fn (n: GLsizei, programs: [*c]GLuint) callconv(.C) void;
const glGenProgramsNV = fn (n: GLsizei, programs: [*c]GLuint) callconv(.C) void;
const glGenQueries = fn (n: GLsizei, ids: [*c]GLuint) callconv(.C) void;
const glGenQueriesARB = fn (n: GLsizei, ids: [*c]GLuint) callconv(.C) void;
const glGenQueryResourceTagNV = fn (n: GLsizei, tagIds: [*c]GLint) callconv(.C) void;
const glGenRenderbuffers = fn (n: GLsizei, renderbuffers: [*c]GLuint) callconv(.C) void;
const glGenRenderbuffersEXT = fn (n: GLsizei, renderbuffers: [*c]GLuint) callconv(.C) void;
const glGenSamplers = fn (count: GLsizei, samplers: [*c]GLuint) callconv(.C) void;
const glGenSemaphoresEXT = fn (n: GLsizei, semaphores: [*c]GLuint) callconv(.C) void;
const glGenSymbolsEXT = fn (datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint) callconv(.C) GLuint;
const glGenTextures = fn (n: GLsizei, textures: [*c]GLuint) callconv(.C) void;
const glGenTexturesEXT = fn (n: GLsizei, textures: [*c]GLuint) callconv(.C) void;
const glGenTransformFeedbacks = fn (n: GLsizei, ids: [*c]GLuint) callconv(.C) void;
const glGenTransformFeedbacksNV = fn (n: GLsizei, ids: [*c]GLuint) callconv(.C) void;
const glGenVertexArrays = fn (n: GLsizei, arrays: [*c]GLuint) callconv(.C) void;
const glGenVertexArraysAPPLE = fn (n: GLsizei, arrays: [*c]GLuint) callconv(.C) void;
const glGenVertexShadersEXT = fn (range: GLuint) callconv(.C) GLuint;
const glGenerateMipmap = fn (target: GLenum) callconv(.C) void;
const glGenerateMipmapEXT = fn (target: GLenum) callconv(.C) void;
const glGenerateMultiTexMipmapEXT = fn (texunit: GLenum, target: GLenum) callconv(.C) void;
const glGenerateTextureMipmap = fn (texture: GLuint) callconv(.C) void;
const glGenerateTextureMipmapEXT = fn (texture: GLuint, target: GLenum) callconv(.C) void;
const glGetActiveAtomicCounterBufferiv = fn (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetActiveAttrib = fn (program: GLuint, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, size: [*c]GLint, type_: [*c]GLenum, name: [*c]GLchar) callconv(.C) void;
const glGetActiveAttribARB = fn (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: [*c]GLsizei, size: [*c]GLint, type_: [*c]GLenum, name: [*c]GLcharARB) callconv(.C) void;
const glGetActiveSubroutineName = fn (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, name: [*c]GLchar) callconv(.C) void;
const glGetActiveSubroutineUniformName = fn (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, name: [*c]GLchar) callconv(.C) void;
const glGetActiveSubroutineUniformiv = fn (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: [*c]GLint) callconv(.C) void;
const glGetActiveUniform = fn (program: GLuint, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, size: [*c]GLint, type_: [*c]GLenum, name: [*c]GLchar) callconv(.C) void;
const glGetActiveUniformARB = fn (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: [*c]GLsizei, size: [*c]GLint, type_: [*c]GLenum, name: [*c]GLcharARB) callconv(.C) void;
const glGetActiveUniformBlockName = fn (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: [*c]GLsizei, uniformBlockName: [*c]GLchar) callconv(.C) void;
const glGetActiveUniformBlockiv = fn (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetActiveUniformName = fn (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: [*c]GLsizei, uniformName: [*c]GLchar) callconv(.C) void;
const glGetActiveUniformsiv = fn (program: GLuint, uniformCount: GLsizei, uniformIndices: [*c]const GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetActiveVaryingNV = fn (program: GLuint, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, size: [*c]GLsizei, type_: [*c]GLenum, name: [*c]GLchar) callconv(.C) void;
const glGetArrayObjectfvATI = fn (array: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetArrayObjectivATI = fn (array: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetAttachedObjectsARB = fn (containerObj: GLhandleARB, maxCount: GLsizei, count: [*c]GLsizei, obj: [*c]GLhandleARB) callconv(.C) void;
const glGetAttachedShaders = fn (program: GLuint, maxCount: GLsizei, count: [*c]GLsizei, shaders: [*c]GLuint) callconv(.C) void;
const glGetAttribLocation = fn (program: GLuint, name: [*c]const GLchar) callconv(.C) GLint;
const glGetAttribLocationARB = fn (programObj: GLhandleARB, name: [*c]const GLcharARB) callconv(.C) GLint;
const glGetBooleanIndexedvEXT = fn (target: GLenum, index: GLuint, data: [*c]GLboolean) callconv(.C) void;
const glGetBooleani_v = fn (target: GLenum, index: GLuint, data: [*c]GLboolean) callconv(.C) void;
const glGetBooleanv = fn (pname: GLenum, data: [*c]GLboolean) callconv(.C) void;
const glGetBufferParameteri64v = fn (target: GLenum, pname: GLenum, params: [*c]GLint64) callconv(.C) void;
const glGetBufferParameteriv = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetBufferParameterivARB = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetBufferParameterui64vNV = fn (target: GLenum, pname: GLenum, params: [*c]GLuint64EXT) callconv(.C) void;
const glGetBufferPointerv = fn (target: GLenum, pname: GLenum, params: ?*?*c_void) callconv(.C) void;
const glGetBufferPointervARB = fn (target: GLenum, pname: GLenum, params: ?*?*c_void) callconv(.C) void;
const glGetBufferSubData = fn (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: ?*c_void) callconv(.C) void;
const glGetBufferSubDataARB = fn (target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: ?*c_void) callconv(.C) void;
const glGetClipPlanefOES = fn (plane: GLenum, equation: [*c]GLfloat) callconv(.C) void;
const glGetClipPlanexOES = fn (plane: GLenum, equation: [*c]GLfixed) callconv(.C) void;
const glGetColorTableEXT = fn (target: GLenum, format: GLenum, type_: GLenum, data: ?*c_void) callconv(.C) void;
const glGetColorTableParameterfvEXT = fn (target: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetColorTableParameterfvSGI = fn (target: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetColorTableParameterivEXT = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetColorTableParameterivSGI = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetColorTableSGI = fn (target: GLenum, format: GLenum, type_: GLenum, table: ?*c_void) callconv(.C) void;
const glGetCombinerInputParameterfvNV = fn (stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetCombinerInputParameterivNV = fn (stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetCombinerOutputParameterfvNV = fn (stage: GLenum, portion: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetCombinerOutputParameterivNV = fn (stage: GLenum, portion: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetCombinerStageParameterfvNV = fn (stage: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetCommandHeaderNV = fn (tokenID: GLenum, size: GLuint) callconv(.C) GLuint;
const glGetCompressedMultiTexImageEXT = fn (texunit: GLenum, target: GLenum, lod: GLint, img: ?*c_void) callconv(.C) void;
const glGetCompressedTexImage = fn (target: GLenum, level: GLint, img: ?*c_void) callconv(.C) void;
const glGetCompressedTexImageARB = fn (target: GLenum, level: GLint, img: ?*c_void) callconv(.C) void;
const glGetCompressedTextureImage = fn (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: ?*c_void) callconv(.C) void;
const glGetCompressedTextureImageEXT = fn (texture: GLuint, target: GLenum, lod: GLint, img: ?*c_void) callconv(.C) void;
const glGetCompressedTextureSubImage = fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: ?*c_void) callconv(.C) void;
const glGetConvolutionFilterEXT = fn (target: GLenum, format: GLenum, type_: GLenum, image: ?*c_void) callconv(.C) void;
const glGetConvolutionParameterfvEXT = fn (target: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetConvolutionParameterivEXT = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetConvolutionParameterxvOES = fn (target: GLenum, pname: GLenum, params: [*c]GLfixed) callconv(.C) void;
const glGetCoverageModulationTableNV = fn (bufSize: GLsizei, v: [*c]GLfloat) callconv(.C) void;
const glGetDebugMessageLog = fn (count: GLuint, bufSize: GLsizei, sources: [*c]GLenum, types: [*c]GLenum, ids: [*c]GLuint, severities: [*c]GLenum, lengths: [*c]GLsizei, messageLog: [*c]GLchar) callconv(.C) GLuint;
const glGetDebugMessageLogAMD = fn (count: GLuint, bufSize: GLsizei, categories: [*c]GLenum, severities: [*c]GLuint, ids: [*c]GLuint, lengths: [*c]GLsizei, message: [*c]GLchar) callconv(.C) GLuint;
const glGetDebugMessageLogARB = fn (count: GLuint, bufSize: GLsizei, sources: [*c]GLenum, types: [*c]GLenum, ids: [*c]GLuint, severities: [*c]GLenum, lengths: [*c]GLsizei, messageLog: [*c]GLchar) callconv(.C) GLuint;
const glGetDetailTexFuncSGIS = fn (target: GLenum, points: [*c]GLfloat) callconv(.C) void;
const glGetDoubleIndexedvEXT = fn (target: GLenum, index: GLuint, data: [*c]GLdouble) callconv(.C) void;
const glGetDoublei_v = fn (target: GLenum, index: GLuint, data: [*c]GLdouble) callconv(.C) void;
const glGetDoublei_vEXT = fn (pname: GLenum, index: GLuint, params: [*c]GLdouble) callconv(.C) void;
const glGetDoublev = fn (pname: GLenum, data: [*c]GLdouble) callconv(.C) void;
const glGetError = fn () callconv(.C) GLenum;
const glGetFenceivNV = fn (fence: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetFinalCombinerInputParameterfvNV = fn (variable: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetFinalCombinerInputParameterivNV = fn (variable: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetFirstPerfQueryIdINTEL = fn (queryId: [*c]GLuint) callconv(.C) void;
const glGetFixedvOES = fn (pname: GLenum, params: [*c]GLfixed) callconv(.C) void;
const glGetFloatIndexedvEXT = fn (target: GLenum, index: GLuint, data: [*c]GLfloat) callconv(.C) void;
const glGetFloati_v = fn (target: GLenum, index: GLuint, data: [*c]GLfloat) callconv(.C) void;
const glGetFloati_vEXT = fn (pname: GLenum, index: GLuint, params: [*c]GLfloat) callconv(.C) void;
const glGetFloatv = fn (pname: GLenum, data: [*c]GLfloat) callconv(.C) void;
const glGetFogFuncSGIS = fn (points: [*c]GLfloat) callconv(.C) void;
const glGetFragDataIndex = fn (program: GLuint, name: [*c]const GLchar) callconv(.C) GLint;
const glGetFragDataLocation = fn (program: GLuint, name: [*c]const GLchar) callconv(.C) GLint;
const glGetFragDataLocationEXT = fn (program: GLuint, name: [*c]const GLchar) callconv(.C) GLint;
const glGetFragmentLightfvSGIX = fn (light: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetFragmentLightivSGIX = fn (light: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetFragmentMaterialfvSGIX = fn (face: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetFragmentMaterialivSGIX = fn (face: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetFramebufferAttachmentParameteriv = fn (target: GLenum, attachment: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetFramebufferAttachmentParameterivEXT = fn (target: GLenum, attachment: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetFramebufferParameterfvAMD = fn (target: GLenum, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: [*c]GLfloat) callconv(.C) void;
const glGetFramebufferParameteriv = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetFramebufferParameterivEXT = fn (framebuffer: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetFramebufferParameterivMESA = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetGraphicsResetStatus = fn () callconv(.C) GLenum;
const glGetGraphicsResetStatusARB = fn () callconv(.C) GLenum;
const glGetHandleARB = fn (pname: GLenum) callconv(.C) GLhandleARB;
const glGetHistogramEXT = fn (target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: ?*c_void) callconv(.C) void;
const glGetHistogramParameterfvEXT = fn (target: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetHistogramParameterivEXT = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetHistogramParameterxvOES = fn (target: GLenum, pname: GLenum, params: [*c]GLfixed) callconv(.C) void;
const glGetImageHandleARB = fn (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) callconv(.C) GLuint64;
const glGetImageHandleNV = fn (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) callconv(.C) GLuint64;
const glGetImageTransformParameterfvHP = fn (target: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetImageTransformParameterivHP = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetInfoLogARB = fn (obj: GLhandleARB, maxLength: GLsizei, length: [*c]GLsizei, infoLog: [*c]GLcharARB) callconv(.C) void;
const glGetInstrumentsSGIX = fn () callconv(.C) GLint;
const glGetInteger64i_v = fn (target: GLenum, index: GLuint, data: [*c]GLint64) callconv(.C) void;
const glGetInteger64v = fn (pname: GLenum, data: [*c]GLint64) callconv(.C) void;
const glGetIntegerIndexedvEXT = fn (target: GLenum, index: GLuint, data: [*c]GLint) callconv(.C) void;
const glGetIntegeri_v = fn (target: GLenum, index: GLuint, data: [*c]GLint) callconv(.C) void;
const glGetIntegerui64i_vNV = fn (value: GLenum, index: GLuint, result: [*c]GLuint64EXT) callconv(.C) void;
const glGetIntegerui64vNV = fn (value: GLenum, result: [*c]GLuint64EXT) callconv(.C) void;
const glGetIntegerv = fn (pname: GLenum, data: [*c]GLint) callconv(.C) void;
const glGetInternalformatSampleivNV = fn (target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, count: GLsizei, params: [*c]GLint) callconv(.C) void;
const glGetInternalformati64v = fn (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: [*c]GLint64) callconv(.C) void;
const glGetInternalformativ = fn (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: [*c]GLint) callconv(.C) void;
const glGetInvariantBooleanvEXT = fn (id: GLuint, value: GLenum, data: [*c]GLboolean) callconv(.C) void;
const glGetInvariantFloatvEXT = fn (id: GLuint, value: GLenum, data: [*c]GLfloat) callconv(.C) void;
const glGetInvariantIntegervEXT = fn (id: GLuint, value: GLenum, data: [*c]GLint) callconv(.C) void;
const glGetLightxOES = fn (light: GLenum, pname: GLenum, params: [*c]GLfixed) callconv(.C) void;
const glGetListParameterfvSGIX = fn (list: GLuint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetListParameterivSGIX = fn (list: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetLocalConstantBooleanvEXT = fn (id: GLuint, value: GLenum, data: [*c]GLboolean) callconv(.C) void;
const glGetLocalConstantFloatvEXT = fn (id: GLuint, value: GLenum, data: [*c]GLfloat) callconv(.C) void;
const glGetLocalConstantIntegervEXT = fn (id: GLuint, value: GLenum, data: [*c]GLint) callconv(.C) void;
const glGetMapAttribParameterfvNV = fn (target: GLenum, index: GLuint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetMapAttribParameterivNV = fn (target: GLenum, index: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetMapControlPointsNV = fn (target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, packed_: GLboolean, points: ?*c_void) callconv(.C) void;
const glGetMapParameterfvNV = fn (target: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetMapParameterivNV = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetMapxvOES = fn (target: GLenum, query: GLenum, v: [*c]GLfixed) callconv(.C) void;
const glGetMaterialxOES = fn (face: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glGetMemoryObjectDetachedResourcesuivNV = fn (memory: GLuint, pname: GLenum, first: GLint, count: GLsizei, params: [*c]GLuint) callconv(.C) void;
const glGetMemoryObjectParameterivEXT = fn (memoryObject: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetMinmaxEXT = fn (target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: ?*c_void) callconv(.C) void;
const glGetMinmaxParameterfvEXT = fn (target: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetMinmaxParameterivEXT = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetMultiTexEnvfvEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetMultiTexEnvivEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetMultiTexGendvEXT = fn (texunit: GLenum, coord: GLenum, pname: GLenum, params: [*c]GLdouble) callconv(.C) void;
const glGetMultiTexGenfvEXT = fn (texunit: GLenum, coord: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetMultiTexGenivEXT = fn (texunit: GLenum, coord: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetMultiTexImageEXT = fn (texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: ?*c_void) callconv(.C) void;
const glGetMultiTexLevelParameterfvEXT = fn (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetMultiTexLevelParameterivEXT = fn (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetMultiTexParameterIivEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetMultiTexParameterIuivEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, params: [*c]GLuint) callconv(.C) void;
const glGetMultiTexParameterfvEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetMultiTexParameterivEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetMultisamplefv = fn (pname: GLenum, index: GLuint, val: [*c]GLfloat) callconv(.C) void;
const glGetMultisamplefvNV = fn (pname: GLenum, index: GLuint, val: [*c]GLfloat) callconv(.C) void;
const glGetNamedBufferParameteri64v = fn (buffer: GLuint, pname: GLenum, params: [*c]GLint64) callconv(.C) void;
const glGetNamedBufferParameteriv = fn (buffer: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetNamedBufferParameterivEXT = fn (buffer: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetNamedBufferParameterui64vNV = fn (buffer: GLuint, pname: GLenum, params: [*c]GLuint64EXT) callconv(.C) void;
const glGetNamedBufferPointerv = fn (buffer: GLuint, pname: GLenum, params: ?*?*c_void) callconv(.C) void;
const glGetNamedBufferPointervEXT = fn (buffer: GLuint, pname: GLenum, params: ?*?*c_void) callconv(.C) void;
const glGetNamedBufferSubData = fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: ?*c_void) callconv(.C) void;
const glGetNamedBufferSubDataEXT = fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: ?*c_void) callconv(.C) void;
const glGetNamedFramebufferAttachmentParameteriv = fn (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetNamedFramebufferAttachmentParameterivEXT = fn (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetNamedFramebufferParameterfvAMD = fn (framebuffer: GLuint, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: [*c]GLfloat) callconv(.C) void;
const glGetNamedFramebufferParameteriv = fn (framebuffer: GLuint, pname: GLenum, param: [*c]GLint) callconv(.C) void;
const glGetNamedFramebufferParameterivEXT = fn (framebuffer: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetNamedProgramLocalParameterIivEXT = fn (program: GLuint, target: GLenum, index: GLuint, params: [*c]GLint) callconv(.C) void;
const glGetNamedProgramLocalParameterIuivEXT = fn (program: GLuint, target: GLenum, index: GLuint, params: [*c]GLuint) callconv(.C) void;
const glGetNamedProgramLocalParameterdvEXT = fn (program: GLuint, target: GLenum, index: GLuint, params: [*c]GLdouble) callconv(.C) void;
const glGetNamedProgramLocalParameterfvEXT = fn (program: GLuint, target: GLenum, index: GLuint, params: [*c]GLfloat) callconv(.C) void;
const glGetNamedProgramStringEXT = fn (program: GLuint, target: GLenum, pname: GLenum, string: ?*c_void) callconv(.C) void;
const glGetNamedProgramivEXT = fn (program: GLuint, target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetNamedRenderbufferParameteriv = fn (renderbuffer: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetNamedRenderbufferParameterivEXT = fn (renderbuffer: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetNamedStringARB = fn (namelen: GLint, name: [*c]const GLchar, bufSize: GLsizei, stringlen: [*c]GLint, string: [*c]GLchar) callconv(.C) void;
const glGetNamedStringivARB = fn (namelen: GLint, name: [*c]const GLchar, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetNextPerfQueryIdINTEL = fn (queryId: GLuint, nextQueryId: [*c]GLuint) callconv(.C) void;
const glGetObjectBufferfvATI = fn (buffer: GLuint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetObjectBufferivATI = fn (buffer: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetObjectLabel = fn (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: [*c]GLsizei, label: [*c]GLchar) callconv(.C) void;
const glGetObjectLabelEXT = fn (type_: GLenum, object: GLuint, bufSize: GLsizei, length: [*c]GLsizei, label: [*c]GLchar) callconv(.C) void;
const glGetObjectParameterfvARB = fn (obj: GLhandleARB, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetObjectParameterivAPPLE = fn (objectType: GLenum, name: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetObjectParameterivARB = fn (obj: GLhandleARB, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetObjectPtrLabel = fn (ptr: ?*const c_void, bufSize: GLsizei, length: [*c]GLsizei, label: [*c]GLchar) callconv(.C) void;
const glGetOcclusionQueryivNV = fn (id: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetOcclusionQueryuivNV = fn (id: GLuint, pname: GLenum, params: [*c]GLuint) callconv(.C) void;
const glGetPathCommandsNV = fn (path: GLuint, commands: [*c]GLubyte) callconv(.C) void;
const glGetPathCoordsNV = fn (path: GLuint, coords: [*c]GLfloat) callconv(.C) void;
const glGetPathDashArrayNV = fn (path: GLuint, dashArray: [*c]GLfloat) callconv(.C) void;
const glGetPathLengthNV = fn (path: GLuint, startSegment: GLsizei, numSegments: GLsizei) callconv(.C) GLfloat;
const glGetPathMetricRangeNV = fn (metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: [*c]GLfloat) callconv(.C) void;
const glGetPathMetricsNV = fn (metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, stride: GLsizei, metrics: [*c]GLfloat) callconv(.C) void;
const glGetPathParameterfvNV = fn (path: GLuint, pname: GLenum, value: [*c]GLfloat) callconv(.C) void;
const glGetPathParameterivNV = fn (path: GLuint, pname: GLenum, value: [*c]GLint) callconv(.C) void;
const glGetPathSpacingNV = fn (pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: [*c]GLfloat) callconv(.C) void;
const glGetPerfCounterInfoINTEL = fn (queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: [*c]GLchar, counterDescLength: GLuint, counterDesc: [*c]GLchar, counterOffset: [*c]GLuint, counterDataSize: [*c]GLuint, counterTypeEnum: [*c]GLuint, counterDataTypeEnum: [*c]GLuint, rawCounterMaxValue: [*c]GLuint64) callconv(.C) void;
const glGetPerfMonitorCounterDataAMD = fn (monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: [*c]GLuint, bytesWritten: [*c]GLint) callconv(.C) void;
const glGetPerfMonitorCounterInfoAMD = fn (group: GLuint, counter: GLuint, pname: GLenum, data: ?*c_void) callconv(.C) void;
const glGetPerfMonitorCounterStringAMD = fn (group: GLuint, counter: GLuint, bufSize: GLsizei, length: [*c]GLsizei, counterString: [*c]GLchar) callconv(.C) void;
const glGetPerfMonitorCountersAMD = fn (group: GLuint, numCounters: [*c]GLint, maxActiveCounters: [*c]GLint, counterSize: GLsizei, counters: [*c]GLuint) callconv(.C) void;
const glGetPerfMonitorGroupStringAMD = fn (group: GLuint, bufSize: GLsizei, length: [*c]GLsizei, groupString: [*c]GLchar) callconv(.C) void;
const glGetPerfMonitorGroupsAMD = fn (numGroups: [*c]GLint, groupsSize: GLsizei, groups: [*c]GLuint) callconv(.C) void;
const glGetPerfQueryDataINTEL = fn (queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: ?*c_void, bytesWritten: [*c]GLuint) callconv(.C) void;
const glGetPerfQueryIdByNameINTEL = fn (queryName: [*c]GLchar, queryId: [*c]GLuint) callconv(.C) void;
const glGetPerfQueryInfoINTEL = fn (queryId: GLuint, queryNameLength: GLuint, queryName: [*c]GLchar, dataSize: [*c]GLuint, noCounters: [*c]GLuint, noInstances: [*c]GLuint, capsMask: [*c]GLuint) callconv(.C) void;
const glGetPixelMapxv = fn (map: GLenum, size: GLint, values: [*c]GLfixed) callconv(.C) void;
const glGetPixelTexGenParameterfvSGIS = fn (pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetPixelTexGenParameterivSGIS = fn (pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetPixelTransformParameterfvEXT = fn (target: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetPixelTransformParameterivEXT = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetPointerIndexedvEXT = fn (target: GLenum, index: GLuint, data: ?*?*c_void) callconv(.C) void;
const glGetPointeri_vEXT = fn (pname: GLenum, index: GLuint, params: ?*?*c_void) callconv(.C) void;
const glGetPointerv = fn (pname: GLenum, params: ?*?*c_void) callconv(.C) void;
const glGetPointervEXT = fn (pname: GLenum, params: ?*?*c_void) callconv(.C) void;
const glGetProgramBinary = fn (program: GLuint, bufSize: GLsizei, length: [*c]GLsizei, binaryFormat: [*c]GLenum, binary: ?*c_void) callconv(.C) void;
const glGetProgramEnvParameterIivNV = fn (target: GLenum, index: GLuint, params: [*c]GLint) callconv(.C) void;
const glGetProgramEnvParameterIuivNV = fn (target: GLenum, index: GLuint, params: [*c]GLuint) callconv(.C) void;
const glGetProgramEnvParameterdvARB = fn (target: GLenum, index: GLuint, params: [*c]GLdouble) callconv(.C) void;
const glGetProgramEnvParameterfvARB = fn (target: GLenum, index: GLuint, params: [*c]GLfloat) callconv(.C) void;
const glGetProgramInfoLog = fn (program: GLuint, bufSize: GLsizei, length: [*c]GLsizei, infoLog: [*c]GLchar) callconv(.C) void;
const glGetProgramInterfaceiv = fn (program: GLuint, programInterface: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetProgramLocalParameterIivNV = fn (target: GLenum, index: GLuint, params: [*c]GLint) callconv(.C) void;
const glGetProgramLocalParameterIuivNV = fn (target: GLenum, index: GLuint, params: [*c]GLuint) callconv(.C) void;
const glGetProgramLocalParameterdvARB = fn (target: GLenum, index: GLuint, params: [*c]GLdouble) callconv(.C) void;
const glGetProgramLocalParameterfvARB = fn (target: GLenum, index: GLuint, params: [*c]GLfloat) callconv(.C) void;
const glGetProgramNamedParameterdvNV = fn (id: GLuint, len: GLsizei, name: [*c]const GLubyte, params: [*c]GLdouble) callconv(.C) void;
const glGetProgramNamedParameterfvNV = fn (id: GLuint, len: GLsizei, name: [*c]const GLubyte, params: [*c]GLfloat) callconv(.C) void;
const glGetProgramParameterdvNV = fn (target: GLenum, index: GLuint, pname: GLenum, params: [*c]GLdouble) callconv(.C) void;
const glGetProgramParameterfvNV = fn (target: GLenum, index: GLuint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetProgramPipelineInfoLog = fn (pipeline: GLuint, bufSize: GLsizei, length: [*c]GLsizei, infoLog: [*c]GLchar) callconv(.C) void;
const glGetProgramPipelineiv = fn (pipeline: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetProgramResourceIndex = fn (program: GLuint, programInterface: GLenum, name: [*c]const GLchar) callconv(.C) GLuint;
const glGetProgramResourceLocation = fn (program: GLuint, programInterface: GLenum, name: [*c]const GLchar) callconv(.C) GLint;
const glGetProgramResourceLocationIndex = fn (program: GLuint, programInterface: GLenum, name: [*c]const GLchar) callconv(.C) GLint;
const glGetProgramResourceName = fn (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, name: [*c]GLchar) callconv(.C) void;
const glGetProgramResourcefvNV = fn (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: [*c]const GLenum, count: GLsizei, length: [*c]GLsizei, params: [*c]GLfloat) callconv(.C) void;
const glGetProgramResourceiv = fn (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: [*c]const GLenum, count: GLsizei, length: [*c]GLsizei, params: [*c]GLint) callconv(.C) void;
const glGetProgramStageiv = fn (program: GLuint, shadertype: GLenum, pname: GLenum, values: [*c]GLint) callconv(.C) void;
const glGetProgramStringARB = fn (target: GLenum, pname: GLenum, string: ?*c_void) callconv(.C) void;
const glGetProgramStringNV = fn (id: GLuint, pname: GLenum, program: [*c]GLubyte) callconv(.C) void;
const glGetProgramSubroutineParameteruivNV = fn (target: GLenum, index: GLuint, param: [*c]GLuint) callconv(.C) void;
const glGetProgramiv = fn (program: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetProgramivARB = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetProgramivNV = fn (id: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetQueryBufferObjecti64v = fn (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) callconv(.C) void;
const glGetQueryBufferObjectiv = fn (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) callconv(.C) void;
const glGetQueryBufferObjectui64v = fn (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) callconv(.C) void;
const glGetQueryBufferObjectuiv = fn (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) callconv(.C) void;
const glGetQueryIndexediv = fn (target: GLenum, index: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetQueryObjecti64v = fn (id: GLuint, pname: GLenum, params: [*c]GLint64) callconv(.C) void;
const glGetQueryObjecti64vEXT = fn (id: GLuint, pname: GLenum, params: [*c]GLint64) callconv(.C) void;
const glGetQueryObjectiv = fn (id: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetQueryObjectivARB = fn (id: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetQueryObjectui64v = fn (id: GLuint, pname: GLenum, params: [*c]GLuint64) callconv(.C) void;
const glGetQueryObjectui64vEXT = fn (id: GLuint, pname: GLenum, params: [*c]GLuint64) callconv(.C) void;
const glGetQueryObjectuiv = fn (id: GLuint, pname: GLenum, params: [*c]GLuint) callconv(.C) void;
const glGetQueryObjectuivARB = fn (id: GLuint, pname: GLenum, params: [*c]GLuint) callconv(.C) void;
const glGetQueryiv = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetQueryivARB = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetRenderbufferParameteriv = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetRenderbufferParameterivEXT = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetSamplerParameterIiv = fn (sampler: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetSamplerParameterIuiv = fn (sampler: GLuint, pname: GLenum, params: [*c]GLuint) callconv(.C) void;
const glGetSamplerParameterfv = fn (sampler: GLuint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetSamplerParameteriv = fn (sampler: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetSemaphoreParameterivNV = fn (semaphore: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetSemaphoreParameterui64vEXT = fn (semaphore: GLuint, pname: GLenum, params: [*c]GLuint64) callconv(.C) void;
const glGetSeparableFilterEXT = fn (target: GLenum, format: GLenum, type_: GLenum, row: ?*c_void, column: ?*c_void, span: ?*c_void) callconv(.C) void;
const glGetShaderInfoLog = fn (shader: GLuint, bufSize: GLsizei, length: [*c]GLsizei, infoLog: [*c]GLchar) callconv(.C) void;
const glGetShaderPrecisionFormat = fn (shadertype: GLenum, precisiontype: GLenum, range: [*c]GLint, precision: [*c]GLint) callconv(.C) void;
const glGetShaderSource = fn (shader: GLuint, bufSize: GLsizei, length: [*c]GLsizei, source: [*c]GLchar) callconv(.C) void;
const glGetShaderSourceARB = fn (obj: GLhandleARB, maxLength: GLsizei, length: [*c]GLsizei, source: [*c]GLcharARB) callconv(.C) void;
const glGetShaderiv = fn (shader: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetShadingRateImagePaletteNV = fn (viewport: GLuint, entry: GLuint, rate: [*c]GLenum) callconv(.C) void;
const glGetShadingRateSampleLocationivNV = fn (rate: GLenum, samples: GLuint, index: GLuint, location: [*c]GLint) callconv(.C) void;
const glGetSharpenTexFuncSGIS = fn (target: GLenum, points: [*c]GLfloat) callconv(.C) void;
const glGetStageIndexNV = fn (shadertype: GLenum) callconv(.C) GLushort;
const glGetString = fn (name: GLenum) callconv(.C) [*c]const GLubyte;
const glGetStringi = fn (name: GLenum, index: GLuint) callconv(.C) [*c]const GLubyte;
const glGetSubroutineIndex = fn (program: GLuint, shadertype: GLenum, name: [*c]const GLchar) callconv(.C) GLuint;
const glGetSubroutineUniformLocation = fn (program: GLuint, shadertype: GLenum, name: [*c]const GLchar) callconv(.C) GLint;
const glGetSynciv = fn (sync: GLsync, pname: GLenum, count: GLsizei, length: [*c]GLsizei, values: [*c]GLint) callconv(.C) void;
const glGetTexBumpParameterfvATI = fn (pname: GLenum, param: [*c]GLfloat) callconv(.C) void;
const glGetTexBumpParameterivATI = fn (pname: GLenum, param: [*c]GLint) callconv(.C) void;
const glGetTexEnvxvOES = fn (target: GLenum, pname: GLenum, params: [*c]GLfixed) callconv(.C) void;
const glGetTexFilterFuncSGIS = fn (target: GLenum, filter: GLenum, weights: [*c]GLfloat) callconv(.C) void;
const glGetTexGenxvOES = fn (coord: GLenum, pname: GLenum, params: [*c]GLfixed) callconv(.C) void;
const glGetTexImage = fn (target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: ?*c_void) callconv(.C) void;
const glGetTexLevelParameterfv = fn (target: GLenum, level: GLint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetTexLevelParameteriv = fn (target: GLenum, level: GLint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetTexLevelParameterxvOES = fn (target: GLenum, level: GLint, pname: GLenum, params: [*c]GLfixed) callconv(.C) void;
const glGetTexParameterIiv = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetTexParameterIivEXT = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetTexParameterIuiv = fn (target: GLenum, pname: GLenum, params: [*c]GLuint) callconv(.C) void;
const glGetTexParameterIuivEXT = fn (target: GLenum, pname: GLenum, params: [*c]GLuint) callconv(.C) void;
const glGetTexParameterPointervAPPLE = fn (target: GLenum, pname: GLenum, params: ?*?*c_void) callconv(.C) void;
const glGetTexParameterfv = fn (target: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetTexParameteriv = fn (target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetTexParameterxvOES = fn (target: GLenum, pname: GLenum, params: [*c]GLfixed) callconv(.C) void;
const glGetTextureHandleARB = fn (texture: GLuint) callconv(.C) GLuint64;
const glGetTextureHandleNV = fn (texture: GLuint) callconv(.C) GLuint64;
const glGetTextureImage = fn (texture: GLuint, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, pixels: ?*c_void) callconv(.C) void;
const glGetTextureImageEXT = fn (texture: GLuint, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: ?*c_void) callconv(.C) void;
const glGetTextureLevelParameterfv = fn (texture: GLuint, level: GLint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetTextureLevelParameterfvEXT = fn (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetTextureLevelParameteriv = fn (texture: GLuint, level: GLint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetTextureLevelParameterivEXT = fn (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetTextureParameterIiv = fn (texture: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetTextureParameterIivEXT = fn (texture: GLuint, target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetTextureParameterIuiv = fn (texture: GLuint, pname: GLenum, params: [*c]GLuint) callconv(.C) void;
const glGetTextureParameterIuivEXT = fn (texture: GLuint, target: GLenum, pname: GLenum, params: [*c]GLuint) callconv(.C) void;
const glGetTextureParameterfv = fn (texture: GLuint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetTextureParameterfvEXT = fn (texture: GLuint, target: GLenum, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetTextureParameteriv = fn (texture: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetTextureParameterivEXT = fn (texture: GLuint, target: GLenum, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetTextureSamplerHandleARB = fn (texture: GLuint, sampler: GLuint) callconv(.C) GLuint64;
const glGetTextureSamplerHandleNV = fn (texture: GLuint, sampler: GLuint) callconv(.C) GLuint64;
const glGetTextureSubImage = fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, pixels: ?*c_void) callconv(.C) void;
const glGetTrackMatrixivNV = fn (target: GLenum, address: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetTransformFeedbackVarying = fn (program: GLuint, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, size: [*c]GLsizei, type_: [*c]GLenum, name: [*c]GLchar) callconv(.C) void;
const glGetTransformFeedbackVaryingEXT = fn (program: GLuint, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, size: [*c]GLsizei, type_: [*c]GLenum, name: [*c]GLchar) callconv(.C) void;
const glGetTransformFeedbackVaryingNV = fn (program: GLuint, index: GLuint, location: [*c]GLint) callconv(.C) void;
const glGetTransformFeedbacki64_v = fn (xfb: GLuint, pname: GLenum, index: GLuint, param: [*c]GLint64) callconv(.C) void;
const glGetTransformFeedbacki_v = fn (xfb: GLuint, pname: GLenum, index: GLuint, param: [*c]GLint) callconv(.C) void;
const glGetTransformFeedbackiv = fn (xfb: GLuint, pname: GLenum, param: [*c]GLint) callconv(.C) void;
const glGetUniformBlockIndex = fn (program: GLuint, uniformBlockName: [*c]const GLchar) callconv(.C) GLuint;
const glGetUniformBufferSizeEXT = fn (program: GLuint, location: GLint) callconv(.C) GLint;
const glGetUniformIndices = fn (program: GLuint, uniformCount: GLsizei, uniformNames: [*c]const [*c]const GLchar, uniformIndices: [*c]GLuint) callconv(.C) void;
const glGetUniformLocation = fn (program: GLuint, name: [*c]const GLchar) callconv(.C) GLint;
const glGetUniformLocationARB = fn (programObj: GLhandleARB, name: [*c]const GLcharARB) callconv(.C) GLint;
const glGetUniformOffsetEXT = fn (program: GLuint, location: GLint) callconv(.C) GLintptr;
const glGetUniformSubroutineuiv = fn (shadertype: GLenum, location: GLint, params: [*c]GLuint) callconv(.C) void;
const glGetUniformdv = fn (program: GLuint, location: GLint, params: [*c]GLdouble) callconv(.C) void;
const glGetUniformfv = fn (program: GLuint, location: GLint, params: [*c]GLfloat) callconv(.C) void;
const glGetUniformfvARB = fn (programObj: GLhandleARB, location: GLint, params: [*c]GLfloat) callconv(.C) void;
const glGetUniformi64vARB = fn (program: GLuint, location: GLint, params: [*c]GLint64) callconv(.C) void;
const glGetUniformi64vNV = fn (program: GLuint, location: GLint, params: [*c]GLint64EXT) callconv(.C) void;
const glGetUniformiv = fn (program: GLuint, location: GLint, params: [*c]GLint) callconv(.C) void;
const glGetUniformivARB = fn (programObj: GLhandleARB, location: GLint, params: [*c]GLint) callconv(.C) void;
const glGetUniformui64vARB = fn (program: GLuint, location: GLint, params: [*c]GLuint64) callconv(.C) void;
const glGetUniformui64vNV = fn (program: GLuint, location: GLint, params: [*c]GLuint64EXT) callconv(.C) void;
const glGetUniformuiv = fn (program: GLuint, location: GLint, params: [*c]GLuint) callconv(.C) void;
const glGetUniformuivEXT = fn (program: GLuint, location: GLint, params: [*c]GLuint) callconv(.C) void;
const glGetUnsignedBytei_vEXT = fn (target: GLenum, index: GLuint, data: [*c]GLubyte) callconv(.C) void;
const glGetUnsignedBytevEXT = fn (pname: GLenum, data: [*c]GLubyte) callconv(.C) void;
const glGetVariantArrayObjectfvATI = fn (id: GLuint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetVariantArrayObjectivATI = fn (id: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetVariantBooleanvEXT = fn (id: GLuint, value: GLenum, data: [*c]GLboolean) callconv(.C) void;
const glGetVariantFloatvEXT = fn (id: GLuint, value: GLenum, data: [*c]GLfloat) callconv(.C) void;
const glGetVariantIntegervEXT = fn (id: GLuint, value: GLenum, data: [*c]GLint) callconv(.C) void;
const glGetVariantPointervEXT = fn (id: GLuint, value: GLenum, data: ?*?*c_void) callconv(.C) void;
const glGetVaryingLocationNV = fn (program: GLuint, name: [*c]const GLchar) callconv(.C) GLint;
const glGetVertexArrayIndexed64iv = fn (vaobj: GLuint, index: GLuint, pname: GLenum, param: [*c]GLint64) callconv(.C) void;
const glGetVertexArrayIndexediv = fn (vaobj: GLuint, index: GLuint, pname: GLenum, param: [*c]GLint) callconv(.C) void;
const glGetVertexArrayIntegeri_vEXT = fn (vaobj: GLuint, index: GLuint, pname: GLenum, param: [*c]GLint) callconv(.C) void;
const glGetVertexArrayIntegervEXT = fn (vaobj: GLuint, pname: GLenum, param: [*c]GLint) callconv(.C) void;
const glGetVertexArrayPointeri_vEXT = fn (vaobj: GLuint, index: GLuint, pname: GLenum, param: ?*?*c_void) callconv(.C) void;
const glGetVertexArrayPointervEXT = fn (vaobj: GLuint, pname: GLenum, param: ?*?*c_void) callconv(.C) void;
const glGetVertexArrayiv = fn (vaobj: GLuint, pname: GLenum, param: [*c]GLint) callconv(.C) void;
const glGetVertexAttribArrayObjectfvATI = fn (index: GLuint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetVertexAttribArrayObjectivATI = fn (index: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetVertexAttribIiv = fn (index: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetVertexAttribIivEXT = fn (index: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetVertexAttribIuiv = fn (index: GLuint, pname: GLenum, params: [*c]GLuint) callconv(.C) void;
const glGetVertexAttribIuivEXT = fn (index: GLuint, pname: GLenum, params: [*c]GLuint) callconv(.C) void;
const glGetVertexAttribLdv = fn (index: GLuint, pname: GLenum, params: [*c]GLdouble) callconv(.C) void;
const glGetVertexAttribLdvEXT = fn (index: GLuint, pname: GLenum, params: [*c]GLdouble) callconv(.C) void;
const glGetVertexAttribLi64vNV = fn (index: GLuint, pname: GLenum, params: [*c]GLint64EXT) callconv(.C) void;
const glGetVertexAttribLui64vARB = fn (index: GLuint, pname: GLenum, params: [*c]GLuint64EXT) callconv(.C) void;
const glGetVertexAttribLui64vNV = fn (index: GLuint, pname: GLenum, params: [*c]GLuint64EXT) callconv(.C) void;
const glGetVertexAttribPointerv = fn (index: GLuint, pname: GLenum, pointer: ?*?*c_void) callconv(.C) void;
const glGetVertexAttribPointervARB = fn (index: GLuint, pname: GLenum, pointer: ?*?*c_void) callconv(.C) void;
const glGetVertexAttribPointervNV = fn (index: GLuint, pname: GLenum, pointer: ?*?*c_void) callconv(.C) void;
const glGetVertexAttribdv = fn (index: GLuint, pname: GLenum, params: [*c]GLdouble) callconv(.C) void;
const glGetVertexAttribdvARB = fn (index: GLuint, pname: GLenum, params: [*c]GLdouble) callconv(.C) void;
const glGetVertexAttribdvNV = fn (index: GLuint, pname: GLenum, params: [*c]GLdouble) callconv(.C) void;
const glGetVertexAttribfv = fn (index: GLuint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetVertexAttribfvARB = fn (index: GLuint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetVertexAttribfvNV = fn (index: GLuint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetVertexAttribiv = fn (index: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetVertexAttribivARB = fn (index: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetVertexAttribivNV = fn (index: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetVideoCaptureStreamdvNV = fn (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: [*c]GLdouble) callconv(.C) void;
const glGetVideoCaptureStreamfvNV = fn (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: [*c]GLfloat) callconv(.C) void;
const glGetVideoCaptureStreamivNV = fn (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetVideoCaptureivNV = fn (video_capture_slot: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetVideoi64vNV = fn (video_slot: GLuint, pname: GLenum, params: [*c]GLint64EXT) callconv(.C) void;
const glGetVideoivNV = fn (video_slot: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glGetVideoui64vNV = fn (video_slot: GLuint, pname: GLenum, params: [*c]GLuint64EXT) callconv(.C) void;
const glGetVideouivNV = fn (video_slot: GLuint, pname: GLenum, params: [*c]GLuint) callconv(.C) void;
const glGetVkProcAddrNV = fn (name: [*c]const GLchar) callconv(.C) GLVULKANPROCNV;
const glGetnCompressedTexImageARB = fn (target: GLenum, lod: GLint, bufSize: GLsizei, img: ?*c_void) callconv(.C) void;
const glGetnTexImageARB = fn (target: GLenum, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, img: ?*c_void) callconv(.C) void;
const glGetnUniformdvARB = fn (program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLdouble) callconv(.C) void;
const glGetnUniformfv = fn (program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLfloat) callconv(.C) void;
const glGetnUniformfvARB = fn (program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLfloat) callconv(.C) void;
const glGetnUniformi64vARB = fn (program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLint64) callconv(.C) void;
const glGetnUniformiv = fn (program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLint) callconv(.C) void;
const glGetnUniformivARB = fn (program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLint) callconv(.C) void;
const glGetnUniformui64vARB = fn (program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLuint64) callconv(.C) void;
const glGetnUniformuiv = fn (program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLuint) callconv(.C) void;
const glGetnUniformuivARB = fn (program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLuint) callconv(.C) void;
const glGlobalAlphaFactorbSUN = fn (factor: GLbyte) callconv(.C) void;
const glGlobalAlphaFactordSUN = fn (factor: GLdouble) callconv(.C) void;
const glGlobalAlphaFactorfSUN = fn (factor: GLfloat) callconv(.C) void;
const glGlobalAlphaFactoriSUN = fn (factor: GLint) callconv(.C) void;
const glGlobalAlphaFactorsSUN = fn (factor: GLshort) callconv(.C) void;
const glGlobalAlphaFactorubSUN = fn (factor: GLubyte) callconv(.C) void;
const glGlobalAlphaFactoruiSUN = fn (factor: GLuint) callconv(.C) void;
const glGlobalAlphaFactorusSUN = fn (factor: GLushort) callconv(.C) void;
const glHint = fn (target: GLenum, mode: GLenum) callconv(.C) void;
const glHintPGI = fn (target: GLenum, mode: GLint) callconv(.C) void;
const glHistogramEXT = fn (target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) callconv(.C) void;
const glIglooInterfaceSGIX = fn (pname: GLenum, params: ?*const c_void) callconv(.C) void;
const glImageTransformParameterfHP = fn (target: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glImageTransformParameterfvHP = fn (target: GLenum, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glImageTransformParameteriHP = fn (target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glImageTransformParameterivHP = fn (target: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glImportMemoryFdEXT = fn (memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint) callconv(.C) void;
const glImportMemoryWin32HandleEXT = fn (memory: GLuint, size: GLuint64, handleType: GLenum, handle: ?*c_void) callconv(.C) void;
const glImportMemoryWin32NameEXT = fn (memory: GLuint, size: GLuint64, handleType: GLenum, name: ?*const c_void) callconv(.C) void;
const glImportSemaphoreFdEXT = fn (semaphore: GLuint, handleType: GLenum, fd: GLint) callconv(.C) void;
const glImportSemaphoreWin32HandleEXT = fn (semaphore: GLuint, handleType: GLenum, handle: ?*c_void) callconv(.C) void;
const glImportSemaphoreWin32NameEXT = fn (semaphore: GLuint, handleType: GLenum, name: ?*const c_void) callconv(.C) void;
const glImportSyncEXT = fn (external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield) callconv(.C) GLsync;
const glIndexFormatNV = fn (type_: GLenum, stride: GLsizei) callconv(.C) void;
const glIndexFuncEXT = fn (func: GLenum, ref: GLclampf) callconv(.C) void;
const glIndexMaterialEXT = fn (face: GLenum, mode: GLenum) callconv(.C) void;
const glIndexPointerEXT = fn (type_: GLenum, stride: GLsizei, count: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glIndexPointerListIBM = fn (type_: GLenum, stride: GLint, pointer: ?*const ?*const c_void, ptrstride: GLint) callconv(.C) void;
const glIndexxOES = fn (component: GLfixed) callconv(.C) void;
const glIndexxvOES = fn (component: [*c]const GLfixed) callconv(.C) void;
const glInsertComponentEXT = fn (res: GLuint, src: GLuint, num: GLuint) callconv(.C) void;
const glInsertEventMarkerEXT = fn (length: GLsizei, marker: [*c]const GLchar) callconv(.C) void;
const glInstrumentsBufferSGIX = fn (size: GLsizei, buffer: [*c]GLint) callconv(.C) void;
const glInterpolatePathsNV = fn (resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) callconv(.C) void;
const glInvalidateBufferData = fn (buffer: GLuint) callconv(.C) void;
const glInvalidateBufferSubData = fn (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) callconv(.C) void;
const glInvalidateFramebuffer = fn (target: GLenum, numAttachments: GLsizei, attachments: [*c]const GLenum) callconv(.C) void;
const glInvalidateNamedFramebufferData = fn (framebuffer: GLuint, numAttachments: GLsizei, attachments: [*c]const GLenum) callconv(.C) void;
const glInvalidateNamedFramebufferSubData = fn (framebuffer: GLuint, numAttachments: GLsizei, attachments: [*c]const GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glInvalidateSubFramebuffer = fn (target: GLenum, numAttachments: GLsizei, attachments: [*c]const GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glInvalidateTexImage = fn (texture: GLuint, level: GLint) callconv(.C) void;
const glInvalidateTexSubImage = fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) callconv(.C) void;
const glIsAsyncMarkerSGIX = fn (marker: GLuint) callconv(.C) GLboolean;
const glIsBuffer = fn (buffer: GLuint) callconv(.C) GLboolean;
const glIsBufferARB = fn (buffer: GLuint) callconv(.C) GLboolean;
const glIsBufferResidentNV = fn (target: GLenum) callconv(.C) GLboolean;
const glIsCommandListNV = fn (list: GLuint) callconv(.C) GLboolean;
const glIsEnabled = fn (cap: GLenum) callconv(.C) GLboolean;
const glIsEnabledIndexedEXT = fn (target: GLenum, index: GLuint) callconv(.C) GLboolean;
const glIsEnabledi = fn (target: GLenum, index: GLuint) callconv(.C) GLboolean;
const glIsFenceAPPLE = fn (fence: GLuint) callconv(.C) GLboolean;
const glIsFenceNV = fn (fence: GLuint) callconv(.C) GLboolean;
const glIsFramebuffer = fn (framebuffer: GLuint) callconv(.C) GLboolean;
const glIsFramebufferEXT = fn (framebuffer: GLuint) callconv(.C) GLboolean;
const glIsImageHandleResidentARB = fn (handle: GLuint64) callconv(.C) GLboolean;
const glIsImageHandleResidentNV = fn (handle: GLuint64) callconv(.C) GLboolean;
const glIsMemoryObjectEXT = fn (memoryObject: GLuint) callconv(.C) GLboolean;
const glIsNameAMD = fn (identifier: GLenum, name: GLuint) callconv(.C) GLboolean;
const glIsNamedBufferResidentNV = fn (buffer: GLuint) callconv(.C) GLboolean;
const glIsNamedStringARB = fn (namelen: GLint, name: [*c]const GLchar) callconv(.C) GLboolean;
const glIsObjectBufferATI = fn (buffer: GLuint) callconv(.C) GLboolean;
const glIsOcclusionQueryNV = fn (id: GLuint) callconv(.C) GLboolean;
const glIsPathNV = fn (path: GLuint) callconv(.C) GLboolean;
const glIsPointInFillPathNV = fn (path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) callconv(.C) GLboolean;
const glIsPointInStrokePathNV = fn (path: GLuint, x: GLfloat, y: GLfloat) callconv(.C) GLboolean;
const glIsProgram = fn (program: GLuint) callconv(.C) GLboolean;
const glIsProgramARB = fn (program: GLuint) callconv(.C) GLboolean;
const glIsProgramNV = fn (id: GLuint) callconv(.C) GLboolean;
const glIsProgramPipeline = fn (pipeline: GLuint) callconv(.C) GLboolean;
const glIsQuery = fn (id: GLuint) callconv(.C) GLboolean;
const glIsQueryARB = fn (id: GLuint) callconv(.C) GLboolean;
const glIsRenderbuffer = fn (renderbuffer: GLuint) callconv(.C) GLboolean;
const glIsRenderbufferEXT = fn (renderbuffer: GLuint) callconv(.C) GLboolean;
const glIsSampler = fn (sampler: GLuint) callconv(.C) GLboolean;
const glIsSemaphoreEXT = fn (semaphore: GLuint) callconv(.C) GLboolean;
const glIsShader = fn (shader: GLuint) callconv(.C) GLboolean;
const glIsStateNV = fn (state: GLuint) callconv(.C) GLboolean;
const glIsSync = fn (sync: GLsync) callconv(.C) GLboolean;
const glIsTexture = fn (texture: GLuint) callconv(.C) GLboolean;
const glIsTextureEXT = fn (texture: GLuint) callconv(.C) GLboolean;
const glIsTextureHandleResidentARB = fn (handle: GLuint64) callconv(.C) GLboolean;
const glIsTextureHandleResidentNV = fn (handle: GLuint64) callconv(.C) GLboolean;
const glIsTransformFeedback = fn (id: GLuint) callconv(.C) GLboolean;
const glIsTransformFeedbackNV = fn (id: GLuint) callconv(.C) GLboolean;
const glIsVariantEnabledEXT = fn (id: GLuint, cap: GLenum) callconv(.C) GLboolean;
const glIsVertexArray = fn (array: GLuint) callconv(.C) GLboolean;
const glIsVertexArrayAPPLE = fn (array: GLuint) callconv(.C) GLboolean;
const glIsVertexAttribEnabledAPPLE = fn (index: GLuint, pname: GLenum) callconv(.C) GLboolean;
const glLGPUCopyImageSubDataNVX = fn (sourceGpu: GLuint, destinationGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srxY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) callconv(.C) void;
const glLGPUInterlockNVX = fn () callconv(.C) void;
const glLGPUNamedBufferSubDataNVX = fn (gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: ?*const c_void) callconv(.C) void;
const glLabelObjectEXT = fn (type_: GLenum, object: GLuint, length: GLsizei, label: [*c]const GLchar) callconv(.C) void;
const glLightEnviSGIX = fn (pname: GLenum, param: GLint) callconv(.C) void;
const glLightModelxOES = fn (pname: GLenum, param: GLfixed) callconv(.C) void;
const glLightModelxvOES = fn (pname: GLenum, param: [*c]const GLfixed) callconv(.C) void;
const glLightxOES = fn (light: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glLightxvOES = fn (light: GLenum, pname: GLenum, params: [*c]const GLfixed) callconv(.C) void;
const glLineWidth = fn (width: GLfloat) callconv(.C) void;
const glLineWidthxOES = fn (width: GLfixed) callconv(.C) void;
const glLinkProgram = fn (program: GLuint) callconv(.C) void;
const glLinkProgramARB = fn (programObj: GLhandleARB) callconv(.C) void;
const glListDrawCommandsStatesClientNV = fn (list: GLuint, segment: GLuint, indirects: ?*const ?*const c_void, sizes: [*c]const GLsizei, states: [*c]const GLuint, fbos: [*c]const GLuint, count: GLuint) callconv(.C) void;
const glListParameterfSGIX = fn (list: GLuint, pname: GLenum, param: GLfloat) callconv(.C) void;
const glListParameterfvSGIX = fn (list: GLuint, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glListParameteriSGIX = fn (list: GLuint, pname: GLenum, param: GLint) callconv(.C) void;
const glListParameterivSGIX = fn (list: GLuint, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glLoadIdentityDeformationMapSGIX = fn (mask: GLbitfield) callconv(.C) void;
const glLoadMatrixxOES = fn (m: [*c]const GLfixed) callconv(.C) void;
const glLoadProgramNV = fn (target: GLenum, id: GLuint, len: GLsizei, program: [*c]const GLubyte) callconv(.C) void;
const glLoadTransposeMatrixdARB = fn (m: [*c]const GLdouble) callconv(.C) void;
const glLoadTransposeMatrixfARB = fn (m: [*c]const GLfloat) callconv(.C) void;
const glLoadTransposeMatrixxOES = fn (m: [*c]const GLfixed) callconv(.C) void;
const glLockArraysEXT = fn (first: GLint, count: GLsizei) callconv(.C) void;
const glLogicOp = fn (opcode: GLenum) callconv(.C) void;
const glMakeBufferNonResidentNV = fn (target: GLenum) callconv(.C) void;
const glMakeBufferResidentNV = fn (target: GLenum, access: GLenum) callconv(.C) void;
const glMakeImageHandleNonResidentARB = fn (handle: GLuint64) callconv(.C) void;
const glMakeImageHandleNonResidentNV = fn (handle: GLuint64) callconv(.C) void;
const glMakeImageHandleResidentARB = fn (handle: GLuint64, access: GLenum) callconv(.C) void;
const glMakeImageHandleResidentNV = fn (handle: GLuint64, access: GLenum) callconv(.C) void;
const glMakeNamedBufferNonResidentNV = fn (buffer: GLuint) callconv(.C) void;
const glMakeNamedBufferResidentNV = fn (buffer: GLuint, access: GLenum) callconv(.C) void;
const glMakeTextureHandleNonResidentARB = fn (handle: GLuint64) callconv(.C) void;
const glMakeTextureHandleNonResidentNV = fn (handle: GLuint64) callconv(.C) void;
const glMakeTextureHandleResidentARB = fn (handle: GLuint64) callconv(.C) void;
const glMakeTextureHandleResidentNV = fn (handle: GLuint64) callconv(.C) void;
const glMap1xOES = fn (target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) callconv(.C) void;
const glMap2xOES = fn (target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) callconv(.C) void;
const glMapBuffer = fn (target: GLenum, access: GLenum) callconv(.C) ?*c_void;
const glMapBufferARB = fn (target: GLenum, access: GLenum) callconv(.C) ?*c_void;
const glMapBufferRange = fn (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) callconv(.C) ?*c_void;
const glMapControlPointsNV = fn (target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed_: GLboolean, points: ?*const c_void) callconv(.C) void;
const glMapGrid1xOES = fn (n: GLint, u1: GLfixed, u2: GLfixed) callconv(.C) void;
const glMapGrid2xOES = fn (n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) callconv(.C) void;
const glMapNamedBuffer = fn (buffer: GLuint, access: GLenum) callconv(.C) ?*c_void;
const glMapNamedBufferEXT = fn (buffer: GLuint, access: GLenum) callconv(.C) ?*c_void;
const glMapNamedBufferRange = fn (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) callconv(.C) ?*c_void;
const glMapNamedBufferRangeEXT = fn (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) callconv(.C) ?*c_void;
const glMapObjectBufferATI = fn (buffer: GLuint) callconv(.C) ?*c_void;
const glMapParameterfvNV = fn (target: GLenum, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glMapParameterivNV = fn (target: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glMapTexture2DINTEL = fn (texture: GLuint, level: GLint, access: GLbitfield, stride: [*c]GLint, layout: [*c]GLenum) callconv(.C) ?*c_void;
const glMapVertexAttrib1dAPPLE = fn (index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: [*c]const GLdouble) callconv(.C) void;
const glMapVertexAttrib1fAPPLE = fn (index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: [*c]const GLfloat) callconv(.C) void;
const glMapVertexAttrib2dAPPLE = fn (index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: [*c]const GLdouble) callconv(.C) void;
const glMapVertexAttrib2fAPPLE = fn (index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: [*c]const GLfloat) callconv(.C) void;
const glMaterialxOES = fn (face: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glMaterialxvOES = fn (face: GLenum, pname: GLenum, param: [*c]const GLfixed) callconv(.C) void;
const glMatrixFrustumEXT = fn (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) callconv(.C) void;
const glMatrixIndexPointerARB = fn (size: GLint, type_: GLenum, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glMatrixIndexubvARB = fn (size: GLint, indices: [*c]const GLubyte) callconv(.C) void;
const glMatrixIndexuivARB = fn (size: GLint, indices: [*c]const GLuint) callconv(.C) void;
const glMatrixIndexusvARB = fn (size: GLint, indices: [*c]const GLushort) callconv(.C) void;
const glMatrixLoad3x2fNV = fn (matrixMode: GLenum, m: [*c]const GLfloat) callconv(.C) void;
const glMatrixLoad3x3fNV = fn (matrixMode: GLenum, m: [*c]const GLfloat) callconv(.C) void;
const glMatrixLoadIdentityEXT = fn (mode: GLenum) callconv(.C) void;
const glMatrixLoadTranspose3x3fNV = fn (matrixMode: GLenum, m: [*c]const GLfloat) callconv(.C) void;
const glMatrixLoadTransposedEXT = fn (mode: GLenum, m: [*c]const GLdouble) callconv(.C) void;
const glMatrixLoadTransposefEXT = fn (mode: GLenum, m: [*c]const GLfloat) callconv(.C) void;
const glMatrixLoaddEXT = fn (mode: GLenum, m: [*c]const GLdouble) callconv(.C) void;
const glMatrixLoadfEXT = fn (mode: GLenum, m: [*c]const GLfloat) callconv(.C) void;
const glMatrixMult3x2fNV = fn (matrixMode: GLenum, m: [*c]const GLfloat) callconv(.C) void;
const glMatrixMult3x3fNV = fn (matrixMode: GLenum, m: [*c]const GLfloat) callconv(.C) void;
const glMatrixMultTranspose3x3fNV = fn (matrixMode: GLenum, m: [*c]const GLfloat) callconv(.C) void;
const glMatrixMultTransposedEXT = fn (mode: GLenum, m: [*c]const GLdouble) callconv(.C) void;
const glMatrixMultTransposefEXT = fn (mode: GLenum, m: [*c]const GLfloat) callconv(.C) void;
const glMatrixMultdEXT = fn (mode: GLenum, m: [*c]const GLdouble) callconv(.C) void;
const glMatrixMultfEXT = fn (mode: GLenum, m: [*c]const GLfloat) callconv(.C) void;
const glMatrixOrthoEXT = fn (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) callconv(.C) void;
const glMatrixPopEXT = fn (mode: GLenum) callconv(.C) void;
const glMatrixPushEXT = fn (mode: GLenum) callconv(.C) void;
const glMatrixRotatedEXT = fn (mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glMatrixRotatefEXT = fn (mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glMatrixScaledEXT = fn (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glMatrixScalefEXT = fn (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glMatrixTranslatedEXT = fn (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glMatrixTranslatefEXT = fn (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glMaxShaderCompilerThreadsARB = fn (count: GLuint) callconv(.C) void;
const glMaxShaderCompilerThreadsKHR = fn (count: GLuint) callconv(.C) void;
const glMemoryBarrier = fn (barriers: GLbitfield) callconv(.C) void;
const glMemoryBarrierByRegion = fn (barriers: GLbitfield) callconv(.C) void;
const glMemoryBarrierEXT = fn (barriers: GLbitfield) callconv(.C) void;
const glMemoryObjectParameterivEXT = fn (memoryObject: GLuint, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glMinSampleShadingARB = fn (value: GLfloat) callconv(.C) void;
const glMinmaxEXT = fn (target: GLenum, internalformat: GLenum, sink: GLboolean) callconv(.C) void;
const glMultMatrixxOES = fn (m: [*c]const GLfixed) callconv(.C) void;
const glMultTransposeMatrixdARB = fn (m: [*c]const GLdouble) callconv(.C) void;
const glMultTransposeMatrixfARB = fn (m: [*c]const GLfloat) callconv(.C) void;
const glMultTransposeMatrixxOES = fn (m: [*c]const GLfixed) callconv(.C) void;
const glMultiDrawArrays = fn (mode: GLenum, first: [*c]const GLint, count: [*c]const GLsizei, drawcount: GLsizei) callconv(.C) void;
const glMultiDrawArraysEXT = fn (mode: GLenum, first: [*c]const GLint, count: [*c]const GLsizei, primcount: GLsizei) callconv(.C) void;
const glMultiDrawArraysIndirect = fn (mode: GLenum, indirect: ?*const c_void, drawcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawArraysIndirectAMD = fn (mode: GLenum, indirect: ?*const c_void, primcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawArraysIndirectBindlessCountNV = fn (mode: GLenum, indirect: ?*const c_void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) callconv(.C) void;
const glMultiDrawArraysIndirectBindlessNV = fn (mode: GLenum, indirect: ?*const c_void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) callconv(.C) void;
const glMultiDrawArraysIndirectCountARB = fn (mode: GLenum, indirect: ?*const c_void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawElementArrayAPPLE = fn (mode: GLenum, first: [*c]const GLint, count: [*c]const GLsizei, primcount: GLsizei) callconv(.C) void;
const glMultiDrawElements = fn (mode: GLenum, count: [*c]const GLsizei, type_: GLenum, indices: ?*const ?*const c_void, drawcount: GLsizei) callconv(.C) void;
const glMultiDrawElementsBaseVertex = fn (mode: GLenum, count: [*c]const GLsizei, type_: GLenum, indices: ?*const ?*const c_void, drawcount: GLsizei, basevertex: [*c]const GLint) callconv(.C) void;
const glMultiDrawElementsEXT = fn (mode: GLenum, count: [*c]const GLsizei, type_: GLenum, indices: ?*const ?*const c_void, primcount: GLsizei) callconv(.C) void;
const glMultiDrawElementsIndirect = fn (mode: GLenum, type_: GLenum, indirect: ?*const c_void, drawcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawElementsIndirectAMD = fn (mode: GLenum, type_: GLenum, indirect: ?*const c_void, primcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawElementsIndirectBindlessCountNV = fn (mode: GLenum, type_: GLenum, indirect: ?*const c_void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) callconv(.C) void;
const glMultiDrawElementsIndirectBindlessNV = fn (mode: GLenum, type_: GLenum, indirect: ?*const c_void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) callconv(.C) void;
const glMultiDrawElementsIndirectCountARB = fn (mode: GLenum, type_: GLenum, indirect: ?*const c_void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawMeshTasksIndirectCountNV = fn (indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawMeshTasksIndirectNV = fn (indirect: GLintptr, drawcount: GLsizei, stride: GLsizei) callconv(.C) void;
const glMultiDrawRangeElementArrayAPPLE = fn (mode: GLenum, start: GLuint, end: GLuint, first: [*c]const GLint, count: [*c]const GLsizei, primcount: GLsizei) callconv(.C) void;
const glMultiModeDrawArraysIBM = fn (mode: [*c]const GLenum, first: [*c]const GLint, count: [*c]const GLsizei, primcount: GLsizei, modestride: GLint) callconv(.C) void;
const glMultiModeDrawElementsIBM = fn (mode: [*c]const GLenum, count: [*c]const GLsizei, type_: GLenum, indices: ?*const ?*const c_void, primcount: GLsizei, modestride: GLint) callconv(.C) void;
const glMultiTexBufferEXT = fn (texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) callconv(.C) void;
const glMultiTexCoord1bOES = fn (texture: GLenum, s: GLbyte) callconv(.C) void;
const glMultiTexCoord1bvOES = fn (texture: GLenum, coords: [*c]const GLbyte) callconv(.C) void;
const glMultiTexCoord1dARB = fn (target: GLenum, s: GLdouble) callconv(.C) void;
const glMultiTexCoord1dvARB = fn (target: GLenum, v: [*c]const GLdouble) callconv(.C) void;
const glMultiTexCoord1fARB = fn (target: GLenum, s: GLfloat) callconv(.C) void;
const glMultiTexCoord1fvARB = fn (target: GLenum, v: [*c]const GLfloat) callconv(.C) void;
const glMultiTexCoord1hNV = fn (target: GLenum, s: GLhalfNV) callconv(.C) void;
const glMultiTexCoord1hvNV = fn (target: GLenum, v: [*c]const GLhalfNV) callconv(.C) void;
const glMultiTexCoord1iARB = fn (target: GLenum, s: GLint) callconv(.C) void;
const glMultiTexCoord1ivARB = fn (target: GLenum, v: [*c]const GLint) callconv(.C) void;
const glMultiTexCoord1sARB = fn (target: GLenum, s: GLshort) callconv(.C) void;
const glMultiTexCoord1svARB = fn (target: GLenum, v: [*c]const GLshort) callconv(.C) void;
const glMultiTexCoord1xOES = fn (texture: GLenum, s: GLfixed) callconv(.C) void;
const glMultiTexCoord1xvOES = fn (texture: GLenum, coords: [*c]const GLfixed) callconv(.C) void;
const glMultiTexCoord2bOES = fn (texture: GLenum, s: GLbyte, t: GLbyte) callconv(.C) void;
const glMultiTexCoord2bvOES = fn (texture: GLenum, coords: [*c]const GLbyte) callconv(.C) void;
const glMultiTexCoord2dARB = fn (target: GLenum, s: GLdouble, t: GLdouble) callconv(.C) void;
const glMultiTexCoord2dvARB = fn (target: GLenum, v: [*c]const GLdouble) callconv(.C) void;
const glMultiTexCoord2fARB = fn (target: GLenum, s: GLfloat, t: GLfloat) callconv(.C) void;
const glMultiTexCoord2fvARB = fn (target: GLenum, v: [*c]const GLfloat) callconv(.C) void;
const glMultiTexCoord2hNV = fn (target: GLenum, s: GLhalfNV, t: GLhalfNV) callconv(.C) void;
const glMultiTexCoord2hvNV = fn (target: GLenum, v: [*c]const GLhalfNV) callconv(.C) void;
const glMultiTexCoord2iARB = fn (target: GLenum, s: GLint, t: GLint) callconv(.C) void;
const glMultiTexCoord2ivARB = fn (target: GLenum, v: [*c]const GLint) callconv(.C) void;
const glMultiTexCoord2sARB = fn (target: GLenum, s: GLshort, t: GLshort) callconv(.C) void;
const glMultiTexCoord2svARB = fn (target: GLenum, v: [*c]const GLshort) callconv(.C) void;
const glMultiTexCoord2xOES = fn (texture: GLenum, s: GLfixed, t: GLfixed) callconv(.C) void;
const glMultiTexCoord2xvOES = fn (texture: GLenum, coords: [*c]const GLfixed) callconv(.C) void;
const glMultiTexCoord3bOES = fn (texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) callconv(.C) void;
const glMultiTexCoord3bvOES = fn (texture: GLenum, coords: [*c]const GLbyte) callconv(.C) void;
const glMultiTexCoord3dARB = fn (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) callconv(.C) void;
const glMultiTexCoord3dvARB = fn (target: GLenum, v: [*c]const GLdouble) callconv(.C) void;
const glMultiTexCoord3fARB = fn (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) callconv(.C) void;
const glMultiTexCoord3fvARB = fn (target: GLenum, v: [*c]const GLfloat) callconv(.C) void;
const glMultiTexCoord3hNV = fn (target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) callconv(.C) void;
const glMultiTexCoord3hvNV = fn (target: GLenum, v: [*c]const GLhalfNV) callconv(.C) void;
const glMultiTexCoord3iARB = fn (target: GLenum, s: GLint, t: GLint, r: GLint) callconv(.C) void;
const glMultiTexCoord3ivARB = fn (target: GLenum, v: [*c]const GLint) callconv(.C) void;
const glMultiTexCoord3sARB = fn (target: GLenum, s: GLshort, t: GLshort, r: GLshort) callconv(.C) void;
const glMultiTexCoord3svARB = fn (target: GLenum, v: [*c]const GLshort) callconv(.C) void;
const glMultiTexCoord3xOES = fn (texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) callconv(.C) void;
const glMultiTexCoord3xvOES = fn (texture: GLenum, coords: [*c]const GLfixed) callconv(.C) void;
const glMultiTexCoord4bOES = fn (texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) callconv(.C) void;
const glMultiTexCoord4bvOES = fn (texture: GLenum, coords: [*c]const GLbyte) callconv(.C) void;
const glMultiTexCoord4dARB = fn (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) callconv(.C) void;
const glMultiTexCoord4dvARB = fn (target: GLenum, v: [*c]const GLdouble) callconv(.C) void;
const glMultiTexCoord4fARB = fn (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) callconv(.C) void;
const glMultiTexCoord4fvARB = fn (target: GLenum, v: [*c]const GLfloat) callconv(.C) void;
const glMultiTexCoord4hNV = fn (target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) callconv(.C) void;
const glMultiTexCoord4hvNV = fn (target: GLenum, v: [*c]const GLhalfNV) callconv(.C) void;
const glMultiTexCoord4iARB = fn (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) callconv(.C) void;
const glMultiTexCoord4ivARB = fn (target: GLenum, v: [*c]const GLint) callconv(.C) void;
const glMultiTexCoord4sARB = fn (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) callconv(.C) void;
const glMultiTexCoord4svARB = fn (target: GLenum, v: [*c]const GLshort) callconv(.C) void;
const glMultiTexCoord4xOES = fn (texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) callconv(.C) void;
const glMultiTexCoord4xvOES = fn (texture: GLenum, coords: [*c]const GLfixed) callconv(.C) void;
const glMultiTexCoordPointerEXT = fn (texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glMultiTexEnvfEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glMultiTexEnvfvEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glMultiTexEnviEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glMultiTexEnvivEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glMultiTexGendEXT = fn (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) callconv(.C) void;
const glMultiTexGendvEXT = fn (texunit: GLenum, coord: GLenum, pname: GLenum, params: [*c]const GLdouble) callconv(.C) void;
const glMultiTexGenfEXT = fn (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glMultiTexGenfvEXT = fn (texunit: GLenum, coord: GLenum, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glMultiTexGeniEXT = fn (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glMultiTexGenivEXT = fn (texunit: GLenum, coord: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glMultiTexImage1DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glMultiTexImage2DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glMultiTexImage3DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glMultiTexParameterIivEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glMultiTexParameterIuivEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, params: [*c]const GLuint) callconv(.C) void;
const glMultiTexParameterfEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glMultiTexParameterfvEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glMultiTexParameteriEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glMultiTexParameterivEXT = fn (texunit: GLenum, target: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glMultiTexRenderbufferEXT = fn (texunit: GLenum, target: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glMultiTexSubImage1DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glMultiTexSubImage2DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glMultiTexSubImage3DEXT = fn (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glMulticastBarrierNV = fn () callconv(.C) void;
const glMulticastBlitFramebufferNV = fn (srcGpu: GLuint, dstGpu: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) callconv(.C) void;
const glMulticastBufferSubDataNV = fn (gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: ?*const c_void) callconv(.C) void;
const glMulticastCopyBufferSubDataNV = fn (readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glMulticastCopyImageSubDataNV = fn (srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) callconv(.C) void;
const glMulticastFramebufferSampleLocationsfvNV = fn (gpu: GLuint, framebuffer: GLuint, start: GLuint, count: GLsizei, v: [*c]const GLfloat) callconv(.C) void;
const glMulticastGetQueryObjecti64vNV = fn (gpu: GLuint, id: GLuint, pname: GLenum, params: [*c]GLint64) callconv(.C) void;
const glMulticastGetQueryObjectivNV = fn (gpu: GLuint, id: GLuint, pname: GLenum, params: [*c]GLint) callconv(.C) void;
const glMulticastGetQueryObjectui64vNV = fn (gpu: GLuint, id: GLuint, pname: GLenum, params: [*c]GLuint64) callconv(.C) void;
const glMulticastGetQueryObjectuivNV = fn (gpu: GLuint, id: GLuint, pname: GLenum, params: [*c]GLuint) callconv(.C) void;
const glMulticastScissorArrayvNVX = fn (gpu: GLuint, first: GLuint, count: GLsizei, v: [*c]const GLint) callconv(.C) void;
const glMulticastViewportArrayvNVX = fn (gpu: GLuint, first: GLuint, count: GLsizei, v: [*c]const GLfloat) callconv(.C) void;
const glMulticastViewportPositionWScaleNVX = fn (gpu: GLuint, index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) callconv(.C) void;
const glMulticastWaitSyncNV = fn (signalGpu: GLuint, waitGpuMask: GLbitfield) callconv(.C) void;
const glNamedBufferAttachMemoryNV = fn (buffer: GLuint, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glNamedBufferData = fn (buffer: GLuint, size: GLsizeiptr, data: ?*const c_void, usage: GLenum) callconv(.C) void;
const glNamedBufferDataEXT = fn (buffer: GLuint, size: GLsizeiptr, data: ?*const c_void, usage: GLenum) callconv(.C) void;
const glNamedBufferPageCommitmentARB = fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) callconv(.C) void;
const glNamedBufferPageCommitmentEXT = fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) callconv(.C) void;
const glNamedBufferPageCommitmentMemNV = fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) callconv(.C) void;
const glNamedBufferStorage = fn (buffer: GLuint, size: GLsizeiptr, data: ?*const c_void, flags: GLbitfield) callconv(.C) void;
const glNamedBufferStorageEXT = fn (buffer: GLuint, size: GLsizeiptr, data: ?*const c_void, flags: GLbitfield) callconv(.C) void;
const glNamedBufferStorageExternalEXT = fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) callconv(.C) void;
const glNamedBufferStorageMemEXT = fn (buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glNamedBufferSubData = fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: ?*const c_void) callconv(.C) void;
const glNamedBufferSubDataEXT = fn (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: ?*const c_void) callconv(.C) void;
const glNamedCopyBufferSubDataEXT = fn (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glNamedFramebufferDrawBuffer = fn (framebuffer: GLuint, buf: GLenum) callconv(.C) void;
const glNamedFramebufferDrawBuffers = fn (framebuffer: GLuint, n: GLsizei, bufs: [*c]const GLenum) callconv(.C) void;
const glNamedFramebufferParameteri = fn (framebuffer: GLuint, pname: GLenum, param: GLint) callconv(.C) void;
const glNamedFramebufferParameteriEXT = fn (framebuffer: GLuint, pname: GLenum, param: GLint) callconv(.C) void;
const glNamedFramebufferReadBuffer = fn (framebuffer: GLuint, src: GLenum) callconv(.C) void;
const glNamedFramebufferRenderbuffer = fn (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glNamedFramebufferRenderbufferEXT = fn (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glNamedFramebufferSampleLocationsfvARB = fn (framebuffer: GLuint, start: GLuint, count: GLsizei, v: [*c]const GLfloat) callconv(.C) void;
const glNamedFramebufferSampleLocationsfvNV = fn (framebuffer: GLuint, start: GLuint, count: GLsizei, v: [*c]const GLfloat) callconv(.C) void;
const glNamedFramebufferSamplePositionsfvAMD = fn (framebuffer: GLuint, numsamples: GLuint, pixelindex: GLuint, values: [*c]const GLfloat) callconv(.C) void;
const glNamedFramebufferTexture = fn (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glNamedFramebufferTexture1DEXT = fn (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glNamedFramebufferTexture2DEXT = fn (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glNamedFramebufferTexture3DEXT = fn (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) callconv(.C) void;
const glNamedFramebufferTextureEXT = fn (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) callconv(.C) void;
const glNamedFramebufferTextureFaceEXT = fn (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) callconv(.C) void;
const glNamedFramebufferTextureLayer = fn (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) callconv(.C) void;
const glNamedFramebufferTextureLayerEXT = fn (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) callconv(.C) void;
const glNamedProgramLocalParameter4dEXT = fn (program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glNamedProgramLocalParameter4dvEXT = fn (program: GLuint, target: GLenum, index: GLuint, params: [*c]const GLdouble) callconv(.C) void;
const glNamedProgramLocalParameter4fEXT = fn (program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glNamedProgramLocalParameter4fvEXT = fn (program: GLuint, target: GLenum, index: GLuint, params: [*c]const GLfloat) callconv(.C) void;
const glNamedProgramLocalParameterI4iEXT = fn (program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glNamedProgramLocalParameterI4ivEXT = fn (program: GLuint, target: GLenum, index: GLuint, params: [*c]const GLint) callconv(.C) void;
const glNamedProgramLocalParameterI4uiEXT = fn (program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) callconv(.C) void;
const glNamedProgramLocalParameterI4uivEXT = fn (program: GLuint, target: GLenum, index: GLuint, params: [*c]const GLuint) callconv(.C) void;
const glNamedProgramLocalParameters4fvEXT = fn (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: [*c]const GLfloat) callconv(.C) void;
const glNamedProgramLocalParametersI4ivEXT = fn (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: [*c]const GLint) callconv(.C) void;
const glNamedProgramLocalParametersI4uivEXT = fn (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: [*c]const GLuint) callconv(.C) void;
const glNamedProgramStringEXT = fn (program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: ?*const c_void) callconv(.C) void;
const glNamedRenderbufferStorage = fn (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glNamedRenderbufferStorageEXT = fn (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glNamedRenderbufferStorageMultisample = fn (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glNamedRenderbufferStorageMultisampleAdvancedAMD = fn (renderbuffer: GLuint, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glNamedRenderbufferStorageMultisampleCoverageEXT = fn (renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glNamedRenderbufferStorageMultisampleEXT = fn (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glNamedStringARB = fn (type_: GLenum, namelen: GLint, name: [*c]const GLchar, stringlen: GLint, string: [*c]const GLchar) callconv(.C) void;
const glNewObjectBufferATI = fn (size: GLsizei, pointer: ?*const c_void, usage: GLenum) callconv(.C) GLuint;
const glNormal3fVertex3fSUN = fn (nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glNormal3fVertex3fvSUN = fn (n: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glNormal3hNV = fn (nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) callconv(.C) void;
const glNormal3hvNV = fn (v: [*c]const GLhalfNV) callconv(.C) void;
const glNormal3xOES = fn (nx: GLfixed, ny: GLfixed, nz: GLfixed) callconv(.C) void;
const glNormal3xvOES = fn (coords: [*c]const GLfixed) callconv(.C) void;
const glNormalFormatNV = fn (type_: GLenum, stride: GLsizei) callconv(.C) void;
const glNormalPointerEXT = fn (type_: GLenum, stride: GLsizei, count: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glNormalPointerListIBM = fn (type_: GLenum, stride: GLint, pointer: ?*const ?*const c_void, ptrstride: GLint) callconv(.C) void;
const glNormalPointervINTEL = fn (type_: GLenum, pointer: ?*const ?*const c_void) callconv(.C) void;
const glNormalStream3bATI = fn (stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) callconv(.C) void;
const glNormalStream3bvATI = fn (stream: GLenum, coords: [*c]const GLbyte) callconv(.C) void;
const glNormalStream3dATI = fn (stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) callconv(.C) void;
const glNormalStream3dvATI = fn (stream: GLenum, coords: [*c]const GLdouble) callconv(.C) void;
const glNormalStream3fATI = fn (stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) callconv(.C) void;
const glNormalStream3fvATI = fn (stream: GLenum, coords: [*c]const GLfloat) callconv(.C) void;
const glNormalStream3iATI = fn (stream: GLenum, nx: GLint, ny: GLint, nz: GLint) callconv(.C) void;
const glNormalStream3ivATI = fn (stream: GLenum, coords: [*c]const GLint) callconv(.C) void;
const glNormalStream3sATI = fn (stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) callconv(.C) void;
const glNormalStream3svATI = fn (stream: GLenum, coords: [*c]const GLshort) callconv(.C) void;
const glObjectLabel = fn (identifier: GLenum, name: GLuint, length: GLsizei, label: [*c]const GLchar) callconv(.C) void;
const glObjectPtrLabel = fn (ptr: ?*const c_void, length: GLsizei, label: [*c]const GLchar) callconv(.C) void;
const glObjectPurgeableAPPLE = fn (objectType: GLenum, name: GLuint, option: GLenum) callconv(.C) GLenum;
const glObjectUnpurgeableAPPLE = fn (objectType: GLenum, name: GLuint, option: GLenum) callconv(.C) GLenum;
const glOrthofOES = fn (l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) callconv(.C) void;
const glOrthoxOES = fn (l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) callconv(.C) void;
const glPNTrianglesfATI = fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPNTrianglesiATI = fn (pname: GLenum, param: GLint) callconv(.C) void;
const glPassTexCoordATI = fn (dst: GLuint, coord: GLuint, swizzle: GLenum) callconv(.C) void;
const glPassThroughxOES = fn (token: GLfixed) callconv(.C) void;
const glPatchParameterfv = fn (pname: GLenum, values: [*c]const GLfloat) callconv(.C) void;
const glPatchParameteri = fn (pname: GLenum, value: GLint) callconv(.C) void;
const glPathCommandsNV = fn (path: GLuint, numCommands: GLsizei, commands: [*c]const GLubyte, numCoords: GLsizei, coordType: GLenum, coords: ?*const c_void) callconv(.C) void;
const glPathCoordsNV = fn (path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: ?*const c_void) callconv(.C) void;
const glPathCoverDepthFuncNV = fn (func: GLenum) callconv(.C) void;
const glPathDashArrayNV = fn (path: GLuint, dashCount: GLsizei, dashArray: [*c]const GLfloat) callconv(.C) void;
const glPathGlyphIndexArrayNV = fn (firstPathName: GLuint, fontTarget: GLenum, fontName: ?*const c_void, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) callconv(.C) GLenum;
const glPathGlyphIndexRangeNV = fn (fontTarget: GLenum, fontName: ?*const c_void, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: [2]GLuint) callconv(.C) GLenum;
const glPathGlyphRangeNV = fn (firstPathName: GLuint, fontTarget: GLenum, fontName: ?*const c_void, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) callconv(.C) void;
const glPathGlyphsNV = fn (firstPathName: GLuint, fontTarget: GLenum, fontName: ?*const c_void, fontStyle: GLbitfield, numGlyphs: GLsizei, type_: GLenum, charcodes: ?*const c_void, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) callconv(.C) void;
const glPathMemoryGlyphIndexArrayNV = fn (firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: ?*const c_void, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) callconv(.C) GLenum;
const glPathParameterfNV = fn (path: GLuint, pname: GLenum, value: GLfloat) callconv(.C) void;
const glPathParameterfvNV = fn (path: GLuint, pname: GLenum, value: [*c]const GLfloat) callconv(.C) void;
const glPathParameteriNV = fn (path: GLuint, pname: GLenum, value: GLint) callconv(.C) void;
const glPathParameterivNV = fn (path: GLuint, pname: GLenum, value: [*c]const GLint) callconv(.C) void;
const glPathStencilDepthOffsetNV = fn (factor: GLfloat, units: GLfloat) callconv(.C) void;
const glPathStencilFuncNV = fn (func: GLenum, ref: GLint, mask: GLuint) callconv(.C) void;
const glPathStringNV = fn (path: GLuint, format: GLenum, length: GLsizei, pathString: ?*const c_void) callconv(.C) void;
const glPathSubCommandsNV = fn (path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: [*c]const GLubyte, numCoords: GLsizei, coordType: GLenum, coords: ?*const c_void) callconv(.C) void;
const glPathSubCoordsNV = fn (path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: ?*const c_void) callconv(.C) void;
const glPauseTransformFeedback = fn () callconv(.C) void;
const glPauseTransformFeedbackNV = fn () callconv(.C) void;
const glPixelDataRangeNV = fn (target: GLenum, length: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glPixelMapx = fn (map: GLenum, size: GLint, values: [*c]const GLfixed) callconv(.C) void;
const glPixelStoref = fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPixelStorei = fn (pname: GLenum, param: GLint) callconv(.C) void;
const glPixelStorex = fn (pname: GLenum, param: GLfixed) callconv(.C) void;
const glPixelTexGenParameterfSGIS = fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPixelTexGenParameterfvSGIS = fn (pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glPixelTexGenParameteriSGIS = fn (pname: GLenum, param: GLint) callconv(.C) void;
const glPixelTexGenParameterivSGIS = fn (pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glPixelTexGenSGIX = fn (mode: GLenum) callconv(.C) void;
const glPixelTransferxOES = fn (pname: GLenum, param: GLfixed) callconv(.C) void;
const glPixelTransformParameterfEXT = fn (target: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glPixelTransformParameterfvEXT = fn (target: GLenum, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glPixelTransformParameteriEXT = fn (target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glPixelTransformParameterivEXT = fn (target: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glPixelZoomxOES = fn (xfactor: GLfixed, yfactor: GLfixed) callconv(.C) void;
const glPointAlongPathNV = fn (path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: [*c]GLfloat, y: [*c]GLfloat, tangentX: [*c]GLfloat, tangentY: [*c]GLfloat) callconv(.C) GLboolean;
const glPointParameterf = fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPointParameterfARB = fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPointParameterfEXT = fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPointParameterfSGIS = fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glPointParameterfv = fn (pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glPointParameterfvARB = fn (pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glPointParameterfvEXT = fn (pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glPointParameterfvSGIS = fn (pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glPointParameteri = fn (pname: GLenum, param: GLint) callconv(.C) void;
const glPointParameteriNV = fn (pname: GLenum, param: GLint) callconv(.C) void;
const glPointParameteriv = fn (pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glPointParameterivNV = fn (pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glPointParameterxvOES = fn (pname: GLenum, params: [*c]const GLfixed) callconv(.C) void;
const glPointSize = fn (size: GLfloat) callconv(.C) void;
const glPointSizexOES = fn (size: GLfixed) callconv(.C) void;
const glPollAsyncSGIX = fn (markerp: [*c]GLuint) callconv(.C) GLint;
const glPollInstrumentsSGIX = fn (marker_p: [*c]GLint) callconv(.C) GLint;
const glPolygonMode = fn (face: GLenum, mode: GLenum) callconv(.C) void;
const glPolygonOffset = fn (factor: GLfloat, units: GLfloat) callconv(.C) void;
const glPolygonOffsetClamp = fn (factor: GLfloat, units: GLfloat, clamp: GLfloat) callconv(.C) void;
const glPolygonOffsetClampEXT = fn (factor: GLfloat, units: GLfloat, clamp: GLfloat) callconv(.C) void;
const glPolygonOffsetEXT = fn (factor: GLfloat, bias: GLfloat) callconv(.C) void;
const glPolygonOffsetxOES = fn (factor: GLfixed, units: GLfixed) callconv(.C) void;
const glPopDebugGroup = fn () callconv(.C) void;
const glPopGroupMarkerEXT = fn () callconv(.C) void;
const glPresentFrameDualFillNV = fn (video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) callconv(.C) void;
const glPresentFrameKeyedNV = fn (video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) callconv(.C) void;
const glPrimitiveBoundingBoxARB = fn (minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) callconv(.C) void;
const glPrimitiveRestartIndex = fn (index: GLuint) callconv(.C) void;
const glPrimitiveRestartIndexNV = fn (index: GLuint) callconv(.C) void;
const glPrimitiveRestartNV = fn () callconv(.C) void;
const glPrioritizeTexturesEXT = fn (n: GLsizei, textures: [*c]const GLuint, priorities: [*c]const GLclampf) callconv(.C) void;
const glPrioritizeTexturesxOES = fn (n: GLsizei, textures: [*c]const GLuint, priorities: [*c]const GLfixed) callconv(.C) void;
const glProgramBinary = fn (program: GLuint, binaryFormat: GLenum, binary: ?*const c_void, length: GLsizei) callconv(.C) void;
const glProgramBufferParametersIivNV = fn (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: [*c]const GLint) callconv(.C) void;
const glProgramBufferParametersIuivNV = fn (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: [*c]const GLuint) callconv(.C) void;
const glProgramBufferParametersfvNV = fn (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: [*c]const GLfloat) callconv(.C) void;
const glProgramEnvParameter4dARB = fn (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glProgramEnvParameter4dvARB = fn (target: GLenum, index: GLuint, params: [*c]const GLdouble) callconv(.C) void;
const glProgramEnvParameter4fARB = fn (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glProgramEnvParameter4fvARB = fn (target: GLenum, index: GLuint, params: [*c]const GLfloat) callconv(.C) void;
const glProgramEnvParameterI4iNV = fn (target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glProgramEnvParameterI4ivNV = fn (target: GLenum, index: GLuint, params: [*c]const GLint) callconv(.C) void;
const glProgramEnvParameterI4uiNV = fn (target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) callconv(.C) void;
const glProgramEnvParameterI4uivNV = fn (target: GLenum, index: GLuint, params: [*c]const GLuint) callconv(.C) void;
const glProgramEnvParameters4fvEXT = fn (target: GLenum, index: GLuint, count: GLsizei, params: [*c]const GLfloat) callconv(.C) void;
const glProgramEnvParametersI4ivNV = fn (target: GLenum, index: GLuint, count: GLsizei, params: [*c]const GLint) callconv(.C) void;
const glProgramEnvParametersI4uivNV = fn (target: GLenum, index: GLuint, count: GLsizei, params: [*c]const GLuint) callconv(.C) void;
const glProgramLocalParameter4dARB = fn (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glProgramLocalParameter4dvARB = fn (target: GLenum, index: GLuint, params: [*c]const GLdouble) callconv(.C) void;
const glProgramLocalParameter4fARB = fn (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glProgramLocalParameter4fvARB = fn (target: GLenum, index: GLuint, params: [*c]const GLfloat) callconv(.C) void;
const glProgramLocalParameterI4iNV = fn (target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glProgramLocalParameterI4ivNV = fn (target: GLenum, index: GLuint, params: [*c]const GLint) callconv(.C) void;
const glProgramLocalParameterI4uiNV = fn (target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) callconv(.C) void;
const glProgramLocalParameterI4uivNV = fn (target: GLenum, index: GLuint, params: [*c]const GLuint) callconv(.C) void;
const glProgramLocalParameters4fvEXT = fn (target: GLenum, index: GLuint, count: GLsizei, params: [*c]const GLfloat) callconv(.C) void;
const glProgramLocalParametersI4ivNV = fn (target: GLenum, index: GLuint, count: GLsizei, params: [*c]const GLint) callconv(.C) void;
const glProgramLocalParametersI4uivNV = fn (target: GLenum, index: GLuint, count: GLsizei, params: [*c]const GLuint) callconv(.C) void;
const glProgramNamedParameter4dNV = fn (id: GLuint, len: GLsizei, name: [*c]const GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glProgramNamedParameter4dvNV = fn (id: GLuint, len: GLsizei, name: [*c]const GLubyte, v: [*c]const GLdouble) callconv(.C) void;
const glProgramNamedParameter4fNV = fn (id: GLuint, len: GLsizei, name: [*c]const GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glProgramNamedParameter4fvNV = fn (id: GLuint, len: GLsizei, name: [*c]const GLubyte, v: [*c]const GLfloat) callconv(.C) void;
const glProgramParameter4dNV = fn (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glProgramParameter4dvNV = fn (target: GLenum, index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glProgramParameter4fNV = fn (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glProgramParameter4fvNV = fn (target: GLenum, index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glProgramParameteri = fn (program: GLuint, pname: GLenum, value: GLint) callconv(.C) void;
const glProgramParameteriARB = fn (program: GLuint, pname: GLenum, value: GLint) callconv(.C) void;
const glProgramParameteriEXT = fn (program: GLuint, pname: GLenum, value: GLint) callconv(.C) void;
const glProgramParameters4dvNV = fn (target: GLenum, index: GLuint, count: GLsizei, v: [*c]const GLdouble) callconv(.C) void;
const glProgramParameters4fvNV = fn (target: GLenum, index: GLuint, count: GLsizei, v: [*c]const GLfloat) callconv(.C) void;
const glProgramPathFragmentInputGenNV = fn (program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: [*c]const GLfloat) callconv(.C) void;
const glProgramStringARB = fn (target: GLenum, format: GLenum, len: GLsizei, string: ?*const c_void) callconv(.C) void;
const glProgramSubroutineParametersuivNV = fn (target: GLenum, count: GLsizei, params: [*c]const GLuint) callconv(.C) void;
const glProgramUniform1d = fn (program: GLuint, location: GLint, v0: GLdouble) callconv(.C) void;
const glProgramUniform1dEXT = fn (program: GLuint, location: GLint, x: GLdouble) callconv(.C) void;
const glProgramUniform1dv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniform1dvEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniform1f = fn (program: GLuint, location: GLint, v0: GLfloat) callconv(.C) void;
const glProgramUniform1fEXT = fn (program: GLuint, location: GLint, v0: GLfloat) callconv(.C) void;
const glProgramUniform1fv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniform1fvEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniform1i = fn (program: GLuint, location: GLint, v0: GLint) callconv(.C) void;
const glProgramUniform1i64ARB = fn (program: GLuint, location: GLint, x: GLint64) callconv(.C) void;
const glProgramUniform1i64NV = fn (program: GLuint, location: GLint, x: GLint64EXT) callconv(.C) void;
const glProgramUniform1i64vARB = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint64) callconv(.C) void;
const glProgramUniform1i64vNV = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint64EXT) callconv(.C) void;
const glProgramUniform1iEXT = fn (program: GLuint, location: GLint, v0: GLint) callconv(.C) void;
const glProgramUniform1iv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glProgramUniform1ivEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glProgramUniform1ui = fn (program: GLuint, location: GLint, v0: GLuint) callconv(.C) void;
const glProgramUniform1ui64ARB = fn (program: GLuint, location: GLint, x: GLuint64) callconv(.C) void;
const glProgramUniform1ui64NV = fn (program: GLuint, location: GLint, x: GLuint64EXT) callconv(.C) void;
const glProgramUniform1ui64vARB = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint64) callconv(.C) void;
const glProgramUniform1ui64vNV = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) callconv(.C) void;
const glProgramUniform1uiEXT = fn (program: GLuint, location: GLint, v0: GLuint) callconv(.C) void;
const glProgramUniform1uiv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glProgramUniform1uivEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glProgramUniform2d = fn (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) callconv(.C) void;
const glProgramUniform2dEXT = fn (program: GLuint, location: GLint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glProgramUniform2dv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniform2dvEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniform2f = fn (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) callconv(.C) void;
const glProgramUniform2fEXT = fn (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) callconv(.C) void;
const glProgramUniform2fv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniform2fvEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniform2i = fn (program: GLuint, location: GLint, v0: GLint, v1: GLint) callconv(.C) void;
const glProgramUniform2i64ARB = fn (program: GLuint, location: GLint, x: GLint64, y: GLint64) callconv(.C) void;
const glProgramUniform2i64NV = fn (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) callconv(.C) void;
const glProgramUniform2i64vARB = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint64) callconv(.C) void;
const glProgramUniform2i64vNV = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint64EXT) callconv(.C) void;
const glProgramUniform2iEXT = fn (program: GLuint, location: GLint, v0: GLint, v1: GLint) callconv(.C) void;
const glProgramUniform2iv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glProgramUniform2ivEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glProgramUniform2ui = fn (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) callconv(.C) void;
const glProgramUniform2ui64ARB = fn (program: GLuint, location: GLint, x: GLuint64, y: GLuint64) callconv(.C) void;
const glProgramUniform2ui64NV = fn (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) callconv(.C) void;
const glProgramUniform2ui64vARB = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint64) callconv(.C) void;
const glProgramUniform2ui64vNV = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) callconv(.C) void;
const glProgramUniform2uiEXT = fn (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) callconv(.C) void;
const glProgramUniform2uiv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glProgramUniform2uivEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glProgramUniform3d = fn (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) callconv(.C) void;
const glProgramUniform3dEXT = fn (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glProgramUniform3dv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniform3dvEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniform3f = fn (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) callconv(.C) void;
const glProgramUniform3fEXT = fn (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) callconv(.C) void;
const glProgramUniform3fv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniform3fvEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniform3i = fn (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) callconv(.C) void;
const glProgramUniform3i64ARB = fn (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64) callconv(.C) void;
const glProgramUniform3i64NV = fn (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) callconv(.C) void;
const glProgramUniform3i64vARB = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint64) callconv(.C) void;
const glProgramUniform3i64vNV = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint64EXT) callconv(.C) void;
const glProgramUniform3iEXT = fn (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) callconv(.C) void;
const glProgramUniform3iv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glProgramUniform3ivEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glProgramUniform3ui = fn (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) callconv(.C) void;
const glProgramUniform3ui64ARB = fn (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) callconv(.C) void;
const glProgramUniform3ui64NV = fn (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) callconv(.C) void;
const glProgramUniform3ui64vARB = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint64) callconv(.C) void;
const glProgramUniform3ui64vNV = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) callconv(.C) void;
const glProgramUniform3uiEXT = fn (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) callconv(.C) void;
const glProgramUniform3uiv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glProgramUniform3uivEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glProgramUniform4d = fn (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) callconv(.C) void;
const glProgramUniform4dEXT = fn (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glProgramUniform4dv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniform4dvEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniform4f = fn (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) callconv(.C) void;
const glProgramUniform4fEXT = fn (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) callconv(.C) void;
const glProgramUniform4fv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniform4fvEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniform4i = fn (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) callconv(.C) void;
const glProgramUniform4i64ARB = fn (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) callconv(.C) void;
const glProgramUniform4i64NV = fn (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) callconv(.C) void;
const glProgramUniform4i64vARB = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint64) callconv(.C) void;
const glProgramUniform4i64vNV = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint64EXT) callconv(.C) void;
const glProgramUniform4iEXT = fn (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) callconv(.C) void;
const glProgramUniform4iv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glProgramUniform4ivEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glProgramUniform4ui = fn (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) callconv(.C) void;
const glProgramUniform4ui64ARB = fn (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) callconv(.C) void;
const glProgramUniform4ui64NV = fn (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) callconv(.C) void;
const glProgramUniform4ui64vARB = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint64) callconv(.C) void;
const glProgramUniform4ui64vNV = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) callconv(.C) void;
const glProgramUniform4uiEXT = fn (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) callconv(.C) void;
const glProgramUniform4uiv = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glProgramUniform4uivEXT = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glProgramUniformHandleui64ARB = fn (program: GLuint, location: GLint, value: GLuint64) callconv(.C) void;
const glProgramUniformHandleui64NV = fn (program: GLuint, location: GLint, value: GLuint64) callconv(.C) void;
const glProgramUniformHandleui64vARB = fn (program: GLuint, location: GLint, count: GLsizei, values: [*c]const GLuint64) callconv(.C) void;
const glProgramUniformHandleui64vNV = fn (program: GLuint, location: GLint, count: GLsizei, values: [*c]const GLuint64) callconv(.C) void;
const glProgramUniformMatrix2dv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix2dvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix2fv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix2fvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix2x3dv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix2x3dvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix2x3fv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix2x3fvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix2x4dv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix2x4dvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix2x4fv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix2x4fvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix3dv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix3dvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix3fv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix3fvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix3x2dv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix3x2dvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix3x2fv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix3x2fvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix3x4dv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix3x4dvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix3x4fv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix3x4fvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix4dv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix4dvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix4fv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix4fvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix4x2dv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix4x2dvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix4x2fv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix4x2fvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix4x3dv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix4x3dvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glProgramUniformMatrix4x3fv = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformMatrix4x3fvEXT = fn (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glProgramUniformui64NV = fn (program: GLuint, location: GLint, value: GLuint64EXT) callconv(.C) void;
const glProgramUniformui64vNV = fn (program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) callconv(.C) void;
const glProgramVertexLimitNV = fn (target: GLenum, limit: GLint) callconv(.C) void;
const glProvokingVertex = fn (mode: GLenum) callconv(.C) void;
const glProvokingVertexEXT = fn (mode: GLenum) callconv(.C) void;
const glPushClientAttribDefaultEXT = fn (mask: GLbitfield) callconv(.C) void;
const glPushDebugGroup = fn (source: GLenum, id: GLuint, length: GLsizei, message: [*c]const GLchar) callconv(.C) void;
const glPushGroupMarkerEXT = fn (length: GLsizei, marker: [*c]const GLchar) callconv(.C) void;
const glQueryCounter = fn (id: GLuint, target: GLenum) callconv(.C) void;
const glQueryMatrixxOES = fn (mantissa: [*c]GLfixed, exponent: [*c]GLint) callconv(.C) GLbitfield;
const glQueryObjectParameteruiAMD = fn (target: GLenum, id: GLuint, pname: GLenum, param: GLuint) callconv(.C) void;
const glQueryResourceNV = fn (queryType: GLenum, tagId: GLint, count: GLuint, buffer: [*c]GLint) callconv(.C) GLint;
const glQueryResourceTagNV = fn (tagId: GLint, tagString: [*c]const GLchar) callconv(.C) void;
const glRasterPos2xOES = fn (x: GLfixed, y: GLfixed) callconv(.C) void;
const glRasterPos2xvOES = fn (coords: [*c]const GLfixed) callconv(.C) void;
const glRasterPos3xOES = fn (x: GLfixed, y: GLfixed, z: GLfixed) callconv(.C) void;
const glRasterPos3xvOES = fn (coords: [*c]const GLfixed) callconv(.C) void;
const glRasterPos4xOES = fn (x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) callconv(.C) void;
const glRasterPos4xvOES = fn (coords: [*c]const GLfixed) callconv(.C) void;
const glRasterSamplesEXT = fn (samples: GLuint, fixedsamplelocations: GLboolean) callconv(.C) void;
const glReadBuffer = fn (src: GLenum) callconv(.C) void;
const glReadInstrumentsSGIX = fn (marker: GLint) callconv(.C) void;
const glReadPixels = fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: ?*c_void) callconv(.C) void;
const glReadnPixels = fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: ?*c_void) callconv(.C) void;
const glReadnPixelsARB = fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: ?*c_void) callconv(.C) void;
const glRectxOES = fn (x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) callconv(.C) void;
const glRectxvOES = fn (v1: [*c]const GLfixed, v2: [*c]const GLfixed) callconv(.C) void;
const glReferencePlaneSGIX = fn (equation: [*c]const GLdouble) callconv(.C) void;
const glReleaseKeyedMutexWin32EXT = fn (memory: GLuint, key: GLuint64) callconv(.C) GLboolean;
const glReleaseShaderCompiler = fn () callconv(.C) void;
const glRenderGpuMaskNV = fn (mask: GLbitfield) callconv(.C) void;
const glRenderbufferStorage = fn (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glRenderbufferStorageEXT = fn (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glRenderbufferStorageMultisample = fn (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glRenderbufferStorageMultisampleAdvancedAMD = fn (target: GLenum, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glRenderbufferStorageMultisampleCoverageNV = fn (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glRenderbufferStorageMultisampleEXT = fn (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glReplacementCodePointerSUN = fn (type_: GLenum, stride: GLsizei, pointer: ?*const ?*const c_void) callconv(.C) void;
const glReplacementCodeubSUN = fn (code: GLubyte) callconv(.C) void;
const glReplacementCodeubvSUN = fn (code: [*c]const GLubyte) callconv(.C) void;
const glReplacementCodeuiColor3fVertex3fSUN = fn (rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiColor3fVertex3fvSUN = fn (rc: [*c]const GLuint, c: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glReplacementCodeuiColor4fNormal3fVertex3fSUN = fn (rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiColor4fNormal3fVertex3fvSUN = fn (rc: [*c]const GLuint, c: [*c]const GLfloat, n: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glReplacementCodeuiColor4ubVertex3fSUN = fn (rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiColor4ubVertex3fvSUN = fn (rc: [*c]const GLuint, c: [*c]const GLubyte, v: [*c]const GLfloat) callconv(.C) void;
const glReplacementCodeuiNormal3fVertex3fSUN = fn (rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiNormal3fVertex3fvSUN = fn (rc: [*c]const GLuint, n: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glReplacementCodeuiSUN = fn (code: GLuint) callconv(.C) void;
const glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = fn (rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = fn (rc: [*c]const GLuint, tc: [*c]const GLfloat, c: [*c]const GLfloat, n: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = fn (rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = fn (rc: [*c]const GLuint, tc: [*c]const GLfloat, n: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glReplacementCodeuiTexCoord2fVertex3fSUN = fn (rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiTexCoord2fVertex3fvSUN = fn (rc: [*c]const GLuint, tc: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glReplacementCodeuiVertex3fSUN = fn (rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glReplacementCodeuiVertex3fvSUN = fn (rc: [*c]const GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glReplacementCodeuivSUN = fn (code: [*c]const GLuint) callconv(.C) void;
const glReplacementCodeusSUN = fn (code: GLushort) callconv(.C) void;
const glReplacementCodeusvSUN = fn (code: [*c]const GLushort) callconv(.C) void;
const glRequestResidentProgramsNV = fn (n: GLsizei, programs: [*c]const GLuint) callconv(.C) void;
const glResetHistogramEXT = fn (target: GLenum) callconv(.C) void;
const glResetMemoryObjectParameterNV = fn (memory: GLuint, pname: GLenum) callconv(.C) void;
const glResetMinmaxEXT = fn (target: GLenum) callconv(.C) void;
const glResizeBuffersMESA = fn () callconv(.C) void;
const glResolveDepthValuesNV = fn () callconv(.C) void;
const glResumeTransformFeedback = fn () callconv(.C) void;
const glResumeTransformFeedbackNV = fn () callconv(.C) void;
const glRotatexOES = fn (angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) callconv(.C) void;
const glSampleCoverage = fn (value: GLfloat, invert: GLboolean) callconv(.C) void;
const glSampleCoverageARB = fn (value: GLfloat, invert: GLboolean) callconv(.C) void;
const glSampleMapATI = fn (dst: GLuint, interp: GLuint, swizzle: GLenum) callconv(.C) void;
const glSampleMaskEXT = fn (value: GLclampf, invert: GLboolean) callconv(.C) void;
const glSampleMaskIndexedNV = fn (index: GLuint, mask: GLbitfield) callconv(.C) void;
const glSampleMaskSGIS = fn (value: GLclampf, invert: GLboolean) callconv(.C) void;
const glSampleMaski = fn (maskNumber: GLuint, mask: GLbitfield) callconv(.C) void;
const glSamplePatternEXT = fn (pattern: GLenum) callconv(.C) void;
const glSamplePatternSGIS = fn (pattern: GLenum) callconv(.C) void;
const glSamplerParameterIiv = fn (sampler: GLuint, pname: GLenum, param: [*c]const GLint) callconv(.C) void;
const glSamplerParameterIuiv = fn (sampler: GLuint, pname: GLenum, param: [*c]const GLuint) callconv(.C) void;
const glSamplerParameterf = fn (sampler: GLuint, pname: GLenum, param: GLfloat) callconv(.C) void;
const glSamplerParameterfv = fn (sampler: GLuint, pname: GLenum, param: [*c]const GLfloat) callconv(.C) void;
const glSamplerParameteri = fn (sampler: GLuint, pname: GLenum, param: GLint) callconv(.C) void;
const glSamplerParameteriv = fn (sampler: GLuint, pname: GLenum, param: [*c]const GLint) callconv(.C) void;
const glScalexOES = fn (x: GLfixed, y: GLfixed, z: GLfixed) callconv(.C) void;
const glScissor = fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glScissorArrayv = fn (first: GLuint, count: GLsizei, v: [*c]const GLint) callconv(.C) void;
const glScissorExclusiveArrayvNV = fn (first: GLuint, count: GLsizei, v: [*c]const GLint) callconv(.C) void;
const glScissorExclusiveNV = fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glScissorIndexed = fn (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glScissorIndexedv = fn (index: GLuint, v: [*c]const GLint) callconv(.C) void;
const glSecondaryColor3bEXT = fn (red: GLbyte, green: GLbyte, blue: GLbyte) callconv(.C) void;
const glSecondaryColor3bvEXT = fn (v: [*c]const GLbyte) callconv(.C) void;
const glSecondaryColor3dEXT = fn (red: GLdouble, green: GLdouble, blue: GLdouble) callconv(.C) void;
const glSecondaryColor3dvEXT = fn (v: [*c]const GLdouble) callconv(.C) void;
const glSecondaryColor3fEXT = fn (red: GLfloat, green: GLfloat, blue: GLfloat) callconv(.C) void;
const glSecondaryColor3fvEXT = fn (v: [*c]const GLfloat) callconv(.C) void;
const glSecondaryColor3hNV = fn (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) callconv(.C) void;
const glSecondaryColor3hvNV = fn (v: [*c]const GLhalfNV) callconv(.C) void;
const glSecondaryColor3iEXT = fn (red: GLint, green: GLint, blue: GLint) callconv(.C) void;
const glSecondaryColor3ivEXT = fn (v: [*c]const GLint) callconv(.C) void;
const glSecondaryColor3sEXT = fn (red: GLshort, green: GLshort, blue: GLshort) callconv(.C) void;
const glSecondaryColor3svEXT = fn (v: [*c]const GLshort) callconv(.C) void;
const glSecondaryColor3ubEXT = fn (red: GLubyte, green: GLubyte, blue: GLubyte) callconv(.C) void;
const glSecondaryColor3ubvEXT = fn (v: [*c]const GLubyte) callconv(.C) void;
const glSecondaryColor3uiEXT = fn (red: GLuint, green: GLuint, blue: GLuint) callconv(.C) void;
const glSecondaryColor3uivEXT = fn (v: [*c]const GLuint) callconv(.C) void;
const glSecondaryColor3usEXT = fn (red: GLushort, green: GLushort, blue: GLushort) callconv(.C) void;
const glSecondaryColor3usvEXT = fn (v: [*c]const GLushort) callconv(.C) void;
const glSecondaryColorFormatNV = fn (size: GLint, type_: GLenum, stride: GLsizei) callconv(.C) void;
const glSecondaryColorPointerEXT = fn (size: GLint, type_: GLenum, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glSecondaryColorPointerListIBM = fn (size: GLint, type_: GLenum, stride: GLint, pointer: ?*const ?*const c_void, ptrstride: GLint) callconv(.C) void;
const glSelectPerfMonitorCountersAMD = fn (monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: [*c]GLuint) callconv(.C) void;
const glSemaphoreParameterivNV = fn (semaphore: GLuint, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glSemaphoreParameterui64vEXT = fn (semaphore: GLuint, pname: GLenum, params: [*c]const GLuint64) callconv(.C) void;
const glSeparableFilter2DEXT = fn (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: ?*const c_void, column: ?*const c_void) callconv(.C) void;
const glSetFenceAPPLE = fn (fence: GLuint) callconv(.C) void;
const glSetFenceNV = fn (fence: GLuint, condition: GLenum) callconv(.C) void;
const glSetFragmentShaderConstantATI = fn (dst: GLuint, value: [*c]const GLfloat) callconv(.C) void;
const glSetInvariantEXT = fn (id: GLuint, type_: GLenum, addr: ?*const c_void) callconv(.C) void;
const glSetLocalConstantEXT = fn (id: GLuint, type_: GLenum, addr: ?*const c_void) callconv(.C) void;
const glSetMultisamplefvAMD = fn (pname: GLenum, index: GLuint, val: [*c]const GLfloat) callconv(.C) void;
const glShaderBinary = fn (count: GLsizei, shaders: [*c]const GLuint, binaryFormat: GLenum, binary: ?*const c_void, length: GLsizei) callconv(.C) void;
const glShaderOp1EXT = fn (op: GLenum, res: GLuint, arg1: GLuint) callconv(.C) void;
const glShaderOp2EXT = fn (op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) callconv(.C) void;
const glShaderOp3EXT = fn (op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) callconv(.C) void;
const glShaderSource = fn (shader: GLuint, count: GLsizei, string: [*c]const [*c]const GLchar, length: [*c]const GLint) callconv(.C) void;
const glShaderSourceARB = fn (shaderObj: GLhandleARB, count: GLsizei, string: [*c]const [*c]const GLcharARB, length: [*c]const GLint) callconv(.C) void;
const glShaderStorageBlockBinding = fn (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) callconv(.C) void;
const glShadingRateImageBarrierNV = fn (synchronize: GLboolean) callconv(.C) void;
const glShadingRateImagePaletteNV = fn (viewport: GLuint, first: GLuint, count: GLsizei, rates: [*c]const GLenum) callconv(.C) void;
const glShadingRateSampleOrderCustomNV = fn (rate: GLenum, samples: GLuint, locations: [*c]const GLint) callconv(.C) void;
const glShadingRateSampleOrderNV = fn (order: GLenum) callconv(.C) void;
const glSharpenTexFuncSGIS = fn (target: GLenum, n: GLsizei, points: [*c]const GLfloat) callconv(.C) void;
const glSignalSemaphoreEXT = fn (semaphore: GLuint, numBufferBarriers: GLuint, buffers: [*c]const GLuint, numTextureBarriers: GLuint, textures: [*c]const GLuint, dstLayouts: [*c]const GLenum) callconv(.C) void;
const glSignalSemaphoreui64NVX = fn (signalGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: [*c]const GLuint, fenceValueArray: [*c]const GLuint64) callconv(.C) void;
const glSignalVkFenceNV = fn (vkFence: GLuint64) callconv(.C) void;
const glSignalVkSemaphoreNV = fn (vkSemaphore: GLuint64) callconv(.C) void;
const glSpecializeShaderARB = fn (shader: GLuint, pEntryPoint: [*c]const GLchar, numSpecializationConstants: GLuint, pConstantIndex: [*c]const GLuint, pConstantValue: [*c]const GLuint) callconv(.C) void;
const glSpriteParameterfSGIX = fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glSpriteParameterfvSGIX = fn (pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glSpriteParameteriSGIX = fn (pname: GLenum, param: GLint) callconv(.C) void;
const glSpriteParameterivSGIX = fn (pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glStartInstrumentsSGIX = fn () callconv(.C) void;
const glStateCaptureNV = fn (state: GLuint, mode: GLenum) callconv(.C) void;
const glStencilClearTagEXT = fn (stencilTagBits: GLsizei, stencilClearTag: GLuint) callconv(.C) void;
const glStencilFillPathInstancedNV = fn (numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: [*c]const GLfloat) callconv(.C) void;
const glStencilFillPathNV = fn (path: GLuint, fillMode: GLenum, mask: GLuint) callconv(.C) void;
const glStencilFunc = fn (func: GLenum, ref: GLint, mask: GLuint) callconv(.C) void;
const glStencilFuncSeparate = fn (face: GLenum, func: GLenum, ref: GLint, mask: GLuint) callconv(.C) void;
const glStencilFuncSeparateATI = fn (frontfunc: GLenum, backfunc: GLenum, ref: GLint, mask: GLuint) callconv(.C) void;
const glStencilMask = fn (mask: GLuint) callconv(.C) void;
const glStencilMaskSeparate = fn (face: GLenum, mask: GLuint) callconv(.C) void;
const glStencilOp = fn (fail: GLenum, zfail: GLenum, zpass: GLenum) callconv(.C) void;
const glStencilOpSeparate = fn (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) callconv(.C) void;
const glStencilOpSeparateATI = fn (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) callconv(.C) void;
const glStencilOpValueAMD = fn (face: GLenum, value: GLuint) callconv(.C) void;
const glStencilStrokePathInstancedNV = fn (numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: [*c]const GLfloat) callconv(.C) void;
const glStencilStrokePathNV = fn (path: GLuint, reference: GLint, mask: GLuint) callconv(.C) void;
const glStencilThenCoverFillPathInstancedNV = fn (numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: [*c]const GLfloat) callconv(.C) void;
const glStencilThenCoverFillPathNV = fn (path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum) callconv(.C) void;
const glStencilThenCoverStrokePathInstancedNV = fn (numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: [*c]const GLfloat) callconv(.C) void;
const glStencilThenCoverStrokePathNV = fn (path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum) callconv(.C) void;
const glStopInstrumentsSGIX = fn (marker: GLint) callconv(.C) void;
const glStringMarkerGREMEDY = fn (len: GLsizei, string: ?*const c_void) callconv(.C) void;
const glSubpixelPrecisionBiasNV = fn (xbits: GLuint, ybits: GLuint) callconv(.C) void;
const glSwizzleEXT = fn (res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) callconv(.C) void;
const glSyncTextureINTEL = fn (texture: GLuint) callconv(.C) void;
const glTagSampleBufferSGIX = fn () callconv(.C) void;
const glTangent3bEXT = fn (tx: GLbyte, ty: GLbyte, tz: GLbyte) callconv(.C) void;
const glTangent3bvEXT = fn (v: [*c]const GLbyte) callconv(.C) void;
const glTangent3dEXT = fn (tx: GLdouble, ty: GLdouble, tz: GLdouble) callconv(.C) void;
const glTangent3dvEXT = fn (v: [*c]const GLdouble) callconv(.C) void;
const glTangent3fEXT = fn (tx: GLfloat, ty: GLfloat, tz: GLfloat) callconv(.C) void;
const glTangent3fvEXT = fn (v: [*c]const GLfloat) callconv(.C) void;
const glTangent3iEXT = fn (tx: GLint, ty: GLint, tz: GLint) callconv(.C) void;
const glTangent3ivEXT = fn (v: [*c]const GLint) callconv(.C) void;
const glTangent3sEXT = fn (tx: GLshort, ty: GLshort, tz: GLshort) callconv(.C) void;
const glTangent3svEXT = fn (v: [*c]const GLshort) callconv(.C) void;
const glTangentPointerEXT = fn (type_: GLenum, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glTbufferMask3DFX = fn (mask: GLuint) callconv(.C) void;
const glTessellationFactorAMD = fn (factor: GLfloat) callconv(.C) void;
const glTessellationModeAMD = fn (mode: GLenum) callconv(.C) void;
const glTestFenceAPPLE = fn (fence: GLuint) callconv(.C) GLboolean;
const glTestFenceNV = fn (fence: GLuint) callconv(.C) GLboolean;
const glTestObjectAPPLE = fn (object: GLenum, name: GLuint) callconv(.C) GLboolean;
const glTexAttachMemoryNV = fn (target: GLenum, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTexBuffer = fn (target: GLenum, internalformat: GLenum, buffer: GLuint) callconv(.C) void;
const glTexBufferARB = fn (target: GLenum, internalformat: GLenum, buffer: GLuint) callconv(.C) void;
const glTexBufferEXT = fn (target: GLenum, internalformat: GLenum, buffer: GLuint) callconv(.C) void;
const glTexBufferRange = fn (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glTexBumpParameterfvATI = fn (pname: GLenum, param: [*c]const GLfloat) callconv(.C) void;
const glTexBumpParameterivATI = fn (pname: GLenum, param: [*c]const GLint) callconv(.C) void;
const glTexCoord1bOES = fn (s: GLbyte) callconv(.C) void;
const glTexCoord1bvOES = fn (coords: [*c]const GLbyte) callconv(.C) void;
const glTexCoord1hNV = fn (s: GLhalfNV) callconv(.C) void;
const glTexCoord1hvNV = fn (v: [*c]const GLhalfNV) callconv(.C) void;
const glTexCoord1xOES = fn (s: GLfixed) callconv(.C) void;
const glTexCoord1xvOES = fn (coords: [*c]const GLfixed) callconv(.C) void;
const glTexCoord2bOES = fn (s: GLbyte, t: GLbyte) callconv(.C) void;
const glTexCoord2bvOES = fn (coords: [*c]const GLbyte) callconv(.C) void;
const glTexCoord2fColor3fVertex3fSUN = fn (s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glTexCoord2fColor3fVertex3fvSUN = fn (tc: [*c]const GLfloat, c: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glTexCoord2fColor4fNormal3fVertex3fSUN = fn (s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glTexCoord2fColor4fNormal3fVertex3fvSUN = fn (tc: [*c]const GLfloat, c: [*c]const GLfloat, n: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glTexCoord2fColor4ubVertex3fSUN = fn (s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glTexCoord2fColor4ubVertex3fvSUN = fn (tc: [*c]const GLfloat, c: [*c]const GLubyte, v: [*c]const GLfloat) callconv(.C) void;
const glTexCoord2fNormal3fVertex3fSUN = fn (s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glTexCoord2fNormal3fVertex3fvSUN = fn (tc: [*c]const GLfloat, n: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glTexCoord2fVertex3fSUN = fn (s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glTexCoord2fVertex3fvSUN = fn (tc: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glTexCoord2hNV = fn (s: GLhalfNV, t: GLhalfNV) callconv(.C) void;
const glTexCoord2hvNV = fn (v: [*c]const GLhalfNV) callconv(.C) void;
const glTexCoord2xOES = fn (s: GLfixed, t: GLfixed) callconv(.C) void;
const glTexCoord2xvOES = fn (coords: [*c]const GLfixed) callconv(.C) void;
const glTexCoord3bOES = fn (s: GLbyte, t: GLbyte, r: GLbyte) callconv(.C) void;
const glTexCoord3bvOES = fn (coords: [*c]const GLbyte) callconv(.C) void;
const glTexCoord3hNV = fn (s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) callconv(.C) void;
const glTexCoord3hvNV = fn (v: [*c]const GLhalfNV) callconv(.C) void;
const glTexCoord3xOES = fn (s: GLfixed, t: GLfixed, r: GLfixed) callconv(.C) void;
const glTexCoord3xvOES = fn (coords: [*c]const GLfixed) callconv(.C) void;
const glTexCoord4bOES = fn (s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) callconv(.C) void;
const glTexCoord4bvOES = fn (coords: [*c]const GLbyte) callconv(.C) void;
const glTexCoord4fColor4fNormal3fVertex4fSUN = fn (s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glTexCoord4fColor4fNormal3fVertex4fvSUN = fn (tc: [*c]const GLfloat, c: [*c]const GLfloat, n: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glTexCoord4fVertex4fSUN = fn (s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glTexCoord4fVertex4fvSUN = fn (tc: [*c]const GLfloat, v: [*c]const GLfloat) callconv(.C) void;
const glTexCoord4hNV = fn (s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) callconv(.C) void;
const glTexCoord4hvNV = fn (v: [*c]const GLhalfNV) callconv(.C) void;
const glTexCoord4xOES = fn (s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) callconv(.C) void;
const glTexCoord4xvOES = fn (coords: [*c]const GLfixed) callconv(.C) void;
const glTexCoordFormatNV = fn (size: GLint, type_: GLenum, stride: GLsizei) callconv(.C) void;
const glTexCoordPointerEXT = fn (size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glTexCoordPointerListIBM = fn (size: GLint, type_: GLenum, stride: GLint, pointer: ?*const ?*const c_void, ptrstride: GLint) callconv(.C) void;
const glTexCoordPointervINTEL = fn (size: GLint, type_: GLenum, pointer: ?*const ?*const c_void) callconv(.C) void;
const glTexEnvxOES = fn (target: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glTexEnvxvOES = fn (target: GLenum, pname: GLenum, params: [*c]const GLfixed) callconv(.C) void;
const glTexFilterFuncSGIS = fn (target: GLenum, filter: GLenum, n: GLsizei, weights: [*c]const GLfloat) callconv(.C) void;
const glTexGenxOES = fn (coord: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glTexGenxvOES = fn (coord: GLenum, pname: GLenum, params: [*c]const GLfixed) callconv(.C) void;
const glTexImage1D = fn (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTexImage2D = fn (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTexImage2DMultisample = fn (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTexImage2DMultisampleCoverageNV = fn (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) callconv(.C) void;
const glTexImage3D = fn (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTexImage3DEXT = fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTexImage3DMultisample = fn (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTexImage3DMultisampleCoverageNV = fn (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) callconv(.C) void;
const glTexImage4DSGIS = fn (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTexPageCommitmentARB = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) callconv(.C) void;
const glTexPageCommitmentMemNV = fn (target: GLenum, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean) callconv(.C) void;
const glTexParameterIiv = fn (target: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glTexParameterIivEXT = fn (target: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glTexParameterIuiv = fn (target: GLenum, pname: GLenum, params: [*c]const GLuint) callconv(.C) void;
const glTexParameterIuivEXT = fn (target: GLenum, pname: GLenum, params: [*c]const GLuint) callconv(.C) void;
const glTexParameterf = fn (target: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glTexParameterfv = fn (target: GLenum, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glTexParameteri = fn (target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glTexParameteriv = fn (target: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glTexParameterxOES = fn (target: GLenum, pname: GLenum, param: GLfixed) callconv(.C) void;
const glTexParameterxvOES = fn (target: GLenum, pname: GLenum, params: [*c]const GLfixed) callconv(.C) void;
const glTexRenderbufferNV = fn (target: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glTexStorage1D = fn (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) callconv(.C) void;
const glTexStorage2D = fn (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glTexStorage2DMultisample = fn (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTexStorage3D = fn (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) callconv(.C) void;
const glTexStorage3DMultisample = fn (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTexStorageMem1DEXT = fn (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTexStorageMem2DEXT = fn (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTexStorageMem2DMultisampleEXT = fn (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTexStorageMem3DEXT = fn (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTexStorageMem3DMultisampleEXT = fn (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTexStorageSparseAMD = fn (target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) callconv(.C) void;
const glTexSubImage1D = fn (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTexSubImage1DEXT = fn (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTexSubImage2D = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTexSubImage2DEXT = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTexSubImage3D = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTexSubImage3DEXT = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTexSubImage4DSGIS = fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTextureAttachMemoryNV = fn (texture: GLuint, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTextureBarrier = fn () callconv(.C) void;
const glTextureBarrierNV = fn () callconv(.C) void;
const glTextureBuffer = fn (texture: GLuint, internalformat: GLenum, buffer: GLuint) callconv(.C) void;
const glTextureBufferEXT = fn (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) callconv(.C) void;
const glTextureBufferRange = fn (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glTextureBufferRangeEXT = fn (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glTextureColorMaskSGIS = fn (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) callconv(.C) void;
const glTextureImage1DEXT = fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTextureImage2DEXT = fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTextureImage2DMultisampleCoverageNV = fn (texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) callconv(.C) void;
const glTextureImage2DMultisampleNV = fn (texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) callconv(.C) void;
const glTextureImage3DEXT = fn (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTextureImage3DMultisampleCoverageNV = fn (texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) callconv(.C) void;
const glTextureImage3DMultisampleNV = fn (texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) callconv(.C) void;
const glTextureLightEXT = fn (pname: GLenum) callconv(.C) void;
const glTextureMaterialEXT = fn (face: GLenum, mode: GLenum) callconv(.C) void;
const glTextureNormalEXT = fn (mode: GLenum) callconv(.C) void;
const glTexturePageCommitmentEXT = fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) callconv(.C) void;
const glTexturePageCommitmentMemNV = fn (texture: GLuint, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean) callconv(.C) void;
const glTextureParameterIiv = fn (texture: GLuint, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glTextureParameterIivEXT = fn (texture: GLuint, target: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glTextureParameterIuiv = fn (texture: GLuint, pname: GLenum, params: [*c]const GLuint) callconv(.C) void;
const glTextureParameterIuivEXT = fn (texture: GLuint, target: GLenum, pname: GLenum, params: [*c]const GLuint) callconv(.C) void;
const glTextureParameterf = fn (texture: GLuint, pname: GLenum, param: GLfloat) callconv(.C) void;
const glTextureParameterfEXT = fn (texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) callconv(.C) void;
const glTextureParameterfv = fn (texture: GLuint, pname: GLenum, param: [*c]const GLfloat) callconv(.C) void;
const glTextureParameterfvEXT = fn (texture: GLuint, target: GLenum, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glTextureParameteri = fn (texture: GLuint, pname: GLenum, param: GLint) callconv(.C) void;
const glTextureParameteriEXT = fn (texture: GLuint, target: GLenum, pname: GLenum, param: GLint) callconv(.C) void;
const glTextureParameteriv = fn (texture: GLuint, pname: GLenum, param: [*c]const GLint) callconv(.C) void;
const glTextureParameterivEXT = fn (texture: GLuint, target: GLenum, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glTextureRangeAPPLE = fn (target: GLenum, length: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glTextureRenderbufferEXT = fn (texture: GLuint, target: GLenum, renderbuffer: GLuint) callconv(.C) void;
const glTextureStorage1D = fn (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) callconv(.C) void;
const glTextureStorage1DEXT = fn (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) callconv(.C) void;
const glTextureStorage2D = fn (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glTextureStorage2DEXT = fn (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) callconv(.C) void;
const glTextureStorage2DMultisample = fn (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTextureStorage2DMultisampleEXT = fn (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTextureStorage3D = fn (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) callconv(.C) void;
const glTextureStorage3DEXT = fn (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) callconv(.C) void;
const glTextureStorage3DMultisample = fn (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTextureStorage3DMultisampleEXT = fn (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) callconv(.C) void;
const glTextureStorageMem1DEXT = fn (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTextureStorageMem2DEXT = fn (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTextureStorageMem2DMultisampleEXT = fn (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTextureStorageMem3DEXT = fn (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTextureStorageMem3DMultisampleEXT = fn (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) callconv(.C) void;
const glTextureStorageSparseAMD = fn (texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) callconv(.C) void;
const glTextureSubImage1D = fn (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTextureSubImage1DEXT = fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTextureSubImage2D = fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTextureSubImage2DEXT = fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTextureSubImage3D = fn (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTextureSubImage3DEXT = fn (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: ?*const c_void) callconv(.C) void;
const glTextureView = fn (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) callconv(.C) void;
const glTrackMatrixNV = fn (target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) callconv(.C) void;
const glTransformFeedbackAttribsNV = fn (count: GLsizei, attribs: [*c]const GLint, bufferMode: GLenum) callconv(.C) void;
const glTransformFeedbackBufferBase = fn (xfb: GLuint, index: GLuint, buffer: GLuint) callconv(.C) void;
const glTransformFeedbackBufferRange = fn (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) callconv(.C) void;
const glTransformFeedbackStreamAttribsNV = fn (count: GLsizei, attribs: [*c]const GLint, nbuffers: GLsizei, bufstreams: [*c]const GLint, bufferMode: GLenum) callconv(.C) void;
const glTransformFeedbackVaryings = fn (program: GLuint, count: GLsizei, varyings: [*c]const [*c]const GLchar, bufferMode: GLenum) callconv(.C) void;
const glTransformFeedbackVaryingsEXT = fn (program: GLuint, count: GLsizei, varyings: [*c]const [*c]const GLchar, bufferMode: GLenum) callconv(.C) void;
const glTransformFeedbackVaryingsNV = fn (program: GLuint, count: GLsizei, locations: [*c]const GLint, bufferMode: GLenum) callconv(.C) void;
const glTransformPathNV = fn (resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: [*c]const GLfloat) callconv(.C) void;
const glTranslatexOES = fn (x: GLfixed, y: GLfixed, z: GLfixed) callconv(.C) void;
const glUniform1d = fn (location: GLint, x: GLdouble) callconv(.C) void;
const glUniform1dv = fn (location: GLint, count: GLsizei, value: [*c]const GLdouble) callconv(.C) void;
const glUniform1f = fn (location: GLint, v0: GLfloat) callconv(.C) void;
const glUniform1fARB = fn (location: GLint, v0: GLfloat) callconv(.C) void;
const glUniform1fv = fn (location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glUniform1fvARB = fn (location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glUniform1i = fn (location: GLint, v0: GLint) callconv(.C) void;
const glUniform1i64ARB = fn (location: GLint, x: GLint64) callconv(.C) void;
const glUniform1i64NV = fn (location: GLint, x: GLint64EXT) callconv(.C) void;
const glUniform1i64vARB = fn (location: GLint, count: GLsizei, value: [*c]const GLint64) callconv(.C) void;
const glUniform1i64vNV = fn (location: GLint, count: GLsizei, value: [*c]const GLint64EXT) callconv(.C) void;
const glUniform1iARB = fn (location: GLint, v0: GLint) callconv(.C) void;
const glUniform1iv = fn (location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glUniform1ivARB = fn (location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glUniform1ui = fn (location: GLint, v0: GLuint) callconv(.C) void;
const glUniform1ui64ARB = fn (location: GLint, x: GLuint64) callconv(.C) void;
const glUniform1ui64NV = fn (location: GLint, x: GLuint64EXT) callconv(.C) void;
const glUniform1ui64vARB = fn (location: GLint, count: GLsizei, value: [*c]const GLuint64) callconv(.C) void;
const glUniform1ui64vNV = fn (location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) callconv(.C) void;
const glUniform1uiEXT = fn (location: GLint, v0: GLuint) callconv(.C) void;
const glUniform1uiv = fn (location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glUniform1uivEXT = fn (location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glUniform2d = fn (location: GLint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glUniform2dv = fn (location: GLint, count: GLsizei, value: [*c]const GLdouble) callconv(.C) void;
const glUniform2f = fn (location: GLint, v0: GLfloat, v1: GLfloat) callconv(.C) void;
const glUniform2fARB = fn (location: GLint, v0: GLfloat, v1: GLfloat) callconv(.C) void;
const glUniform2fv = fn (location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glUniform2fvARB = fn (location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glUniform2i = fn (location: GLint, v0: GLint, v1: GLint) callconv(.C) void;
const glUniform2i64ARB = fn (location: GLint, x: GLint64, y: GLint64) callconv(.C) void;
const glUniform2i64NV = fn (location: GLint, x: GLint64EXT, y: GLint64EXT) callconv(.C) void;
const glUniform2i64vARB = fn (location: GLint, count: GLsizei, value: [*c]const GLint64) callconv(.C) void;
const glUniform2i64vNV = fn (location: GLint, count: GLsizei, value: [*c]const GLint64EXT) callconv(.C) void;
const glUniform2iARB = fn (location: GLint, v0: GLint, v1: GLint) callconv(.C) void;
const glUniform2iv = fn (location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glUniform2ivARB = fn (location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glUniform2ui = fn (location: GLint, v0: GLuint, v1: GLuint) callconv(.C) void;
const glUniform2ui64ARB = fn (location: GLint, x: GLuint64, y: GLuint64) callconv(.C) void;
const glUniform2ui64NV = fn (location: GLint, x: GLuint64EXT, y: GLuint64EXT) callconv(.C) void;
const glUniform2ui64vARB = fn (location: GLint, count: GLsizei, value: [*c]const GLuint64) callconv(.C) void;
const glUniform2ui64vNV = fn (location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) callconv(.C) void;
const glUniform2uiEXT = fn (location: GLint, v0: GLuint, v1: GLuint) callconv(.C) void;
const glUniform2uiv = fn (location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glUniform2uivEXT = fn (location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glUniform3d = fn (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glUniform3dv = fn (location: GLint, count: GLsizei, value: [*c]const GLdouble) callconv(.C) void;
const glUniform3f = fn (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) callconv(.C) void;
const glUniform3fARB = fn (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) callconv(.C) void;
const glUniform3fv = fn (location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glUniform3fvARB = fn (location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glUniform3i = fn (location: GLint, v0: GLint, v1: GLint, v2: GLint) callconv(.C) void;
const glUniform3i64ARB = fn (location: GLint, x: GLint64, y: GLint64, z: GLint64) callconv(.C) void;
const glUniform3i64NV = fn (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) callconv(.C) void;
const glUniform3i64vARB = fn (location: GLint, count: GLsizei, value: [*c]const GLint64) callconv(.C) void;
const glUniform3i64vNV = fn (location: GLint, count: GLsizei, value: [*c]const GLint64EXT) callconv(.C) void;
const glUniform3iARB = fn (location: GLint, v0: GLint, v1: GLint, v2: GLint) callconv(.C) void;
const glUniform3iv = fn (location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glUniform3ivARB = fn (location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glUniform3ui = fn (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) callconv(.C) void;
const glUniform3ui64ARB = fn (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) callconv(.C) void;
const glUniform3ui64NV = fn (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) callconv(.C) void;
const glUniform3ui64vARB = fn (location: GLint, count: GLsizei, value: [*c]const GLuint64) callconv(.C) void;
const glUniform3ui64vNV = fn (location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) callconv(.C) void;
const glUniform3uiEXT = fn (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) callconv(.C) void;
const glUniform3uiv = fn (location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glUniform3uivEXT = fn (location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glUniform4d = fn (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glUniform4dv = fn (location: GLint, count: GLsizei, value: [*c]const GLdouble) callconv(.C) void;
const glUniform4f = fn (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) callconv(.C) void;
const glUniform4fARB = fn (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) callconv(.C) void;
const glUniform4fv = fn (location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glUniform4fvARB = fn (location: GLint, count: GLsizei, value: [*c]const GLfloat) callconv(.C) void;
const glUniform4i = fn (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) callconv(.C) void;
const glUniform4i64ARB = fn (location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) callconv(.C) void;
const glUniform4i64NV = fn (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) callconv(.C) void;
const glUniform4i64vARB = fn (location: GLint, count: GLsizei, value: [*c]const GLint64) callconv(.C) void;
const glUniform4i64vNV = fn (location: GLint, count: GLsizei, value: [*c]const GLint64EXT) callconv(.C) void;
const glUniform4iARB = fn (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) callconv(.C) void;
const glUniform4iv = fn (location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glUniform4ivARB = fn (location: GLint, count: GLsizei, value: [*c]const GLint) callconv(.C) void;
const glUniform4ui = fn (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) callconv(.C) void;
const glUniform4ui64ARB = fn (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) callconv(.C) void;
const glUniform4ui64NV = fn (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) callconv(.C) void;
const glUniform4ui64vARB = fn (location: GLint, count: GLsizei, value: [*c]const GLuint64) callconv(.C) void;
const glUniform4ui64vNV = fn (location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) callconv(.C) void;
const glUniform4uiEXT = fn (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) callconv(.C) void;
const glUniform4uiv = fn (location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glUniform4uivEXT = fn (location: GLint, count: GLsizei, value: [*c]const GLuint) callconv(.C) void;
const glUniformBlockBinding = fn (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) callconv(.C) void;
const glUniformBufferEXT = fn (program: GLuint, location: GLint, buffer: GLuint) callconv(.C) void;
const glUniformHandleui64ARB = fn (location: GLint, value: GLuint64) callconv(.C) void;
const glUniformHandleui64NV = fn (location: GLint, value: GLuint64) callconv(.C) void;
const glUniformHandleui64vARB = fn (location: GLint, count: GLsizei, value: [*c]const GLuint64) callconv(.C) void;
const glUniformHandleui64vNV = fn (location: GLint, count: GLsizei, value: [*c]const GLuint64) callconv(.C) void;
const glUniformMatrix2dv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glUniformMatrix2fv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glUniformMatrix2fvARB = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glUniformMatrix2x3dv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glUniformMatrix2x3fv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glUniformMatrix2x4dv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glUniformMatrix2x4fv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glUniformMatrix3dv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glUniformMatrix3fv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glUniformMatrix3fvARB = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glUniformMatrix3x2dv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glUniformMatrix3x2fv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glUniformMatrix3x4dv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glUniformMatrix3x4fv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glUniformMatrix4dv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glUniformMatrix4fv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glUniformMatrix4fvARB = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glUniformMatrix4x2dv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glUniformMatrix4x2fv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glUniformMatrix4x3dv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLdouble) callconv(.C) void;
const glUniformMatrix4x3fv = fn (location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) callconv(.C) void;
const glUniformSubroutinesuiv = fn (shadertype: GLenum, count: GLsizei, indices: [*c]const GLuint) callconv(.C) void;
const glUniformui64NV = fn (location: GLint, value: GLuint64EXT) callconv(.C) void;
const glUniformui64vNV = fn (location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) callconv(.C) void;
const glUnlockArraysEXT = fn () callconv(.C) void;
const glUnmapBuffer = fn (target: GLenum) callconv(.C) GLboolean;
const glUnmapBufferARB = fn (target: GLenum) callconv(.C) GLboolean;
const glUnmapNamedBuffer = fn (buffer: GLuint) callconv(.C) GLboolean;
const glUnmapNamedBufferEXT = fn (buffer: GLuint) callconv(.C) GLboolean;
const glUnmapObjectBufferATI = fn (buffer: GLuint) callconv(.C) void;
const glUnmapTexture2DINTEL = fn (texture: GLuint, level: GLint) callconv(.C) void;
const glUpdateObjectBufferATI = fn (buffer: GLuint, offset: GLuint, size: GLsizei, pointer: ?*const c_void, preserve: GLenum) callconv(.C) void;
const glUploadGpuMaskNVX = fn (mask: GLbitfield) callconv(.C) void;
const glUseProgram = fn (program: GLuint) callconv(.C) void;
const glUseProgramObjectARB = fn (programObj: GLhandleARB) callconv(.C) void;
const glUseProgramStages = fn (pipeline: GLuint, stages: GLbitfield, program: GLuint) callconv(.C) void;
const glUseShaderProgramEXT = fn (type_: GLenum, program: GLuint) callconv(.C) void;
const glVDPAUFiniNV = fn () callconv(.C) void;
const glVDPAUGetSurfaceivNV = fn (surface: GLvdpauSurfaceNV, pname: GLenum, count: GLsizei, length: [*c]GLsizei, values: [*c]GLint) callconv(.C) void;
const glVDPAUInitNV = fn (vdpDevice: ?*const c_void, getProcAddress: ?*const c_void) callconv(.C) void;
const glVDPAUIsSurfaceNV = fn (surface: GLvdpauSurfaceNV) callconv(.C) GLboolean;
const glVDPAUMapSurfacesNV = fn (numSurfaces: GLsizei, surfaces: [*c]const GLvdpauSurfaceNV) callconv(.C) void;
const glVDPAURegisterOutputSurfaceNV = fn (vdpSurface: ?*const c_void, target: GLenum, numTextureNames: GLsizei, textureNames: [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
const glVDPAURegisterVideoSurfaceNV = fn (vdpSurface: ?*const c_void, target: GLenum, numTextureNames: GLsizei, textureNames: [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
const glVDPAURegisterVideoSurfaceWithPictureStructureNV = fn (vdpSurface: ?*const c_void, target: GLenum, numTextureNames: GLsizei, textureNames: [*c]const GLuint, isFrameStructure: GLboolean) callconv(.C) GLvdpauSurfaceNV;
const glVDPAUSurfaceAccessNV = fn (surface: GLvdpauSurfaceNV, access: GLenum) callconv(.C) void;
const glVDPAUUnmapSurfacesNV = fn (numSurface: GLsizei, surfaces: [*c]const GLvdpauSurfaceNV) callconv(.C) void;
const glVDPAUUnregisterSurfaceNV = fn (surface: GLvdpauSurfaceNV) callconv(.C) void;
const glValidateProgram = fn (program: GLuint) callconv(.C) void;
const glValidateProgramARB = fn (programObj: GLhandleARB) callconv(.C) void;
const glValidateProgramPipeline = fn (pipeline: GLuint) callconv(.C) void;
const glVariantArrayObjectATI = fn (id: GLuint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) callconv(.C) void;
const glVariantPointerEXT = fn (id: GLuint, type_: GLenum, stride: GLuint, addr: ?*const c_void) callconv(.C) void;
const glVariantbvEXT = fn (id: GLuint, addr: [*c]const GLbyte) callconv(.C) void;
const glVariantdvEXT = fn (id: GLuint, addr: [*c]const GLdouble) callconv(.C) void;
const glVariantfvEXT = fn (id: GLuint, addr: [*c]const GLfloat) callconv(.C) void;
const glVariantivEXT = fn (id: GLuint, addr: [*c]const GLint) callconv(.C) void;
const glVariantsvEXT = fn (id: GLuint, addr: [*c]const GLshort) callconv(.C) void;
const glVariantubvEXT = fn (id: GLuint, addr: [*c]const GLubyte) callconv(.C) void;
const glVariantuivEXT = fn (id: GLuint, addr: [*c]const GLuint) callconv(.C) void;
const glVariantusvEXT = fn (id: GLuint, addr: [*c]const GLushort) callconv(.C) void;
const glVertex2bOES = fn (x: GLbyte, y: GLbyte) callconv(.C) void;
const glVertex2bvOES = fn (coords: [*c]const GLbyte) callconv(.C) void;
const glVertex2hNV = fn (x: GLhalfNV, y: GLhalfNV) callconv(.C) void;
const glVertex2hvNV = fn (v: [*c]const GLhalfNV) callconv(.C) void;
const glVertex2xOES = fn (x: GLfixed) callconv(.C) void;
const glVertex2xvOES = fn (coords: [*c]const GLfixed) callconv(.C) void;
const glVertex3bOES = fn (x: GLbyte, y: GLbyte, z: GLbyte) callconv(.C) void;
const glVertex3bvOES = fn (coords: [*c]const GLbyte) callconv(.C) void;
const glVertex3hNV = fn (x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) callconv(.C) void;
const glVertex3hvNV = fn (v: [*c]const GLhalfNV) callconv(.C) void;
const glVertex3xOES = fn (x: GLfixed, y: GLfixed) callconv(.C) void;
const glVertex3xvOES = fn (coords: [*c]const GLfixed) callconv(.C) void;
const glVertex4bOES = fn (x: GLbyte, y: GLbyte, z: GLbyte, w: GLbyte) callconv(.C) void;
const glVertex4bvOES = fn (coords: [*c]const GLbyte) callconv(.C) void;
const glVertex4hNV = fn (x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) callconv(.C) void;
const glVertex4hvNV = fn (v: [*c]const GLhalfNV) callconv(.C) void;
const glVertex4xOES = fn (x: GLfixed, y: GLfixed, z: GLfixed) callconv(.C) void;
const glVertex4xvOES = fn (coords: [*c]const GLfixed) callconv(.C) void;
const glVertexArrayAttribBinding = fn (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) callconv(.C) void;
const glVertexArrayAttribFormat = fn (vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) callconv(.C) void;
const glVertexArrayAttribIFormat = fn (vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) callconv(.C) void;
const glVertexArrayAttribLFormat = fn (vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) callconv(.C) void;
const glVertexArrayBindVertexBufferEXT = fn (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) callconv(.C) void;
const glVertexArrayBindingDivisor = fn (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) callconv(.C) void;
const glVertexArrayColorOffsetEXT = fn (vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayEdgeFlagOffsetEXT = fn (vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayElementBuffer = fn (vaobj: GLuint, buffer: GLuint) callconv(.C) void;
const glVertexArrayFogCoordOffsetEXT = fn (vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayIndexOffsetEXT = fn (vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayMultiTexCoordOffsetEXT = fn (vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayNormalOffsetEXT = fn (vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayParameteriAPPLE = fn (pname: GLenum, param: GLint) callconv(.C) void;
const glVertexArrayRangeAPPLE = fn (length: GLsizei, pointer: ?*c_void) callconv(.C) void;
const glVertexArrayRangeNV = fn (length: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glVertexArraySecondaryColorOffsetEXT = fn (vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayTexCoordOffsetEXT = fn (vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayVertexAttribBindingEXT = fn (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) callconv(.C) void;
const glVertexArrayVertexAttribDivisorEXT = fn (vaobj: GLuint, index: GLuint, divisor: GLuint) callconv(.C) void;
const glVertexArrayVertexAttribFormatEXT = fn (vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) callconv(.C) void;
const glVertexArrayVertexAttribIFormatEXT = fn (vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) callconv(.C) void;
const glVertexArrayVertexAttribIOffsetEXT = fn (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayVertexAttribLFormatEXT = fn (vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) callconv(.C) void;
const glVertexArrayVertexAttribLOffsetEXT = fn (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayVertexAttribOffsetEXT = fn (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexArrayVertexBindingDivisorEXT = fn (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) callconv(.C) void;
const glVertexArrayVertexBuffer = fn (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) callconv(.C) void;
const glVertexArrayVertexBuffers = fn (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: [*c]const GLuint, offsets: [*c]const GLintptr, strides: [*c]const GLsizei) callconv(.C) void;
const glVertexArrayVertexOffsetEXT = fn (vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) callconv(.C) void;
const glVertexAttrib1d = fn (index: GLuint, x: GLdouble) callconv(.C) void;
const glVertexAttrib1dARB = fn (index: GLuint, x: GLdouble) callconv(.C) void;
const glVertexAttrib1dNV = fn (index: GLuint, x: GLdouble) callconv(.C) void;
const glVertexAttrib1dv = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttrib1dvARB = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttrib1dvNV = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttrib1f = fn (index: GLuint, x: GLfloat) callconv(.C) void;
const glVertexAttrib1fARB = fn (index: GLuint, x: GLfloat) callconv(.C) void;
const glVertexAttrib1fNV = fn (index: GLuint, x: GLfloat) callconv(.C) void;
const glVertexAttrib1fv = fn (index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttrib1fvARB = fn (index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttrib1fvNV = fn (index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttrib1hNV = fn (index: GLuint, x: GLhalfNV) callconv(.C) void;
const glVertexAttrib1hvNV = fn (index: GLuint, v: [*c]const GLhalfNV) callconv(.C) void;
const glVertexAttrib1s = fn (index: GLuint, x: GLshort) callconv(.C) void;
const glVertexAttrib1sARB = fn (index: GLuint, x: GLshort) callconv(.C) void;
const glVertexAttrib1sNV = fn (index: GLuint, x: GLshort) callconv(.C) void;
const glVertexAttrib1sv = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib1svARB = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib1svNV = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib2d = fn (index: GLuint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glVertexAttrib2dARB = fn (index: GLuint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glVertexAttrib2dNV = fn (index: GLuint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glVertexAttrib2dv = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttrib2dvARB = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttrib2dvNV = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttrib2f = fn (index: GLuint, x: GLfloat, y: GLfloat) callconv(.C) void;
const glVertexAttrib2fARB = fn (index: GLuint, x: GLfloat, y: GLfloat) callconv(.C) void;
const glVertexAttrib2fNV = fn (index: GLuint, x: GLfloat, y: GLfloat) callconv(.C) void;
const glVertexAttrib2fv = fn (index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttrib2fvARB = fn (index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttrib2fvNV = fn (index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttrib2hNV = fn (index: GLuint, x: GLhalfNV, y: GLhalfNV) callconv(.C) void;
const glVertexAttrib2hvNV = fn (index: GLuint, v: [*c]const GLhalfNV) callconv(.C) void;
const glVertexAttrib2s = fn (index: GLuint, x: GLshort, y: GLshort) callconv(.C) void;
const glVertexAttrib2sARB = fn (index: GLuint, x: GLshort, y: GLshort) callconv(.C) void;
const glVertexAttrib2sNV = fn (index: GLuint, x: GLshort, y: GLshort) callconv(.C) void;
const glVertexAttrib2sv = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib2svARB = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib2svNV = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib3d = fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glVertexAttrib3dARB = fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glVertexAttrib3dNV = fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glVertexAttrib3dv = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttrib3dvARB = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttrib3dvNV = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttrib3f = fn (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glVertexAttrib3fARB = fn (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glVertexAttrib3fNV = fn (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glVertexAttrib3fv = fn (index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttrib3fvARB = fn (index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttrib3fvNV = fn (index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttrib3hNV = fn (index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) callconv(.C) void;
const glVertexAttrib3hvNV = fn (index: GLuint, v: [*c]const GLhalfNV) callconv(.C) void;
const glVertexAttrib3s = fn (index: GLuint, x: GLshort, y: GLshort, z: GLshort) callconv(.C) void;
const glVertexAttrib3sARB = fn (index: GLuint, x: GLshort, y: GLshort, z: GLshort) callconv(.C) void;
const glVertexAttrib3sNV = fn (index: GLuint, x: GLshort, y: GLshort, z: GLshort) callconv(.C) void;
const glVertexAttrib3sv = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib3svARB = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib3svNV = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib4Nbv = fn (index: GLuint, v: [*c]const GLbyte) callconv(.C) void;
const glVertexAttrib4NbvARB = fn (index: GLuint, v: [*c]const GLbyte) callconv(.C) void;
const glVertexAttrib4Niv = fn (index: GLuint, v: [*c]const GLint) callconv(.C) void;
const glVertexAttrib4NivARB = fn (index: GLuint, v: [*c]const GLint) callconv(.C) void;
const glVertexAttrib4Nsv = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib4NsvARB = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib4Nub = fn (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) callconv(.C) void;
const glVertexAttrib4NubARB = fn (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) callconv(.C) void;
const glVertexAttrib4Nubv = fn (index: GLuint, v: [*c]const GLubyte) callconv(.C) void;
const glVertexAttrib4NubvARB = fn (index: GLuint, v: [*c]const GLubyte) callconv(.C) void;
const glVertexAttrib4Nuiv = fn (index: GLuint, v: [*c]const GLuint) callconv(.C) void;
const glVertexAttrib4NuivARB = fn (index: GLuint, v: [*c]const GLuint) callconv(.C) void;
const glVertexAttrib4Nusv = fn (index: GLuint, v: [*c]const GLushort) callconv(.C) void;
const glVertexAttrib4NusvARB = fn (index: GLuint, v: [*c]const GLushort) callconv(.C) void;
const glVertexAttrib4bv = fn (index: GLuint, v: [*c]const GLbyte) callconv(.C) void;
const glVertexAttrib4bvARB = fn (index: GLuint, v: [*c]const GLbyte) callconv(.C) void;
const glVertexAttrib4d = fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glVertexAttrib4dARB = fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glVertexAttrib4dNV = fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glVertexAttrib4dv = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttrib4dvARB = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttrib4dvNV = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttrib4f = fn (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glVertexAttrib4fARB = fn (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glVertexAttrib4fNV = fn (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glVertexAttrib4fv = fn (index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttrib4fvARB = fn (index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttrib4fvNV = fn (index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttrib4hNV = fn (index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) callconv(.C) void;
const glVertexAttrib4hvNV = fn (index: GLuint, v: [*c]const GLhalfNV) callconv(.C) void;
const glVertexAttrib4iv = fn (index: GLuint, v: [*c]const GLint) callconv(.C) void;
const glVertexAttrib4ivARB = fn (index: GLuint, v: [*c]const GLint) callconv(.C) void;
const glVertexAttrib4s = fn (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) callconv(.C) void;
const glVertexAttrib4sARB = fn (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) callconv(.C) void;
const glVertexAttrib4sNV = fn (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) callconv(.C) void;
const glVertexAttrib4sv = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib4svARB = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib4svNV = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttrib4ubNV = fn (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) callconv(.C) void;
const glVertexAttrib4ubv = fn (index: GLuint, v: [*c]const GLubyte) callconv(.C) void;
const glVertexAttrib4ubvARB = fn (index: GLuint, v: [*c]const GLubyte) callconv(.C) void;
const glVertexAttrib4ubvNV = fn (index: GLuint, v: [*c]const GLubyte) callconv(.C) void;
const glVertexAttrib4uiv = fn (index: GLuint, v: [*c]const GLuint) callconv(.C) void;
const glVertexAttrib4uivARB = fn (index: GLuint, v: [*c]const GLuint) callconv(.C) void;
const glVertexAttrib4usv = fn (index: GLuint, v: [*c]const GLushort) callconv(.C) void;
const glVertexAttrib4usvARB = fn (index: GLuint, v: [*c]const GLushort) callconv(.C) void;
const glVertexAttribArrayObjectATI = fn (index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint) callconv(.C) void;
const glVertexAttribBinding = fn (attribindex: GLuint, bindingindex: GLuint) callconv(.C) void;
const glVertexAttribDivisor = fn (index: GLuint, divisor: GLuint) callconv(.C) void;
const glVertexAttribDivisorARB = fn (index: GLuint, divisor: GLuint) callconv(.C) void;
const glVertexAttribFormat = fn (attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) callconv(.C) void;
const glVertexAttribFormatNV = fn (index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei) callconv(.C) void;
const glVertexAttribI1i = fn (index: GLuint, x: GLint) callconv(.C) void;
const glVertexAttribI1iEXT = fn (index: GLuint, x: GLint) callconv(.C) void;
const glVertexAttribI1iv = fn (index: GLuint, v: [*c]const GLint) callconv(.C) void;
const glVertexAttribI1ivEXT = fn (index: GLuint, v: [*c]const GLint) callconv(.C) void;
const glVertexAttribI1ui = fn (index: GLuint, x: GLuint) callconv(.C) void;
const glVertexAttribI1uiEXT = fn (index: GLuint, x: GLuint) callconv(.C) void;
const glVertexAttribI1uiv = fn (index: GLuint, v: [*c]const GLuint) callconv(.C) void;
const glVertexAttribI1uivEXT = fn (index: GLuint, v: [*c]const GLuint) callconv(.C) void;
const glVertexAttribI2i = fn (index: GLuint, x: GLint, y: GLint) callconv(.C) void;
const glVertexAttribI2iEXT = fn (index: GLuint, x: GLint, y: GLint) callconv(.C) void;
const glVertexAttribI2iv = fn (index: GLuint, v: [*c]const GLint) callconv(.C) void;
const glVertexAttribI2ivEXT = fn (index: GLuint, v: [*c]const GLint) callconv(.C) void;
const glVertexAttribI2ui = fn (index: GLuint, x: GLuint, y: GLuint) callconv(.C) void;
const glVertexAttribI2uiEXT = fn (index: GLuint, x: GLuint, y: GLuint) callconv(.C) void;
const glVertexAttribI2uiv = fn (index: GLuint, v: [*c]const GLuint) callconv(.C) void;
const glVertexAttribI2uivEXT = fn (index: GLuint, v: [*c]const GLuint) callconv(.C) void;
const glVertexAttribI3i = fn (index: GLuint, x: GLint, y: GLint, z: GLint) callconv(.C) void;
const glVertexAttribI3iEXT = fn (index: GLuint, x: GLint, y: GLint, z: GLint) callconv(.C) void;
const glVertexAttribI3iv = fn (index: GLuint, v: [*c]const GLint) callconv(.C) void;
const glVertexAttribI3ivEXT = fn (index: GLuint, v: [*c]const GLint) callconv(.C) void;
const glVertexAttribI3ui = fn (index: GLuint, x: GLuint, y: GLuint, z: GLuint) callconv(.C) void;
const glVertexAttribI3uiEXT = fn (index: GLuint, x: GLuint, y: GLuint, z: GLuint) callconv(.C) void;
const glVertexAttribI3uiv = fn (index: GLuint, v: [*c]const GLuint) callconv(.C) void;
const glVertexAttribI3uivEXT = fn (index: GLuint, v: [*c]const GLuint) callconv(.C) void;
const glVertexAttribI4bv = fn (index: GLuint, v: [*c]const GLbyte) callconv(.C) void;
const glVertexAttribI4bvEXT = fn (index: GLuint, v: [*c]const GLbyte) callconv(.C) void;
const glVertexAttribI4i = fn (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glVertexAttribI4iEXT = fn (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glVertexAttribI4iv = fn (index: GLuint, v: [*c]const GLint) callconv(.C) void;
const glVertexAttribI4ivEXT = fn (index: GLuint, v: [*c]const GLint) callconv(.C) void;
const glVertexAttribI4sv = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttribI4svEXT = fn (index: GLuint, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttribI4ubv = fn (index: GLuint, v: [*c]const GLubyte) callconv(.C) void;
const glVertexAttribI4ubvEXT = fn (index: GLuint, v: [*c]const GLubyte) callconv(.C) void;
const glVertexAttribI4ui = fn (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) callconv(.C) void;
const glVertexAttribI4uiEXT = fn (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) callconv(.C) void;
const glVertexAttribI4uiv = fn (index: GLuint, v: [*c]const GLuint) callconv(.C) void;
const glVertexAttribI4uivEXT = fn (index: GLuint, v: [*c]const GLuint) callconv(.C) void;
const glVertexAttribI4usv = fn (index: GLuint, v: [*c]const GLushort) callconv(.C) void;
const glVertexAttribI4usvEXT = fn (index: GLuint, v: [*c]const GLushort) callconv(.C) void;
const glVertexAttribIFormat = fn (attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) callconv(.C) void;
const glVertexAttribIFormatNV = fn (index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) callconv(.C) void;
const glVertexAttribIPointer = fn (index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glVertexAttribIPointerEXT = fn (index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glVertexAttribL1d = fn (index: GLuint, x: GLdouble) callconv(.C) void;
const glVertexAttribL1dEXT = fn (index: GLuint, x: GLdouble) callconv(.C) void;
const glVertexAttribL1dv = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttribL1dvEXT = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttribL1i64NV = fn (index: GLuint, x: GLint64EXT) callconv(.C) void;
const glVertexAttribL1i64vNV = fn (index: GLuint, v: [*c]const GLint64EXT) callconv(.C) void;
const glVertexAttribL1ui64ARB = fn (index: GLuint, x: GLuint64EXT) callconv(.C) void;
const glVertexAttribL1ui64NV = fn (index: GLuint, x: GLuint64EXT) callconv(.C) void;
const glVertexAttribL1ui64vARB = fn (index: GLuint, v: [*c]const GLuint64EXT) callconv(.C) void;
const glVertexAttribL1ui64vNV = fn (index: GLuint, v: [*c]const GLuint64EXT) callconv(.C) void;
const glVertexAttribL2d = fn (index: GLuint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glVertexAttribL2dEXT = fn (index: GLuint, x: GLdouble, y: GLdouble) callconv(.C) void;
const glVertexAttribL2dv = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttribL2dvEXT = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttribL2i64NV = fn (index: GLuint, x: GLint64EXT, y: GLint64EXT) callconv(.C) void;
const glVertexAttribL2i64vNV = fn (index: GLuint, v: [*c]const GLint64EXT) callconv(.C) void;
const glVertexAttribL2ui64NV = fn (index: GLuint, x: GLuint64EXT, y: GLuint64EXT) callconv(.C) void;
const glVertexAttribL2ui64vNV = fn (index: GLuint, v: [*c]const GLuint64EXT) callconv(.C) void;
const glVertexAttribL3d = fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glVertexAttribL3dEXT = fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glVertexAttribL3dv = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttribL3dvEXT = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttribL3i64NV = fn (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) callconv(.C) void;
const glVertexAttribL3i64vNV = fn (index: GLuint, v: [*c]const GLint64EXT) callconv(.C) void;
const glVertexAttribL3ui64NV = fn (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) callconv(.C) void;
const glVertexAttribL3ui64vNV = fn (index: GLuint, v: [*c]const GLuint64EXT) callconv(.C) void;
const glVertexAttribL4d = fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glVertexAttribL4dEXT = fn (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glVertexAttribL4dv = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttribL4dvEXT = fn (index: GLuint, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttribL4i64NV = fn (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) callconv(.C) void;
const glVertexAttribL4i64vNV = fn (index: GLuint, v: [*c]const GLint64EXT) callconv(.C) void;
const glVertexAttribL4ui64NV = fn (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) callconv(.C) void;
const glVertexAttribL4ui64vNV = fn (index: GLuint, v: [*c]const GLuint64EXT) callconv(.C) void;
const glVertexAttribLFormat = fn (attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) callconv(.C) void;
const glVertexAttribLFormatNV = fn (index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) callconv(.C) void;
const glVertexAttribLPointer = fn (index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glVertexAttribLPointerEXT = fn (index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glVertexAttribP1ui = fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) callconv(.C) void;
const glVertexAttribP1uiv = fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: [*c]const GLuint) callconv(.C) void;
const glVertexAttribP2ui = fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) callconv(.C) void;
const glVertexAttribP2uiv = fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: [*c]const GLuint) callconv(.C) void;
const glVertexAttribP3ui = fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) callconv(.C) void;
const glVertexAttribP3uiv = fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: [*c]const GLuint) callconv(.C) void;
const glVertexAttribP4ui = fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) callconv(.C) void;
const glVertexAttribP4uiv = fn (index: GLuint, type_: GLenum, normalized: GLboolean, value: [*c]const GLuint) callconv(.C) void;
const glVertexAttribParameteriAMD = fn (index: GLuint, pname: GLenum, param: GLint) callconv(.C) void;
const glVertexAttribPointer = fn (index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glVertexAttribPointerARB = fn (index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glVertexAttribPointerNV = fn (index: GLuint, fsize: GLint, type_: GLenum, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glVertexAttribs1dvNV = fn (index: GLuint, count: GLsizei, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttribs1fvNV = fn (index: GLuint, count: GLsizei, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttribs1hvNV = fn (index: GLuint, n: GLsizei, v: [*c]const GLhalfNV) callconv(.C) void;
const glVertexAttribs1svNV = fn (index: GLuint, count: GLsizei, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttribs2dvNV = fn (index: GLuint, count: GLsizei, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttribs2fvNV = fn (index: GLuint, count: GLsizei, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttribs2hvNV = fn (index: GLuint, n: GLsizei, v: [*c]const GLhalfNV) callconv(.C) void;
const glVertexAttribs2svNV = fn (index: GLuint, count: GLsizei, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttribs3dvNV = fn (index: GLuint, count: GLsizei, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttribs3fvNV = fn (index: GLuint, count: GLsizei, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttribs3hvNV = fn (index: GLuint, n: GLsizei, v: [*c]const GLhalfNV) callconv(.C) void;
const glVertexAttribs3svNV = fn (index: GLuint, count: GLsizei, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttribs4dvNV = fn (index: GLuint, count: GLsizei, v: [*c]const GLdouble) callconv(.C) void;
const glVertexAttribs4fvNV = fn (index: GLuint, count: GLsizei, v: [*c]const GLfloat) callconv(.C) void;
const glVertexAttribs4hvNV = fn (index: GLuint, n: GLsizei, v: [*c]const GLhalfNV) callconv(.C) void;
const glVertexAttribs4svNV = fn (index: GLuint, count: GLsizei, v: [*c]const GLshort) callconv(.C) void;
const glVertexAttribs4ubvNV = fn (index: GLuint, count: GLsizei, v: [*c]const GLubyte) callconv(.C) void;
const glVertexBindingDivisor = fn (bindingindex: GLuint, divisor: GLuint) callconv(.C) void;
const glVertexBlendARB = fn (count: GLint) callconv(.C) void;
const glVertexBlendEnvfATI = fn (pname: GLenum, param: GLfloat) callconv(.C) void;
const glVertexBlendEnviATI = fn (pname: GLenum, param: GLint) callconv(.C) void;
const glVertexFormatNV = fn (size: GLint, type_: GLenum, stride: GLsizei) callconv(.C) void;
const glVertexPointerEXT = fn (size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glVertexPointerListIBM = fn (size: GLint, type_: GLenum, stride: GLint, pointer: ?*const ?*const c_void, ptrstride: GLint) callconv(.C) void;
const glVertexPointervINTEL = fn (size: GLint, type_: GLenum, pointer: ?*const ?*const c_void) callconv(.C) void;
const glVertexStream1dATI = fn (stream: GLenum, x: GLdouble) callconv(.C) void;
const glVertexStream1dvATI = fn (stream: GLenum, coords: [*c]const GLdouble) callconv(.C) void;
const glVertexStream1fATI = fn (stream: GLenum, x: GLfloat) callconv(.C) void;
const glVertexStream1fvATI = fn (stream: GLenum, coords: [*c]const GLfloat) callconv(.C) void;
const glVertexStream1iATI = fn (stream: GLenum, x: GLint) callconv(.C) void;
const glVertexStream1ivATI = fn (stream: GLenum, coords: [*c]const GLint) callconv(.C) void;
const glVertexStream1sATI = fn (stream: GLenum, x: GLshort) callconv(.C) void;
const glVertexStream1svATI = fn (stream: GLenum, coords: [*c]const GLshort) callconv(.C) void;
const glVertexStream2dATI = fn (stream: GLenum, x: GLdouble, y: GLdouble) callconv(.C) void;
const glVertexStream2dvATI = fn (stream: GLenum, coords: [*c]const GLdouble) callconv(.C) void;
const glVertexStream2fATI = fn (stream: GLenum, x: GLfloat, y: GLfloat) callconv(.C) void;
const glVertexStream2fvATI = fn (stream: GLenum, coords: [*c]const GLfloat) callconv(.C) void;
const glVertexStream2iATI = fn (stream: GLenum, x: GLint, y: GLint) callconv(.C) void;
const glVertexStream2ivATI = fn (stream: GLenum, coords: [*c]const GLint) callconv(.C) void;
const glVertexStream2sATI = fn (stream: GLenum, x: GLshort, y: GLshort) callconv(.C) void;
const glVertexStream2svATI = fn (stream: GLenum, coords: [*c]const GLshort) callconv(.C) void;
const glVertexStream3dATI = fn (stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glVertexStream3dvATI = fn (stream: GLenum, coords: [*c]const GLdouble) callconv(.C) void;
const glVertexStream3fATI = fn (stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glVertexStream3fvATI = fn (stream: GLenum, coords: [*c]const GLfloat) callconv(.C) void;
const glVertexStream3iATI = fn (stream: GLenum, x: GLint, y: GLint, z: GLint) callconv(.C) void;
const glVertexStream3ivATI = fn (stream: GLenum, coords: [*c]const GLint) callconv(.C) void;
const glVertexStream3sATI = fn (stream: GLenum, x: GLshort, y: GLshort, z: GLshort) callconv(.C) void;
const glVertexStream3svATI = fn (stream: GLenum, coords: [*c]const GLshort) callconv(.C) void;
const glVertexStream4dATI = fn (stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glVertexStream4dvATI = fn (stream: GLenum, coords: [*c]const GLdouble) callconv(.C) void;
const glVertexStream4fATI = fn (stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glVertexStream4fvATI = fn (stream: GLenum, coords: [*c]const GLfloat) callconv(.C) void;
const glVertexStream4iATI = fn (stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glVertexStream4ivATI = fn (stream: GLenum, coords: [*c]const GLint) callconv(.C) void;
const glVertexStream4sATI = fn (stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) callconv(.C) void;
const glVertexStream4svATI = fn (stream: GLenum, coords: [*c]const GLshort) callconv(.C) void;
const glVertexWeightPointerEXT = fn (size: GLint, type_: GLenum, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glVertexWeightfEXT = fn (weight: GLfloat) callconv(.C) void;
const glVertexWeightfvEXT = fn (weight: [*c]const GLfloat) callconv(.C) void;
const glVertexWeighthNV = fn (weight: GLhalfNV) callconv(.C) void;
const glVertexWeighthvNV = fn (weight: [*c]const GLhalfNV) callconv(.C) void;
const glVideoCaptureNV = fn (video_capture_slot: GLuint, sequence_num: [*c]GLuint, capture_time: [*c]GLuint64EXT) callconv(.C) GLenum;
const glVideoCaptureStreamParameterdvNV = fn (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: [*c]const GLdouble) callconv(.C) void;
const glVideoCaptureStreamParameterfvNV = fn (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: [*c]const GLfloat) callconv(.C) void;
const glVideoCaptureStreamParameterivNV = fn (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: [*c]const GLint) callconv(.C) void;
const glViewport = fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(.C) void;
const glViewportArrayv = fn (first: GLuint, count: GLsizei, v: [*c]const GLfloat) callconv(.C) void;
const glViewportIndexedf = fn (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) callconv(.C) void;
const glViewportIndexedfv = fn (index: GLuint, v: [*c]const GLfloat) callconv(.C) void;
const glViewportPositionWScaleNV = fn (index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) callconv(.C) void;
const glViewportSwizzleNV = fn (index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum) callconv(.C) void;
const glWaitSemaphoreEXT = fn (semaphore: GLuint, numBufferBarriers: GLuint, buffers: [*c]const GLuint, numTextureBarriers: GLuint, textures: [*c]const GLuint, srcLayouts: [*c]const GLenum) callconv(.C) void;
const glWaitSemaphoreui64NVX = fn (waitGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: [*c]const GLuint, fenceValueArray: [*c]const GLuint64) callconv(.C) void;
const glWaitSync = fn (sync: GLsync, flags: GLbitfield, timeout: GLuint64) callconv(.C) void;
const glWaitVkSemaphoreNV = fn (vkSemaphore: GLuint64) callconv(.C) void;
const glWeightPathsNV = fn (resultPath: GLuint, numPaths: GLsizei, paths: [*c]const GLuint, weights: [*c]const GLfloat) callconv(.C) void;
const glWeightPointerARB = fn (size: GLint, type_: GLenum, stride: GLsizei, pointer: ?*const c_void) callconv(.C) void;
const glWeightbvARB = fn (size: GLint, weights: [*c]const GLbyte) callconv(.C) void;
const glWeightdvARB = fn (size: GLint, weights: [*c]const GLdouble) callconv(.C) void;
const glWeightfvARB = fn (size: GLint, weights: [*c]const GLfloat) callconv(.C) void;
const glWeightivARB = fn (size: GLint, weights: [*c]const GLint) callconv(.C) void;
const glWeightsvARB = fn (size: GLint, weights: [*c]const GLshort) callconv(.C) void;
const glWeightubvARB = fn (size: GLint, weights: [*c]const GLubyte) callconv(.C) void;
const glWeightuivARB = fn (size: GLint, weights: [*c]const GLuint) callconv(.C) void;
const glWeightusvARB = fn (size: GLint, weights: [*c]const GLushort) callconv(.C) void;
const glWindowPos2dARB = fn (x: GLdouble, y: GLdouble) callconv(.C) void;
const glWindowPos2dMESA = fn (x: GLdouble, y: GLdouble) callconv(.C) void;
const glWindowPos2dvARB = fn (v: [*c]const GLdouble) callconv(.C) void;
const glWindowPos2dvMESA = fn (v: [*c]const GLdouble) callconv(.C) void;
const glWindowPos2fARB = fn (x: GLfloat, y: GLfloat) callconv(.C) void;
const glWindowPos2fMESA = fn (x: GLfloat, y: GLfloat) callconv(.C) void;
const glWindowPos2fvARB = fn (v: [*c]const GLfloat) callconv(.C) void;
const glWindowPos2fvMESA = fn (v: [*c]const GLfloat) callconv(.C) void;
const glWindowPos2iARB = fn (x: GLint, y: GLint) callconv(.C) void;
const glWindowPos2iMESA = fn (x: GLint, y: GLint) callconv(.C) void;
const glWindowPos2ivARB = fn (v: [*c]const GLint) callconv(.C) void;
const glWindowPos2ivMESA = fn (v: [*c]const GLint) callconv(.C) void;
const glWindowPos2sARB = fn (x: GLshort, y: GLshort) callconv(.C) void;
const glWindowPos2sMESA = fn (x: GLshort, y: GLshort) callconv(.C) void;
const glWindowPos2svARB = fn (v: [*c]const GLshort) callconv(.C) void;
const glWindowPos2svMESA = fn (v: [*c]const GLshort) callconv(.C) void;
const glWindowPos3dARB = fn (x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glWindowPos3dMESA = fn (x: GLdouble, y: GLdouble, z: GLdouble) callconv(.C) void;
const glWindowPos3dvARB = fn (v: [*c]const GLdouble) callconv(.C) void;
const glWindowPos3dvMESA = fn (v: [*c]const GLdouble) callconv(.C) void;
const glWindowPos3fARB = fn (x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glWindowPos3fMESA = fn (x: GLfloat, y: GLfloat, z: GLfloat) callconv(.C) void;
const glWindowPos3fvARB = fn (v: [*c]const GLfloat) callconv(.C) void;
const glWindowPos3fvMESA = fn (v: [*c]const GLfloat) callconv(.C) void;
const glWindowPos3iARB = fn (x: GLint, y: GLint, z: GLint) callconv(.C) void;
const glWindowPos3iMESA = fn (x: GLint, y: GLint, z: GLint) callconv(.C) void;
const glWindowPos3ivARB = fn (v: [*c]const GLint) callconv(.C) void;
const glWindowPos3ivMESA = fn (v: [*c]const GLint) callconv(.C) void;
const glWindowPos3sARB = fn (x: GLshort, y: GLshort, z: GLshort) callconv(.C) void;
const glWindowPos3sMESA = fn (x: GLshort, y: GLshort, z: GLshort) callconv(.C) void;
const glWindowPos3svARB = fn (v: [*c]const GLshort) callconv(.C) void;
const glWindowPos3svMESA = fn (v: [*c]const GLshort) callconv(.C) void;
const glWindowPos4dMESA = fn (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(.C) void;
const glWindowPos4dvMESA = fn (v: [*c]const GLdouble) callconv(.C) void;
const glWindowPos4fMESA = fn (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(.C) void;
const glWindowPos4fvMESA = fn (v: [*c]const GLfloat) callconv(.C) void;
const glWindowPos4iMESA = fn (x: GLint, y: GLint, z: GLint, w: GLint) callconv(.C) void;
const glWindowPos4ivMESA = fn (v: [*c]const GLint) callconv(.C) void;
const glWindowPos4sMESA = fn (x: GLshort, y: GLshort, z: GLshort, w: GLshort) callconv(.C) void;
const glWindowPos4svMESA = fn (v: [*c]const GLshort) callconv(.C) void;
const glWindowRectanglesEXT = fn (mode: GLenum, count: GLsizei, box: [*c]const GLint) callconv(.C) void;
const glWriteMaskEXT = fn (res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) callconv(.C) void;

pub const GL_1PASS_EXT: u32 = 0x80A1;
pub const GL_1PASS_SGIS: u32 = 0x80A1;
pub const GL_2PASS_0_EXT: u32 = 0x80A2;
pub const GL_2PASS_0_SGIS: u32 = 0x80A2;
pub const GL_2PASS_1_EXT: u32 = 0x80A3;
pub const GL_2PASS_1_SGIS: u32 = 0x80A3;
pub const GL_2X_BIT_ATI: u32 = 0x00000001;
pub const GL_422_AVERAGE_EXT: u32 = 0x80CE;
pub const GL_422_EXT: u32 = 0x80CC;
pub const GL_422_REV_AVERAGE_EXT: u32 = 0x80CF;
pub const GL_422_REV_EXT: u32 = 0x80CD;
pub const GL_4PASS_0_EXT: u32 = 0x80A4;
pub const GL_4PASS_0_SGIS: u32 = 0x80A4;
pub const GL_4PASS_1_EXT: u32 = 0x80A5;
pub const GL_4PASS_1_SGIS: u32 = 0x80A5;
pub const GL_4PASS_2_EXT: u32 = 0x80A6;
pub const GL_4PASS_2_SGIS: u32 = 0x80A6;
pub const GL_4PASS_3_EXT: u32 = 0x80A7;
pub const GL_4PASS_3_SGIS: u32 = 0x80A7;
pub const GL_4X_BIT_ATI: u32 = 0x00000002;
pub const GL_8X_BIT_ATI: u32 = 0x00000004;
pub const GL_ABGR_EXT: u32 = 0x8000;
pub const GL_ACCUM_ADJACENT_PAIRS_NV: u32 = 0x90AD;
pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS: u32 = 0x92D9;
pub const GL_ACTIVE_ATTRIBUTES: u32 = 0x8B89;
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: u32 = 0x8B8A;
pub const GL_ACTIVE_PROGRAM: u32 = 0x8259;
pub const GL_ACTIVE_PROGRAM_EXT: u32 = 0x8B8D;
pub const GL_ACTIVE_RESOURCES: u32 = 0x92F5;
pub const GL_ACTIVE_STENCIL_FACE_EXT: u32 = 0x8911;
pub const GL_ACTIVE_SUBROUTINES: u32 = 0x8DE5;
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH: u32 = 0x8E48;
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS: u32 = 0x8DE6;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS: u32 = 0x8E47;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH: u32 = 0x8E49;
pub const GL_ACTIVE_TEXTURE: u32 = 0x84E0;
pub const GL_ACTIVE_TEXTURE_ARB: u32 = 0x84E0;
pub const GL_ACTIVE_UNIFORMS: u32 = 0x8B86;
pub const GL_ACTIVE_UNIFORM_BLOCKS: u32 = 0x8A36;
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: u32 = 0x8A35;
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH: u32 = 0x8B87;
pub const GL_ACTIVE_VARIABLES: u32 = 0x9305;
pub const GL_ACTIVE_VARYINGS_NV: u32 = 0x8C81;
pub const GL_ACTIVE_VARYING_MAX_LENGTH_NV: u32 = 0x8C82;
pub const GL_ACTIVE_VERTEX_UNITS_ARB: u32 = 0x86A5;
pub const GL_ADD_ATI: u32 = 0x8963;
pub const GL_ADD_SIGNED_ARB: u32 = 0x8574;
pub const GL_ADD_SIGNED_EXT: u32 = 0x8574;
pub const GL_ADJACENT_PAIRS_NV: u32 = 0x90AE;
pub const GL_AFFINE_2D_NV: u32 = 0x9092;
pub const GL_AFFINE_3D_NV: u32 = 0x9094;
pub const GL_ALIASED_LINE_WIDTH_RANGE: u32 = 0x846E;
pub const GL_ALLOW_DRAW_FRG_HINT_PGI: u32 = 0x1A210;
pub const GL_ALLOW_DRAW_MEM_HINT_PGI: u32 = 0x1A211;
pub const GL_ALLOW_DRAW_OBJ_HINT_PGI: u32 = 0x1A20E;
pub const GL_ALLOW_DRAW_WIN_HINT_PGI: u32 = 0x1A20F;
pub const GL_ALL_BARRIER_BITS: u32 = 0xFFFFFFFF;
pub const GL_ALL_BARRIER_BITS_EXT: u32 = 0xFFFFFFFF;
pub const GL_ALL_COMPLETED_NV: u32 = 0x84F2;
pub const GL_ALL_PIXELS_AMD: u32 = 0xFFFFFFFF;
pub const GL_ALL_SHADER_BITS: u32 = 0xFFFFFFFF;
pub const GL_ALL_STATIC_DATA_IBM: u32 = 103060;
pub const GL_ALPHA: u32 = 0x1906;
pub const GL_ALPHA12_EXT: u32 = 0x803D;
pub const GL_ALPHA16F_ARB: u32 = 0x881C;
pub const GL_ALPHA16I_EXT: u32 = 0x8D8A;
pub const GL_ALPHA16UI_EXT: u32 = 0x8D78;
pub const GL_ALPHA16_EXT: u32 = 0x803E;
pub const GL_ALPHA16_SNORM: u32 = 0x9018;
pub const GL_ALPHA32F_ARB: u32 = 0x8816;
pub const GL_ALPHA32I_EXT: u32 = 0x8D84;
pub const GL_ALPHA32UI_EXT: u32 = 0x8D72;
pub const GL_ALPHA4_EXT: u32 = 0x803B;
pub const GL_ALPHA8I_EXT: u32 = 0x8D90;
pub const GL_ALPHA8UI_EXT: u32 = 0x8D7E;
pub const GL_ALPHA8_EXT: u32 = 0x803C;
pub const GL_ALPHA8_SNORM: u32 = 0x9014;
pub const GL_ALPHA_FLOAT16_APPLE: u32 = 0x881C;
pub const GL_ALPHA_FLOAT16_ATI: u32 = 0x881C;
pub const GL_ALPHA_FLOAT32_APPLE: u32 = 0x8816;
pub const GL_ALPHA_FLOAT32_ATI: u32 = 0x8816;
pub const GL_ALPHA_INTEGER_EXT: u32 = 0x8D97;
pub const GL_ALPHA_MAX_CLAMP_INGR: u32 = 0x8567;
pub const GL_ALPHA_MAX_SGIX: u32 = 0x8321;
pub const GL_ALPHA_MIN_CLAMP_INGR: u32 = 0x8563;
pub const GL_ALPHA_MIN_SGIX: u32 = 0x8320;
pub const GL_ALPHA_REF_COMMAND_NV: u32 = 0x000F;
pub const GL_ALPHA_SNORM: u32 = 0x9010;
pub const GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV: u32 = 0x934D;
pub const GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV: u32 = 0x934F;
pub const GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV: u32 = 0x934E;
pub const GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV: u32 = 0x92BF;
pub const GL_ALREADY_SIGNALED: u32 = 0x911A;
pub const GL_ALWAYS: u32 = 0x0207;
pub const GL_ALWAYS_FAST_HINT_PGI: u32 = 0x1A20C;
pub const GL_ALWAYS_SOFT_HINT_PGI: u32 = 0x1A20D;
pub const GL_AND: u32 = 0x1501;
pub const GL_AND_INVERTED: u32 = 0x1504;
pub const GL_AND_REVERSE: u32 = 0x1502;
pub const GL_ANY_SAMPLES_PASSED: u32 = 0x8C2F;
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE: u32 = 0x8D6A;
pub const GL_ARC_TO_NV: u32 = 0xFE;
pub const GL_ARRAY_BUFFER: u32 = 0x8892;
pub const GL_ARRAY_BUFFER_ARB: u32 = 0x8892;
pub const GL_ARRAY_BUFFER_BINDING: u32 = 0x8894;
pub const GL_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8894;
pub const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT: u32 = 0x81A9;
pub const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT: u32 = 0x81A8;
pub const GL_ARRAY_OBJECT_BUFFER_ATI: u32 = 0x8766;
pub const GL_ARRAY_OBJECT_OFFSET_ATI: u32 = 0x8767;
pub const GL_ARRAY_SIZE: u32 = 0x92FB;
pub const GL_ARRAY_STRIDE: u32 = 0x92FE;
pub const GL_ASYNC_DRAW_PIXELS_SGIX: u32 = 0x835D;
pub const GL_ASYNC_HISTOGRAM_SGIX: u32 = 0x832C;
pub const GL_ASYNC_MARKER_SGIX: u32 = 0x8329;
pub const GL_ASYNC_READ_PIXELS_SGIX: u32 = 0x835E;
pub const GL_ASYNC_TEX_IMAGE_SGIX: u32 = 0x835C;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT: u32 = 0x00001000;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT: u32 = 0x00001000;
pub const GL_ATOMIC_COUNTER_BUFFER: u32 = 0x92C0;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS: u32 = 0x92C5;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES: u32 = 0x92C6;
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING: u32 = 0x92C1;
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE: u32 = 0x92C4;
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX: u32 = 0x9301;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER: u32 = 0x90ED;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER: u32 = 0x92CB;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER: u32 = 0x92CA;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV: u32 = 0x959E;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV: u32 = 0x959F;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 0x92C8;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 0x92C9;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER: u32 = 0x92C7;
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE: u32 = 0x92C3;
pub const GL_ATOMIC_COUNTER_BUFFER_START: u32 = 0x92C2;
pub const GL_ATTACHED_MEMORY_OBJECT_NV: u32 = 0x95A4;
pub const GL_ATTACHED_MEMORY_OFFSET_NV: u32 = 0x95A5;
pub const GL_ATTACHED_SHADERS: u32 = 0x8B85;
pub const GL_ATTENUATION_EXT: u32 = 0x834D;
pub const GL_ATTRIBUTE_ADDRESS_COMMAND_NV: u32 = 0x0009;
pub const GL_ATTRIB_ARRAY_POINTER_NV: u32 = 0x8645;
pub const GL_ATTRIB_ARRAY_SIZE_NV: u32 = 0x8623;
pub const GL_ATTRIB_ARRAY_STRIDE_NV: u32 = 0x8624;
pub const GL_ATTRIB_ARRAY_TYPE_NV: u32 = 0x8625;
pub const GL_AUTO_GENERATE_MIPMAP: u32 = 0x8295;
pub const GL_AUX_DEPTH_STENCIL_APPLE: u32 = 0x8A14;
pub const GL_AVERAGE_EXT: u32 = 0x8335;
pub const GL_AVERAGE_HP: u32 = 0x8160;
pub const GL_BACK: u32 = 0x0405;
pub const GL_BACK_LEFT: u32 = 0x0402;
pub const GL_BACK_NORMALS_HINT_PGI: u32 = 0x1A223;
pub const GL_BACK_PRIMARY_COLOR_NV: u32 = 0x8C77;
pub const GL_BACK_RIGHT: u32 = 0x0403;
pub const GL_BACK_SECONDARY_COLOR_NV: u32 = 0x8C78;
pub const GL_BEVEL_NV: u32 = 0x90A6;
pub const GL_BGR: u32 = 0x80E0;
pub const GL_BGRA: u32 = 0x80E1;
pub const GL_BGRA_EXT: u32 = 0x80E1;
pub const GL_BGRA_INTEGER: u32 = 0x8D9B;
pub const GL_BGRA_INTEGER_EXT: u32 = 0x8D9B;
pub const GL_BGR_EXT: u32 = 0x80E0;
pub const GL_BGR_INTEGER: u32 = 0x8D9A;
pub const GL_BGR_INTEGER_EXT: u32 = 0x8D9A;
pub const GL_BIAS_BIT_ATI: u32 = 0x00000008;
pub const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV: u32 = 0x8541;
pub const GL_BINORMAL_ARRAY_EXT: u32 = 0x843A;
pub const GL_BINORMAL_ARRAY_POINTER_EXT: u32 = 0x8443;
pub const GL_BINORMAL_ARRAY_STRIDE_EXT: u32 = 0x8441;
pub const GL_BINORMAL_ARRAY_TYPE_EXT: u32 = 0x8440;
pub const GL_BLACKHOLE_RENDER_INTEL: u32 = 0x83FC;
pub const GL_BLEND: u32 = 0x0BE2;
pub const GL_BLEND_ADVANCED_COHERENT_KHR: u32 = 0x9285;
pub const GL_BLEND_ADVANCED_COHERENT_NV: u32 = 0x9285;
pub const GL_BLEND_COLOR: u32 = 0x8005;
pub const GL_BLEND_COLOR_COMMAND_NV: u32 = 0x000B;
pub const GL_BLEND_COLOR_EXT: u32 = 0x8005;
pub const GL_BLEND_DST: u32 = 0x0BE0;
pub const GL_BLEND_DST_ALPHA: u32 = 0x80CA;
pub const GL_BLEND_DST_ALPHA_EXT: u32 = 0x80CA;
pub const GL_BLEND_DST_RGB: u32 = 0x80C8;
pub const GL_BLEND_DST_RGB_EXT: u32 = 0x80C8;
pub const GL_BLEND_EQUATION: u32 = 0x8009;
pub const GL_BLEND_EQUATION_ALPHA: u32 = 0x883D;
pub const GL_BLEND_EQUATION_ALPHA_EXT: u32 = 0x883D;
pub const GL_BLEND_EQUATION_EXT: u32 = 0x8009;
pub const GL_BLEND_EQUATION_RGB: u32 = 0x8009;
pub const GL_BLEND_EQUATION_RGB_EXT: u32 = 0x8009;
pub const GL_BLEND_OVERLAP_NV: u32 = 0x9281;
pub const GL_BLEND_PREMULTIPLIED_SRC_NV: u32 = 0x9280;
pub const GL_BLEND_SRC: u32 = 0x0BE1;
pub const GL_BLEND_SRC_ALPHA: u32 = 0x80CB;
pub const GL_BLEND_SRC_ALPHA_EXT: u32 = 0x80CB;
pub const GL_BLEND_SRC_RGB: u32 = 0x80C9;
pub const GL_BLEND_SRC_RGB_EXT: u32 = 0x80C9;
pub const GL_BLOCK_INDEX: u32 = 0x92FD;
pub const GL_BLUE: u32 = 0x1905;
pub const GL_BLUE_BIT_ATI: u32 = 0x00000004;
pub const GL_BLUE_INTEGER: u32 = 0x8D96;
pub const GL_BLUE_INTEGER_EXT: u32 = 0x8D96;
pub const GL_BLUE_MAX_CLAMP_INGR: u32 = 0x8566;
pub const GL_BLUE_MIN_CLAMP_INGR: u32 = 0x8562;
pub const GL_BLUE_NV: u32 = 0x1905;
pub const GL_BOLD_BIT_NV: u32 = 0x01;
pub const GL_BOOL: u32 = 0x8B56;
pub const GL_BOOL_ARB: u32 = 0x8B56;
pub const GL_BOOL_VEC2: u32 = 0x8B57;
pub const GL_BOOL_VEC2_ARB: u32 = 0x8B57;
pub const GL_BOOL_VEC3: u32 = 0x8B58;
pub const GL_BOOL_VEC3_ARB: u32 = 0x8B58;
pub const GL_BOOL_VEC4: u32 = 0x8B59;
pub const GL_BOOL_VEC4_ARB: u32 = 0x8B59;
pub const GL_BOUNDING_BOX_NV: u32 = 0x908D;
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV: u32 = 0x909C;
pub const GL_BUFFER: u32 = 0x82E0;
pub const GL_BUFFER_ACCESS: u32 = 0x88BB;
pub const GL_BUFFER_ACCESS_ARB: u32 = 0x88BB;
pub const GL_BUFFER_ACCESS_FLAGS: u32 = 0x911F;
pub const GL_BUFFER_BINDING: u32 = 0x9302;
pub const GL_BUFFER_DATA_SIZE: u32 = 0x9303;
pub const GL_BUFFER_FLUSHING_UNMAP_APPLE: u32 = 0x8A13;
pub const GL_BUFFER_GPU_ADDRESS_NV: u32 = 0x8F1D;
pub const GL_BUFFER_IMMUTABLE_STORAGE: u32 = 0x821F;
pub const GL_BUFFER_MAPPED: u32 = 0x88BC;
pub const GL_BUFFER_MAPPED_ARB: u32 = 0x88BC;
pub const GL_BUFFER_MAP_LENGTH: u32 = 0x9120;
pub const GL_BUFFER_MAP_OFFSET: u32 = 0x9121;
pub const GL_BUFFER_MAP_POINTER: u32 = 0x88BD;
pub const GL_BUFFER_MAP_POINTER_ARB: u32 = 0x88BD;
pub const GL_BUFFER_OBJECT_APPLE: u32 = 0x85B3;
pub const GL_BUFFER_OBJECT_EXT: u32 = 0x9151;
pub const GL_BUFFER_SERIALIZED_MODIFY_APPLE: u32 = 0x8A12;
pub const GL_BUFFER_SIZE: u32 = 0x8764;
pub const GL_BUFFER_SIZE_ARB: u32 = 0x8764;
pub const GL_BUFFER_STORAGE_FLAGS: u32 = 0x8220;
pub const GL_BUFFER_UPDATE_BARRIER_BIT: u32 = 0x00000200;
pub const GL_BUFFER_UPDATE_BARRIER_BIT_EXT: u32 = 0x00000200;
pub const GL_BUFFER_USAGE: u32 = 0x8765;
pub const GL_BUFFER_USAGE_ARB: u32 = 0x8765;
pub const GL_BUFFER_VARIABLE: u32 = 0x92E5;
pub const GL_BUMP_ENVMAP_ATI: u32 = 0x877B;
pub const GL_BUMP_NUM_TEX_UNITS_ATI: u32 = 0x8777;
pub const GL_BUMP_ROT_MATRIX_ATI: u32 = 0x8775;
pub const GL_BUMP_ROT_MATRIX_SIZE_ATI: u32 = 0x8776;
pub const GL_BUMP_TARGET_ATI: u32 = 0x877C;
pub const GL_BUMP_TEX_UNITS_ATI: u32 = 0x8778;
pub const GL_BYTE: u32 = 0x1400;
pub const GL_CALLIGRAPHIC_FRAGMENT_SGIX: u32 = 0x8183;
pub const GL_CAVEAT_SUPPORT: u32 = 0x82B8;
pub const GL_CCW: u32 = 0x0901;
pub const GL_CIRCULAR_CCW_ARC_TO_NV: u32 = 0xF8;
pub const GL_CIRCULAR_CW_ARC_TO_NV: u32 = 0xFA;
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV: u32 = 0xFC;
pub const GL_CLAMP_FRAGMENT_COLOR_ARB: u32 = 0x891B;
pub const GL_CLAMP_READ_COLOR: u32 = 0x891C;
pub const GL_CLAMP_READ_COLOR_ARB: u32 = 0x891C;
pub const GL_CLAMP_TO_BORDER: u32 = 0x812D;
pub const GL_CLAMP_TO_BORDER_ARB: u32 = 0x812D;
pub const GL_CLAMP_TO_BORDER_SGIS: u32 = 0x812D;
pub const GL_CLAMP_TO_EDGE: u32 = 0x812F;
pub const GL_CLAMP_TO_EDGE_SGIS: u32 = 0x812F;
pub const GL_CLAMP_VERTEX_COLOR_ARB: u32 = 0x891A;
pub const GL_CLEAR: u32 = 0x1500;
pub const GL_CLEAR_BUFFER: u32 = 0x82B4;
pub const GL_CLEAR_TEXTURE: u32 = 0x9365;
pub const GL_CLIENT_ACTIVE_TEXTURE_ARB: u32 = 0x84E1;
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT: u32 = 0x00004000;
pub const GL_CLIENT_STORAGE_BIT: u32 = 0x0200;
pub const GL_CLIPPING_INPUT_PRIMITIVES: u32 = 0x82F6;
pub const GL_CLIPPING_INPUT_PRIMITIVES_ARB: u32 = 0x82F6;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES: u32 = 0x82F7;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB: u32 = 0x82F7;
pub const GL_CLIP_DEPTH_MODE: u32 = 0x935D;
pub const GL_CLIP_DISTANCE0: u32 = 0x3000;
pub const GL_CLIP_DISTANCE1: u32 = 0x3001;
pub const GL_CLIP_DISTANCE2: u32 = 0x3002;
pub const GL_CLIP_DISTANCE3: u32 = 0x3003;
pub const GL_CLIP_DISTANCE4: u32 = 0x3004;
pub const GL_CLIP_DISTANCE5: u32 = 0x3005;
pub const GL_CLIP_DISTANCE6: u32 = 0x3006;
pub const GL_CLIP_DISTANCE7: u32 = 0x3007;
pub const GL_CLIP_DISTANCE_NV: u32 = 0x8C7A;
pub const GL_CLIP_FAR_HINT_PGI: u32 = 0x1A221;
pub const GL_CLIP_NEAR_HINT_PGI: u32 = 0x1A220;
pub const GL_CLIP_ORIGIN: u32 = 0x935C;
pub const GL_CLIP_VOLUME_CLIPPING_HINT_EXT: u32 = 0x80F0;
pub const GL_CLOSE_PATH_NV: u32 = 0x00;
pub const GL_CMYKA_EXT: u32 = 0x800D;
pub const GL_CMYK_EXT: u32 = 0x800C;
pub const GL_CND0_ATI: u32 = 0x896B;
pub const GL_CND_ATI: u32 = 0x896A;
pub const GL_COLOR: u32 = 0x1800;
pub const GL_COLOR3_BIT_PGI: u32 = 0x00010000;
pub const GL_COLOR4_BIT_PGI: u32 = 0x00020000;
pub const GL_COLORBURN_KHR: u32 = 0x929A;
pub const GL_COLORBURN_NV: u32 = 0x929A;
pub const GL_COLORDODGE_KHR: u32 = 0x9299;
pub const GL_COLORDODGE_NV: u32 = 0x9299;
pub const GL_COLOR_ALPHA_PAIRING_ATI: u32 = 0x8975;
pub const GL_COLOR_ARRAY_ADDRESS_NV: u32 = 0x8F23;
pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8898;
pub const GL_COLOR_ARRAY_COUNT_EXT: u32 = 0x8084;
pub const GL_COLOR_ARRAY_EXT: u32 = 0x8076;
pub const GL_COLOR_ARRAY_LENGTH_NV: u32 = 0x8F2D;
pub const GL_COLOR_ARRAY_LIST_IBM: u32 = 103072;
pub const GL_COLOR_ARRAY_LIST_STRIDE_IBM: u32 = 103082;
pub const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL: u32 = 0x83F7;
pub const GL_COLOR_ARRAY_POINTER_EXT: u32 = 0x8090;
pub const GL_COLOR_ARRAY_SIZE_EXT: u32 = 0x8081;
pub const GL_COLOR_ARRAY_STRIDE_EXT: u32 = 0x8083;
pub const GL_COLOR_ARRAY_TYPE_EXT: u32 = 0x8082;
pub const GL_COLOR_ATTACHMENT0: u32 = 0x8CE0;
pub const GL_COLOR_ATTACHMENT0_EXT: u32 = 0x8CE0;
pub const GL_COLOR_ATTACHMENT1: u32 = 0x8CE1;
pub const GL_COLOR_ATTACHMENT10: u32 = 0x8CEA;
pub const GL_COLOR_ATTACHMENT10_EXT: u32 = 0x8CEA;
pub const GL_COLOR_ATTACHMENT11: u32 = 0x8CEB;
pub const GL_COLOR_ATTACHMENT11_EXT: u32 = 0x8CEB;
pub const GL_COLOR_ATTACHMENT12: u32 = 0x8CEC;
pub const GL_COLOR_ATTACHMENT12_EXT: u32 = 0x8CEC;
pub const GL_COLOR_ATTACHMENT13: u32 = 0x8CED;
pub const GL_COLOR_ATTACHMENT13_EXT: u32 = 0x8CED;
pub const GL_COLOR_ATTACHMENT14: u32 = 0x8CEE;
pub const GL_COLOR_ATTACHMENT14_EXT: u32 = 0x8CEE;
pub const GL_COLOR_ATTACHMENT15: u32 = 0x8CEF;
pub const GL_COLOR_ATTACHMENT15_EXT: u32 = 0x8CEF;
pub const GL_COLOR_ATTACHMENT16: u32 = 0x8CF0;
pub const GL_COLOR_ATTACHMENT17: u32 = 0x8CF1;
pub const GL_COLOR_ATTACHMENT18: u32 = 0x8CF2;
pub const GL_COLOR_ATTACHMENT19: u32 = 0x8CF3;
pub const GL_COLOR_ATTACHMENT1_EXT: u32 = 0x8CE1;
pub const GL_COLOR_ATTACHMENT2: u32 = 0x8CE2;
pub const GL_COLOR_ATTACHMENT20: u32 = 0x8CF4;
pub const GL_COLOR_ATTACHMENT21: u32 = 0x8CF5;
pub const GL_COLOR_ATTACHMENT22: u32 = 0x8CF6;
pub const GL_COLOR_ATTACHMENT23: u32 = 0x8CF7;
pub const GL_COLOR_ATTACHMENT24: u32 = 0x8CF8;
pub const GL_COLOR_ATTACHMENT25: u32 = 0x8CF9;
pub const GL_COLOR_ATTACHMENT26: u32 = 0x8CFA;
pub const GL_COLOR_ATTACHMENT27: u32 = 0x8CFB;
pub const GL_COLOR_ATTACHMENT28: u32 = 0x8CFC;
pub const GL_COLOR_ATTACHMENT29: u32 = 0x8CFD;
pub const GL_COLOR_ATTACHMENT2_EXT: u32 = 0x8CE2;
pub const GL_COLOR_ATTACHMENT3: u32 = 0x8CE3;
pub const GL_COLOR_ATTACHMENT30: u32 = 0x8CFE;
pub const GL_COLOR_ATTACHMENT31: u32 = 0x8CFF;
pub const GL_COLOR_ATTACHMENT3_EXT: u32 = 0x8CE3;
pub const GL_COLOR_ATTACHMENT4: u32 = 0x8CE4;
pub const GL_COLOR_ATTACHMENT4_EXT: u32 = 0x8CE4;
pub const GL_COLOR_ATTACHMENT5: u32 = 0x8CE5;
pub const GL_COLOR_ATTACHMENT5_EXT: u32 = 0x8CE5;
pub const GL_COLOR_ATTACHMENT6: u32 = 0x8CE6;
pub const GL_COLOR_ATTACHMENT6_EXT: u32 = 0x8CE6;
pub const GL_COLOR_ATTACHMENT7: u32 = 0x8CE7;
pub const GL_COLOR_ATTACHMENT7_EXT: u32 = 0x8CE7;
pub const GL_COLOR_ATTACHMENT8: u32 = 0x8CE8;
pub const GL_COLOR_ATTACHMENT8_EXT: u32 = 0x8CE8;
pub const GL_COLOR_ATTACHMENT9: u32 = 0x8CE9;
pub const GL_COLOR_ATTACHMENT9_EXT: u32 = 0x8CE9;
pub const GL_COLOR_BUFFER_BIT: u32 = 0x00004000;
pub const GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI: u32 = 0x8835;
pub const GL_COLOR_CLEAR_VALUE: u32 = 0x0C22;
pub const GL_COLOR_COMPONENTS: u32 = 0x8283;
pub const GL_COLOR_ENCODING: u32 = 0x8296;
pub const GL_COLOR_FLOAT_APPLE: u32 = 0x8A0F;
pub const GL_COLOR_INDEX12_EXT: u32 = 0x80E6;
pub const GL_COLOR_INDEX16_EXT: u32 = 0x80E7;
pub const GL_COLOR_INDEX1_EXT: u32 = 0x80E2;
pub const GL_COLOR_INDEX2_EXT: u32 = 0x80E3;
pub const GL_COLOR_INDEX4_EXT: u32 = 0x80E4;
pub const GL_COLOR_INDEX8_EXT: u32 = 0x80E5;
pub const GL_COLOR_LOGIC_OP: u32 = 0x0BF2;
pub const GL_COLOR_MATRIX_SGI: u32 = 0x80B1;
pub const GL_COLOR_MATRIX_STACK_DEPTH_SGI: u32 = 0x80B2;
pub const GL_COLOR_RENDERABLE: u32 = 0x8286;
pub const GL_COLOR_SAMPLES_NV: u32 = 0x8E20;
pub const GL_COLOR_SUM_ARB: u32 = 0x8458;
pub const GL_COLOR_SUM_CLAMP_NV: u32 = 0x854F;
pub const GL_COLOR_SUM_EXT: u32 = 0x8458;
pub const GL_COLOR_TABLE_ALPHA_SIZE_SGI: u32 = 0x80DD;
pub const GL_COLOR_TABLE_BIAS_SGI: u32 = 0x80D7;
pub const GL_COLOR_TABLE_BLUE_SIZE_SGI: u32 = 0x80DC;
pub const GL_COLOR_TABLE_FORMAT_SGI: u32 = 0x80D8;
pub const GL_COLOR_TABLE_GREEN_SIZE_SGI: u32 = 0x80DB;
pub const GL_COLOR_TABLE_INTENSITY_SIZE_SGI: u32 = 0x80DF;
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI: u32 = 0x80DE;
pub const GL_COLOR_TABLE_RED_SIZE_SGI: u32 = 0x80DA;
pub const GL_COLOR_TABLE_SCALE_SGI: u32 = 0x80D6;
pub const GL_COLOR_TABLE_SGI: u32 = 0x80D0;
pub const GL_COLOR_TABLE_WIDTH_SGI: u32 = 0x80D9;
pub const GL_COLOR_WRITEMASK: u32 = 0x0C23;
pub const GL_COMBINE4_NV: u32 = 0x8503;
pub const GL_COMBINER0_NV: u32 = 0x8550;
pub const GL_COMBINER1_NV: u32 = 0x8551;
pub const GL_COMBINER2_NV: u32 = 0x8552;
pub const GL_COMBINER3_NV: u32 = 0x8553;
pub const GL_COMBINER4_NV: u32 = 0x8554;
pub const GL_COMBINER5_NV: u32 = 0x8555;
pub const GL_COMBINER6_NV: u32 = 0x8556;
pub const GL_COMBINER7_NV: u32 = 0x8557;
pub const GL_COMBINER_AB_DOT_PRODUCT_NV: u32 = 0x8545;
pub const GL_COMBINER_AB_OUTPUT_NV: u32 = 0x854A;
pub const GL_COMBINER_BIAS_NV: u32 = 0x8549;
pub const GL_COMBINER_CD_DOT_PRODUCT_NV: u32 = 0x8546;
pub const GL_COMBINER_CD_OUTPUT_NV: u32 = 0x854B;
pub const GL_COMBINER_COMPONENT_USAGE_NV: u32 = 0x8544;
pub const GL_COMBINER_INPUT_NV: u32 = 0x8542;
pub const GL_COMBINER_MAPPING_NV: u32 = 0x8543;
pub const GL_COMBINER_MUX_SUM_NV: u32 = 0x8547;
pub const GL_COMBINER_SCALE_NV: u32 = 0x8548;
pub const GL_COMBINER_SUM_OUTPUT_NV: u32 = 0x854C;
pub const GL_COMBINE_ALPHA_ARB: u32 = 0x8572;
pub const GL_COMBINE_ALPHA_EXT: u32 = 0x8572;
pub const GL_COMBINE_ARB: u32 = 0x8570;
pub const GL_COMBINE_EXT: u32 = 0x8570;
pub const GL_COMBINE_RGB_ARB: u32 = 0x8571;
pub const GL_COMBINE_RGB_EXT: u32 = 0x8571;
pub const GL_COMMAND_BARRIER_BIT: u32 = 0x00000040;
pub const GL_COMMAND_BARRIER_BIT_EXT: u32 = 0x00000040;
pub const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT: u32 = 0x884E;
pub const GL_COMPARE_REF_TO_TEXTURE: u32 = 0x884E;
pub const GL_COMPARE_R_TO_TEXTURE_ARB: u32 = 0x884E;
pub const GL_COMPATIBLE_SUBROUTINES: u32 = 0x8E4B;
pub const GL_COMPILE_STATUS: u32 = 0x8B81;
pub const GL_COMPLETION_STATUS_ARB: u32 = 0x91B1;
pub const GL_COMPLETION_STATUS_KHR: u32 = 0x91B1;
pub const GL_COMPRESSED_ALPHA_ARB: u32 = 0x84E9;
pub const GL_COMPRESSED_INTENSITY_ARB: u32 = 0x84EC;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB: u32 = 0x84EB;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT: u32 = 0x8C72;
pub const GL_COMPRESSED_LUMINANCE_ARB: u32 = 0x84EA;
pub const GL_COMPRESSED_LUMINANCE_LATC1_EXT: u32 = 0x8C70;
pub const GL_COMPRESSED_R11_EAC: u32 = 0x9270;
pub const GL_COMPRESSED_RED: u32 = 0x8225;
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT: u32 = 0x8DBD;
pub const GL_COMPRESSED_RED_RGTC1: u32 = 0x8DBB;
pub const GL_COMPRESSED_RED_RGTC1_EXT: u32 = 0x8DBB;
pub const GL_COMPRESSED_RG: u32 = 0x8226;
pub const GL_COMPRESSED_RG11_EAC: u32 = 0x9272;
pub const GL_COMPRESSED_RGB: u32 = 0x84ED;
pub const GL_COMPRESSED_RGB8_ETC2: u32 = 0x9274;
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: u32 = 0x9276;
pub const GL_COMPRESSED_RGBA: u32 = 0x84EE;
pub const GL_COMPRESSED_RGBA8_ETC2_EAC: u32 = 0x9278;
pub const GL_COMPRESSED_RGBA_ARB: u32 = 0x84EE;
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR: u32 = 0x93BB;
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR: u32 = 0x93B8;
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR: u32 = 0x93B9;
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR: u32 = 0x93BA;
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR: u32 = 0x93BC;
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR: u32 = 0x93BD;
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR: u32 = 0x93B0;
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR: u32 = 0x93B1;
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR: u32 = 0x93B2;
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR: u32 = 0x93B3;
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR: u32 = 0x93B4;
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR: u32 = 0x93B5;
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR: u32 = 0x93B6;
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR: u32 = 0x93B7;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB: u32 = 0x8E8C;
pub const GL_COMPRESSED_RGBA_FXT1_3DFX: u32 = 0x86B1;
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT: u32 = 0x83F1;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT: u32 = 0x83F2;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT: u32 = 0x83F3;
pub const GL_COMPRESSED_RGB_ARB: u32 = 0x84ED;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB: u32 = 0x8E8E;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB: u32 = 0x8E8F;
pub const GL_COMPRESSED_RGB_FXT1_3DFX: u32 = 0x86B0;
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT: u32 = 0x83F0;
pub const GL_COMPRESSED_RG_RGTC2: u32 = 0x8DBD;
pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT: u32 = 0x8C73;
pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT: u32 = 0x8C71;
pub const GL_COMPRESSED_SIGNED_R11_EAC: u32 = 0x9271;
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: u32 = 0x8DBE;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1: u32 = 0x8DBC;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT: u32 = 0x8DBC;
pub const GL_COMPRESSED_SIGNED_RG11_EAC: u32 = 0x9273;
pub const GL_COMPRESSED_SIGNED_RG_RGTC2: u32 = 0x8DBE;
pub const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT: u32 = 0x8C4B;
pub const GL_COMPRESSED_SLUMINANCE_EXT: u32 = 0x8C4A;
pub const GL_COMPRESSED_SRGB: u32 = 0x8C48;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: u32 = 0x93DB;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: u32 = 0x93D8;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: u32 = 0x93D9;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: u32 = 0x93DA;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: u32 = 0x93DC;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: u32 = 0x93DD;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: u32 = 0x93D0;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: u32 = 0x93D1;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: u32 = 0x93D2;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: u32 = 0x93D3;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: u32 = 0x93D4;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: u32 = 0x93D5;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: u32 = 0x93D6;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: u32 = 0x93D7;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: u32 = 0x9279;
pub const GL_COMPRESSED_SRGB8_ETC2: u32 = 0x9275;
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: u32 = 0x9277;
pub const GL_COMPRESSED_SRGB_ALPHA: u32 = 0x8C49;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB: u32 = 0x8E8D;
pub const GL_COMPRESSED_SRGB_ALPHA_EXT: u32 = 0x8C49;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: u32 = 0x8C4D;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: u32 = 0x8C4E;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: u32 = 0x8C4F;
pub const GL_COMPRESSED_SRGB_EXT: u32 = 0x8C48;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT: u32 = 0x8C4C;
pub const GL_COMPRESSED_TEXTURE_FORMATS: u32 = 0x86A3;
pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB: u32 = 0x86A3;
pub const GL_COMPUTE_PROGRAM_NV: u32 = 0x90FB;
pub const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV: u32 = 0x90FC;
pub const GL_COMPUTE_SHADER: u32 = 0x91B9;
pub const GL_COMPUTE_SHADER_BIT: u32 = 0x00000020;
pub const GL_COMPUTE_SHADER_INVOCATIONS: u32 = 0x82F5;
pub const GL_COMPUTE_SHADER_INVOCATIONS_ARB: u32 = 0x82F5;
pub const GL_COMPUTE_SUBROUTINE: u32 = 0x92ED;
pub const GL_COMPUTE_SUBROUTINE_UNIFORM: u32 = 0x92F3;
pub const GL_COMPUTE_TEXTURE: u32 = 0x82A0;
pub const GL_COMPUTE_WORK_GROUP_SIZE: u32 = 0x8267;
pub const GL_COMP_BIT_ATI: u32 = 0x00000002;
pub const GL_CONDITION_SATISFIED: u32 = 0x911C;
pub const GL_CONFORMANT_NV: u32 = 0x9374;
pub const GL_CONIC_CURVE_TO_NV: u32 = 0x1A;
pub const GL_CONJOINT_NV: u32 = 0x9284;
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL: u32 = 0x83FE;
pub const GL_CONSERVATIVE_RASTERIZATION_NV: u32 = 0x9346;
pub const GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV: u32 = 0x937B;
pub const GL_CONSERVATIVE_RASTER_DILATE_NV: u32 = 0x9379;
pub const GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV: u32 = 0x937A;
pub const GL_CONSERVATIVE_RASTER_MODE_NV: u32 = 0x954D;
pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV: u32 = 0x954E;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV: u32 = 0x9550;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV: u32 = 0x954F;
pub const GL_CONSERVE_MEMORY_HINT_PGI: u32 = 0x1A1FD;
pub const GL_CONSTANT_ALPHA: u32 = 0x8003;
pub const GL_CONSTANT_ALPHA_EXT: u32 = 0x8003;
pub const GL_CONSTANT_ARB: u32 = 0x8576;
pub const GL_CONSTANT_BORDER_HP: u32 = 0x8151;
pub const GL_CONSTANT_COLOR: u32 = 0x8001;
pub const GL_CONSTANT_COLOR0_NV: u32 = 0x852A;
pub const GL_CONSTANT_COLOR1_NV: u32 = 0x852B;
pub const GL_CONSTANT_COLOR_EXT: u32 = 0x8001;
pub const GL_CONSTANT_EXT: u32 = 0x8576;
pub const GL_CONST_EYE_NV: u32 = 0x86E5;
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT: u32 = 0x00000002;
pub const GL_CONTEXT_CORE_PROFILE_BIT: u32 = 0x00000001;
pub const GL_CONTEXT_FLAGS: u32 = 0x821E;
pub const GL_CONTEXT_FLAG_DEBUG_BIT: u32 = 0x00000002;
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: u32 = 0x00000001;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT: u32 = 0x00000008;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR: u32 = 0x00000008;
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB: u32 = 0x00000004;
pub const GL_CONTEXT_LOST: u32 = 0x0507;
pub const GL_CONTEXT_PROFILE_MASK: u32 = 0x9126;
pub const GL_CONTEXT_RELEASE_BEHAVIOR: u32 = 0x82FB;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: u32 = 0x82FC;
pub const GL_CONTEXT_ROBUST_ACCESS: u32 = 0x90F3;
pub const GL_CONTINUOUS_AMD: u32 = 0x9007;
pub const GL_CONTRAST_NV: u32 = 0x92A1;
pub const GL_CONVEX_HULL_NV: u32 = 0x908B;
pub const GL_CONVOLUTION_1D_EXT: u32 = 0x8010;
pub const GL_CONVOLUTION_2D_EXT: u32 = 0x8011;
pub const GL_CONVOLUTION_BORDER_COLOR_HP: u32 = 0x8154;
pub const GL_CONVOLUTION_BORDER_MODE_EXT: u32 = 0x8013;
pub const GL_CONVOLUTION_FILTER_BIAS_EXT: u32 = 0x8015;
pub const GL_CONVOLUTION_FILTER_SCALE_EXT: u32 = 0x8014;
pub const GL_CONVOLUTION_FORMAT_EXT: u32 = 0x8017;
pub const GL_CONVOLUTION_HEIGHT_EXT: u32 = 0x8019;
pub const GL_CONVOLUTION_HINT_SGIX: u32 = 0x8316;
pub const GL_CONVOLUTION_WIDTH_EXT: u32 = 0x8018;
pub const GL_CON_0_ATI: u32 = 0x8941;
pub const GL_CON_10_ATI: u32 = 0x894B;
pub const GL_CON_11_ATI: u32 = 0x894C;
pub const GL_CON_12_ATI: u32 = 0x894D;
pub const GL_CON_13_ATI: u32 = 0x894E;
pub const GL_CON_14_ATI: u32 = 0x894F;
pub const GL_CON_15_ATI: u32 = 0x8950;
pub const GL_CON_16_ATI: u32 = 0x8951;
pub const GL_CON_17_ATI: u32 = 0x8952;
pub const GL_CON_18_ATI: u32 = 0x8953;
pub const GL_CON_19_ATI: u32 = 0x8954;
pub const GL_CON_1_ATI: u32 = 0x8942;
pub const GL_CON_20_ATI: u32 = 0x8955;
pub const GL_CON_21_ATI: u32 = 0x8956;
pub const GL_CON_22_ATI: u32 = 0x8957;
pub const GL_CON_23_ATI: u32 = 0x8958;
pub const GL_CON_24_ATI: u32 = 0x8959;
pub const GL_CON_25_ATI: u32 = 0x895A;
pub const GL_CON_26_ATI: u32 = 0x895B;
pub const GL_CON_27_ATI: u32 = 0x895C;
pub const GL_CON_28_ATI: u32 = 0x895D;
pub const GL_CON_29_ATI: u32 = 0x895E;
pub const GL_CON_2_ATI: u32 = 0x8943;
pub const GL_CON_30_ATI: u32 = 0x895F;
pub const GL_CON_31_ATI: u32 = 0x8960;
pub const GL_CON_3_ATI: u32 = 0x8944;
pub const GL_CON_4_ATI: u32 = 0x8945;
pub const GL_CON_5_ATI: u32 = 0x8946;
pub const GL_CON_6_ATI: u32 = 0x8947;
pub const GL_CON_7_ATI: u32 = 0x8948;
pub const GL_CON_8_ATI: u32 = 0x8949;
pub const GL_CON_9_ATI: u32 = 0x894A;
pub const GL_COORD_REPLACE_ARB: u32 = 0x8862;
pub const GL_COORD_REPLACE_NV: u32 = 0x8862;
pub const GL_COPY: u32 = 0x1503;
pub const GL_COPY_INVERTED: u32 = 0x150C;
pub const GL_COPY_READ_BUFFER: u32 = 0x8F36;
pub const GL_COPY_WRITE_BUFFER: u32 = 0x8F37;
pub const GL_COUNTER_RANGE_AMD: u32 = 0x8BC1;
pub const GL_COUNTER_TYPE_AMD: u32 = 0x8BC0;
pub const GL_COUNT_DOWN_NV: u32 = 0x9089;
pub const GL_COUNT_UP_NV: u32 = 0x9088;
pub const GL_COVERAGE_MODULATION_NV: u32 = 0x9332;
pub const GL_COVERAGE_MODULATION_TABLE_NV: u32 = 0x9331;
pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV: u32 = 0x9333;
pub const GL_CUBIC_CURVE_TO_NV: u32 = 0x0C;
pub const GL_CUBIC_EXT: u32 = 0x8334;
pub const GL_CUBIC_HP: u32 = 0x815F;
pub const GL_CULL_FACE: u32 = 0x0B44;
pub const GL_CULL_FACE_MODE: u32 = 0x0B45;
pub const GL_CULL_FRAGMENT_NV: u32 = 0x86E7;
pub const GL_CULL_MODES_NV: u32 = 0x86E0;
pub const GL_CULL_VERTEX_EXT: u32 = 0x81AA;
pub const GL_CULL_VERTEX_EYE_POSITION_EXT: u32 = 0x81AB;
pub const GL_CULL_VERTEX_IBM: u32 = 103050;
pub const GL_CULL_VERTEX_OBJECT_POSITION_EXT: u32 = 0x81AC;
pub const GL_CURRENT_ATTRIB_NV: u32 = 0x8626;
pub const GL_CURRENT_BINORMAL_EXT: u32 = 0x843C;
pub const GL_CURRENT_FOG_COORDINATE_EXT: u32 = 0x8453;
pub const GL_CURRENT_MATRIX_ARB: u32 = 0x8641;
pub const GL_CURRENT_MATRIX_INDEX_ARB: u32 = 0x8845;
pub const GL_CURRENT_MATRIX_NV: u32 = 0x8641;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB: u32 = 0x8640;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_NV: u32 = 0x8640;
pub const GL_CURRENT_OCCLUSION_QUERY_ID_NV: u32 = 0x8865;
pub const GL_CURRENT_PALETTE_MATRIX_ARB: u32 = 0x8843;
pub const GL_CURRENT_PROGRAM: u32 = 0x8B8D;
pub const GL_CURRENT_QUERY: u32 = 0x8865;
pub const GL_CURRENT_QUERY_ARB: u32 = 0x8865;
pub const GL_CURRENT_RASTER_NORMAL_SGIX: u32 = 0x8406;
pub const GL_CURRENT_SECONDARY_COLOR_EXT: u32 = 0x8459;
pub const GL_CURRENT_TANGENT_EXT: u32 = 0x843B;
pub const GL_CURRENT_TIME_NV: u32 = 0x8E28;
pub const GL_CURRENT_VERTEX_ATTRIB: u32 = 0x8626;
pub const GL_CURRENT_VERTEX_ATTRIB_ARB: u32 = 0x8626;
pub const GL_CURRENT_VERTEX_EXT: u32 = 0x87E2;
pub const GL_CURRENT_VERTEX_WEIGHT_EXT: u32 = 0x850B;
pub const GL_CURRENT_WEIGHT_ARB: u32 = 0x86A8;
pub const GL_CW: u32 = 0x0900;
pub const GL_D3D12_FENCE_VALUE_EXT: u32 = 0x9595;
pub const GL_DARKEN_KHR: u32 = 0x9297;
pub const GL_DARKEN_NV: u32 = 0x9297;
pub const GL_DATA_BUFFER_AMD: u32 = 0x9151;
pub const GL_DEBUG_CALLBACK_FUNCTION: u32 = 0x8244;
pub const GL_DEBUG_CALLBACK_FUNCTION_ARB: u32 = 0x8244;
pub const GL_DEBUG_CALLBACK_USER_PARAM: u32 = 0x8245;
pub const GL_DEBUG_CALLBACK_USER_PARAM_ARB: u32 = 0x8245;
pub const GL_DEBUG_CATEGORY_API_ERROR_AMD: u32 = 0x9149;
pub const GL_DEBUG_CATEGORY_APPLICATION_AMD: u32 = 0x914F;
pub const GL_DEBUG_CATEGORY_DEPRECATION_AMD: u32 = 0x914B;
pub const GL_DEBUG_CATEGORY_OTHER_AMD: u32 = 0x9150;
pub const GL_DEBUG_CATEGORY_PERFORMANCE_AMD: u32 = 0x914D;
pub const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD: u32 = 0x914E;
pub const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD: u32 = 0x914C;
pub const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD: u32 = 0x914A;
pub const GL_DEBUG_GROUP_STACK_DEPTH: u32 = 0x826D;
pub const GL_DEBUG_LOGGED_MESSAGES: u32 = 0x9145;
pub const GL_DEBUG_LOGGED_MESSAGES_AMD: u32 = 0x9145;
pub const GL_DEBUG_LOGGED_MESSAGES_ARB: u32 = 0x9145;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: u32 = 0x8243;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB: u32 = 0x8243;
pub const GL_DEBUG_OUTPUT: u32 = 0x92E0;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS: u32 = 0x8242;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB: u32 = 0x8242;
pub const GL_DEBUG_SEVERITY_HIGH: u32 = 0x9146;
pub const GL_DEBUG_SEVERITY_HIGH_AMD: u32 = 0x9146;
pub const GL_DEBUG_SEVERITY_HIGH_ARB: u32 = 0x9146;
pub const GL_DEBUG_SEVERITY_LOW: u32 = 0x9148;
pub const GL_DEBUG_SEVERITY_LOW_AMD: u32 = 0x9148;
pub const GL_DEBUG_SEVERITY_LOW_ARB: u32 = 0x9148;
pub const GL_DEBUG_SEVERITY_MEDIUM: u32 = 0x9147;
pub const GL_DEBUG_SEVERITY_MEDIUM_AMD: u32 = 0x9147;
pub const GL_DEBUG_SEVERITY_MEDIUM_ARB: u32 = 0x9147;
pub const GL_DEBUG_SEVERITY_NOTIFICATION: u32 = 0x826B;
pub const GL_DEBUG_SOURCE_API: u32 = 0x8246;
pub const GL_DEBUG_SOURCE_API_ARB: u32 = 0x8246;
pub const GL_DEBUG_SOURCE_APPLICATION: u32 = 0x824A;
pub const GL_DEBUG_SOURCE_APPLICATION_ARB: u32 = 0x824A;
pub const GL_DEBUG_SOURCE_OTHER: u32 = 0x824B;
pub const GL_DEBUG_SOURCE_OTHER_ARB: u32 = 0x824B;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER: u32 = 0x8248;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB: u32 = 0x8248;
pub const GL_DEBUG_SOURCE_THIRD_PARTY: u32 = 0x8249;
pub const GL_DEBUG_SOURCE_THIRD_PARTY_ARB: u32 = 0x8249;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM: u32 = 0x8247;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB: u32 = 0x8247;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: u32 = 0x824D;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB: u32 = 0x824D;
pub const GL_DEBUG_TYPE_ERROR: u32 = 0x824C;
pub const GL_DEBUG_TYPE_ERROR_ARB: u32 = 0x824C;
pub const GL_DEBUG_TYPE_MARKER: u32 = 0x8268;
pub const GL_DEBUG_TYPE_OTHER: u32 = 0x8251;
pub const GL_DEBUG_TYPE_OTHER_ARB: u32 = 0x8251;
pub const GL_DEBUG_TYPE_PERFORMANCE: u32 = 0x8250;
pub const GL_DEBUG_TYPE_PERFORMANCE_ARB: u32 = 0x8250;
pub const GL_DEBUG_TYPE_POP_GROUP: u32 = 0x826A;
pub const GL_DEBUG_TYPE_PORTABILITY: u32 = 0x824F;
pub const GL_DEBUG_TYPE_PORTABILITY_ARB: u32 = 0x824F;
pub const GL_DEBUG_TYPE_PUSH_GROUP: u32 = 0x8269;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: u32 = 0x824E;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB: u32 = 0x824E;
pub const GL_DECODE_EXT: u32 = 0x8A49;
pub const GL_DECR: u32 = 0x1E03;
pub const GL_DECR_WRAP: u32 = 0x8508;
pub const GL_DECR_WRAP_EXT: u32 = 0x8508;
pub const GL_DEDICATED_MEMORY_OBJECT_EXT: u32 = 0x9581;
pub const GL_DEFORMATIONS_MASK_SGIX: u32 = 0x8196;
pub const GL_DELETE_STATUS: u32 = 0x8B80;
pub const GL_DEPENDENT_AR_TEXTURE_2D_NV: u32 = 0x86E9;
pub const GL_DEPENDENT_GB_TEXTURE_2D_NV: u32 = 0x86EA;
pub const GL_DEPENDENT_HILO_TEXTURE_2D_NV: u32 = 0x8858;
pub const GL_DEPENDENT_RGB_TEXTURE_3D_NV: u32 = 0x8859;
pub const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV: u32 = 0x885A;
pub const GL_DEPTH: u32 = 0x1801;
pub const GL_DEPTH24_STENCIL8: u32 = 0x88F0;
pub const GL_DEPTH24_STENCIL8_EXT: u32 = 0x88F0;
pub const GL_DEPTH32F_STENCIL8: u32 = 0x8CAD;
pub const GL_DEPTH32F_STENCIL8_NV: u32 = 0x8DAC;
pub const GL_DEPTH_ATTACHMENT: u32 = 0x8D00;
pub const GL_DEPTH_ATTACHMENT_EXT: u32 = 0x8D00;
pub const GL_DEPTH_BOUNDS_EXT: u32 = 0x8891;
pub const GL_DEPTH_BOUNDS_TEST_EXT: u32 = 0x8890;
pub const GL_DEPTH_BUFFER_BIT: u32 = 0x00000100;
pub const GL_DEPTH_BUFFER_FLOAT_MODE_NV: u32 = 0x8DAF;
pub const GL_DEPTH_CLAMP: u32 = 0x864F;
pub const GL_DEPTH_CLAMP_FAR_AMD: u32 = 0x901F;
pub const GL_DEPTH_CLAMP_NEAR_AMD: u32 = 0x901E;
pub const GL_DEPTH_CLAMP_NV: u32 = 0x864F;
pub const GL_DEPTH_CLEAR_VALUE: u32 = 0x0B73;
pub const GL_DEPTH_COMPONENT: u32 = 0x1902;
pub const GL_DEPTH_COMPONENT16: u32 = 0x81A5;
pub const GL_DEPTH_COMPONENT16_ARB: u32 = 0x81A5;
pub const GL_DEPTH_COMPONENT16_SGIX: u32 = 0x81A5;
pub const GL_DEPTH_COMPONENT24: u32 = 0x81A6;
pub const GL_DEPTH_COMPONENT24_ARB: u32 = 0x81A6;
pub const GL_DEPTH_COMPONENT24_SGIX: u32 = 0x81A6;
pub const GL_DEPTH_COMPONENT32: u32 = 0x81A7;
pub const GL_DEPTH_COMPONENT32F: u32 = 0x8CAC;
pub const GL_DEPTH_COMPONENT32F_NV: u32 = 0x8DAB;
pub const GL_DEPTH_COMPONENT32_ARB: u32 = 0x81A7;
pub const GL_DEPTH_COMPONENT32_SGIX: u32 = 0x81A7;
pub const GL_DEPTH_COMPONENTS: u32 = 0x8284;
pub const GL_DEPTH_FUNC: u32 = 0x0B74;
pub const GL_DEPTH_RANGE: u32 = 0x0B70;
pub const GL_DEPTH_RENDERABLE: u32 = 0x8287;
pub const GL_DEPTH_SAMPLES_NV: u32 = 0x932D;
pub const GL_DEPTH_STENCIL: u32 = 0x84F9;
pub const GL_DEPTH_STENCIL_ATTACHMENT: u32 = 0x821A;
pub const GL_DEPTH_STENCIL_EXT: u32 = 0x84F9;
pub const GL_DEPTH_STENCIL_NV: u32 = 0x84F9;
pub const GL_DEPTH_STENCIL_TEXTURE_MODE: u32 = 0x90EA;
pub const GL_DEPTH_STENCIL_TO_BGRA_NV: u32 = 0x886F;
pub const GL_DEPTH_STENCIL_TO_RGBA_NV: u32 = 0x886E;
pub const GL_DEPTH_TEST: u32 = 0x0B71;
pub const GL_DEPTH_TEXTURE_MODE_ARB: u32 = 0x884B;
pub const GL_DEPTH_WRITEMASK: u32 = 0x0B72;
pub const GL_DETACHED_BUFFERS_NV: u32 = 0x95AB;
pub const GL_DETACHED_MEMORY_INCARNATION_NV: u32 = 0x95A9;
pub const GL_DETACHED_TEXTURES_NV: u32 = 0x95AA;
pub const GL_DETAIL_TEXTURE_2D_BINDING_SGIS: u32 = 0x8096;
pub const GL_DETAIL_TEXTURE_2D_SGIS: u32 = 0x8095;
pub const GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS: u32 = 0x809C;
pub const GL_DETAIL_TEXTURE_LEVEL_SGIS: u32 = 0x809A;
pub const GL_DETAIL_TEXTURE_MODE_SGIS: u32 = 0x809B;
pub const GL_DEVICE_LUID_EXT: u32 = 0x9599;
pub const GL_DEVICE_NODE_MASK_EXT: u32 = 0x959A;
pub const GL_DEVICE_UUID_EXT: u32 = 0x9597;
pub const GL_DIFFERENCE_KHR: u32 = 0x929E;
pub const GL_DIFFERENCE_NV: u32 = 0x929E;
pub const GL_DISCARD_ATI: u32 = 0x8763;
pub const GL_DISCARD_NV: u32 = 0x8530;
pub const GL_DISCRETE_AMD: u32 = 0x9006;
pub const GL_DISJOINT_NV: u32 = 0x9283;
pub const GL_DISPATCH_INDIRECT_BUFFER: u32 = 0x90EE;
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING: u32 = 0x90EF;
pub const GL_DISTANCE_ATTENUATION_EXT: u32 = 0x8129;
pub const GL_DISTANCE_ATTENUATION_SGIS: u32 = 0x8129;
pub const GL_DITHER: u32 = 0x0BD0;
pub const GL_DONT_CARE: u32 = 0x1100;
pub const GL_DOT2_ADD_ATI: u32 = 0x896C;
pub const GL_DOT3_ATI: u32 = 0x8966;
pub const GL_DOT3_RGBA_ARB: u32 = 0x86AF;
pub const GL_DOT3_RGBA_EXT: u32 = 0x8741;
pub const GL_DOT3_RGB_ARB: u32 = 0x86AE;
pub const GL_DOT3_RGB_EXT: u32 = 0x8740;
pub const GL_DOT4_ATI: u32 = 0x8967;
pub const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV: u32 = 0x885D;
pub const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV: u32 = 0x86F3;
pub const GL_DOT_PRODUCT_DEPTH_REPLACE_NV: u32 = 0x86ED;
pub const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV: u32 = 0x86F1;
pub const GL_DOT_PRODUCT_NV: u32 = 0x86EC;
pub const GL_DOT_PRODUCT_PASS_THROUGH_NV: u32 = 0x885B;
pub const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV: u32 = 0x86F2;
pub const GL_DOT_PRODUCT_TEXTURE_1D_NV: u32 = 0x885C;
pub const GL_DOT_PRODUCT_TEXTURE_2D_NV: u32 = 0x86EE;
pub const GL_DOT_PRODUCT_TEXTURE_3D_NV: u32 = 0x86EF;
pub const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV: u32 = 0x86F0;
pub const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV: u32 = 0x864E;
pub const GL_DOUBLE: u32 = 0x140A;
pub const GL_DOUBLEBUFFER: u32 = 0x0C32;
pub const GL_DOUBLE_MAT2: u32 = 0x8F46;
pub const GL_DOUBLE_MAT2_EXT: u32 = 0x8F46;
pub const GL_DOUBLE_MAT2x3: u32 = 0x8F49;
pub const GL_DOUBLE_MAT2x3_EXT: u32 = 0x8F49;
pub const GL_DOUBLE_MAT2x4: u32 = 0x8F4A;
pub const GL_DOUBLE_MAT2x4_EXT: u32 = 0x8F4A;
pub const GL_DOUBLE_MAT3: u32 = 0x8F47;
pub const GL_DOUBLE_MAT3_EXT: u32 = 0x8F47;
pub const GL_DOUBLE_MAT3x2: u32 = 0x8F4B;
pub const GL_DOUBLE_MAT3x2_EXT: u32 = 0x8F4B;
pub const GL_DOUBLE_MAT3x4: u32 = 0x8F4C;
pub const GL_DOUBLE_MAT3x4_EXT: u32 = 0x8F4C;
pub const GL_DOUBLE_MAT4: u32 = 0x8F48;
pub const GL_DOUBLE_MAT4_EXT: u32 = 0x8F48;
pub const GL_DOUBLE_MAT4x2: u32 = 0x8F4D;
pub const GL_DOUBLE_MAT4x2_EXT: u32 = 0x8F4D;
pub const GL_DOUBLE_MAT4x3: u32 = 0x8F4E;
pub const GL_DOUBLE_MAT4x3_EXT: u32 = 0x8F4E;
pub const GL_DOUBLE_VEC2: u32 = 0x8FFC;
pub const GL_DOUBLE_VEC2_EXT: u32 = 0x8FFC;
pub const GL_DOUBLE_VEC3: u32 = 0x8FFD;
pub const GL_DOUBLE_VEC3_EXT: u32 = 0x8FFD;
pub const GL_DOUBLE_VEC4: u32 = 0x8FFE;
pub const GL_DOUBLE_VEC4_EXT: u32 = 0x8FFE;
pub const GL_DRAW_ARRAYS_COMMAND_NV: u32 = 0x0003;
pub const GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV: u32 = 0x0007;
pub const GL_DRAW_ARRAYS_STRIP_COMMAND_NV: u32 = 0x0005;
pub const GL_DRAW_BUFFER: u32 = 0x0C01;
pub const GL_DRAW_BUFFER0: u32 = 0x8825;
pub const GL_DRAW_BUFFER0_ARB: u32 = 0x8825;
pub const GL_DRAW_BUFFER0_ATI: u32 = 0x8825;
pub const GL_DRAW_BUFFER1: u32 = 0x8826;
pub const GL_DRAW_BUFFER10: u32 = 0x882F;
pub const GL_DRAW_BUFFER10_ARB: u32 = 0x882F;
pub const GL_DRAW_BUFFER10_ATI: u32 = 0x882F;
pub const GL_DRAW_BUFFER11: u32 = 0x8830;
pub const GL_DRAW_BUFFER11_ARB: u32 = 0x8830;
pub const GL_DRAW_BUFFER11_ATI: u32 = 0x8830;
pub const GL_DRAW_BUFFER12: u32 = 0x8831;
pub const GL_DRAW_BUFFER12_ARB: u32 = 0x8831;
pub const GL_DRAW_BUFFER12_ATI: u32 = 0x8831;
pub const GL_DRAW_BUFFER13: u32 = 0x8832;
pub const GL_DRAW_BUFFER13_ARB: u32 = 0x8832;
pub const GL_DRAW_BUFFER13_ATI: u32 = 0x8832;
pub const GL_DRAW_BUFFER14: u32 = 0x8833;
pub const GL_DRAW_BUFFER14_ARB: u32 = 0x8833;
pub const GL_DRAW_BUFFER14_ATI: u32 = 0x8833;
pub const GL_DRAW_BUFFER15: u32 = 0x8834;
pub const GL_DRAW_BUFFER15_ARB: u32 = 0x8834;
pub const GL_DRAW_BUFFER15_ATI: u32 = 0x8834;
pub const GL_DRAW_BUFFER1_ARB: u32 = 0x8826;
pub const GL_DRAW_BUFFER1_ATI: u32 = 0x8826;
pub const GL_DRAW_BUFFER2: u32 = 0x8827;
pub const GL_DRAW_BUFFER2_ARB: u32 = 0x8827;
pub const GL_DRAW_BUFFER2_ATI: u32 = 0x8827;
pub const GL_DRAW_BUFFER3: u32 = 0x8828;
pub const GL_DRAW_BUFFER3_ARB: u32 = 0x8828;
pub const GL_DRAW_BUFFER3_ATI: u32 = 0x8828;
pub const GL_DRAW_BUFFER4: u32 = 0x8829;
pub const GL_DRAW_BUFFER4_ARB: u32 = 0x8829;
pub const GL_DRAW_BUFFER4_ATI: u32 = 0x8829;
pub const GL_DRAW_BUFFER5: u32 = 0x882A;
pub const GL_DRAW_BUFFER5_ARB: u32 = 0x882A;
pub const GL_DRAW_BUFFER5_ATI: u32 = 0x882A;
pub const GL_DRAW_BUFFER6: u32 = 0x882B;
pub const GL_DRAW_BUFFER6_ARB: u32 = 0x882B;
pub const GL_DRAW_BUFFER6_ATI: u32 = 0x882B;
pub const GL_DRAW_BUFFER7: u32 = 0x882C;
pub const GL_DRAW_BUFFER7_ARB: u32 = 0x882C;
pub const GL_DRAW_BUFFER7_ATI: u32 = 0x882C;
pub const GL_DRAW_BUFFER8: u32 = 0x882D;
pub const GL_DRAW_BUFFER8_ARB: u32 = 0x882D;
pub const GL_DRAW_BUFFER8_ATI: u32 = 0x882D;
pub const GL_DRAW_BUFFER9: u32 = 0x882E;
pub const GL_DRAW_BUFFER9_ARB: u32 = 0x882E;
pub const GL_DRAW_BUFFER9_ATI: u32 = 0x882E;
pub const GL_DRAW_ELEMENTS_COMMAND_NV: u32 = 0x0002;
pub const GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV: u32 = 0x0006;
pub const GL_DRAW_ELEMENTS_STRIP_COMMAND_NV: u32 = 0x0004;
pub const GL_DRAW_FRAMEBUFFER: u32 = 0x8CA9;
pub const GL_DRAW_FRAMEBUFFER_BINDING: u32 = 0x8CA6;
pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT: u32 = 0x8CA6;
pub const GL_DRAW_FRAMEBUFFER_EXT: u32 = 0x8CA9;
pub const GL_DRAW_INDIRECT_ADDRESS_NV: u32 = 0x8F41;
pub const GL_DRAW_INDIRECT_BUFFER: u32 = 0x8F3F;
pub const GL_DRAW_INDIRECT_BUFFER_BINDING: u32 = 0x8F43;
pub const GL_DRAW_INDIRECT_LENGTH_NV: u32 = 0x8F42;
pub const GL_DRAW_INDIRECT_UNIFIED_NV: u32 = 0x8F40;
pub const GL_DRAW_PIXELS_APPLE: u32 = 0x8A0A;
pub const GL_DRIVER_UUID_EXT: u32 = 0x9598;
pub const GL_DSDT8_MAG8_INTENSITY8_NV: u32 = 0x870B;
pub const GL_DSDT8_MAG8_NV: u32 = 0x870A;
pub const GL_DSDT8_NV: u32 = 0x8709;
pub const GL_DSDT_MAG_INTENSITY_NV: u32 = 0x86DC;
pub const GL_DSDT_MAG_NV: u32 = 0x86F6;
pub const GL_DSDT_MAG_VIB_NV: u32 = 0x86F7;
pub const GL_DSDT_NV: u32 = 0x86F5;
pub const GL_DST_ALPHA: u32 = 0x0304;
pub const GL_DST_ATOP_NV: u32 = 0x928F;
pub const GL_DST_COLOR: u32 = 0x0306;
pub const GL_DST_IN_NV: u32 = 0x928B;
pub const GL_DST_NV: u32 = 0x9287;
pub const GL_DST_OUT_NV: u32 = 0x928D;
pub const GL_DST_OVER_NV: u32 = 0x9289;
pub const GL_DS_BIAS_NV: u32 = 0x8716;
pub const GL_DS_SCALE_NV: u32 = 0x8710;
pub const GL_DT_BIAS_NV: u32 = 0x8717;
pub const GL_DT_SCALE_NV: u32 = 0x8711;
pub const GL_DU8DV8_ATI: u32 = 0x877A;
pub const GL_DUAL_ALPHA12_SGIS: u32 = 0x8112;
pub const GL_DUAL_ALPHA16_SGIS: u32 = 0x8113;
pub const GL_DUAL_ALPHA4_SGIS: u32 = 0x8110;
pub const GL_DUAL_ALPHA8_SGIS: u32 = 0x8111;
pub const GL_DUAL_INTENSITY12_SGIS: u32 = 0x811A;
pub const GL_DUAL_INTENSITY16_SGIS: u32 = 0x811B;
pub const GL_DUAL_INTENSITY4_SGIS: u32 = 0x8118;
pub const GL_DUAL_INTENSITY8_SGIS: u32 = 0x8119;
pub const GL_DUAL_LUMINANCE12_SGIS: u32 = 0x8116;
pub const GL_DUAL_LUMINANCE16_SGIS: u32 = 0x8117;
pub const GL_DUAL_LUMINANCE4_SGIS: u32 = 0x8114;
pub const GL_DUAL_LUMINANCE8_SGIS: u32 = 0x8115;
pub const GL_DUAL_LUMINANCE_ALPHA4_SGIS: u32 = 0x811C;
pub const GL_DUAL_LUMINANCE_ALPHA8_SGIS: u32 = 0x811D;
pub const GL_DUAL_TEXTURE_SELECT_SGIS: u32 = 0x8124;
pub const GL_DUDV_ATI: u32 = 0x8779;
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV: u32 = 0xF2;
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV: u32 = 0xF4;
pub const GL_DYNAMIC_ATI: u32 = 0x8761;
pub const GL_DYNAMIC_COPY: u32 = 0x88EA;
pub const GL_DYNAMIC_COPY_ARB: u32 = 0x88EA;
pub const GL_DYNAMIC_DRAW: u32 = 0x88E8;
pub const GL_DYNAMIC_DRAW_ARB: u32 = 0x88E8;
pub const GL_DYNAMIC_READ: u32 = 0x88E9;
pub const GL_DYNAMIC_READ_ARB: u32 = 0x88E9;
pub const GL_DYNAMIC_STORAGE_BIT: u32 = 0x0100;
pub const GL_EDGEFLAG_BIT_PGI: u32 = 0x00040000;
pub const GL_EDGE_FLAG_ARRAY_ADDRESS_NV: u32 = 0x8F26;
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889B;
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT: u32 = 0x808D;
pub const GL_EDGE_FLAG_ARRAY_EXT: u32 = 0x8079;
pub const GL_EDGE_FLAG_ARRAY_LENGTH_NV: u32 = 0x8F30;
pub const GL_EDGE_FLAG_ARRAY_LIST_IBM: u32 = 103075;
pub const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM: u32 = 103085;
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT: u32 = 0x8093;
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT: u32 = 0x808C;
pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT: u32 = 0x932C;
pub const GL_EIGHTH_BIT_ATI: u32 = 0x00000020;
pub const GL_ELEMENT_ADDRESS_COMMAND_NV: u32 = 0x0008;
pub const GL_ELEMENT_ARRAY_ADDRESS_NV: u32 = 0x8F29;
pub const GL_ELEMENT_ARRAY_APPLE: u32 = 0x8A0C;
pub const GL_ELEMENT_ARRAY_ATI: u32 = 0x8768;
pub const GL_ELEMENT_ARRAY_BARRIER_BIT: u32 = 0x00000002;
pub const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT: u32 = 0x00000002;
pub const GL_ELEMENT_ARRAY_BUFFER: u32 = 0x8893;
pub const GL_ELEMENT_ARRAY_BUFFER_ARB: u32 = 0x8893;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING: u32 = 0x8895;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8895;
pub const GL_ELEMENT_ARRAY_LENGTH_NV: u32 = 0x8F33;
pub const GL_ELEMENT_ARRAY_POINTER_APPLE: u32 = 0x8A0E;
pub const GL_ELEMENT_ARRAY_POINTER_ATI: u32 = 0x876A;
pub const GL_ELEMENT_ARRAY_TYPE_APPLE: u32 = 0x8A0D;
pub const GL_ELEMENT_ARRAY_TYPE_ATI: u32 = 0x8769;
pub const GL_ELEMENT_ARRAY_UNIFIED_NV: u32 = 0x8F1F;
pub const GL_EMBOSS_CONSTANT_NV: u32 = 0x855E;
pub const GL_EMBOSS_LIGHT_NV: u32 = 0x855D;
pub const GL_EMBOSS_MAP_NV: u32 = 0x855F;
pub const GL_EQUAL: u32 = 0x0202;
pub const GL_EQUIV: u32 = 0x1509;
pub const GL_EVAL_2D_NV: u32 = 0x86C0;
pub const GL_EVAL_FRACTIONAL_TESSELLATION_NV: u32 = 0x86C5;
pub const GL_EVAL_TRIANGULAR_2D_NV: u32 = 0x86C1;
pub const GL_EVAL_VERTEX_ATTRIB0_NV: u32 = 0x86C6;
pub const GL_EVAL_VERTEX_ATTRIB10_NV: u32 = 0x86D0;
pub const GL_EVAL_VERTEX_ATTRIB11_NV: u32 = 0x86D1;
pub const GL_EVAL_VERTEX_ATTRIB12_NV: u32 = 0x86D2;
pub const GL_EVAL_VERTEX_ATTRIB13_NV: u32 = 0x86D3;
pub const GL_EVAL_VERTEX_ATTRIB14_NV: u32 = 0x86D4;
pub const GL_EVAL_VERTEX_ATTRIB15_NV: u32 = 0x86D5;
pub const GL_EVAL_VERTEX_ATTRIB1_NV: u32 = 0x86C7;
pub const GL_EVAL_VERTEX_ATTRIB2_NV: u32 = 0x86C8;
pub const GL_EVAL_VERTEX_ATTRIB3_NV: u32 = 0x86C9;
pub const GL_EVAL_VERTEX_ATTRIB4_NV: u32 = 0x86CA;
pub const GL_EVAL_VERTEX_ATTRIB5_NV: u32 = 0x86CB;
pub const GL_EVAL_VERTEX_ATTRIB6_NV: u32 = 0x86CC;
pub const GL_EVAL_VERTEX_ATTRIB7_NV: u32 = 0x86CD;
pub const GL_EVAL_VERTEX_ATTRIB8_NV: u32 = 0x86CE;
pub const GL_EVAL_VERTEX_ATTRIB9_NV: u32 = 0x86CF;
pub const GL_EXCLUSION_KHR: u32 = 0x92A0;
pub const GL_EXCLUSION_NV: u32 = 0x92A0;
pub const GL_EXCLUSIVE_EXT: u32 = 0x8F11;
pub const GL_EXPAND_NEGATE_NV: u32 = 0x8539;
pub const GL_EXPAND_NORMAL_NV: u32 = 0x8538;
pub const GL_EXTENSIONS: u32 = 0x1F03;
pub const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD: u32 = 0x9160;
pub const GL_EYE_DISTANCE_TO_LINE_SGIS: u32 = 0x81F2;
pub const GL_EYE_DISTANCE_TO_POINT_SGIS: u32 = 0x81F0;
pub const GL_EYE_LINE_SGIS: u32 = 0x81F6;
pub const GL_EYE_PLANE: u32 = 0x2502;
pub const GL_EYE_PLANE_ABSOLUTE_NV: u32 = 0x855C;
pub const GL_EYE_POINT_SGIS: u32 = 0x81F4;
pub const GL_EYE_RADIAL_NV: u32 = 0x855B;
pub const GL_E_TIMES_F_NV: u32 = 0x8531;
pub const GL_FACTOR_MAX_AMD: u32 = 0x901D;
pub const GL_FACTOR_MIN_AMD: u32 = 0x901C;
pub const GL_FAILURE_NV: u32 = 0x9030;
pub const GL_FALSE: u32 = 0;
pub const GL_FASTEST: u32 = 0x1101;
pub const GL_FENCE_APPLE: u32 = 0x8A0B;
pub const GL_FENCE_CONDITION_NV: u32 = 0x84F4;
pub const GL_FENCE_STATUS_NV: u32 = 0x84F3;
pub const GL_FIELDS_NV: u32 = 0x8E27;
pub const GL_FIELD_LOWER_NV: u32 = 0x9023;
pub const GL_FIELD_UPPER_NV: u32 = 0x9022;
pub const GL_FILE_NAME_NV: u32 = 0x9074;
pub const GL_FILL: u32 = 0x1B02;
pub const GL_FILL_RECTANGLE_NV: u32 = 0x933C;
pub const GL_FILTER: u32 = 0x829A;
pub const GL_FILTER4_SGIS: u32 = 0x8146;
pub const GL_FIRST_TO_REST_NV: u32 = 0x90AF;
pub const GL_FIRST_VERTEX_CONVENTION: u32 = 0x8E4D;
pub const GL_FIRST_VERTEX_CONVENTION_EXT: u32 = 0x8E4D;
pub const GL_FIXED: u32 = 0x140C;
pub const GL_FIXED_OES: u32 = 0x140C;
pub const GL_FIXED_ONLY: u32 = 0x891D;
pub const GL_FIXED_ONLY_ARB: u32 = 0x891D;
pub const GL_FLOAT: u32 = 0x1406;
pub const GL_FLOAT16_MAT2_AMD: u32 = 0x91C5;
pub const GL_FLOAT16_MAT2x3_AMD: u32 = 0x91C8;
pub const GL_FLOAT16_MAT2x4_AMD: u32 = 0x91C9;
pub const GL_FLOAT16_MAT3_AMD: u32 = 0x91C6;
pub const GL_FLOAT16_MAT3x2_AMD: u32 = 0x91CA;
pub const GL_FLOAT16_MAT3x4_AMD: u32 = 0x91CB;
pub const GL_FLOAT16_MAT4_AMD: u32 = 0x91C7;
pub const GL_FLOAT16_MAT4x2_AMD: u32 = 0x91CC;
pub const GL_FLOAT16_MAT4x3_AMD: u32 = 0x91CD;
pub const GL_FLOAT16_NV: u32 = 0x8FF8;
pub const GL_FLOAT16_VEC2_NV: u32 = 0x8FF9;
pub const GL_FLOAT16_VEC3_NV: u32 = 0x8FFA;
pub const GL_FLOAT16_VEC4_NV: u32 = 0x8FFB;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV: u32 = 0x8DAD;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV: u32 = 0x8DAD;
pub const GL_FLOAT_CLEAR_COLOR_VALUE_NV: u32 = 0x888D;
pub const GL_FLOAT_MAT2: u32 = 0x8B5A;
pub const GL_FLOAT_MAT2_ARB: u32 = 0x8B5A;
pub const GL_FLOAT_MAT2x3: u32 = 0x8B65;
pub const GL_FLOAT_MAT2x4: u32 = 0x8B66;
pub const GL_FLOAT_MAT3: u32 = 0x8B5B;
pub const GL_FLOAT_MAT3_ARB: u32 = 0x8B5B;
pub const GL_FLOAT_MAT3x2: u32 = 0x8B67;
pub const GL_FLOAT_MAT3x4: u32 = 0x8B68;
pub const GL_FLOAT_MAT4: u32 = 0x8B5C;
pub const GL_FLOAT_MAT4_ARB: u32 = 0x8B5C;
pub const GL_FLOAT_MAT4x2: u32 = 0x8B69;
pub const GL_FLOAT_MAT4x3: u32 = 0x8B6A;
pub const GL_FLOAT_R16_NV: u32 = 0x8884;
pub const GL_FLOAT_R32_NV: u32 = 0x8885;
pub const GL_FLOAT_RG16_NV: u32 = 0x8886;
pub const GL_FLOAT_RG32_NV: u32 = 0x8887;
pub const GL_FLOAT_RGB16_NV: u32 = 0x8888;
pub const GL_FLOAT_RGB32_NV: u32 = 0x8889;
pub const GL_FLOAT_RGBA16_NV: u32 = 0x888A;
pub const GL_FLOAT_RGBA32_NV: u32 = 0x888B;
pub const GL_FLOAT_RGBA_MODE_NV: u32 = 0x888E;
pub const GL_FLOAT_RGBA_NV: u32 = 0x8883;
pub const GL_FLOAT_RGB_NV: u32 = 0x8882;
pub const GL_FLOAT_RG_NV: u32 = 0x8881;
pub const GL_FLOAT_R_NV: u32 = 0x8880;
pub const GL_FLOAT_VEC2: u32 = 0x8B50;
pub const GL_FLOAT_VEC2_ARB: u32 = 0x8B50;
pub const GL_FLOAT_VEC3: u32 = 0x8B51;
pub const GL_FLOAT_VEC3_ARB: u32 = 0x8B51;
pub const GL_FLOAT_VEC4: u32 = 0x8B52;
pub const GL_FLOAT_VEC4_ARB: u32 = 0x8B52;
pub const GL_FOG: u32 = 0x0B60;
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889D;
pub const GL_FOG_COORDINATE_ARRAY_EXT: u32 = 0x8457;
pub const GL_FOG_COORDINATE_ARRAY_LIST_IBM: u32 = 103076;
pub const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM: u32 = 103086;
pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT: u32 = 0x8456;
pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT: u32 = 0x8455;
pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT: u32 = 0x8454;
pub const GL_FOG_COORDINATE_EXT: u32 = 0x8451;
pub const GL_FOG_COORDINATE_SOURCE_EXT: u32 = 0x8450;
pub const GL_FOG_COORD_ARRAY_ADDRESS_NV: u32 = 0x8F28;
pub const GL_FOG_COORD_ARRAY_LENGTH_NV: u32 = 0x8F32;
pub const GL_FOG_DISTANCE_MODE_NV: u32 = 0x855A;
pub const GL_FOG_FUNC_POINTS_SGIS: u32 = 0x812B;
pub const GL_FOG_FUNC_SGIS: u32 = 0x812A;
pub const GL_FOG_OFFSET_SGIX: u32 = 0x8198;
pub const GL_FOG_OFFSET_VALUE_SGIX: u32 = 0x8199;
pub const GL_FOG_SPECULAR_TEXTURE_WIN: u32 = 0x80EC;
pub const GL_FONT_ASCENDER_BIT_NV: u32 = 0x00200000;
pub const GL_FONT_DESCENDER_BIT_NV: u32 = 0x00400000;
pub const GL_FONT_GLYPHS_AVAILABLE_NV: u32 = 0x9368;
pub const GL_FONT_HAS_KERNING_BIT_NV: u32 = 0x10000000;
pub const GL_FONT_HEIGHT_BIT_NV: u32 = 0x00800000;
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV: u32 = 0x02000000;
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV: u32 = 0x01000000;
pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV: u32 = 0x20000000;
pub const GL_FONT_TARGET_UNAVAILABLE_NV: u32 = 0x9369;
pub const GL_FONT_UNAVAILABLE_NV: u32 = 0x936A;
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV: u32 = 0x04000000;
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV: u32 = 0x08000000;
pub const GL_FONT_UNINTELLIGIBLE_NV: u32 = 0x936B;
pub const GL_FONT_UNITS_PER_EM_BIT_NV: u32 = 0x00100000;
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV: u32 = 0x00040000;
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV: u32 = 0x00010000;
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV: u32 = 0x00080000;
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV: u32 = 0x00020000;
pub const GL_FORCE_BLUE_TO_ONE_NV: u32 = 0x8860;
pub const GL_FORMAT_SUBSAMPLE_244_244_OML: u32 = 0x8983;
pub const GL_FORMAT_SUBSAMPLE_24_24_OML: u32 = 0x8982;
pub const GL_FRACTIONAL_EVEN: u32 = 0x8E7C;
pub const GL_FRACTIONAL_ODD: u32 = 0x8E7B;
pub const GL_FRAGMENT_COLOR_EXT: u32 = 0x834C;
pub const GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX: u32 = 0x8402;
pub const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX: u32 = 0x8403;
pub const GL_FRAGMENT_COLOR_MATERIAL_SGIX: u32 = 0x8401;
pub const GL_FRAGMENT_COVERAGE_COLOR_NV: u32 = 0x92DE;
pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV: u32 = 0x92DD;
pub const GL_FRAGMENT_DEPTH_EXT: u32 = 0x8452;
pub const GL_FRAGMENT_INPUT_NV: u32 = 0x936D;
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS: u32 = 0x8E5D;
pub const GL_FRAGMENT_LIGHT0_SGIX: u32 = 0x840C;
pub const GL_FRAGMENT_LIGHT1_SGIX: u32 = 0x840D;
pub const GL_FRAGMENT_LIGHT2_SGIX: u32 = 0x840E;
pub const GL_FRAGMENT_LIGHT3_SGIX: u32 = 0x840F;
pub const GL_FRAGMENT_LIGHT4_SGIX: u32 = 0x8410;
pub const GL_FRAGMENT_LIGHT5_SGIX: u32 = 0x8411;
pub const GL_FRAGMENT_LIGHT6_SGIX: u32 = 0x8412;
pub const GL_FRAGMENT_LIGHT7_SGIX: u32 = 0x8413;
pub const GL_FRAGMENT_LIGHTING_SGIX: u32 = 0x8400;
pub const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX: u32 = 0x840A;
pub const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX: u32 = 0x8408;
pub const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX: u32 = 0x840B;
pub const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX: u32 = 0x8409;
pub const GL_FRAGMENT_MATERIAL_EXT: u32 = 0x8349;
pub const GL_FRAGMENT_NORMAL_EXT: u32 = 0x834A;
pub const GL_FRAGMENT_PROGRAM_ARB: u32 = 0x8804;
pub const GL_FRAGMENT_PROGRAM_BINDING_NV: u32 = 0x8873;
pub const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV: u32 = 0x8E5D;
pub const GL_FRAGMENT_PROGRAM_NV: u32 = 0x8870;
pub const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV: u32 = 0x8DA4;
pub const GL_FRAGMENT_SHADER: u32 = 0x8B30;
pub const GL_FRAGMENT_SHADER_ARB: u32 = 0x8B30;
pub const GL_FRAGMENT_SHADER_ATI: u32 = 0x8920;
pub const GL_FRAGMENT_SHADER_BIT: u32 = 0x00000002;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT: u32 = 0x8B8B;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB: u32 = 0x8B8B;
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT: u32 = 0x8A52;
pub const GL_FRAGMENT_SHADER_INVOCATIONS: u32 = 0x82F4;
pub const GL_FRAGMENT_SHADER_INVOCATIONS_ARB: u32 = 0x82F4;
pub const GL_FRAGMENT_SUBROUTINE: u32 = 0x92EC;
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM: u32 = 0x92F2;
pub const GL_FRAGMENT_TEXTURE: u32 = 0x829F;
pub const GL_FRAMEBUFFER: u32 = 0x8D40;
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: u32 = 0x8215;
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: u32 = 0x8214;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: u32 = 0x8210;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: u32 = 0x8211;
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: u32 = 0x8216;
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: u32 = 0x8213;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED: u32 = 0x8DA7;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB: u32 = 0x8DA7;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT: u32 = 0x8DA7;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: u32 = 0x8CD1;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT: u32 = 0x8CD1;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: u32 = 0x8CD0;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT: u32 = 0x8CD0;
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE: u32 = 0x8212;
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: u32 = 0x8217;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT: u32 = 0x8CD4;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: u32 = 0x9632;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: u32 = 0x8CD3;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT: u32 = 0x8CD3;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: u32 = 0x8CD4;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT: u32 = 0x8CD4;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: u32 = 0x8CD2;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT: u32 = 0x8CD2;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: u32 = 0x9630;
pub const GL_FRAMEBUFFER_BARRIER_BIT: u32 = 0x00000400;
pub const GL_FRAMEBUFFER_BARRIER_BIT_EXT: u32 = 0x00000400;
pub const GL_FRAMEBUFFER_BINDING: u32 = 0x8CA6;
pub const GL_FRAMEBUFFER_BINDING_EXT: u32 = 0x8CA6;
pub const GL_FRAMEBUFFER_BLEND: u32 = 0x828B;
pub const GL_FRAMEBUFFER_COMPLETE: u32 = 0x8CD5;
pub const GL_FRAMEBUFFER_COMPLETE_EXT: u32 = 0x8CD5;
pub const GL_FRAMEBUFFER_DEFAULT: u32 = 0x8218;
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS: u32 = 0x9314;
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT: u32 = 0x9311;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS: u32 = 0x9312;
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES: u32 = 0x9313;
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH: u32 = 0x9310;
pub const GL_FRAMEBUFFER_EXT: u32 = 0x8D40;
pub const GL_FRAMEBUFFER_FLIP_X_MESA: u32 = 0x8BBC;
pub const GL_FRAMEBUFFER_FLIP_Y_MESA: u32 = 0x8BBB;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: u32 = 0x8CD6;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT: u32 = 0x8CD6;
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT: u32 = 0x8CD9;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: u32 = 0x8CDB;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT: u32 = 0x8CDB;
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT: u32 = 0x8CDA;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB: u32 = 0x8DA9;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT: u32 = 0x8DA9;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: u32 = 0x8DA8;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB: u32 = 0x8DA8;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT: u32 = 0x8DA8;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: u32 = 0x8CD7;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT: u32 = 0x8CD7;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: u32 = 0x8D56;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT: u32 = 0x8D56;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER: u32 = 0x8CDC;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT: u32 = 0x8CDC;
pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: u32 = 0x9633;
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB: u32 = 0x9342;
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV: u32 = 0x9342;
pub const GL_FRAMEBUFFER_RENDERABLE: u32 = 0x8289;
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED: u32 = 0x828A;
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB: u32 = 0x9343;
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV: u32 = 0x9343;
pub const GL_FRAMEBUFFER_SRGB: u32 = 0x8DB9;
pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT: u32 = 0x8DBA;
pub const GL_FRAMEBUFFER_SRGB_EXT: u32 = 0x8DB9;
pub const GL_FRAMEBUFFER_SWAP_XY_MESA: u32 = 0x8BBD;
pub const GL_FRAMEBUFFER_UNDEFINED: u32 = 0x8219;
pub const GL_FRAMEBUFFER_UNSUPPORTED: u32 = 0x8CDD;
pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT: u32 = 0x8CDD;
pub const GL_FRAMEZOOM_FACTOR_SGIX: u32 = 0x818C;
pub const GL_FRAMEZOOM_SGIX: u32 = 0x818B;
pub const GL_FRAME_NV: u32 = 0x8E26;
pub const GL_FRONT: u32 = 0x0404;
pub const GL_FRONT_AND_BACK: u32 = 0x0408;
pub const GL_FRONT_FACE: u32 = 0x0B46;
pub const GL_FRONT_FACE_COMMAND_NV: u32 = 0x0012;
pub const GL_FRONT_LEFT: u32 = 0x0400;
pub const GL_FRONT_RIGHT: u32 = 0x0401;
pub const GL_FULL_RANGE_EXT: u32 = 0x87E1;
pub const GL_FULL_STIPPLE_HINT_PGI: u32 = 0x1A219;
pub const GL_FULL_SUPPORT: u32 = 0x82B7;
pub const GL_FUNC_ADD: u32 = 0x8006;
pub const GL_FUNC_ADD_EXT: u32 = 0x8006;
pub const GL_FUNC_REVERSE_SUBTRACT: u32 = 0x800B;
pub const GL_FUNC_REVERSE_SUBTRACT_EXT: u32 = 0x800B;
pub const GL_FUNC_SUBTRACT: u32 = 0x800A;
pub const GL_FUNC_SUBTRACT_EXT: u32 = 0x800A;
pub const GL_GENERATE_MIPMAP_HINT_SGIS: u32 = 0x8192;
pub const GL_GENERATE_MIPMAP_SGIS: u32 = 0x8191;
pub const GL_GENERIC_ATTRIB_NV: u32 = 0x8C7D;
pub const GL_GEOMETRY_DEFORMATION_BIT_SGIX: u32 = 0x00000002;
pub const GL_GEOMETRY_DEFORMATION_SGIX: u32 = 0x8194;
pub const GL_GEOMETRY_INPUT_TYPE: u32 = 0x8917;
pub const GL_GEOMETRY_INPUT_TYPE_ARB: u32 = 0x8DDB;
pub const GL_GEOMETRY_INPUT_TYPE_EXT: u32 = 0x8DDB;
pub const GL_GEOMETRY_OUTPUT_TYPE: u32 = 0x8918;
pub const GL_GEOMETRY_OUTPUT_TYPE_ARB: u32 = 0x8DDC;
pub const GL_GEOMETRY_OUTPUT_TYPE_EXT: u32 = 0x8DDC;
pub const GL_GEOMETRY_PROGRAM_NV: u32 = 0x8C26;
pub const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV: u32 = 0x8DA3;
pub const GL_GEOMETRY_SHADER: u32 = 0x8DD9;
pub const GL_GEOMETRY_SHADER_ARB: u32 = 0x8DD9;
pub const GL_GEOMETRY_SHADER_BIT: u32 = 0x00000004;
pub const GL_GEOMETRY_SHADER_EXT: u32 = 0x8DD9;
pub const GL_GEOMETRY_SHADER_INVOCATIONS: u32 = 0x887F;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED: u32 = 0x82F3;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB: u32 = 0x82F3;
pub const GL_GEOMETRY_SUBROUTINE: u32 = 0x92EB;
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM: u32 = 0x92F1;
pub const GL_GEOMETRY_TEXTURE: u32 = 0x829E;
pub const GL_GEOMETRY_VERTICES_OUT: u32 = 0x8916;
pub const GL_GEOMETRY_VERTICES_OUT_ARB: u32 = 0x8DDA;
pub const GL_GEOMETRY_VERTICES_OUT_EXT: u32 = 0x8DDA;
pub const GL_GEQUAL: u32 = 0x0206;
pub const GL_GET_TEXTURE_IMAGE_FORMAT: u32 = 0x8291;
pub const GL_GET_TEXTURE_IMAGE_TYPE: u32 = 0x8292;
pub const GL_GLOBAL_ALPHA_FACTOR_SUN: u32 = 0x81DA;
pub const GL_GLOBAL_ALPHA_SUN: u32 = 0x81D9;
pub const GL_GLYPH_HAS_KERNING_BIT_NV: u32 = 0x100;
pub const GL_GLYPH_HEIGHT_BIT_NV: u32 = 0x02;
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV: u32 = 0x10;
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV: u32 = 0x04;
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV: u32 = 0x08;
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV: u32 = 0x80;
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV: u32 = 0x20;
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV: u32 = 0x40;
pub const GL_GLYPH_WIDTH_BIT_NV: u32 = 0x01;
pub const GL_GPU_ADDRESS_NV: u32 = 0x8F34;
pub const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX: u32 = 0x9049;
pub const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX: u32 = 0x9047;
pub const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX: u32 = 0x904B;
pub const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX: u32 = 0x904A;
pub const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX: u32 = 0x9048;
pub const GL_GREATER: u32 = 0x0204;
pub const GL_GREEN: u32 = 0x1904;
pub const GL_GREEN_BIT_ATI: u32 = 0x00000002;
pub const GL_GREEN_INTEGER: u32 = 0x8D95;
pub const GL_GREEN_INTEGER_EXT: u32 = 0x8D95;
pub const GL_GREEN_MAX_CLAMP_INGR: u32 = 0x8565;
pub const GL_GREEN_MIN_CLAMP_INGR: u32 = 0x8561;
pub const GL_GREEN_NV: u32 = 0x1904;
pub const GL_GUILTY_CONTEXT_RESET: u32 = 0x8253;
pub const GL_GUILTY_CONTEXT_RESET_ARB: u32 = 0x8253;
pub const GL_HALF_APPLE: u32 = 0x140B;
pub const GL_HALF_BIAS_NEGATE_NV: u32 = 0x853B;
pub const GL_HALF_BIAS_NORMAL_NV: u32 = 0x853A;
pub const GL_HALF_BIT_ATI: u32 = 0x00000008;
pub const GL_HALF_FLOAT: u32 = 0x140B;
pub const GL_HALF_FLOAT_ARB: u32 = 0x140B;
pub const GL_HALF_FLOAT_NV: u32 = 0x140B;
pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT: u32 = 0x958B;
pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT: u32 = 0x958C;
pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT: u32 = 0x9594;
pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT: u32 = 0x958A;
pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT: u32 = 0x9589;
pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT: u32 = 0x9586;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT: u32 = 0x9587;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT: u32 = 0x9588;
pub const GL_HARDLIGHT_KHR: u32 = 0x929B;
pub const GL_HARDLIGHT_NV: u32 = 0x929B;
pub const GL_HARDMIX_NV: u32 = 0x92A9;
pub const GL_HIGH_FLOAT: u32 = 0x8DF2;
pub const GL_HIGH_INT: u32 = 0x8DF5;
pub const GL_HILO16_NV: u32 = 0x86F8;
pub const GL_HILO8_NV: u32 = 0x885E;
pub const GL_HILO_NV: u32 = 0x86F4;
pub const GL_HISTOGRAM_ALPHA_SIZE_EXT: u32 = 0x802B;
pub const GL_HISTOGRAM_BLUE_SIZE_EXT: u32 = 0x802A;
pub const GL_HISTOGRAM_EXT: u32 = 0x8024;
pub const GL_HISTOGRAM_FORMAT_EXT: u32 = 0x8027;
pub const GL_HISTOGRAM_GREEN_SIZE_EXT: u32 = 0x8029;
pub const GL_HISTOGRAM_LUMINANCE_SIZE_EXT: u32 = 0x802C;
pub const GL_HISTOGRAM_RED_SIZE_EXT: u32 = 0x8028;
pub const GL_HISTOGRAM_SINK_EXT: u32 = 0x802D;
pub const GL_HISTOGRAM_WIDTH_EXT: u32 = 0x8026;
pub const GL_HI_BIAS_NV: u32 = 0x8714;
pub const GL_HI_SCALE_NV: u32 = 0x870E;
pub const GL_HORIZONTAL_LINE_TO_NV: u32 = 0x06;
pub const GL_HSL_COLOR_KHR: u32 = 0x92AF;
pub const GL_HSL_COLOR_NV: u32 = 0x92AF;
pub const GL_HSL_HUE_KHR: u32 = 0x92AD;
pub const GL_HSL_HUE_NV: u32 = 0x92AD;
pub const GL_HSL_LUMINOSITY_KHR: u32 = 0x92B0;
pub const GL_HSL_LUMINOSITY_NV: u32 = 0x92B0;
pub const GL_HSL_SATURATION_KHR: u32 = 0x92AE;
pub const GL_HSL_SATURATION_NV: u32 = 0x92AE;
pub const GL_IDENTITY_NV: u32 = 0x862A;
pub const GL_IGNORE_BORDER_HP: u32 = 0x8150;
pub const GL_IMAGE_1D: u32 = 0x904C;
pub const GL_IMAGE_1D_ARRAY: u32 = 0x9052;
pub const GL_IMAGE_1D_ARRAY_EXT: u32 = 0x9052;
pub const GL_IMAGE_1D_EXT: u32 = 0x904C;
pub const GL_IMAGE_2D: u32 = 0x904D;
pub const GL_IMAGE_2D_ARRAY: u32 = 0x9053;
pub const GL_IMAGE_2D_ARRAY_EXT: u32 = 0x9053;
pub const GL_IMAGE_2D_EXT: u32 = 0x904D;
pub const GL_IMAGE_2D_MULTISAMPLE: u32 = 0x9055;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 0x9056;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: u32 = 0x9056;
pub const GL_IMAGE_2D_MULTISAMPLE_EXT: u32 = 0x9055;
pub const GL_IMAGE_2D_RECT: u32 = 0x904F;
pub const GL_IMAGE_2D_RECT_EXT: u32 = 0x904F;
pub const GL_IMAGE_3D: u32 = 0x904E;
pub const GL_IMAGE_3D_EXT: u32 = 0x904E;
pub const GL_IMAGE_BINDING_ACCESS: u32 = 0x8F3E;
pub const GL_IMAGE_BINDING_ACCESS_EXT: u32 = 0x8F3E;
pub const GL_IMAGE_BINDING_FORMAT: u32 = 0x906E;
pub const GL_IMAGE_BINDING_FORMAT_EXT: u32 = 0x906E;
pub const GL_IMAGE_BINDING_LAYER: u32 = 0x8F3D;
pub const GL_IMAGE_BINDING_LAYERED: u32 = 0x8F3C;
pub const GL_IMAGE_BINDING_LAYERED_EXT: u32 = 0x8F3C;
pub const GL_IMAGE_BINDING_LAYER_EXT: u32 = 0x8F3D;
pub const GL_IMAGE_BINDING_LEVEL: u32 = 0x8F3B;
pub const GL_IMAGE_BINDING_LEVEL_EXT: u32 = 0x8F3B;
pub const GL_IMAGE_BINDING_NAME: u32 = 0x8F3A;
pub const GL_IMAGE_BINDING_NAME_EXT: u32 = 0x8F3A;
pub const GL_IMAGE_BUFFER: u32 = 0x9051;
pub const GL_IMAGE_BUFFER_EXT: u32 = 0x9051;
pub const GL_IMAGE_CLASS_10_10_10_2: u32 = 0x82C3;
pub const GL_IMAGE_CLASS_11_11_10: u32 = 0x82C2;
pub const GL_IMAGE_CLASS_1_X_16: u32 = 0x82BE;
pub const GL_IMAGE_CLASS_1_X_32: u32 = 0x82BB;
pub const GL_IMAGE_CLASS_1_X_8: u32 = 0x82C1;
pub const GL_IMAGE_CLASS_2_X_16: u32 = 0x82BD;
pub const GL_IMAGE_CLASS_2_X_32: u32 = 0x82BA;
pub const GL_IMAGE_CLASS_2_X_8: u32 = 0x82C0;
pub const GL_IMAGE_CLASS_4_X_16: u32 = 0x82BC;
pub const GL_IMAGE_CLASS_4_X_32: u32 = 0x82B9;
pub const GL_IMAGE_CLASS_4_X_8: u32 = 0x82BF;
pub const GL_IMAGE_COMPATIBILITY_CLASS: u32 = 0x82A8;
pub const GL_IMAGE_CUBE: u32 = 0x9050;
pub const GL_IMAGE_CUBE_EXT: u32 = 0x9050;
pub const GL_IMAGE_CUBE_MAP_ARRAY: u32 = 0x9054;
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 0x9054;
pub const GL_IMAGE_CUBIC_WEIGHT_HP: u32 = 0x815E;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS: u32 = 0x90C9;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE: u32 = 0x90C8;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE: u32 = 0x90C7;
pub const GL_IMAGE_MAG_FILTER_HP: u32 = 0x815C;
pub const GL_IMAGE_MIN_FILTER_HP: u32 = 0x815D;
pub const GL_IMAGE_PIXEL_FORMAT: u32 = 0x82A9;
pub const GL_IMAGE_PIXEL_TYPE: u32 = 0x82AA;
pub const GL_IMAGE_ROTATE_ANGLE_HP: u32 = 0x8159;
pub const GL_IMAGE_ROTATE_ORIGIN_X_HP: u32 = 0x815A;
pub const GL_IMAGE_ROTATE_ORIGIN_Y_HP: u32 = 0x815B;
pub const GL_IMAGE_SCALE_X_HP: u32 = 0x8155;
pub const GL_IMAGE_SCALE_Y_HP: u32 = 0x8156;
pub const GL_IMAGE_TEXEL_SIZE: u32 = 0x82A7;
pub const GL_IMAGE_TRANSFORM_2D_HP: u32 = 0x8161;
pub const GL_IMAGE_TRANSLATE_X_HP: u32 = 0x8157;
pub const GL_IMAGE_TRANSLATE_Y_HP: u32 = 0x8158;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT: u32 = 0x8B9B;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES: u32 = 0x8B9B;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE: u32 = 0x8B9A;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES: u32 = 0x8B9A;
pub const GL_INCLUSIVE_EXT: u32 = 0x8F10;
pub const GL_INCR: u32 = 0x1E02;
pub const GL_INCR_WRAP: u32 = 0x8507;
pub const GL_INCR_WRAP_EXT: u32 = 0x8507;
pub const GL_INDEX_ARRAY_ADDRESS_NV: u32 = 0x8F24;
pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8899;
pub const GL_INDEX_ARRAY_COUNT_EXT: u32 = 0x8087;
pub const GL_INDEX_ARRAY_EXT: u32 = 0x8077;
pub const GL_INDEX_ARRAY_LENGTH_NV: u32 = 0x8F2E;
pub const GL_INDEX_ARRAY_LIST_IBM: u32 = 103073;
pub const GL_INDEX_ARRAY_LIST_STRIDE_IBM: u32 = 103083;
pub const GL_INDEX_ARRAY_POINTER_EXT: u32 = 0x8091;
pub const GL_INDEX_ARRAY_STRIDE_EXT: u32 = 0x8086;
pub const GL_INDEX_ARRAY_TYPE_EXT: u32 = 0x8085;
pub const GL_INDEX_BIT_PGI: u32 = 0x00080000;
pub const GL_INDEX_MATERIAL_EXT: u32 = 0x81B8;
pub const GL_INDEX_MATERIAL_FACE_EXT: u32 = 0x81BA;
pub const GL_INDEX_MATERIAL_PARAMETER_EXT: u32 = 0x81B9;
pub const GL_INDEX_TEST_EXT: u32 = 0x81B5;
pub const GL_INDEX_TEST_FUNC_EXT: u32 = 0x81B6;
pub const GL_INDEX_TEST_REF_EXT: u32 = 0x81B7;
pub const GL_INFO_LOG_LENGTH: u32 = 0x8B84;
pub const GL_INNOCENT_CONTEXT_RESET: u32 = 0x8254;
pub const GL_INNOCENT_CONTEXT_RESET_ARB: u32 = 0x8254;
pub const GL_INSTRUMENT_BUFFER_POINTER_SGIX: u32 = 0x8180;
pub const GL_INSTRUMENT_MEASUREMENTS_SGIX: u32 = 0x8181;
pub const GL_INT: u32 = 0x1404;
pub const GL_INT16_NV: u32 = 0x8FE4;
pub const GL_INT16_VEC2_NV: u32 = 0x8FE5;
pub const GL_INT16_VEC3_NV: u32 = 0x8FE6;
pub const GL_INT16_VEC4_NV: u32 = 0x8FE7;
pub const GL_INT64_ARB: u32 = 0x140E;
pub const GL_INT64_NV: u32 = 0x140E;
pub const GL_INT64_VEC2_ARB: u32 = 0x8FE9;
pub const GL_INT64_VEC2_NV: u32 = 0x8FE9;
pub const GL_INT64_VEC3_ARB: u32 = 0x8FEA;
pub const GL_INT64_VEC3_NV: u32 = 0x8FEA;
pub const GL_INT64_VEC4_ARB: u32 = 0x8FEB;
pub const GL_INT64_VEC4_NV: u32 = 0x8FEB;
pub const GL_INT8_NV: u32 = 0x8FE0;
pub const GL_INT8_VEC2_NV: u32 = 0x8FE1;
pub const GL_INT8_VEC3_NV: u32 = 0x8FE2;
pub const GL_INT8_VEC4_NV: u32 = 0x8FE3;
pub const GL_INTENSITY12_EXT: u32 = 0x804C;
pub const GL_INTENSITY16F_ARB: u32 = 0x881D;
pub const GL_INTENSITY16I_EXT: u32 = 0x8D8B;
pub const GL_INTENSITY16UI_EXT: u32 = 0x8D79;
pub const GL_INTENSITY16_EXT: u32 = 0x804D;
pub const GL_INTENSITY16_SNORM: u32 = 0x901B;
pub const GL_INTENSITY32F_ARB: u32 = 0x8817;
pub const GL_INTENSITY32I_EXT: u32 = 0x8D85;
pub const GL_INTENSITY32UI_EXT: u32 = 0x8D73;
pub const GL_INTENSITY4_EXT: u32 = 0x804A;
pub const GL_INTENSITY8I_EXT: u32 = 0x8D91;
pub const GL_INTENSITY8UI_EXT: u32 = 0x8D7F;
pub const GL_INTENSITY8_EXT: u32 = 0x804B;
pub const GL_INTENSITY8_SNORM: u32 = 0x9017;
pub const GL_INTENSITY_EXT: u32 = 0x8049;
pub const GL_INTENSITY_FLOAT16_APPLE: u32 = 0x881D;
pub const GL_INTENSITY_FLOAT16_ATI: u32 = 0x881D;
pub const GL_INTENSITY_FLOAT32_APPLE: u32 = 0x8817;
pub const GL_INTENSITY_FLOAT32_ATI: u32 = 0x8817;
pub const GL_INTENSITY_SNORM: u32 = 0x9013;
pub const GL_INTERLACE_OML: u32 = 0x8980;
pub const GL_INTERLACE_READ_INGR: u32 = 0x8568;
pub const GL_INTERLACE_READ_OML: u32 = 0x8981;
pub const GL_INTERLACE_SGIX: u32 = 0x8094;
pub const GL_INTERLEAVED_ATTRIBS: u32 = 0x8C8C;
pub const GL_INTERLEAVED_ATTRIBS_EXT: u32 = 0x8C8C;
pub const GL_INTERLEAVED_ATTRIBS_NV: u32 = 0x8C8C;
pub const GL_INTERNALFORMAT_ALPHA_SIZE: u32 = 0x8274;
pub const GL_INTERNALFORMAT_ALPHA_TYPE: u32 = 0x827B;
pub const GL_INTERNALFORMAT_BLUE_SIZE: u32 = 0x8273;
pub const GL_INTERNALFORMAT_BLUE_TYPE: u32 = 0x827A;
pub const GL_INTERNALFORMAT_DEPTH_SIZE: u32 = 0x8275;
pub const GL_INTERNALFORMAT_DEPTH_TYPE: u32 = 0x827C;
pub const GL_INTERNALFORMAT_GREEN_SIZE: u32 = 0x8272;
pub const GL_INTERNALFORMAT_GREEN_TYPE: u32 = 0x8279;
pub const GL_INTERNALFORMAT_PREFERRED: u32 = 0x8270;
pub const GL_INTERNALFORMAT_RED_SIZE: u32 = 0x8271;
pub const GL_INTERNALFORMAT_RED_TYPE: u32 = 0x8278;
pub const GL_INTERNALFORMAT_SHARED_SIZE: u32 = 0x8277;
pub const GL_INTERNALFORMAT_STENCIL_SIZE: u32 = 0x8276;
pub const GL_INTERNALFORMAT_STENCIL_TYPE: u32 = 0x827D;
pub const GL_INTERNALFORMAT_SUPPORTED: u32 = 0x826F;
pub const GL_INTERPOLATE_ARB: u32 = 0x8575;
pub const GL_INTERPOLATE_EXT: u32 = 0x8575;
pub const GL_INT_2_10_10_10_REV: u32 = 0x8D9F;
pub const GL_INT_IMAGE_1D: u32 = 0x9057;
pub const GL_INT_IMAGE_1D_ARRAY: u32 = 0x905D;
pub const GL_INT_IMAGE_1D_ARRAY_EXT: u32 = 0x905D;
pub const GL_INT_IMAGE_1D_EXT: u32 = 0x9057;
pub const GL_INT_IMAGE_2D: u32 = 0x9058;
pub const GL_INT_IMAGE_2D_ARRAY: u32 = 0x905E;
pub const GL_INT_IMAGE_2D_ARRAY_EXT: u32 = 0x905E;
pub const GL_INT_IMAGE_2D_EXT: u32 = 0x9058;
pub const GL_INT_IMAGE_2D_MULTISAMPLE: u32 = 0x9060;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 0x9061;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: u32 = 0x9061;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_EXT: u32 = 0x9060;
pub const GL_INT_IMAGE_2D_RECT: u32 = 0x905A;
pub const GL_INT_IMAGE_2D_RECT_EXT: u32 = 0x905A;
pub const GL_INT_IMAGE_3D: u32 = 0x9059;
pub const GL_INT_IMAGE_3D_EXT: u32 = 0x9059;
pub const GL_INT_IMAGE_BUFFER: u32 = 0x905C;
pub const GL_INT_IMAGE_BUFFER_EXT: u32 = 0x905C;
pub const GL_INT_IMAGE_CUBE: u32 = 0x905B;
pub const GL_INT_IMAGE_CUBE_EXT: u32 = 0x905B;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY: u32 = 0x905F;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 0x905F;
pub const GL_INT_SAMPLER_1D: u32 = 0x8DC9;
pub const GL_INT_SAMPLER_1D_ARRAY: u32 = 0x8DCE;
pub const GL_INT_SAMPLER_1D_ARRAY_EXT: u32 = 0x8DCE;
pub const GL_INT_SAMPLER_1D_EXT: u32 = 0x8DC9;
pub const GL_INT_SAMPLER_2D: u32 = 0x8DCA;
pub const GL_INT_SAMPLER_2D_ARRAY: u32 = 0x8DCF;
pub const GL_INT_SAMPLER_2D_ARRAY_EXT: u32 = 0x8DCF;
pub const GL_INT_SAMPLER_2D_EXT: u32 = 0x8DCA;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE: u32 = 0x9109;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 0x910C;
pub const GL_INT_SAMPLER_2D_RECT: u32 = 0x8DCD;
pub const GL_INT_SAMPLER_2D_RECT_EXT: u32 = 0x8DCD;
pub const GL_INT_SAMPLER_3D: u32 = 0x8DCB;
pub const GL_INT_SAMPLER_3D_EXT: u32 = 0x8DCB;
pub const GL_INT_SAMPLER_BUFFER: u32 = 0x8DD0;
pub const GL_INT_SAMPLER_BUFFER_AMD: u32 = 0x9002;
pub const GL_INT_SAMPLER_BUFFER_EXT: u32 = 0x8DD0;
pub const GL_INT_SAMPLER_CUBE: u32 = 0x8DCC;
pub const GL_INT_SAMPLER_CUBE_EXT: u32 = 0x8DCC;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 0x900E;
pub const GL_INT_SAMPLER_RENDERBUFFER_NV: u32 = 0x8E57;
pub const GL_INT_VEC2: u32 = 0x8B53;
pub const GL_INT_VEC2_ARB: u32 = 0x8B53;
pub const GL_INT_VEC3: u32 = 0x8B54;
pub const GL_INT_VEC3_ARB: u32 = 0x8B54;
pub const GL_INT_VEC4: u32 = 0x8B55;
pub const GL_INT_VEC4_ARB: u32 = 0x8B55;
pub const GL_INVALID_ENUM: u32 = 0x0500;
pub const GL_INVALID_FRAMEBUFFER_OPERATION: u32 = 0x0506;
pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT: u32 = 0x0506;
pub const GL_INVALID_INDEX: u32 = 0xFFFFFFFF;
pub const GL_INVALID_OPERATION: u32 = 0x0502;
pub const GL_INVALID_VALUE: u32 = 0x0501;
pub const GL_INVARIANT_DATATYPE_EXT: u32 = 0x87EB;
pub const GL_INVARIANT_EXT: u32 = 0x87C2;
pub const GL_INVARIANT_VALUE_EXT: u32 = 0x87EA;
pub const GL_INVERSE_NV: u32 = 0x862B;
pub const GL_INVERSE_TRANSPOSE_NV: u32 = 0x862D;
pub const GL_INVERT: u32 = 0x150A;
pub const GL_INVERTED_SCREEN_W_REND: u32 = 0x8491;
pub const GL_INVERT_OVG_NV: u32 = 0x92B4;
pub const GL_INVERT_RGB_NV: u32 = 0x92A3;
pub const GL_IR_INSTRUMENT1_SGIX: u32 = 0x817F;
pub const GL_ISOLINES: u32 = 0x8E7A;
pub const GL_IS_PER_PATCH: u32 = 0x92E7;
pub const GL_IS_ROW_MAJOR: u32 = 0x9300;
pub const GL_ITALIC_BIT_NV: u32 = 0x02;
pub const GL_IUI_N3F_V2F_EXT: u32 = 0x81AF;
pub const GL_IUI_N3F_V3F_EXT: u32 = 0x81B0;
pub const GL_IUI_V2F_EXT: u32 = 0x81AD;
pub const GL_IUI_V3F_EXT: u32 = 0x81AE;
pub const GL_KEEP: u32 = 0x1E00;
pub const GL_LARGE_CCW_ARC_TO_NV: u32 = 0x16;
pub const GL_LARGE_CW_ARC_TO_NV: u32 = 0x18;
pub const GL_LAST_VERTEX_CONVENTION: u32 = 0x8E4E;
pub const GL_LAST_VERTEX_CONVENTION_EXT: u32 = 0x8E4E;
pub const GL_LAST_VIDEO_CAPTURE_STATUS_NV: u32 = 0x9027;
pub const GL_LAYER_NV: u32 = 0x8DAA;
pub const GL_LAYER_PROVOKING_VERTEX: u32 = 0x825E;
pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT: u32 = 0x958E;
pub const GL_LAYOUT_DEFAULT_INTEL: u32 = 0;
pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT: u32 = 0x9531;
pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT: u32 = 0x9530;
pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT: u32 = 0x958F;
pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT: u32 = 0x9590;
pub const GL_LAYOUT_GENERAL_EXT: u32 = 0x958D;
pub const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL: u32 = 2;
pub const GL_LAYOUT_LINEAR_INTEL: u32 = 1;
pub const GL_LAYOUT_SHADER_READ_ONLY_EXT: u32 = 0x9591;
pub const GL_LAYOUT_TRANSFER_DST_EXT: u32 = 0x9593;
pub const GL_LAYOUT_TRANSFER_SRC_EXT: u32 = 0x9592;
pub const GL_LEFT: u32 = 0x0406;
pub const GL_LEQUAL: u32 = 0x0203;
pub const GL_LERP_ATI: u32 = 0x8969;
pub const GL_LESS: u32 = 0x0201;
pub const GL_LGPU_SEPARATE_STORAGE_BIT_NVX: u32 = 0x0800;
pub const GL_LIGHTEN_KHR: u32 = 0x9298;
pub const GL_LIGHTEN_NV: u32 = 0x9298;
pub const GL_LIGHT_ENV_MODE_SGIX: u32 = 0x8407;
pub const GL_LIGHT_MODEL_COLOR_CONTROL_EXT: u32 = 0x81F8;
pub const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE: u32 = 0x85B0;
pub const GL_LINE: u32 = 0x1B01;
pub const GL_LINEAR: u32 = 0x2601;
pub const GL_LINEARBURN_NV: u32 = 0x92A5;
pub const GL_LINEARDODGE_NV: u32 = 0x92A4;
pub const GL_LINEARLIGHT_NV: u32 = 0x92A7;
pub const GL_LINEAR_CLIPMAP_LINEAR_SGIX: u32 = 0x8170;
pub const GL_LINEAR_CLIPMAP_NEAREST_SGIX: u32 = 0x844F;
pub const GL_LINEAR_DETAIL_ALPHA_SGIS: u32 = 0x8098;
pub const GL_LINEAR_DETAIL_COLOR_SGIS: u32 = 0x8099;
pub const GL_LINEAR_DETAIL_SGIS: u32 = 0x8097;
pub const GL_LINEAR_MIPMAP_LINEAR: u32 = 0x2703;
pub const GL_LINEAR_MIPMAP_NEAREST: u32 = 0x2701;
pub const GL_LINEAR_SHARPEN_ALPHA_SGIS: u32 = 0x80AE;
pub const GL_LINEAR_SHARPEN_COLOR_SGIS: u32 = 0x80AF;
pub const GL_LINEAR_SHARPEN_SGIS: u32 = 0x80AD;
pub const GL_LINEAR_TILING_EXT: u32 = 0x9585;
pub const GL_LINES: u32 = 0x0001;
pub const GL_LINES_ADJACENCY: u32 = 0x000A;
pub const GL_LINES_ADJACENCY_ARB: u32 = 0x000A;
pub const GL_LINES_ADJACENCY_EXT: u32 = 0x000A;
pub const GL_LINE_LOOP: u32 = 0x0002;
pub const GL_LINE_SMOOTH: u32 = 0x0B20;
pub const GL_LINE_SMOOTH_HINT: u32 = 0x0C52;
pub const GL_LINE_STRIP: u32 = 0x0003;
pub const GL_LINE_STRIP_ADJACENCY: u32 = 0x000B;
pub const GL_LINE_STRIP_ADJACENCY_ARB: u32 = 0x000B;
pub const GL_LINE_STRIP_ADJACENCY_EXT: u32 = 0x000B;
pub const GL_LINE_TO_NV: u32 = 0x04;
pub const GL_LINE_WIDTH: u32 = 0x0B21;
pub const GL_LINE_WIDTH_COMMAND_NV: u32 = 0x000D;
pub const GL_LINE_WIDTH_GRANULARITY: u32 = 0x0B23;
pub const GL_LINE_WIDTH_RANGE: u32 = 0x0B22;
pub const GL_LINK_STATUS: u32 = 0x8B82;
pub const GL_LIST_PRIORITY_SGIX: u32 = 0x8182;
pub const GL_LOCAL_CONSTANT_DATATYPE_EXT: u32 = 0x87ED;
pub const GL_LOCAL_CONSTANT_EXT: u32 = 0x87C3;
pub const GL_LOCAL_CONSTANT_VALUE_EXT: u32 = 0x87EC;
pub const GL_LOCAL_EXT: u32 = 0x87C4;
pub const GL_LOCATION: u32 = 0x930E;
pub const GL_LOCATION_COMPONENT: u32 = 0x934A;
pub const GL_LOCATION_INDEX: u32 = 0x930F;
pub const GL_LOGIC_OP_MODE: u32 = 0x0BF0;
pub const GL_LOSE_CONTEXT_ON_RESET: u32 = 0x8252;
pub const GL_LOSE_CONTEXT_ON_RESET_ARB: u32 = 0x8252;
pub const GL_LOWER_LEFT: u32 = 0x8CA1;
pub const GL_LOW_FLOAT: u32 = 0x8DF0;
pub const GL_LOW_INT: u32 = 0x8DF3;
pub const GL_LO_BIAS_NV: u32 = 0x8715;
pub const GL_LO_SCALE_NV: u32 = 0x870F;
pub const GL_LUID_SIZE_EXT: u32 = 8;
pub const GL_LUMINANCE12_ALPHA12_EXT: u32 = 0x8047;
pub const GL_LUMINANCE12_ALPHA4_EXT: u32 = 0x8046;
pub const GL_LUMINANCE12_EXT: u32 = 0x8041;
pub const GL_LUMINANCE16F_ARB: u32 = 0x881E;
pub const GL_LUMINANCE16I_EXT: u32 = 0x8D8C;
pub const GL_LUMINANCE16UI_EXT: u32 = 0x8D7A;
pub const GL_LUMINANCE16_ALPHA16_EXT: u32 = 0x8048;
pub const GL_LUMINANCE16_ALPHA16_SNORM: u32 = 0x901A;
pub const GL_LUMINANCE16_EXT: u32 = 0x8042;
pub const GL_LUMINANCE16_SNORM: u32 = 0x9019;
pub const GL_LUMINANCE32F_ARB: u32 = 0x8818;
pub const GL_LUMINANCE32I_EXT: u32 = 0x8D86;
pub const GL_LUMINANCE32UI_EXT: u32 = 0x8D74;
pub const GL_LUMINANCE4_ALPHA4_EXT: u32 = 0x8043;
pub const GL_LUMINANCE4_EXT: u32 = 0x803F;
pub const GL_LUMINANCE6_ALPHA2_EXT: u32 = 0x8044;
pub const GL_LUMINANCE8I_EXT: u32 = 0x8D92;
pub const GL_LUMINANCE8UI_EXT: u32 = 0x8D80;
pub const GL_LUMINANCE8_ALPHA8_EXT: u32 = 0x8045;
pub const GL_LUMINANCE8_ALPHA8_SNORM: u32 = 0x9016;
pub const GL_LUMINANCE8_EXT: u32 = 0x8040;
pub const GL_LUMINANCE8_SNORM: u32 = 0x9015;
pub const GL_LUMINANCE_ALPHA16F_ARB: u32 = 0x881F;
pub const GL_LUMINANCE_ALPHA16I_EXT: u32 = 0x8D8D;
pub const GL_LUMINANCE_ALPHA16UI_EXT: u32 = 0x8D7B;
pub const GL_LUMINANCE_ALPHA32F_ARB: u32 = 0x8819;
pub const GL_LUMINANCE_ALPHA32I_EXT: u32 = 0x8D87;
pub const GL_LUMINANCE_ALPHA32UI_EXT: u32 = 0x8D75;
pub const GL_LUMINANCE_ALPHA8I_EXT: u32 = 0x8D93;
pub const GL_LUMINANCE_ALPHA8UI_EXT: u32 = 0x8D81;
pub const GL_LUMINANCE_ALPHA_FLOAT16_APPLE: u32 = 0x881F;
pub const GL_LUMINANCE_ALPHA_FLOAT16_ATI: u32 = 0x881F;
pub const GL_LUMINANCE_ALPHA_FLOAT32_APPLE: u32 = 0x8819;
pub const GL_LUMINANCE_ALPHA_FLOAT32_ATI: u32 = 0x8819;
pub const GL_LUMINANCE_ALPHA_INTEGER_EXT: u32 = 0x8D9D;
pub const GL_LUMINANCE_ALPHA_SNORM: u32 = 0x9012;
pub const GL_LUMINANCE_FLOAT16_APPLE: u32 = 0x881E;
pub const GL_LUMINANCE_FLOAT16_ATI: u32 = 0x881E;
pub const GL_LUMINANCE_FLOAT32_APPLE: u32 = 0x8818;
pub const GL_LUMINANCE_FLOAT32_ATI: u32 = 0x8818;
pub const GL_LUMINANCE_INTEGER_EXT: u32 = 0x8D9C;
pub const GL_LUMINANCE_SNORM: u32 = 0x9011;
pub const GL_MAD_ATI: u32 = 0x8968;
pub const GL_MAGNITUDE_BIAS_NV: u32 = 0x8718;
pub const GL_MAGNITUDE_SCALE_NV: u32 = 0x8712;
pub const GL_MAJOR_VERSION: u32 = 0x821B;
pub const GL_MANUAL_GENERATE_MIPMAP: u32 = 0x8294;
pub const GL_MAP1_BINORMAL_EXT: u32 = 0x8446;
pub const GL_MAP1_TANGENT_EXT: u32 = 0x8444;
pub const GL_MAP1_VERTEX_ATTRIB0_4_NV: u32 = 0x8660;
pub const GL_MAP1_VERTEX_ATTRIB10_4_NV: u32 = 0x866A;
pub const GL_MAP1_VERTEX_ATTRIB11_4_NV: u32 = 0x866B;
pub const GL_MAP1_VERTEX_ATTRIB12_4_NV: u32 = 0x866C;
pub const GL_MAP1_VERTEX_ATTRIB13_4_NV: u32 = 0x866D;
pub const GL_MAP1_VERTEX_ATTRIB14_4_NV: u32 = 0x866E;
pub const GL_MAP1_VERTEX_ATTRIB15_4_NV: u32 = 0x866F;
pub const GL_MAP1_VERTEX_ATTRIB1_4_NV: u32 = 0x8661;
pub const GL_MAP1_VERTEX_ATTRIB2_4_NV: u32 = 0x8662;
pub const GL_MAP1_VERTEX_ATTRIB3_4_NV: u32 = 0x8663;
pub const GL_MAP1_VERTEX_ATTRIB4_4_NV: u32 = 0x8664;
pub const GL_MAP1_VERTEX_ATTRIB5_4_NV: u32 = 0x8665;
pub const GL_MAP1_VERTEX_ATTRIB6_4_NV: u32 = 0x8666;
pub const GL_MAP1_VERTEX_ATTRIB7_4_NV: u32 = 0x8667;
pub const GL_MAP1_VERTEX_ATTRIB8_4_NV: u32 = 0x8668;
pub const GL_MAP1_VERTEX_ATTRIB9_4_NV: u32 = 0x8669;
pub const GL_MAP2_BINORMAL_EXT: u32 = 0x8447;
pub const GL_MAP2_TANGENT_EXT: u32 = 0x8445;
pub const GL_MAP2_VERTEX_ATTRIB0_4_NV: u32 = 0x8670;
pub const GL_MAP2_VERTEX_ATTRIB10_4_NV: u32 = 0x867A;
pub const GL_MAP2_VERTEX_ATTRIB11_4_NV: u32 = 0x867B;
pub const GL_MAP2_VERTEX_ATTRIB12_4_NV: u32 = 0x867C;
pub const GL_MAP2_VERTEX_ATTRIB13_4_NV: u32 = 0x867D;
pub const GL_MAP2_VERTEX_ATTRIB14_4_NV: u32 = 0x867E;
pub const GL_MAP2_VERTEX_ATTRIB15_4_NV: u32 = 0x867F;
pub const GL_MAP2_VERTEX_ATTRIB1_4_NV: u32 = 0x8671;
pub const GL_MAP2_VERTEX_ATTRIB2_4_NV: u32 = 0x8672;
pub const GL_MAP2_VERTEX_ATTRIB3_4_NV: u32 = 0x8673;
pub const GL_MAP2_VERTEX_ATTRIB4_4_NV: u32 = 0x8674;
pub const GL_MAP2_VERTEX_ATTRIB5_4_NV: u32 = 0x8675;
pub const GL_MAP2_VERTEX_ATTRIB6_4_NV: u32 = 0x8676;
pub const GL_MAP2_VERTEX_ATTRIB7_4_NV: u32 = 0x8677;
pub const GL_MAP2_VERTEX_ATTRIB8_4_NV: u32 = 0x8678;
pub const GL_MAP2_VERTEX_ATTRIB9_4_NV: u32 = 0x8679;
pub const GL_MAP_ATTRIB_U_ORDER_NV: u32 = 0x86C3;
pub const GL_MAP_ATTRIB_V_ORDER_NV: u32 = 0x86C4;
pub const GL_MAP_COHERENT_BIT: u32 = 0x0080;
pub const GL_MAP_FLUSH_EXPLICIT_BIT: u32 = 0x0010;
pub const GL_MAP_INVALIDATE_BUFFER_BIT: u32 = 0x0008;
pub const GL_MAP_INVALIDATE_RANGE_BIT: u32 = 0x0004;
pub const GL_MAP_PERSISTENT_BIT: u32 = 0x0040;
pub const GL_MAP_READ_BIT: u32 = 0x0001;
pub const GL_MAP_TESSELLATION_NV: u32 = 0x86C2;
pub const GL_MAP_UNSYNCHRONIZED_BIT: u32 = 0x0020;
pub const GL_MAP_WRITE_BIT: u32 = 0x0002;
pub const GL_MATERIAL_SIDE_HINT_PGI: u32 = 0x1A22C;
pub const GL_MATRIX0_ARB: u32 = 0x88C0;
pub const GL_MATRIX0_NV: u32 = 0x8630;
pub const GL_MATRIX10_ARB: u32 = 0x88CA;
pub const GL_MATRIX11_ARB: u32 = 0x88CB;
pub const GL_MATRIX12_ARB: u32 = 0x88CC;
pub const GL_MATRIX13_ARB: u32 = 0x88CD;
pub const GL_MATRIX14_ARB: u32 = 0x88CE;
pub const GL_MATRIX15_ARB: u32 = 0x88CF;
pub const GL_MATRIX16_ARB: u32 = 0x88D0;
pub const GL_MATRIX17_ARB: u32 = 0x88D1;
pub const GL_MATRIX18_ARB: u32 = 0x88D2;
pub const GL_MATRIX19_ARB: u32 = 0x88D3;
pub const GL_MATRIX1_ARB: u32 = 0x88C1;
pub const GL_MATRIX1_NV: u32 = 0x8631;
pub const GL_MATRIX20_ARB: u32 = 0x88D4;
pub const GL_MATRIX21_ARB: u32 = 0x88D5;
pub const GL_MATRIX22_ARB: u32 = 0x88D6;
pub const GL_MATRIX23_ARB: u32 = 0x88D7;
pub const GL_MATRIX24_ARB: u32 = 0x88D8;
pub const GL_MATRIX25_ARB: u32 = 0x88D9;
pub const GL_MATRIX26_ARB: u32 = 0x88DA;
pub const GL_MATRIX27_ARB: u32 = 0x88DB;
pub const GL_MATRIX28_ARB: u32 = 0x88DC;
pub const GL_MATRIX29_ARB: u32 = 0x88DD;
pub const GL_MATRIX2_ARB: u32 = 0x88C2;
pub const GL_MATRIX2_NV: u32 = 0x8632;
pub const GL_MATRIX30_ARB: u32 = 0x88DE;
pub const GL_MATRIX31_ARB: u32 = 0x88DF;
pub const GL_MATRIX3_ARB: u32 = 0x88C3;
pub const GL_MATRIX3_NV: u32 = 0x8633;
pub const GL_MATRIX4_ARB: u32 = 0x88C4;
pub const GL_MATRIX4_NV: u32 = 0x8634;
pub const GL_MATRIX5_ARB: u32 = 0x88C5;
pub const GL_MATRIX5_NV: u32 = 0x8635;
pub const GL_MATRIX6_ARB: u32 = 0x88C6;
pub const GL_MATRIX6_NV: u32 = 0x8636;
pub const GL_MATRIX7_ARB: u32 = 0x88C7;
pub const GL_MATRIX7_NV: u32 = 0x8637;
pub const GL_MATRIX8_ARB: u32 = 0x88C8;
pub const GL_MATRIX9_ARB: u32 = 0x88C9;
pub const GL_MATRIX_EXT: u32 = 0x87C0;
pub const GL_MATRIX_INDEX_ARRAY_ARB: u32 = 0x8844;
pub const GL_MATRIX_INDEX_ARRAY_POINTER_ARB: u32 = 0x8849;
pub const GL_MATRIX_INDEX_ARRAY_SIZE_ARB: u32 = 0x8846;
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB: u32 = 0x8848;
pub const GL_MATRIX_INDEX_ARRAY_TYPE_ARB: u32 = 0x8847;
pub const GL_MATRIX_PALETTE_ARB: u32 = 0x8840;
pub const GL_MATRIX_STRIDE: u32 = 0x92FF;
pub const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI: u32 = 0x00200000;
pub const GL_MAT_AMBIENT_BIT_PGI: u32 = 0x00100000;
pub const GL_MAT_COLOR_INDEXES_BIT_PGI: u32 = 0x01000000;
pub const GL_MAT_DIFFUSE_BIT_PGI: u32 = 0x00400000;
pub const GL_MAT_EMISSION_BIT_PGI: u32 = 0x00800000;
pub const GL_MAT_SHININESS_BIT_PGI: u32 = 0x02000000;
pub const GL_MAT_SPECULAR_BIT_PGI: u32 = 0x04000000;
pub const GL_MAX: u32 = 0x8008;
pub const GL_MAX_3D_TEXTURE_SIZE: u32 = 0x8073;
pub const GL_MAX_3D_TEXTURE_SIZE_EXT: u32 = 0x8073;
pub const GL_MAX_4D_TEXTURE_SIZE_SGIS: u32 = 0x8138;
pub const GL_MAX_ACTIVE_LIGHTS_SGIX: u32 = 0x8405;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS: u32 = 0x88FF;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT: u32 = 0x88FF;
pub const GL_MAX_ASYNC_DRAW_PIXELS_SGIX: u32 = 0x8360;
pub const GL_MAX_ASYNC_HISTOGRAM_SGIX: u32 = 0x832D;
pub const GL_MAX_ASYNC_READ_PIXELS_SGIX: u32 = 0x8361;
pub const GL_MAX_ASYNC_TEX_IMAGE_SGIX: u32 = 0x835F;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS: u32 = 0x92DC;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE: u32 = 0x92D8;
pub const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT: u32 = 0x8DED;
pub const GL_MAX_CLIPMAP_DEPTH_SGIX: u32 = 0x8177;
pub const GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX: u32 = 0x8178;
pub const GL_MAX_CLIP_DISTANCES: u32 = 0x0D32;
pub const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV: u32 = 0x955F;
pub const GL_MAX_COLOR_ATTACHMENTS: u32 = 0x8CDF;
pub const GL_MAX_COLOR_ATTACHMENTS_EXT: u32 = 0x8CDF;
pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD: u32 = 0x91B3;
pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD: u32 = 0x91B4;
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI: u32 = 0x80B3;
pub const GL_MAX_COLOR_TEXTURE_SAMPLES: u32 = 0x910E;
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS: u32 = 0x92D7;
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS: u32 = 0x92D1;
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES: u32 = 0x82FA;
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS: u32 = 0x8266;
pub const GL_MAX_COMBINED_DIMENSIONS: u32 = 0x8282;
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: u32 = 0x8A33;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: u32 = 0x8A32;
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS: u32 = 0x90CF;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS: u32 = 0x8F39;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT: u32 = 0x8F39;
pub const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV: u32 = 0x8E67;
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES: u32 = 0x8F39;
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS: u32 = 0x90DC;
pub const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV: u32 = 0x8E6F;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: u32 = 0x8E1E;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: u32 = 0x8E1F;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: u32 = 0x8B4D;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB: u32 = 0x8B4D;
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS: u32 = 0x8A2E;
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: u32 = 0x8A31;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS: u32 = 0x8265;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS: u32 = 0x8264;
pub const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB: u32 = 0x90EB;
pub const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB: u32 = 0x91BF;
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS: u32 = 0x91BD;
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS: u32 = 0x90DB;
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE: u32 = 0x8262;
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS: u32 = 0x91BC;
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS: u32 = 0x91BB;
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS: u32 = 0x8263;
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB: u32 = 0x9344;
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB: u32 = 0x9345;
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT: u32 = 0x91BE;
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS: u32 = 0x90EB;
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE: u32 = 0x91BF;
pub const GL_MAX_CONVOLUTION_HEIGHT_EXT: u32 = 0x801B;
pub const GL_MAX_CONVOLUTION_WIDTH_EXT: u32 = 0x801A;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE: u32 = 0x851C;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB: u32 = 0x851C;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT: u32 = 0x851C;
pub const GL_MAX_CULL_DISTANCES: u32 = 0x82F9;
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH: u32 = 0x826C;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES: u32 = 0x9144;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD: u32 = 0x9144;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB: u32 = 0x9144;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH: u32 = 0x9143;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD: u32 = 0x9143;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB: u32 = 0x9143;
pub const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV: u32 = 0x90D1;
pub const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV: u32 = 0x90D0;
pub const GL_MAX_DEFORMATION_ORDER_SGIX: u32 = 0x8197;
pub const GL_MAX_DEPTH: u32 = 0x8280;
pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD: u32 = 0x91B5;
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES: u32 = 0x910F;
pub const GL_MAX_DETACHED_BUFFERS_NV: u32 = 0x95AD;
pub const GL_MAX_DETACHED_TEXTURES_NV: u32 = 0x95AC;
pub const GL_MAX_DRAW_BUFFERS: u32 = 0x8824;
pub const GL_MAX_DRAW_BUFFERS_ARB: u32 = 0x8824;
pub const GL_MAX_DRAW_BUFFERS_ATI: u32 = 0x8824;
pub const GL_MAX_DRAW_MESH_TASKS_COUNT_NV: u32 = 0x953D;
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS: u32 = 0x88FC;
pub const GL_MAX_ELEMENTS_INDICES: u32 = 0x80E9;
pub const GL_MAX_ELEMENTS_INDICES_EXT: u32 = 0x80E9;
pub const GL_MAX_ELEMENTS_VERTICES: u32 = 0x80E8;
pub const GL_MAX_ELEMENTS_VERTICES_EXT: u32 = 0x80E8;
pub const GL_MAX_ELEMENT_INDEX: u32 = 0x8D6B;
pub const GL_MAX_EXT: u32 = 0x8008;
pub const GL_MAX_FOG_FUNC_POINTS_SGIS: u32 = 0x812C;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS: u32 = 0x92D6;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS: u32 = 0x92D0;
pub const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT: u32 = 0x8DE3;
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS: u32 = 0x90CE;
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS: u32 = 0x9125;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET: u32 = 0x8E5C;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV: u32 = 0x8E5C;
pub const GL_MAX_FRAGMENT_LIGHTS_SGIX: u32 = 0x8404;
pub const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV: u32 = 0x8868;
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS: u32 = 0x90DA;
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS: u32 = 0x8A2D;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: u32 = 0x8B49;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB: u32 = 0x8B49;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS: u32 = 0x8DFD;
pub const GL_MAX_FRAMEBUFFER_HEIGHT: u32 = 0x9316;
pub const GL_MAX_FRAMEBUFFER_LAYERS: u32 = 0x9317;
pub const GL_MAX_FRAMEBUFFER_SAMPLES: u32 = 0x9318;
pub const GL_MAX_FRAMEBUFFER_WIDTH: u32 = 0x9315;
pub const GL_MAX_FRAMEZOOM_FACTOR_SGIX: u32 = 0x818D;
pub const GL_MAX_GENERAL_COMBINERS_NV: u32 = 0x854D;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS: u32 = 0x92D5;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS: u32 = 0x92CF;
pub const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT: u32 = 0x8DE4;
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS: u32 = 0x90CD;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS: u32 = 0x9123;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS: u32 = 0x9124;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES: u32 = 0x8DE0;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB: u32 = 0x8DE0;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT: u32 = 0x8DE0;
pub const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV: u32 = 0x8E5A;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS: u32 = 0x8E5A;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS: u32 = 0x90D7;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: u32 = 0x8C29;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB: u32 = 0x8C29;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT: u32 = 0x8C29;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: u32 = 0x8DE1;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB: u32 = 0x8DE1;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT: u32 = 0x8DE1;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS: u32 = 0x8A2C;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS: u32 = 0x8DDF;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB: u32 = 0x8DDF;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT: u32 = 0x8DDF;
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB: u32 = 0x8DDD;
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT: u32 = 0x8DDD;
pub const GL_MAX_HEIGHT: u32 = 0x827F;
pub const GL_MAX_IMAGE_SAMPLES: u32 = 0x906D;
pub const GL_MAX_IMAGE_SAMPLES_EXT: u32 = 0x906D;
pub const GL_MAX_IMAGE_UNITS: u32 = 0x8F38;
pub const GL_MAX_IMAGE_UNITS_EXT: u32 = 0x8F38;
pub const GL_MAX_INTEGER_SAMPLES: u32 = 0x9110;
pub const GL_MAX_LABEL_LENGTH: u32 = 0x82E8;
pub const GL_MAX_LAYERS: u32 = 0x8281;
pub const GL_MAX_LGPU_GPUS_NVX: u32 = 0x92BA;
pub const GL_MAX_MAP_TESSELLATION_NV: u32 = 0x86D6;
pub const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB: u32 = 0x8841;
pub const GL_MAX_MESH_ATOMIC_COUNTERS_NV: u32 = 0x8E65;
pub const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV: u32 = 0x8E64;
pub const GL_MAX_MESH_IMAGE_UNIFORMS_NV: u32 = 0x8E62;
pub const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV: u32 = 0x9539;
pub const GL_MAX_MESH_OUTPUT_VERTICES_NV: u32 = 0x9538;
pub const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV: u32 = 0x8E66;
pub const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV: u32 = 0x8E61;
pub const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV: u32 = 0x9536;
pub const GL_MAX_MESH_UNIFORM_BLOCKS_NV: u32 = 0x8E60;
pub const GL_MAX_MESH_UNIFORM_COMPONENTS_NV: u32 = 0x8E63;
pub const GL_MAX_MESH_VIEWS_NV: u32 = 0x9557;
pub const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV: u32 = 0x95A2;
pub const GL_MAX_MESH_WORK_GROUP_SIZE_NV: u32 = 0x953B;
pub const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV: u32 = 0x8E11;
pub const GL_MAX_NAME_LENGTH: u32 = 0x92F6;
pub const GL_MAX_NUM_ACTIVE_VARIABLES: u32 = 0x92F7;
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES: u32 = 0x92F8;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT: u32 = 0x87CA;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT: u32 = 0x87CD;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT: u32 = 0x87CE;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: u32 = 0x87CC;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT: u32 = 0x87CB;
pub const GL_MAX_PALETTE_MATRICES_ARB: u32 = 0x8842;
pub const GL_MAX_PATCH_VERTICES: u32 = 0x8E7D;
pub const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: u32 = 0x8337;
pub const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI: u32 = 0x87F1;
pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB: u32 = 0x88B1;
pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB: u32 = 0x880B;
pub const GL_MAX_PROGRAM_ATTRIBS_ARB: u32 = 0x88AD;
pub const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV: u32 = 0x8908;
pub const GL_MAX_PROGRAM_CALL_DEPTH_NV: u32 = 0x88F5;
pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB: u32 = 0x88B5;
pub const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV: u32 = 0x88F4;
pub const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV: u32 = 0x8DA5;
pub const GL_MAX_PROGRAM_GENERIC_RESULTS_NV: u32 = 0x8DA6;
pub const GL_MAX_PROGRAM_IF_DEPTH_NV: u32 = 0x88F6;
pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB: u32 = 0x88A1;
pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB: u32 = 0x88B4;
pub const GL_MAX_PROGRAM_LOOP_COUNT_NV: u32 = 0x88F8;
pub const GL_MAX_PROGRAM_LOOP_DEPTH_NV: u32 = 0x88F7;
pub const GL_MAX_PROGRAM_MATRICES_ARB: u32 = 0x862F;
pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB: u32 = 0x862E;
pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: u32 = 0x88B3;
pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: u32 = 0x880E;
pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB: u32 = 0x88AF;
pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB: u32 = 0x88A3;
pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB: u32 = 0x88AB;
pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB: u32 = 0x88A7;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: u32 = 0x8810;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: u32 = 0x880F;
pub const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV: u32 = 0x8C27;
pub const GL_MAX_PROGRAM_PARAMETERS_ARB: u32 = 0x88A9;
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV: u32 = 0x8DA0;
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV: u32 = 0x8DA1;
pub const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV: u32 = 0x86D8;
pub const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV: u32 = 0x8909;
pub const GL_MAX_PROGRAM_SUBROUTINE_NUM_NV: u32 = 0x8F45;
pub const GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV: u32 = 0x8F44;
pub const GL_MAX_PROGRAM_TEMPORARIES_ARB: u32 = 0x88A5;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET: u32 = 0x8905;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_EXT: u32 = 0x8905;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_NV: u32 = 0x8905;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB: u32 = 0x8F9F;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: u32 = 0x8E5F;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV: u32 = 0x8E5F;
pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB: u32 = 0x880D;
pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB: u32 = 0x880C;
pub const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV: u32 = 0x8C28;
pub const GL_MAX_RASTER_SAMPLES_EXT: u32 = 0x9329;
pub const GL_MAX_RATIONAL_EVAL_ORDER_NV: u32 = 0x86D7;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE: u32 = 0x84F8;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB: u32 = 0x84F8;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV: u32 = 0x84F8;
pub const GL_MAX_RENDERBUFFER_SIZE: u32 = 0x84E8;
pub const GL_MAX_RENDERBUFFER_SIZE_EXT: u32 = 0x84E8;
pub const GL_MAX_SAMPLES: u32 = 0x8D57;
pub const GL_MAX_SAMPLES_EXT: u32 = 0x8D57;
pub const GL_MAX_SAMPLE_MASK_WORDS: u32 = 0x8E59;
pub const GL_MAX_SAMPLE_MASK_WORDS_NV: u32 = 0x8E59;
pub const GL_MAX_SERVER_WAIT_TIMEOUT: u32 = 0x9111;
pub const GL_MAX_SHADER_BUFFER_ADDRESS_NV: u32 = 0x8F35;
pub const GL_MAX_SHADER_COMPILER_THREADS_ARB: u32 = 0x91B0;
pub const GL_MAX_SHADER_COMPILER_THREADS_KHR: u32 = 0x91B0;
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE: u32 = 0x90DE;
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS: u32 = 0x90DD;
pub const GL_MAX_SHININESS_NV: u32 = 0x8504;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD: u32 = 0x9199;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB: u32 = 0x9199;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS: u32 = 0x919A;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB: u32 = 0x919A;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_AMD: u32 = 0x9198;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_ARB: u32 = 0x9198;
pub const GL_MAX_SPOT_EXPONENT_NV: u32 = 0x8505;
pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV: u32 = 0x9349;
pub const GL_MAX_SUBROUTINES: u32 = 0x8DE7;
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS: u32 = 0x8DE8;
pub const GL_MAX_TASK_ATOMIC_COUNTERS_NV: u32 = 0x8E6D;
pub const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV: u32 = 0x8E6C;
pub const GL_MAX_TASK_IMAGE_UNIFORMS_NV: u32 = 0x8E6A;
pub const GL_MAX_TASK_OUTPUT_COUNT_NV: u32 = 0x953A;
pub const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV: u32 = 0x8E6E;
pub const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV: u32 = 0x8E69;
pub const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV: u32 = 0x9537;
pub const GL_MAX_TASK_UNIFORM_BLOCKS_NV: u32 = 0x8E68;
pub const GL_MAX_TASK_UNIFORM_COMPONENTS_NV: u32 = 0x8E6B;
pub const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV: u32 = 0x95A3;
pub const GL_MAX_TASK_WORK_GROUP_SIZE_NV: u32 = 0x953C;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS: u32 = 0x92D3;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS: u32 = 0x92CD;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS: u32 = 0x90CB;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS: u32 = 0x886C;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS: u32 = 0x8E83;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS: u32 = 0x90D8;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: u32 = 0x8E81;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: u32 = 0x8E85;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS: u32 = 0x8E89;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS: u32 = 0x8E7F;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS: u32 = 0x92D4;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS: u32 = 0x92CE;
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS: u32 = 0x90CC;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS: u32 = 0x886D;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: u32 = 0x8E86;
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS: u32 = 0x90D9;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: u32 = 0x8E82;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS: u32 = 0x8E8A;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: u32 = 0x8E80;
pub const GL_MAX_TESS_GEN_LEVEL: u32 = 0x8E7E;
pub const GL_MAX_TESS_PATCH_COMPONENTS: u32 = 0x8E84;
pub const GL_MAX_TEXTURE_BUFFER_SIZE: u32 = 0x8C2B;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_ARB: u32 = 0x8C2B;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT: u32 = 0x8C2B;
pub const GL_MAX_TEXTURE_COORDS_ARB: u32 = 0x8871;
pub const GL_MAX_TEXTURE_COORDS_NV: u32 = 0x8871;
pub const GL_MAX_TEXTURE_IMAGE_UNITS: u32 = 0x8872;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB: u32 = 0x8872;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_NV: u32 = 0x8872;
pub const GL_MAX_TEXTURE_LOD_BIAS: u32 = 0x84FD;
pub const GL_MAX_TEXTURE_LOD_BIAS_EXT: u32 = 0x84FD;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY: u32 = 0x84FF;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 0x84FF;
pub const GL_MAX_TEXTURE_SIZE: u32 = 0x0D33;
pub const GL_MAX_TEXTURE_UNITS_ARB: u32 = 0x84E2;
pub const GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV: u32 = 0x95B6;
pub const GL_MAX_TRACK_MATRICES_NV: u32 = 0x862F;
pub const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV: u32 = 0x862E;
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS: u32 = 0x8E70;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: u32 = 0x8C8A;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT: u32 = 0x8C8A;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV: u32 = 0x8C8A;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: u32 = 0x8C8B;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT: u32 = 0x8C8B;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV: u32 = 0x8C8B;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: u32 = 0x8C80;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT: u32 = 0x8C80;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV: u32 = 0x8C80;
pub const GL_MAX_UNIFORM_BLOCK_SIZE: u32 = 0x8A30;
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS: u32 = 0x8A2F;
pub const GL_MAX_UNIFORM_LOCATIONS: u32 = 0x826E;
pub const GL_MAX_VARYING_COMPONENTS: u32 = 0x8B4B;
pub const GL_MAX_VARYING_COMPONENTS_EXT: u32 = 0x8B4B;
pub const GL_MAX_VARYING_FLOATS: u32 = 0x8B4B;
pub const GL_MAX_VARYING_FLOATS_ARB: u32 = 0x8B4B;
pub const GL_MAX_VARYING_VECTORS: u32 = 0x8DFC;
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV: u32 = 0x8520;
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS: u32 = 0x92D2;
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS: u32 = 0x92CC;
pub const GL_MAX_VERTEX_ATTRIBS: u32 = 0x8869;
pub const GL_MAX_VERTEX_ATTRIBS_ARB: u32 = 0x8869;
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS: u32 = 0x82DA;
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET: u32 = 0x82D9;
pub const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT: u32 = 0x8DE2;
pub const GL_MAX_VERTEX_HINT_PGI: u32 = 0x1A22D;
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS: u32 = 0x90CA;
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS: u32 = 0x9122;
pub const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT: u32 = 0x87C5;
pub const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT: u32 = 0x87C7;
pub const GL_MAX_VERTEX_SHADER_LOCALS_EXT: u32 = 0x87C9;
pub const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: u32 = 0x87C8;
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS: u32 = 0x90D6;
pub const GL_MAX_VERTEX_SHADER_VARIANTS_EXT: u32 = 0x87C6;
pub const GL_MAX_VERTEX_STREAMS: u32 = 0x8E71;
pub const GL_MAX_VERTEX_STREAMS_ATI: u32 = 0x876B;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: u32 = 0x8B4C;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB: u32 = 0x8B4C;
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS: u32 = 0x8A2B;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS: u32 = 0x8B4A;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB: u32 = 0x8B4A;
pub const GL_MAX_VERTEX_UNIFORM_VECTORS: u32 = 0x8DFB;
pub const GL_MAX_VERTEX_UNITS_ARB: u32 = 0x86A4;
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB: u32 = 0x8DDE;
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT: u32 = 0x8DDE;
pub const GL_MAX_VIEWPORTS: u32 = 0x825B;
pub const GL_MAX_VIEWPORT_DIMS: u32 = 0x0D3A;
pub const GL_MAX_VIEWS_OVR: u32 = 0x9631;
pub const GL_MAX_WIDTH: u32 = 0x827E;
pub const GL_MAX_WINDOW_RECTANGLES_EXT: u32 = 0x8F14;
pub const GL_MEDIUM_FLOAT: u32 = 0x8DF1;
pub const GL_MEDIUM_INT: u32 = 0x8DF4;
pub const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV: u32 = 0x95A6;
pub const GL_MEMORY_ATTACHABLE_NV: u32 = 0x95A8;
pub const GL_MEMORY_ATTACHABLE_SIZE_NV: u32 = 0x95A7;
pub const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV: u32 = 0x9543;
pub const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV: u32 = 0x92DF;
pub const GL_MESH_OUTPUT_TYPE_NV: u32 = 0x957B;
pub const GL_MESH_PRIMITIVES_OUT_NV: u32 = 0x957A;
pub const GL_MESH_SHADER_BIT_NV: u32 = 0x00000040;
pub const GL_MESH_SHADER_NV: u32 = 0x9559;
pub const GL_MESH_SUBROUTINE_NV: u32 = 0x957C;
pub const GL_MESH_SUBROUTINE_UNIFORM_NV: u32 = 0x957E;
pub const GL_MESH_VERTICES_OUT_NV: u32 = 0x9579;
pub const GL_MESH_WORK_GROUP_SIZE_NV: u32 = 0x953E;
pub const GL_MIN: u32 = 0x8007;
pub const GL_MINMAX_EXT: u32 = 0x802E;
pub const GL_MINMAX_FORMAT_EXT: u32 = 0x802F;
pub const GL_MINMAX_SINK_EXT: u32 = 0x8030;
pub const GL_MINOR_VERSION: u32 = 0x821C;
pub const GL_MINUS_CLAMPED_NV: u32 = 0x92B3;
pub const GL_MINUS_NV: u32 = 0x929F;
pub const GL_MIN_EXT: u32 = 0x8007;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET: u32 = 0x8E5B;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV: u32 = 0x8E5B;
pub const GL_MIN_LOD_WARNING_AMD: u32 = 0x919C;
pub const GL_MIN_MAP_BUFFER_ALIGNMENT: u32 = 0x90BC;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET: u32 = 0x8904;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_EXT: u32 = 0x8904;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_NV: u32 = 0x8904;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: u32 = 0x8E5E;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV: u32 = 0x8E5E;
pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB: u32 = 0x8C37;
pub const GL_MIN_SPARSE_LEVEL_AMD: u32 = 0x919B;
pub const GL_MIPMAP: u32 = 0x8293;
pub const GL_MIRRORED_REPEAT: u32 = 0x8370;
pub const GL_MIRRORED_REPEAT_ARB: u32 = 0x8370;
pub const GL_MIRRORED_REPEAT_IBM: u32 = 0x8370;
pub const GL_MIRROR_CLAMP_ATI: u32 = 0x8742;
pub const GL_MIRROR_CLAMP_EXT: u32 = 0x8742;
pub const GL_MIRROR_CLAMP_TO_BORDER_EXT: u32 = 0x8912;
pub const GL_MIRROR_CLAMP_TO_EDGE: u32 = 0x8743;
pub const GL_MIRROR_CLAMP_TO_EDGE_ATI: u32 = 0x8743;
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT: u32 = 0x8743;
pub const GL_MITER_REVERT_NV: u32 = 0x90A7;
pub const GL_MITER_TRUNCATE_NV: u32 = 0x90A8;
pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV: u32 = 0x932F;
pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV: u32 = 0x9330;
pub const GL_MODELVIEW0_ARB: u32 = 0x1700;
pub const GL_MODELVIEW0_EXT: u32 = 0x1700;
pub const GL_MODELVIEW0_MATRIX_EXT: u32 = 0x0BA6;
pub const GL_MODELVIEW0_STACK_DEPTH_EXT: u32 = 0x0BA3;
pub const GL_MODELVIEW10_ARB: u32 = 0x872A;
pub const GL_MODELVIEW11_ARB: u32 = 0x872B;
pub const GL_MODELVIEW12_ARB: u32 = 0x872C;
pub const GL_MODELVIEW13_ARB: u32 = 0x872D;
pub const GL_MODELVIEW14_ARB: u32 = 0x872E;
pub const GL_MODELVIEW15_ARB: u32 = 0x872F;
pub const GL_MODELVIEW16_ARB: u32 = 0x8730;
pub const GL_MODELVIEW17_ARB: u32 = 0x8731;
pub const GL_MODELVIEW18_ARB: u32 = 0x8732;
pub const GL_MODELVIEW19_ARB: u32 = 0x8733;
pub const GL_MODELVIEW1_ARB: u32 = 0x850A;
pub const GL_MODELVIEW1_EXT: u32 = 0x850A;
pub const GL_MODELVIEW1_MATRIX_EXT: u32 = 0x8506;
pub const GL_MODELVIEW1_STACK_DEPTH_EXT: u32 = 0x8502;
pub const GL_MODELVIEW20_ARB: u32 = 0x8734;
pub const GL_MODELVIEW21_ARB: u32 = 0x8735;
pub const GL_MODELVIEW22_ARB: u32 = 0x8736;
pub const GL_MODELVIEW23_ARB: u32 = 0x8737;
pub const GL_MODELVIEW24_ARB: u32 = 0x8738;
pub const GL_MODELVIEW25_ARB: u32 = 0x8739;
pub const GL_MODELVIEW26_ARB: u32 = 0x873A;
pub const GL_MODELVIEW27_ARB: u32 = 0x873B;
pub const GL_MODELVIEW28_ARB: u32 = 0x873C;
pub const GL_MODELVIEW29_ARB: u32 = 0x873D;
pub const GL_MODELVIEW2_ARB: u32 = 0x8722;
pub const GL_MODELVIEW30_ARB: u32 = 0x873E;
pub const GL_MODELVIEW31_ARB: u32 = 0x873F;
pub const GL_MODELVIEW3_ARB: u32 = 0x8723;
pub const GL_MODELVIEW4_ARB: u32 = 0x8724;
pub const GL_MODELVIEW5_ARB: u32 = 0x8725;
pub const GL_MODELVIEW6_ARB: u32 = 0x8726;
pub const GL_MODELVIEW7_ARB: u32 = 0x8727;
pub const GL_MODELVIEW8_ARB: u32 = 0x8728;
pub const GL_MODELVIEW9_ARB: u32 = 0x8729;
pub const GL_MODELVIEW_PROJECTION_NV: u32 = 0x8629;
pub const GL_MODULATE_ADD_ATI: u32 = 0x8744;
pub const GL_MODULATE_SIGNED_ADD_ATI: u32 = 0x8745;
pub const GL_MODULATE_SUBTRACT_ATI: u32 = 0x8746;
pub const GL_MOVE_TO_CONTINUES_NV: u32 = 0x90B6;
pub const GL_MOVE_TO_NV: u32 = 0x02;
pub const GL_MOVE_TO_RESETS_NV: u32 = 0x90B5;
pub const GL_MOV_ATI: u32 = 0x8961;
pub const GL_MULTICAST_GPUS_NV: u32 = 0x92BA;
pub const GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV: u32 = 0x9549;
pub const GL_MULTIPLY_KHR: u32 = 0x9294;
pub const GL_MULTIPLY_NV: u32 = 0x9294;
pub const GL_MULTISAMPLE: u32 = 0x809D;
pub const GL_MULTISAMPLES_NV: u32 = 0x9371;
pub const GL_MULTISAMPLE_3DFX: u32 = 0x86B2;
pub const GL_MULTISAMPLE_ARB: u32 = 0x809D;
pub const GL_MULTISAMPLE_BIT_3DFX: u32 = 0x20000000;
pub const GL_MULTISAMPLE_BIT_ARB: u32 = 0x20000000;
pub const GL_MULTISAMPLE_BIT_EXT: u32 = 0x20000000;
pub const GL_MULTISAMPLE_COVERAGE_MODES_NV: u32 = 0x8E12;
pub const GL_MULTISAMPLE_EXT: u32 = 0x809D;
pub const GL_MULTISAMPLE_FILTER_HINT_NV: u32 = 0x8534;
pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB: u32 = 0x9382;
pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB: u32 = 0x9381;
pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT: u32 = 0x932B;
pub const GL_MULTISAMPLE_SGIS: u32 = 0x809D;
pub const GL_MUL_ATI: u32 = 0x8964;
pub const GL_MVP_MATRIX_EXT: u32 = 0x87E3;
pub const GL_NAMED_STRING_LENGTH_ARB: u32 = 0x8DE9;
pub const GL_NAMED_STRING_TYPE_ARB: u32 = 0x8DEA;
pub const GL_NAME_LENGTH: u32 = 0x92F9;
pub const GL_NAND: u32 = 0x150E;
pub const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI: u32 = 0x1A203;
pub const GL_NATIVE_GRAPHICS_END_HINT_PGI: u32 = 0x1A204;
pub const GL_NATIVE_GRAPHICS_HANDLE_PGI: u32 = 0x1A202;
pub const GL_NEAREST: u32 = 0x2600;
pub const GL_NEAREST_CLIPMAP_LINEAR_SGIX: u32 = 0x844E;
pub const GL_NEAREST_CLIPMAP_NEAREST_SGIX: u32 = 0x844D;
pub const GL_NEAREST_MIPMAP_LINEAR: u32 = 0x2702;
pub const GL_NEAREST_MIPMAP_NEAREST: u32 = 0x2700;
pub const GL_NEGATE_BIT_ATI: u32 = 0x00000004;
pub const GL_NEGATIVE_ONE_EXT: u32 = 0x87DF;
pub const GL_NEGATIVE_ONE_TO_ONE: u32 = 0x935E;
pub const GL_NEGATIVE_W_EXT: u32 = 0x87DC;
pub const GL_NEGATIVE_X_EXT: u32 = 0x87D9;
pub const GL_NEGATIVE_Y_EXT: u32 = 0x87DA;
pub const GL_NEGATIVE_Z_EXT: u32 = 0x87DB;
pub const GL_NEVER: u32 = 0x0200;
pub const GL_NEXT_BUFFER_NV: i32 = -2;
pub const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV: u32 = 0x9025;
pub const GL_NICEST: u32 = 0x1102;
pub const GL_NONE: u32 = 0;
pub const GL_NOOP: u32 = 0x1505;
pub const GL_NOP_COMMAND_NV: u32 = 0x0001;
pub const GL_NOR: u32 = 0x1508;
pub const GL_NORMALIZED_RANGE_EXT: u32 = 0x87E0;
pub const GL_NORMAL_ARRAY_ADDRESS_NV: u32 = 0x8F22;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8897;
pub const GL_NORMAL_ARRAY_COUNT_EXT: u32 = 0x8080;
pub const GL_NORMAL_ARRAY_EXT: u32 = 0x8075;
pub const GL_NORMAL_ARRAY_LENGTH_NV: u32 = 0x8F2C;
pub const GL_NORMAL_ARRAY_LIST_IBM: u32 = 103071;
pub const GL_NORMAL_ARRAY_LIST_STRIDE_IBM: u32 = 103081;
pub const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL: u32 = 0x83F6;
pub const GL_NORMAL_ARRAY_POINTER_EXT: u32 = 0x808F;
pub const GL_NORMAL_ARRAY_STRIDE_EXT: u32 = 0x807F;
pub const GL_NORMAL_ARRAY_TYPE_EXT: u32 = 0x807E;
pub const GL_NORMAL_BIT_PGI: u32 = 0x08000000;
pub const GL_NORMAL_MAP_ARB: u32 = 0x8511;
pub const GL_NORMAL_MAP_EXT: u32 = 0x8511;
pub const GL_NORMAL_MAP_NV: u32 = 0x8511;
pub const GL_NOTEQUAL: u32 = 0x0205;
pub const GL_NO_ERROR: u32 = 0;
pub const GL_NO_RESET_NOTIFICATION: u32 = 0x8261;
pub const GL_NO_RESET_NOTIFICATION_ARB: u32 = 0x8261;
pub const GL_NUM_ACTIVE_VARIABLES: u32 = 0x9304;
pub const GL_NUM_COMPATIBLE_SUBROUTINES: u32 = 0x8E4A;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS: u32 = 0x86A2;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB: u32 = 0x86A2;
pub const GL_NUM_DEVICE_UUIDS_EXT: u32 = 0x9596;
pub const GL_NUM_EXTENSIONS: u32 = 0x821D;
pub const GL_NUM_FILL_STREAMS_NV: u32 = 0x8E29;
pub const GL_NUM_FRAGMENT_CONSTANTS_ATI: u32 = 0x896F;
pub const GL_NUM_FRAGMENT_REGISTERS_ATI: u32 = 0x896E;
pub const GL_NUM_GENERAL_COMBINERS_NV: u32 = 0x854E;
pub const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI: u32 = 0x8973;
pub const GL_NUM_INSTRUCTIONS_PER_PASS_ATI: u32 = 0x8971;
pub const GL_NUM_INSTRUCTIONS_TOTAL_ATI: u32 = 0x8972;
pub const GL_NUM_LOOPBACK_COMPONENTS_ATI: u32 = 0x8974;
pub const GL_NUM_PASSES_ATI: u32 = 0x8970;
pub const GL_NUM_PROGRAM_BINARY_FORMATS: u32 = 0x87FE;
pub const GL_NUM_SAMPLE_COUNTS: u32 = 0x9380;
pub const GL_NUM_SHADER_BINARY_FORMATS: u32 = 0x8DF9;
pub const GL_NUM_SPARSE_LEVELS_ARB: u32 = 0x91AA;
pub const GL_NUM_SPIR_V_EXTENSIONS: u32 = 0x9554;
pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD: u32 = 0x91B6;
pub const GL_NUM_TILING_TYPES_EXT: u32 = 0x9582;
pub const GL_NUM_VIDEO_CAPTURE_STREAMS_NV: u32 = 0x9024;
pub const GL_NUM_VIRTUAL_PAGE_SIZES_ARB: u32 = 0x91A8;
pub const GL_NUM_WINDOW_RECTANGLES_EXT: u32 = 0x8F15;
pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB: u32 = 0x8B89;
pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB: u32 = 0x8B8A;
pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB: u32 = 0x8B86;
pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB: u32 = 0x8B87;
pub const GL_OBJECT_ATTACHED_OBJECTS_ARB: u32 = 0x8B85;
pub const GL_OBJECT_BUFFER_SIZE_ATI: u32 = 0x8764;
pub const GL_OBJECT_BUFFER_USAGE_ATI: u32 = 0x8765;
pub const GL_OBJECT_COMPILE_STATUS_ARB: u32 = 0x8B81;
pub const GL_OBJECT_DELETE_STATUS_ARB: u32 = 0x8B80;
pub const GL_OBJECT_DISTANCE_TO_LINE_SGIS: u32 = 0x81F3;
pub const GL_OBJECT_DISTANCE_TO_POINT_SGIS: u32 = 0x81F1;
pub const GL_OBJECT_INFO_LOG_LENGTH_ARB: u32 = 0x8B84;
pub const GL_OBJECT_LINE_SGIS: u32 = 0x81F7;
pub const GL_OBJECT_LINK_STATUS_ARB: u32 = 0x8B82;
pub const GL_OBJECT_POINT_SGIS: u32 = 0x81F5;
pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB: u32 = 0x8B88;
pub const GL_OBJECT_SUBTYPE_ARB: u32 = 0x8B4F;
pub const GL_OBJECT_TYPE: u32 = 0x9112;
pub const GL_OBJECT_TYPE_ARB: u32 = 0x8B4E;
pub const GL_OBJECT_VALIDATE_STATUS_ARB: u32 = 0x8B83;
pub const GL_OCCLUSION_QUERY_EVENT_MASK_AMD: u32 = 0x874F;
pub const GL_OCCLUSION_TEST_HP: u32 = 0x8165;
pub const GL_OCCLUSION_TEST_RESULT_HP: u32 = 0x8166;
pub const GL_OFFSET: u32 = 0x92FC;
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV: u32 = 0x8856;
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV: u32 = 0x8857;
pub const GL_OFFSET_HILO_TEXTURE_2D_NV: u32 = 0x8854;
pub const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV: u32 = 0x8855;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV: u32 = 0x8850;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV: u32 = 0x8851;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV: u32 = 0x8852;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV: u32 = 0x8853;
pub const GL_OFFSET_TEXTURE_2D_BIAS_NV: u32 = 0x86E3;
pub const GL_OFFSET_TEXTURE_2D_MATRIX_NV: u32 = 0x86E1;
pub const GL_OFFSET_TEXTURE_2D_NV: u32 = 0x86E8;
pub const GL_OFFSET_TEXTURE_2D_SCALE_NV: u32 = 0x86E2;
pub const GL_OFFSET_TEXTURE_BIAS_NV: u32 = 0x86E3;
pub const GL_OFFSET_TEXTURE_MATRIX_NV: u32 = 0x86E1;
pub const GL_OFFSET_TEXTURE_RECTANGLE_NV: u32 = 0x864C;
pub const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV: u32 = 0x864D;
pub const GL_OFFSET_TEXTURE_SCALE_NV: u32 = 0x86E2;
pub const GL_ONE: u32 = 1;
pub const GL_ONE_EXT: u32 = 0x87DE;
pub const GL_ONE_MINUS_CONSTANT_ALPHA: u32 = 0x8004;
pub const GL_ONE_MINUS_CONSTANT_ALPHA_EXT: u32 = 0x8004;
pub const GL_ONE_MINUS_CONSTANT_COLOR: u32 = 0x8002;
pub const GL_ONE_MINUS_CONSTANT_COLOR_EXT: u32 = 0x8002;
pub const GL_ONE_MINUS_DST_ALPHA: u32 = 0x0305;
pub const GL_ONE_MINUS_DST_COLOR: u32 = 0x0307;
pub const GL_ONE_MINUS_SRC1_ALPHA: u32 = 0x88FB;
pub const GL_ONE_MINUS_SRC1_COLOR: u32 = 0x88FA;
pub const GL_ONE_MINUS_SRC_ALPHA: u32 = 0x0303;
pub const GL_ONE_MINUS_SRC_COLOR: u32 = 0x0301;
pub const GL_OPERAND0_ALPHA_ARB: u32 = 0x8598;
pub const GL_OPERAND0_ALPHA_EXT: u32 = 0x8598;
pub const GL_OPERAND0_RGB_ARB: u32 = 0x8590;
pub const GL_OPERAND0_RGB_EXT: u32 = 0x8590;
pub const GL_OPERAND1_ALPHA_ARB: u32 = 0x8599;
pub const GL_OPERAND1_ALPHA_EXT: u32 = 0x8599;
pub const GL_OPERAND1_RGB_ARB: u32 = 0x8591;
pub const GL_OPERAND1_RGB_EXT: u32 = 0x8591;
pub const GL_OPERAND2_ALPHA_ARB: u32 = 0x859A;
pub const GL_OPERAND2_ALPHA_EXT: u32 = 0x859A;
pub const GL_OPERAND2_RGB_ARB: u32 = 0x8592;
pub const GL_OPERAND2_RGB_EXT: u32 = 0x8592;
pub const GL_OPERAND3_ALPHA_NV: u32 = 0x859B;
pub const GL_OPERAND3_RGB_NV: u32 = 0x8593;
pub const GL_OPTIMAL_TILING_EXT: u32 = 0x9584;
pub const GL_OP_ADD_EXT: u32 = 0x8787;
pub const GL_OP_CLAMP_EXT: u32 = 0x878E;
pub const GL_OP_CROSS_PRODUCT_EXT: u32 = 0x8797;
pub const GL_OP_DOT3_EXT: u32 = 0x8784;
pub const GL_OP_DOT4_EXT: u32 = 0x8785;
pub const GL_OP_EXP_BASE_2_EXT: u32 = 0x8791;
pub const GL_OP_FLOOR_EXT: u32 = 0x878F;
pub const GL_OP_FRAC_EXT: u32 = 0x8789;
pub const GL_OP_INDEX_EXT: u32 = 0x8782;
pub const GL_OP_LOG_BASE_2_EXT: u32 = 0x8792;
pub const GL_OP_MADD_EXT: u32 = 0x8788;
pub const GL_OP_MAX_EXT: u32 = 0x878A;
pub const GL_OP_MIN_EXT: u32 = 0x878B;
pub const GL_OP_MOV_EXT: u32 = 0x8799;
pub const GL_OP_MULTIPLY_MATRIX_EXT: u32 = 0x8798;
pub const GL_OP_MUL_EXT: u32 = 0x8786;
pub const GL_OP_NEGATE_EXT: u32 = 0x8783;
pub const GL_OP_POWER_EXT: u32 = 0x8793;
pub const GL_OP_RECIP_EXT: u32 = 0x8794;
pub const GL_OP_RECIP_SQRT_EXT: u32 = 0x8795;
pub const GL_OP_ROUND_EXT: u32 = 0x8790;
pub const GL_OP_SET_GE_EXT: u32 = 0x878C;
pub const GL_OP_SET_LT_EXT: u32 = 0x878D;
pub const GL_OP_SUB_EXT: u32 = 0x8796;
pub const GL_OR: u32 = 0x1507;
pub const GL_OR_INVERTED: u32 = 0x150D;
pub const GL_OR_REVERSE: u32 = 0x150B;
pub const GL_OUTPUT_COLOR0_EXT: u32 = 0x879B;
pub const GL_OUTPUT_COLOR1_EXT: u32 = 0x879C;
pub const GL_OUTPUT_FOG_EXT: u32 = 0x87BD;
pub const GL_OUTPUT_TEXTURE_COORD0_EXT: u32 = 0x879D;
pub const GL_OUTPUT_TEXTURE_COORD10_EXT: u32 = 0x87A7;
pub const GL_OUTPUT_TEXTURE_COORD11_EXT: u32 = 0x87A8;
pub const GL_OUTPUT_TEXTURE_COORD12_EXT: u32 = 0x87A9;
pub const GL_OUTPUT_TEXTURE_COORD13_EXT: u32 = 0x87AA;
pub const GL_OUTPUT_TEXTURE_COORD14_EXT: u32 = 0x87AB;
pub const GL_OUTPUT_TEXTURE_COORD15_EXT: u32 = 0x87AC;
pub const GL_OUTPUT_TEXTURE_COORD16_EXT: u32 = 0x87AD;
pub const GL_OUTPUT_TEXTURE_COORD17_EXT: u32 = 0x87AE;
pub const GL_OUTPUT_TEXTURE_COORD18_EXT: u32 = 0x87AF;
pub const GL_OUTPUT_TEXTURE_COORD19_EXT: u32 = 0x87B0;
pub const GL_OUTPUT_TEXTURE_COORD1_EXT: u32 = 0x879E;
pub const GL_OUTPUT_TEXTURE_COORD20_EXT: u32 = 0x87B1;
pub const GL_OUTPUT_TEXTURE_COORD21_EXT: u32 = 0x87B2;
pub const GL_OUTPUT_TEXTURE_COORD22_EXT: u32 = 0x87B3;
pub const GL_OUTPUT_TEXTURE_COORD23_EXT: u32 = 0x87B4;
pub const GL_OUTPUT_TEXTURE_COORD24_EXT: u32 = 0x87B5;
pub const GL_OUTPUT_TEXTURE_COORD25_EXT: u32 = 0x87B6;
pub const GL_OUTPUT_TEXTURE_COORD26_EXT: u32 = 0x87B7;
pub const GL_OUTPUT_TEXTURE_COORD27_EXT: u32 = 0x87B8;
pub const GL_OUTPUT_TEXTURE_COORD28_EXT: u32 = 0x87B9;
pub const GL_OUTPUT_TEXTURE_COORD29_EXT: u32 = 0x87BA;
pub const GL_OUTPUT_TEXTURE_COORD2_EXT: u32 = 0x879F;
pub const GL_OUTPUT_TEXTURE_COORD30_EXT: u32 = 0x87BB;
pub const GL_OUTPUT_TEXTURE_COORD31_EXT: u32 = 0x87BC;
pub const GL_OUTPUT_TEXTURE_COORD3_EXT: u32 = 0x87A0;
pub const GL_OUTPUT_TEXTURE_COORD4_EXT: u32 = 0x87A1;
pub const GL_OUTPUT_TEXTURE_COORD5_EXT: u32 = 0x87A2;
pub const GL_OUTPUT_TEXTURE_COORD6_EXT: u32 = 0x87A3;
pub const GL_OUTPUT_TEXTURE_COORD7_EXT: u32 = 0x87A4;
pub const GL_OUTPUT_TEXTURE_COORD8_EXT: u32 = 0x87A5;
pub const GL_OUTPUT_TEXTURE_COORD9_EXT: u32 = 0x87A6;
pub const GL_OUTPUT_VERTEX_EXT: u32 = 0x879A;
pub const GL_OUT_OF_MEMORY: u32 = 0x0505;
pub const GL_OVERLAY_KHR: u32 = 0x9296;
pub const GL_OVERLAY_NV: u32 = 0x9296;
pub const GL_PACK_ALIGNMENT: u32 = 0x0D05;
pub const GL_PACK_CMYK_HINT_EXT: u32 = 0x800E;
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH: u32 = 0x912D;
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT: u32 = 0x912C;
pub const GL_PACK_COMPRESSED_BLOCK_SIZE: u32 = 0x912E;
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH: u32 = 0x912B;
pub const GL_PACK_IMAGE_DEPTH_SGIS: u32 = 0x8131;
pub const GL_PACK_IMAGE_HEIGHT: u32 = 0x806C;
pub const GL_PACK_IMAGE_HEIGHT_EXT: u32 = 0x806C;
pub const GL_PACK_INVERT_MESA: u32 = 0x8758;
pub const GL_PACK_LSB_FIRST: u32 = 0x0D01;
pub const GL_PACK_RESAMPLE_OML: u32 = 0x8984;
pub const GL_PACK_RESAMPLE_SGIX: u32 = 0x842E;
pub const GL_PACK_ROW_BYTES_APPLE: u32 = 0x8A15;
pub const GL_PACK_ROW_LENGTH: u32 = 0x0D02;
pub const GL_PACK_SKIP_IMAGES: u32 = 0x806B;
pub const GL_PACK_SKIP_IMAGES_EXT: u32 = 0x806B;
pub const GL_PACK_SKIP_PIXELS: u32 = 0x0D04;
pub const GL_PACK_SKIP_ROWS: u32 = 0x0D03;
pub const GL_PACK_SKIP_VOLUMES_SGIS: u32 = 0x8130;
pub const GL_PACK_SUBSAMPLE_RATE_SGIX: u32 = 0x85A0;
pub const GL_PACK_SWAP_BYTES: u32 = 0x0D00;
pub const GL_PALETTE4_R5_G6_B5_OES: u32 = 0x8B92;
pub const GL_PALETTE4_RGB5_A1_OES: u32 = 0x8B94;
pub const GL_PALETTE4_RGB8_OES: u32 = 0x8B90;
pub const GL_PALETTE4_RGBA4_OES: u32 = 0x8B93;
pub const GL_PALETTE4_RGBA8_OES: u32 = 0x8B91;
pub const GL_PALETTE8_R5_G6_B5_OES: u32 = 0x8B97;
pub const GL_PALETTE8_RGB5_A1_OES: u32 = 0x8B99;
pub const GL_PALETTE8_RGB8_OES: u32 = 0x8B95;
pub const GL_PALETTE8_RGBA4_OES: u32 = 0x8B98;
pub const GL_PALETTE8_RGBA8_OES: u32 = 0x8B96;
pub const GL_PARALLEL_ARRAYS_INTEL: u32 = 0x83F4;
pub const GL_PARAMETER_BUFFER: u32 = 0x80EE;
pub const GL_PARAMETER_BUFFER_ARB: u32 = 0x80EE;
pub const GL_PARAMETER_BUFFER_BINDING: u32 = 0x80EF;
pub const GL_PARAMETER_BUFFER_BINDING_ARB: u32 = 0x80EF;
pub const GL_PARTIAL_SUCCESS_NV: u32 = 0x902E;
pub const GL_PASS_THROUGH_NV: u32 = 0x86E6;
pub const GL_PATCHES: u32 = 0x000E;
pub const GL_PATCH_DEFAULT_INNER_LEVEL: u32 = 0x8E73;
pub const GL_PATCH_DEFAULT_OUTER_LEVEL: u32 = 0x8E74;
pub const GL_PATCH_VERTICES: u32 = 0x8E72;
pub const GL_PATH_CLIENT_LENGTH_NV: u32 = 0x907F;
pub const GL_PATH_COMMAND_COUNT_NV: u32 = 0x909D;
pub const GL_PATH_COMPUTED_LENGTH_NV: u32 = 0x90A0;
pub const GL_PATH_COORD_COUNT_NV: u32 = 0x909E;
pub const GL_PATH_COVER_DEPTH_FUNC_NV: u32 = 0x90BF;
pub const GL_PATH_DASH_ARRAY_COUNT_NV: u32 = 0x909F;
pub const GL_PATH_DASH_CAPS_NV: u32 = 0x907B;
pub const GL_PATH_DASH_OFFSET_NV: u32 = 0x907E;
pub const GL_PATH_DASH_OFFSET_RESET_NV: u32 = 0x90B4;
pub const GL_PATH_END_CAPS_NV: u32 = 0x9076;
pub const GL_PATH_ERROR_POSITION_NV: u32 = 0x90AB;
pub const GL_PATH_FILL_BOUNDING_BOX_NV: u32 = 0x90A1;
pub const GL_PATH_FILL_COVER_MODE_NV: u32 = 0x9082;
pub const GL_PATH_FILL_MASK_NV: u32 = 0x9081;
pub const GL_PATH_FILL_MODE_NV: u32 = 0x9080;
pub const GL_PATH_FORMAT_PS_NV: u32 = 0x9071;
pub const GL_PATH_FORMAT_SVG_NV: u32 = 0x9070;
pub const GL_PATH_GEN_COEFF_NV: u32 = 0x90B1;
pub const GL_PATH_GEN_COMPONENTS_NV: u32 = 0x90B3;
pub const GL_PATH_GEN_MODE_NV: u32 = 0x90B0;
pub const GL_PATH_INITIAL_DASH_CAP_NV: u32 = 0x907C;
pub const GL_PATH_INITIAL_END_CAP_NV: u32 = 0x9077;
pub const GL_PATH_JOIN_STYLE_NV: u32 = 0x9079;
pub const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV: u32 = 0x0D36;
pub const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV: u32 = 0x0D38;
pub const GL_PATH_MITER_LIMIT_NV: u32 = 0x907A;
pub const GL_PATH_MODELVIEW_MATRIX_NV: u32 = 0x0BA6;
pub const GL_PATH_MODELVIEW_NV: u32 = 0x1700;
pub const GL_PATH_MODELVIEW_STACK_DEPTH_NV: u32 = 0x0BA3;
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV: u32 = 0x908A;
pub const GL_PATH_PROJECTION_MATRIX_NV: u32 = 0x0BA7;
pub const GL_PATH_PROJECTION_NV: u32 = 0x1701;
pub const GL_PATH_PROJECTION_STACK_DEPTH_NV: u32 = 0x0BA4;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV: u32 = 0x90BD;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV: u32 = 0x90BE;
pub const GL_PATH_STENCIL_FUNC_NV: u32 = 0x90B7;
pub const GL_PATH_STENCIL_REF_NV: u32 = 0x90B8;
pub const GL_PATH_STENCIL_VALUE_MASK_NV: u32 = 0x90B9;
pub const GL_PATH_STROKE_BOUNDING_BOX_NV: u32 = 0x90A2;
pub const GL_PATH_STROKE_COVER_MODE_NV: u32 = 0x9083;
pub const GL_PATH_STROKE_MASK_NV: u32 = 0x9084;
pub const GL_PATH_STROKE_WIDTH_NV: u32 = 0x9075;
pub const GL_PATH_TERMINAL_DASH_CAP_NV: u32 = 0x907D;
pub const GL_PATH_TERMINAL_END_CAP_NV: u32 = 0x9078;
pub const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV: u32 = 0x84E3;
pub const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV: u32 = 0x84E4;
pub const GL_PERCENTAGE_AMD: u32 = 0x8BC3;
pub const GL_PERFMON_RESULT_AMD: u32 = 0x8BC6;
pub const GL_PERFMON_RESULT_AVAILABLE_AMD: u32 = 0x8BC4;
pub const GL_PERFMON_RESULT_SIZE_AMD: u32 = 0x8BC5;
pub const GL_PERFORMANCE_MONITOR_AMD: u32 = 0x9152;
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL: u32 = 0x94FC;
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL: u32 = 0x94FB;
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL: u32 = 0x94FA;
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL: u32 = 0x94F8;
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL: u32 = 0x94F9;
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL: u32 = 0x94FF;
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL: u32 = 0x94F1;
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL: u32 = 0x94F2;
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL: u32 = 0x94F0;
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL: u32 = 0x94FE;
pub const GL_PERFQUERY_COUNTER_RAW_INTEL: u32 = 0x94F4;
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL: u32 = 0x94F3;
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL: u32 = 0x94F5;
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL: u32 = 0x83F9;
pub const GL_PERFQUERY_FLUSH_INTEL: u32 = 0x83FA;
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL: u32 = 0x00000001;
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL: u32 = 0x9500;
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL: u32 = 0x94FD;
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL: u32 = 0x00000000;
pub const GL_PERFQUERY_WAIT_INTEL: u32 = 0x83FB;
pub const GL_PERTURB_EXT: u32 = 0x85AE;
pub const GL_PER_GPU_STORAGE_BIT_NV: u32 = 0x0800;
pub const GL_PER_GPU_STORAGE_NV: u32 = 0x9548;
pub const GL_PER_STAGE_CONSTANTS_NV: u32 = 0x8535;
pub const GL_PHONG_HINT_WIN: u32 = 0x80EB;
pub const GL_PHONG_WIN: u32 = 0x80EA;
pub const GL_PINLIGHT_NV: u32 = 0x92A8;
pub const GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD: u32 = 0x91AE;
pub const GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD: u32 = 0x91AF;
pub const GL_PIXEL_BUFFER_BARRIER_BIT: u32 = 0x00000080;
pub const GL_PIXEL_BUFFER_BARRIER_BIT_EXT: u32 = 0x00000080;
pub const GL_PIXEL_COUNTER_BITS_NV: u32 = 0x8864;
pub const GL_PIXEL_COUNT_AVAILABLE_NV: u32 = 0x8867;
pub const GL_PIXEL_COUNT_NV: u32 = 0x8866;
pub const GL_PIXEL_CUBIC_WEIGHT_EXT: u32 = 0x8333;
pub const GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS: u32 = 0x8355;
pub const GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS: u32 = 0x8354;
pub const GL_PIXEL_GROUP_COLOR_SGIS: u32 = 0x8356;
pub const GL_PIXEL_MAG_FILTER_EXT: u32 = 0x8331;
pub const GL_PIXEL_MIN_FILTER_EXT: u32 = 0x8332;
pub const GL_PIXEL_PACK_BUFFER: u32 = 0x88EB;
pub const GL_PIXEL_PACK_BUFFER_ARB: u32 = 0x88EB;
pub const GL_PIXEL_PACK_BUFFER_BINDING: u32 = 0x88ED;
pub const GL_PIXEL_PACK_BUFFER_BINDING_ARB: u32 = 0x88ED;
pub const GL_PIXEL_PACK_BUFFER_BINDING_EXT: u32 = 0x88ED;
pub const GL_PIXEL_PACK_BUFFER_EXT: u32 = 0x88EB;
pub const GL_PIXEL_SUBSAMPLE_2424_SGIX: u32 = 0x85A3;
pub const GL_PIXEL_SUBSAMPLE_4242_SGIX: u32 = 0x85A4;
pub const GL_PIXEL_SUBSAMPLE_4444_SGIX: u32 = 0x85A2;
pub const GL_PIXEL_TEXTURE_SGIS: u32 = 0x8353;
pub const GL_PIXEL_TEX_GEN_MODE_SGIX: u32 = 0x832B;
pub const GL_PIXEL_TEX_GEN_SGIX: u32 = 0x8139;
pub const GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX: u32 = 0x813E;
pub const GL_PIXEL_TILE_CACHE_INCREMENT_SGIX: u32 = 0x813F;
pub const GL_PIXEL_TILE_CACHE_SIZE_SGIX: u32 = 0x8145;
pub const GL_PIXEL_TILE_GRID_DEPTH_SGIX: u32 = 0x8144;
pub const GL_PIXEL_TILE_GRID_HEIGHT_SGIX: u32 = 0x8143;
pub const GL_PIXEL_TILE_GRID_WIDTH_SGIX: u32 = 0x8142;
pub const GL_PIXEL_TILE_HEIGHT_SGIX: u32 = 0x8141;
pub const GL_PIXEL_TILE_WIDTH_SGIX: u32 = 0x8140;
pub const GL_PIXEL_TRANSFORM_2D_EXT: u32 = 0x8330;
pub const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT: u32 = 0x8338;
pub const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: u32 = 0x8336;
pub const GL_PIXEL_UNPACK_BUFFER: u32 = 0x88EC;
pub const GL_PIXEL_UNPACK_BUFFER_ARB: u32 = 0x88EC;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING: u32 = 0x88EF;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB: u32 = 0x88EF;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT: u32 = 0x88EF;
pub const GL_PIXEL_UNPACK_BUFFER_EXT: u32 = 0x88EC;
pub const GL_PLUS_CLAMPED_ALPHA_NV: u32 = 0x92B2;
pub const GL_PLUS_CLAMPED_NV: u32 = 0x92B1;
pub const GL_PLUS_DARKER_NV: u32 = 0x9292;
pub const GL_PLUS_NV: u32 = 0x9291;
pub const GL_PN_TRIANGLES_ATI: u32 = 0x87F0;
pub const GL_PN_TRIANGLES_NORMAL_MODE_ATI: u32 = 0x87F3;
pub const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI: u32 = 0x87F7;
pub const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI: u32 = 0x87F8;
pub const GL_PN_TRIANGLES_POINT_MODE_ATI: u32 = 0x87F2;
pub const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI: u32 = 0x87F6;
pub const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI: u32 = 0x87F5;
pub const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI: u32 = 0x87F4;
pub const GL_POINT: u32 = 0x1B00;
pub const GL_POINTS: u32 = 0x0000;
pub const GL_POINT_DISTANCE_ATTENUATION_ARB: u32 = 0x8129;
pub const GL_POINT_FADE_THRESHOLD_SIZE: u32 = 0x8128;
pub const GL_POINT_FADE_THRESHOLD_SIZE_ARB: u32 = 0x8128;
pub const GL_POINT_FADE_THRESHOLD_SIZE_EXT: u32 = 0x8128;
pub const GL_POINT_FADE_THRESHOLD_SIZE_SGIS: u32 = 0x8128;
pub const GL_POINT_SIZE: u32 = 0x0B11;
pub const GL_POINT_SIZE_GRANULARITY: u32 = 0x0B13;
pub const GL_POINT_SIZE_MAX_ARB: u32 = 0x8127;
pub const GL_POINT_SIZE_MAX_EXT: u32 = 0x8127;
pub const GL_POINT_SIZE_MAX_SGIS: u32 = 0x8127;
pub const GL_POINT_SIZE_MIN_ARB: u32 = 0x8126;
pub const GL_POINT_SIZE_MIN_EXT: u32 = 0x8126;
pub const GL_POINT_SIZE_MIN_SGIS: u32 = 0x8126;
pub const GL_POINT_SIZE_RANGE: u32 = 0x0B12;
pub const GL_POINT_SPRITE_ARB: u32 = 0x8861;
pub const GL_POINT_SPRITE_COORD_ORIGIN: u32 = 0x8CA0;
pub const GL_POINT_SPRITE_NV: u32 = 0x8861;
pub const GL_POINT_SPRITE_R_MODE_NV: u32 = 0x8863;
pub const GL_POLYGON_MODE: u32 = 0x0B40;
pub const GL_POLYGON_OFFSET_BIAS_EXT: u32 = 0x8039;
pub const GL_POLYGON_OFFSET_CLAMP: u32 = 0x8E1B;
pub const GL_POLYGON_OFFSET_CLAMP_EXT: u32 = 0x8E1B;
pub const GL_POLYGON_OFFSET_COMMAND_NV: u32 = 0x000E;
pub const GL_POLYGON_OFFSET_EXT: u32 = 0x8037;
pub const GL_POLYGON_OFFSET_FACTOR: u32 = 0x8038;
pub const GL_POLYGON_OFFSET_FACTOR_EXT: u32 = 0x8038;
pub const GL_POLYGON_OFFSET_FILL: u32 = 0x8037;
pub const GL_POLYGON_OFFSET_LINE: u32 = 0x2A02;
pub const GL_POLYGON_OFFSET_POINT: u32 = 0x2A01;
pub const GL_POLYGON_OFFSET_UNITS: u32 = 0x2A00;
pub const GL_POLYGON_SMOOTH: u32 = 0x0B41;
pub const GL_POLYGON_SMOOTH_HINT: u32 = 0x0C53;
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI: u32 = 0x80BB;
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI: u32 = 0x80B7;
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI: u32 = 0x80BA;
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI: u32 = 0x80B6;
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI: u32 = 0x80D2;
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI: u32 = 0x80B9;
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI: u32 = 0x80B5;
pub const GL_POST_COLOR_MATRIX_RED_BIAS_SGI: u32 = 0x80B8;
pub const GL_POST_COLOR_MATRIX_RED_SCALE_SGI: u32 = 0x80B4;
pub const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT: u32 = 0x8023;
pub const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT: u32 = 0x801F;
pub const GL_POST_CONVOLUTION_BLUE_BIAS_EXT: u32 = 0x8022;
pub const GL_POST_CONVOLUTION_BLUE_SCALE_EXT: u32 = 0x801E;
pub const GL_POST_CONVOLUTION_COLOR_TABLE_SGI: u32 = 0x80D1;
pub const GL_POST_CONVOLUTION_GREEN_BIAS_EXT: u32 = 0x8021;
pub const GL_POST_CONVOLUTION_GREEN_SCALE_EXT: u32 = 0x801D;
pub const GL_POST_CONVOLUTION_RED_BIAS_EXT: u32 = 0x8020;
pub const GL_POST_CONVOLUTION_RED_SCALE_EXT: u32 = 0x801C;
pub const GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: u32 = 0x8162;
pub const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX: u32 = 0x817B;
pub const GL_POST_TEXTURE_FILTER_BIAS_SGIX: u32 = 0x8179;
pub const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX: u32 = 0x817C;
pub const GL_POST_TEXTURE_FILTER_SCALE_SGIX: u32 = 0x817A;
pub const GL_PREFER_DOUBLEBUFFER_HINT_PGI: u32 = 0x1A1F8;
pub const GL_PRESENT_DURATION_NV: u32 = 0x8E2B;
pub const GL_PRESENT_TIME_NV: u32 = 0x8E2A;
pub const GL_PRESERVE_ATI: u32 = 0x8762;
pub const GL_PREVIOUS_ARB: u32 = 0x8578;
pub const GL_PREVIOUS_EXT: u32 = 0x8578;
pub const GL_PREVIOUS_TEXTURE_INPUT_NV: u32 = 0x86E4;
pub const GL_PRIMARY_COLOR_ARB: u32 = 0x8577;
pub const GL_PRIMARY_COLOR_EXT: u32 = 0x8577;
pub const GL_PRIMARY_COLOR_NV: u32 = 0x852C;
pub const GL_PRIMITIVES_GENERATED: u32 = 0x8C87;
pub const GL_PRIMITIVES_GENERATED_EXT: u32 = 0x8C87;
pub const GL_PRIMITIVES_GENERATED_NV: u32 = 0x8C87;
pub const GL_PRIMITIVES_SUBMITTED: u32 = 0x82EF;
pub const GL_PRIMITIVES_SUBMITTED_ARB: u32 = 0x82EF;
pub const GL_PRIMITIVE_BOUNDING_BOX_ARB: u32 = 0x92BE;
pub const GL_PRIMITIVE_ID_NV: u32 = 0x8C7C;
pub const GL_PRIMITIVE_RESTART: u32 = 0x8F9D;
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX: u32 = 0x8D69;
pub const GL_PRIMITIVE_RESTART_INDEX: u32 = 0x8F9E;
pub const GL_PRIMITIVE_RESTART_INDEX_NV: u32 = 0x8559;
pub const GL_PRIMITIVE_RESTART_NV: u32 = 0x8558;
pub const GL_PROGRAM: u32 = 0x82E2;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB: u32 = 0x9341;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV: u32 = 0x9341;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB: u32 = 0x9340;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV: u32 = 0x9340;
pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB: u32 = 0x88B0;
pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB: u32 = 0x8805;
pub const GL_PROGRAM_ATTRIBS_ARB: u32 = 0x88AC;
pub const GL_PROGRAM_ATTRIB_COMPONENTS_NV: u32 = 0x8906;
pub const GL_PROGRAM_BINARY_FORMATS: u32 = 0x87FF;
pub const GL_PROGRAM_BINARY_FORMAT_MESA: u32 = 0x875F;
pub const GL_PROGRAM_BINARY_LENGTH: u32 = 0x8741;
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT: u32 = 0x8257;
pub const GL_PROGRAM_BINDING_ARB: u32 = 0x8677;
pub const GL_PROGRAM_ERROR_POSITION_ARB: u32 = 0x864B;
pub const GL_PROGRAM_ERROR_POSITION_NV: u32 = 0x864B;
pub const GL_PROGRAM_ERROR_STRING_ARB: u32 = 0x8874;
pub const GL_PROGRAM_ERROR_STRING_NV: u32 = 0x8874;
pub const GL_PROGRAM_FORMAT_ARB: u32 = 0x8876;
pub const GL_PROGRAM_FORMAT_ASCII_ARB: u32 = 0x8875;
pub const GL_PROGRAM_INPUT: u32 = 0x92E3;
pub const GL_PROGRAM_INSTRUCTIONS_ARB: u32 = 0x88A0;
pub const GL_PROGRAM_LENGTH_ARB: u32 = 0x8627;
pub const GL_PROGRAM_LENGTH_NV: u32 = 0x8627;
pub const GL_PROGRAM_MATRIX_EXT: u32 = 0x8E2D;
pub const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT: u32 = 0x8E2F;
pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: u32 = 0x88B2;
pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: u32 = 0x8808;
pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB: u32 = 0x88AE;
pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB: u32 = 0x88A2;
pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB: u32 = 0x88AA;
pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB: u32 = 0x88A6;
pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: u32 = 0x880A;
pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: u32 = 0x8809;
pub const GL_PROGRAM_OBJECT_ARB: u32 = 0x8B40;
pub const GL_PROGRAM_OBJECT_EXT: u32 = 0x8B40;
pub const GL_PROGRAM_OUTPUT: u32 = 0x92E4;
pub const GL_PROGRAM_PARAMETERS_ARB: u32 = 0x88A8;
pub const GL_PROGRAM_PARAMETER_NV: u32 = 0x8644;
pub const GL_PROGRAM_PIPELINE: u32 = 0x82E4;
pub const GL_PROGRAM_PIPELINE_BINDING: u32 = 0x825A;
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT: u32 = 0x8A4F;
pub const GL_PROGRAM_POINT_SIZE: u32 = 0x8642;
pub const GL_PROGRAM_POINT_SIZE_ARB: u32 = 0x8642;
pub const GL_PROGRAM_POINT_SIZE_EXT: u32 = 0x8642;
pub const GL_PROGRAM_RESIDENT_NV: u32 = 0x8647;
pub const GL_PROGRAM_RESULT_COMPONENTS_NV: u32 = 0x8907;
pub const GL_PROGRAM_SEPARABLE: u32 = 0x8258;
pub const GL_PROGRAM_STRING_ARB: u32 = 0x8628;
pub const GL_PROGRAM_STRING_NV: u32 = 0x8628;
pub const GL_PROGRAM_TARGET_NV: u32 = 0x8646;
pub const GL_PROGRAM_TEMPORARIES_ARB: u32 = 0x88A4;
pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB: u32 = 0x8807;
pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB: u32 = 0x8806;
pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB: u32 = 0x88B6;
pub const GL_PROTECTED_MEMORY_OBJECT_EXT: u32 = 0x959B;
pub const GL_PROVOKING_VERTEX: u32 = 0x8E4F;
pub const GL_PROVOKING_VERTEX_EXT: u32 = 0x8E4F;
pub const GL_PROXY_COLOR_TABLE_SGI: u32 = 0x80D3;
pub const GL_PROXY_HISTOGRAM_EXT: u32 = 0x8025;
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI: u32 = 0x80D5;
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI: u32 = 0x80D4;
pub const GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: u32 = 0x8163;
pub const GL_PROXY_TEXTURE_1D: u32 = 0x8063;
pub const GL_PROXY_TEXTURE_1D_ARRAY: u32 = 0x8C19;
pub const GL_PROXY_TEXTURE_1D_ARRAY_EXT: u32 = 0x8C19;
pub const GL_PROXY_TEXTURE_1D_EXT: u32 = 0x8063;
pub const GL_PROXY_TEXTURE_1D_STACK_MESAX: u32 = 0x875B;
pub const GL_PROXY_TEXTURE_2D: u32 = 0x8064;
pub const GL_PROXY_TEXTURE_2D_ARRAY: u32 = 0x8C1B;
pub const GL_PROXY_TEXTURE_2D_ARRAY_EXT: u32 = 0x8C1B;
pub const GL_PROXY_TEXTURE_2D_EXT: u32 = 0x8064;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE: u32 = 0x9101;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: u32 = 0x9103;
pub const GL_PROXY_TEXTURE_2D_STACK_MESAX: u32 = 0x875C;
pub const GL_PROXY_TEXTURE_3D: u32 = 0x8070;
pub const GL_PROXY_TEXTURE_3D_EXT: u32 = 0x8070;
pub const GL_PROXY_TEXTURE_4D_SGIS: u32 = 0x8135;
pub const GL_PROXY_TEXTURE_COLOR_TABLE_SGI: u32 = 0x80BD;
pub const GL_PROXY_TEXTURE_CUBE_MAP: u32 = 0x851B;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB: u32 = 0x851B;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB: u32 = 0x900B;
pub const GL_PROXY_TEXTURE_CUBE_MAP_EXT: u32 = 0x851B;
pub const GL_PROXY_TEXTURE_RECTANGLE: u32 = 0x84F7;
pub const GL_PROXY_TEXTURE_RECTANGLE_ARB: u32 = 0x84F7;
pub const GL_PROXY_TEXTURE_RECTANGLE_NV: u32 = 0x84F7;
pub const GL_PURGEABLE_APPLE: u32 = 0x8A1D;
pub const GL_PURGED_CONTEXT_RESET_NV: u32 = 0x92BB;
pub const GL_QUADRATIC_CURVE_TO_NV: u32 = 0x0A;
pub const GL_QUADS: u32 = 0x0007;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: u32 = 0x8E4C;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT: u32 = 0x8E4C;
pub const GL_QUAD_ALPHA4_SGIS: u32 = 0x811E;
pub const GL_QUAD_ALPHA8_SGIS: u32 = 0x811F;
pub const GL_QUAD_INTENSITY4_SGIS: u32 = 0x8122;
pub const GL_QUAD_INTENSITY8_SGIS: u32 = 0x8123;
pub const GL_QUAD_LUMINANCE4_SGIS: u32 = 0x8120;
pub const GL_QUAD_LUMINANCE8_SGIS: u32 = 0x8121;
pub const GL_QUAD_MESH_SUN: u32 = 0x8614;
pub const GL_QUAD_TEXTURE_SELECT_SGIS: u32 = 0x8125;
pub const GL_QUARTER_BIT_ATI: u32 = 0x00000010;
pub const GL_QUERY: u32 = 0x82E3;
pub const GL_QUERY_ALL_EVENT_BITS_AMD: u32 = 0xFFFFFFFF;
pub const GL_QUERY_BUFFER: u32 = 0x9192;
pub const GL_QUERY_BUFFER_AMD: u32 = 0x9192;
pub const GL_QUERY_BUFFER_BARRIER_BIT: u32 = 0x00008000;
pub const GL_QUERY_BUFFER_BINDING: u32 = 0x9193;
pub const GL_QUERY_BUFFER_BINDING_AMD: u32 = 0x9193;
pub const GL_QUERY_BY_REGION_NO_WAIT: u32 = 0x8E16;
pub const GL_QUERY_BY_REGION_NO_WAIT_INVERTED: u32 = 0x8E1A;
pub const GL_QUERY_BY_REGION_NO_WAIT_NV: u32 = 0x8E16;
pub const GL_QUERY_BY_REGION_WAIT: u32 = 0x8E15;
pub const GL_QUERY_BY_REGION_WAIT_INVERTED: u32 = 0x8E19;
pub const GL_QUERY_BY_REGION_WAIT_NV: u32 = 0x8E15;
pub const GL_QUERY_COUNTER_BITS: u32 = 0x8864;
pub const GL_QUERY_COUNTER_BITS_ARB: u32 = 0x8864;
pub const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD: u32 = 0x00000008;
pub const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD: u32 = 0x00000002;
pub const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD: u32 = 0x00000001;
pub const GL_QUERY_NO_WAIT: u32 = 0x8E14;
pub const GL_QUERY_NO_WAIT_INVERTED: u32 = 0x8E18;
pub const GL_QUERY_NO_WAIT_NV: u32 = 0x8E14;
pub const GL_QUERY_OBJECT_AMD: u32 = 0x9153;
pub const GL_QUERY_OBJECT_EXT: u32 = 0x9153;
pub const GL_QUERY_RESOURCE_BUFFEROBJECT_NV: u32 = 0x9547;
pub const GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV: u32 = 0x9542;
pub const GL_QUERY_RESOURCE_RENDERBUFFER_NV: u32 = 0x9546;
pub const GL_QUERY_RESOURCE_SYS_RESERVED_NV: u32 = 0x9544;
pub const GL_QUERY_RESOURCE_TEXTURE_NV: u32 = 0x9545;
pub const GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV: u32 = 0x9540;
pub const GL_QUERY_RESULT: u32 = 0x8866;
pub const GL_QUERY_RESULT_ARB: u32 = 0x8866;
pub const GL_QUERY_RESULT_AVAILABLE: u32 = 0x8867;
pub const GL_QUERY_RESULT_AVAILABLE_ARB: u32 = 0x8867;
pub const GL_QUERY_RESULT_NO_WAIT: u32 = 0x9194;
pub const GL_QUERY_RESULT_NO_WAIT_AMD: u32 = 0x9194;
pub const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD: u32 = 0x00000004;
pub const GL_QUERY_TARGET: u32 = 0x82EA;
pub const GL_QUERY_WAIT: u32 = 0x8E13;
pub const GL_QUERY_WAIT_INVERTED: u32 = 0x8E17;
pub const GL_QUERY_WAIT_NV: u32 = 0x8E13;
pub const GL_R11F_G11F_B10F: u32 = 0x8C3A;
pub const GL_R11F_G11F_B10F_EXT: u32 = 0x8C3A;
pub const GL_R16: u32 = 0x822A;
pub const GL_R16F: u32 = 0x822D;
pub const GL_R16I: u32 = 0x8233;
pub const GL_R16UI: u32 = 0x8234;
pub const GL_R16_SNORM: u32 = 0x8F98;
pub const GL_R1UI_C3F_V3F_SUN: u32 = 0x85C6;
pub const GL_R1UI_C4F_N3F_V3F_SUN: u32 = 0x85C8;
pub const GL_R1UI_C4UB_V3F_SUN: u32 = 0x85C5;
pub const GL_R1UI_N3F_V3F_SUN: u32 = 0x85C7;
pub const GL_R1UI_T2F_C4F_N3F_V3F_SUN: u32 = 0x85CB;
pub const GL_R1UI_T2F_N3F_V3F_SUN: u32 = 0x85CA;
pub const GL_R1UI_T2F_V3F_SUN: u32 = 0x85C9;
pub const GL_R1UI_V3F_SUN: u32 = 0x85C4;
pub const GL_R32F: u32 = 0x822E;
pub const GL_R32I: u32 = 0x8235;
pub const GL_R32UI: u32 = 0x8236;
pub const GL_R3_G3_B2: u32 = 0x2A10;
pub const GL_R8: u32 = 0x8229;
pub const GL_R8I: u32 = 0x8231;
pub const GL_R8UI: u32 = 0x8232;
pub const GL_R8_SNORM: u32 = 0x8F94;
pub const GL_RASTERIZER_DISCARD: u32 = 0x8C89;
pub const GL_RASTERIZER_DISCARD_EXT: u32 = 0x8C89;
pub const GL_RASTERIZER_DISCARD_NV: u32 = 0x8C89;
pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT: u32 = 0x932A;
pub const GL_RASTER_MULTISAMPLE_EXT: u32 = 0x9327;
pub const GL_RASTER_POSITION_UNCLIPPED_IBM: u32 = 0x19262;
pub const GL_RASTER_SAMPLES_EXT: u32 = 0x9328;
pub const GL_READ_BUFFER: u32 = 0x0C02;
pub const GL_READ_FRAMEBUFFER: u32 = 0x8CA8;
pub const GL_READ_FRAMEBUFFER_BINDING: u32 = 0x8CAA;
pub const GL_READ_FRAMEBUFFER_BINDING_EXT: u32 = 0x8CAA;
pub const GL_READ_FRAMEBUFFER_EXT: u32 = 0x8CA8;
pub const GL_READ_ONLY: u32 = 0x88B8;
pub const GL_READ_ONLY_ARB: u32 = 0x88B8;
pub const GL_READ_PIXELS: u32 = 0x828C;
pub const GL_READ_PIXELS_FORMAT: u32 = 0x828D;
pub const GL_READ_PIXELS_TYPE: u32 = 0x828E;
pub const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV: u32 = 0x887B;
pub const GL_READ_PIXEL_DATA_RANGE_NV: u32 = 0x8879;
pub const GL_READ_PIXEL_DATA_RANGE_POINTER_NV: u32 = 0x887D;
pub const GL_READ_WRITE: u32 = 0x88BA;
pub const GL_READ_WRITE_ARB: u32 = 0x88BA;
pub const GL_RECLAIM_MEMORY_HINT_PGI: u32 = 0x1A1FE;
pub const GL_RECT_NV: u32 = 0xF6;
pub const GL_RED: u32 = 0x1903;
pub const GL_REDUCE_EXT: u32 = 0x8016;
pub const GL_RED_BIT_ATI: u32 = 0x00000001;
pub const GL_RED_INTEGER: u32 = 0x8D94;
pub const GL_RED_INTEGER_EXT: u32 = 0x8D94;
pub const GL_RED_MAX_CLAMP_INGR: u32 = 0x8564;
pub const GL_RED_MIN_CLAMP_INGR: u32 = 0x8560;
pub const GL_RED_NV: u32 = 0x1903;
pub const GL_RED_SNORM: u32 = 0x8F90;
pub const GL_REFERENCED_BY_COMPUTE_SHADER: u32 = 0x930B;
pub const GL_REFERENCED_BY_FRAGMENT_SHADER: u32 = 0x930A;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER: u32 = 0x9309;
pub const GL_REFERENCED_BY_MESH_SHADER_NV: u32 = 0x95A0;
pub const GL_REFERENCED_BY_TASK_SHADER_NV: u32 = 0x95A1;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 0x9307;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 0x9308;
pub const GL_REFERENCED_BY_VERTEX_SHADER: u32 = 0x9306;
pub const GL_REFERENCE_PLANE_EQUATION_SGIX: u32 = 0x817E;
pub const GL_REFERENCE_PLANE_SGIX: u32 = 0x817D;
pub const GL_REFLECTION_MAP_ARB: u32 = 0x8512;
pub const GL_REFLECTION_MAP_EXT: u32 = 0x8512;
pub const GL_REFLECTION_MAP_NV: u32 = 0x8512;
pub const GL_REGISTER_COMBINERS_NV: u32 = 0x8522;
pub const GL_REG_0_ATI: u32 = 0x8921;
pub const GL_REG_10_ATI: u32 = 0x892B;
pub const GL_REG_11_ATI: u32 = 0x892C;
pub const GL_REG_12_ATI: u32 = 0x892D;
pub const GL_REG_13_ATI: u32 = 0x892E;
pub const GL_REG_14_ATI: u32 = 0x892F;
pub const GL_REG_15_ATI: u32 = 0x8930;
pub const GL_REG_16_ATI: u32 = 0x8931;
pub const GL_REG_17_ATI: u32 = 0x8932;
pub const GL_REG_18_ATI: u32 = 0x8933;
pub const GL_REG_19_ATI: u32 = 0x8934;
pub const GL_REG_1_ATI: u32 = 0x8922;
pub const GL_REG_20_ATI: u32 = 0x8935;
pub const GL_REG_21_ATI: u32 = 0x8936;
pub const GL_REG_22_ATI: u32 = 0x8937;
pub const GL_REG_23_ATI: u32 = 0x8938;
pub const GL_REG_24_ATI: u32 = 0x8939;
pub const GL_REG_25_ATI: u32 = 0x893A;
pub const GL_REG_26_ATI: u32 = 0x893B;
pub const GL_REG_27_ATI: u32 = 0x893C;
pub const GL_REG_28_ATI: u32 = 0x893D;
pub const GL_REG_29_ATI: u32 = 0x893E;
pub const GL_REG_2_ATI: u32 = 0x8923;
pub const GL_REG_30_ATI: u32 = 0x893F;
pub const GL_REG_31_ATI: u32 = 0x8940;
pub const GL_REG_3_ATI: u32 = 0x8924;
pub const GL_REG_4_ATI: u32 = 0x8925;
pub const GL_REG_5_ATI: u32 = 0x8926;
pub const GL_REG_6_ATI: u32 = 0x8927;
pub const GL_REG_7_ATI: u32 = 0x8928;
pub const GL_REG_8_ATI: u32 = 0x8929;
pub const GL_REG_9_ATI: u32 = 0x892A;
pub const GL_RELATIVE_ARC_TO_NV: u32 = 0xFF;
pub const GL_RELATIVE_CONIC_CURVE_TO_NV: u32 = 0x1B;
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV: u32 = 0x0D;
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV: u32 = 0x07;
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV: u32 = 0x17;
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV: u32 = 0x19;
pub const GL_RELATIVE_LINE_TO_NV: u32 = 0x05;
pub const GL_RELATIVE_MOVE_TO_NV: u32 = 0x03;
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV: u32 = 0x0B;
pub const GL_RELATIVE_RECT_NV: u32 = 0xF7;
pub const GL_RELATIVE_ROUNDED_RECT2_NV: u32 = 0xEB;
pub const GL_RELATIVE_ROUNDED_RECT4_NV: u32 = 0xED;
pub const GL_RELATIVE_ROUNDED_RECT8_NV: u32 = 0xEF;
pub const GL_RELATIVE_ROUNDED_RECT_NV: u32 = 0xE9;
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV: u32 = 0x13;
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV: u32 = 0x15;
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV: u32 = 0x11;
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV: u32 = 0x0F;
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV: u32 = 0x09;
pub const GL_RELEASED_APPLE: u32 = 0x8A19;
pub const GL_RENDERBUFFER: u32 = 0x8D41;
pub const GL_RENDERBUFFER_ALPHA_SIZE: u32 = 0x8D53;
pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT: u32 = 0x8D53;
pub const GL_RENDERBUFFER_BINDING: u32 = 0x8CA7;
pub const GL_RENDERBUFFER_BINDING_EXT: u32 = 0x8CA7;
pub const GL_RENDERBUFFER_BLUE_SIZE: u32 = 0x8D52;
pub const GL_RENDERBUFFER_BLUE_SIZE_EXT: u32 = 0x8D52;
pub const GL_RENDERBUFFER_COLOR_SAMPLES_NV: u32 = 0x8E10;
pub const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV: u32 = 0x8CAB;
pub const GL_RENDERBUFFER_DEPTH_SIZE: u32 = 0x8D54;
pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT: u32 = 0x8D54;
pub const GL_RENDERBUFFER_EXT: u32 = 0x8D41;
pub const GL_RENDERBUFFER_FREE_MEMORY_ATI: u32 = 0x87FD;
pub const GL_RENDERBUFFER_GREEN_SIZE: u32 = 0x8D51;
pub const GL_RENDERBUFFER_GREEN_SIZE_EXT: u32 = 0x8D51;
pub const GL_RENDERBUFFER_HEIGHT: u32 = 0x8D43;
pub const GL_RENDERBUFFER_HEIGHT_EXT: u32 = 0x8D43;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT: u32 = 0x8D44;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT: u32 = 0x8D44;
pub const GL_RENDERBUFFER_RED_SIZE: u32 = 0x8D50;
pub const GL_RENDERBUFFER_RED_SIZE_EXT: u32 = 0x8D50;
pub const GL_RENDERBUFFER_SAMPLES: u32 = 0x8CAB;
pub const GL_RENDERBUFFER_SAMPLES_EXT: u32 = 0x8CAB;
pub const GL_RENDERBUFFER_STENCIL_SIZE: u32 = 0x8D55;
pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT: u32 = 0x8D55;
pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD: u32 = 0x91B2;
pub const GL_RENDERBUFFER_WIDTH: u32 = 0x8D42;
pub const GL_RENDERBUFFER_WIDTH_EXT: u32 = 0x8D42;
pub const GL_RENDERER: u32 = 0x1F01;
pub const GL_RENDER_GPU_MASK_NV: u32 = 0x9558;
pub const GL_REPEAT: u32 = 0x2901;
pub const GL_REPLACE: u32 = 0x1E01;
pub const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN: u32 = 0x85C3;
pub const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN: u32 = 0x85C2;
pub const GL_REPLACEMENT_CODE_ARRAY_SUN: u32 = 0x85C0;
pub const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN: u32 = 0x85C1;
pub const GL_REPLACEMENT_CODE_SUN: u32 = 0x81D8;
pub const GL_REPLACE_EXT: u32 = 0x8062;
pub const GL_REPLACE_MIDDLE_SUN: u32 = 0x0002;
pub const GL_REPLACE_OLDEST_SUN: u32 = 0x0003;
pub const GL_REPLACE_VALUE_AMD: u32 = 0x874B;
pub const GL_REPLICATE_BORDER_HP: u32 = 0x8153;
pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV: u32 = 0x937F;
pub const GL_RESAMPLE_AVERAGE_OML: u32 = 0x8988;
pub const GL_RESAMPLE_DECIMATE_OML: u32 = 0x8989;
pub const GL_RESAMPLE_DECIMATE_SGIX: u32 = 0x8430;
pub const GL_RESAMPLE_REPLICATE_OML: u32 = 0x8986;
pub const GL_RESAMPLE_REPLICATE_SGIX: u32 = 0x8433;
pub const GL_RESAMPLE_ZERO_FILL_OML: u32 = 0x8987;
pub const GL_RESAMPLE_ZERO_FILL_SGIX: u32 = 0x8434;
pub const GL_RESCALE_NORMAL_EXT: u32 = 0x803A;
pub const GL_RESET_NOTIFICATION_STRATEGY: u32 = 0x8256;
pub const GL_RESET_NOTIFICATION_STRATEGY_ARB: u32 = 0x8256;
pub const GL_RESTART_PATH_NV: u32 = 0xF0;
pub const GL_RESTART_SUN: u32 = 0x0001;
pub const GL_RETAINED_APPLE: u32 = 0x8A1B;
pub const GL_RG: u32 = 0x8227;
pub const GL_RG16: u32 = 0x822C;
pub const GL_RG16F: u32 = 0x822F;
pub const GL_RG16I: u32 = 0x8239;
pub const GL_RG16UI: u32 = 0x823A;
pub const GL_RG16_SNORM: u32 = 0x8F99;
pub const GL_RG32F: u32 = 0x8230;
pub const GL_RG32I: u32 = 0x823B;
pub const GL_RG32UI: u32 = 0x823C;
pub const GL_RG8: u32 = 0x822B;
pub const GL_RG8I: u32 = 0x8237;
pub const GL_RG8UI: u32 = 0x8238;
pub const GL_RG8_SNORM: u32 = 0x8F95;
pub const GL_RGB: u32 = 0x1907;
pub const GL_RGB10: u32 = 0x8052;
pub const GL_RGB10_A2: u32 = 0x8059;
pub const GL_RGB10_A2UI: u32 = 0x906F;
pub const GL_RGB10_A2_EXT: u32 = 0x8059;
pub const GL_RGB10_EXT: u32 = 0x8052;
pub const GL_RGB12: u32 = 0x8053;
pub const GL_RGB12_EXT: u32 = 0x8053;
pub const GL_RGB16: u32 = 0x8054;
pub const GL_RGB16F: u32 = 0x881B;
pub const GL_RGB16F_ARB: u32 = 0x881B;
pub const GL_RGB16I: u32 = 0x8D89;
pub const GL_RGB16I_EXT: u32 = 0x8D89;
pub const GL_RGB16UI: u32 = 0x8D77;
pub const GL_RGB16UI_EXT: u32 = 0x8D77;
pub const GL_RGB16_EXT: u32 = 0x8054;
pub const GL_RGB16_SNORM: u32 = 0x8F9A;
pub const GL_RGB2_EXT: u32 = 0x804E;
pub const GL_RGB32F: u32 = 0x8815;
pub const GL_RGB32F_ARB: u32 = 0x8815;
pub const GL_RGB32I: u32 = 0x8D83;
pub const GL_RGB32I_EXT: u32 = 0x8D83;
pub const GL_RGB32UI: u32 = 0x8D71;
pub const GL_RGB32UI_EXT: u32 = 0x8D71;
pub const GL_RGB4: u32 = 0x804F;
pub const GL_RGB4_EXT: u32 = 0x804F;
pub const GL_RGB4_S3TC: u32 = 0x83A1;
pub const GL_RGB5: u32 = 0x8050;
pub const GL_RGB565: u32 = 0x8D62;
pub const GL_RGB5_A1: u32 = 0x8057;
pub const GL_RGB5_A1_EXT: u32 = 0x8057;
pub const GL_RGB5_EXT: u32 = 0x8050;
pub const GL_RGB8: u32 = 0x8051;
pub const GL_RGB8I: u32 = 0x8D8F;
pub const GL_RGB8I_EXT: u32 = 0x8D8F;
pub const GL_RGB8UI: u32 = 0x8D7D;
pub const GL_RGB8UI_EXT: u32 = 0x8D7D;
pub const GL_RGB8_EXT: u32 = 0x8051;
pub const GL_RGB8_SNORM: u32 = 0x8F96;
pub const GL_RGB9_E5: u32 = 0x8C3D;
pub const GL_RGB9_E5_EXT: u32 = 0x8C3D;
pub const GL_RGBA: u32 = 0x1908;
pub const GL_RGBA12: u32 = 0x805A;
pub const GL_RGBA12_EXT: u32 = 0x805A;
pub const GL_RGBA16: u32 = 0x805B;
pub const GL_RGBA16F: u32 = 0x881A;
pub const GL_RGBA16F_ARB: u32 = 0x881A;
pub const GL_RGBA16I: u32 = 0x8D88;
pub const GL_RGBA16I_EXT: u32 = 0x8D88;
pub const GL_RGBA16UI: u32 = 0x8D76;
pub const GL_RGBA16UI_EXT: u32 = 0x8D76;
pub const GL_RGBA16_EXT: u32 = 0x805B;
pub const GL_RGBA16_SNORM: u32 = 0x8F9B;
pub const GL_RGBA2: u32 = 0x8055;
pub const GL_RGBA2_EXT: u32 = 0x8055;
pub const GL_RGBA32F: u32 = 0x8814;
pub const GL_RGBA32F_ARB: u32 = 0x8814;
pub const GL_RGBA32I: u32 = 0x8D82;
pub const GL_RGBA32I_EXT: u32 = 0x8D82;
pub const GL_RGBA32UI: u32 = 0x8D70;
pub const GL_RGBA32UI_EXT: u32 = 0x8D70;
pub const GL_RGBA4: u32 = 0x8056;
pub const GL_RGBA4_DXT5_S3TC: u32 = 0x83A5;
pub const GL_RGBA4_EXT: u32 = 0x8056;
pub const GL_RGBA4_S3TC: u32 = 0x83A3;
pub const GL_RGBA8: u32 = 0x8058;
pub const GL_RGBA8I: u32 = 0x8D8E;
pub const GL_RGBA8I_EXT: u32 = 0x8D8E;
pub const GL_RGBA8UI: u32 = 0x8D7C;
pub const GL_RGBA8UI_EXT: u32 = 0x8D7C;
pub const GL_RGBA8_EXT: u32 = 0x8058;
pub const GL_RGBA8_SNORM: u32 = 0x8F97;
pub const GL_RGBA_DXT5_S3TC: u32 = 0x83A4;
pub const GL_RGBA_FLOAT16_APPLE: u32 = 0x881A;
pub const GL_RGBA_FLOAT16_ATI: u32 = 0x881A;
pub const GL_RGBA_FLOAT32_APPLE: u32 = 0x8814;
pub const GL_RGBA_FLOAT32_ATI: u32 = 0x8814;
pub const GL_RGBA_FLOAT_MODE_ARB: u32 = 0x8820;
pub const GL_RGBA_FLOAT_MODE_ATI: u32 = 0x8820;
pub const GL_RGBA_INTEGER: u32 = 0x8D99;
pub const GL_RGBA_INTEGER_EXT: u32 = 0x8D99;
pub const GL_RGBA_INTEGER_MODE_EXT: u32 = 0x8D9E;
pub const GL_RGBA_S3TC: u32 = 0x83A2;
pub const GL_RGBA_SIGNED_COMPONENTS_EXT: u32 = 0x8C3C;
pub const GL_RGBA_SNORM: u32 = 0x8F93;
pub const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV: u32 = 0x86D9;
pub const GL_RGB_422_APPLE: u32 = 0x8A1F;
pub const GL_RGB_FLOAT16_APPLE: u32 = 0x881B;
pub const GL_RGB_FLOAT16_ATI: u32 = 0x881B;
pub const GL_RGB_FLOAT32_APPLE: u32 = 0x8815;
pub const GL_RGB_FLOAT32_ATI: u32 = 0x8815;
pub const GL_RGB_INTEGER: u32 = 0x8D98;
pub const GL_RGB_INTEGER_EXT: u32 = 0x8D98;
pub const GL_RGB_RAW_422_APPLE: u32 = 0x8A51;
pub const GL_RGB_S3TC: u32 = 0x83A0;
pub const GL_RGB_SCALE_ARB: u32 = 0x8573;
pub const GL_RGB_SCALE_EXT: u32 = 0x8573;
pub const GL_RGB_SNORM: u32 = 0x8F92;
pub const GL_RG_INTEGER: u32 = 0x8228;
pub const GL_RG_SNORM: u32 = 0x8F91;
pub const GL_RIGHT: u32 = 0x0407;
pub const GL_ROUNDED_RECT2_NV: u32 = 0xEA;
pub const GL_ROUNDED_RECT4_NV: u32 = 0xEC;
pub const GL_ROUNDED_RECT8_NV: u32 = 0xEE;
pub const GL_ROUNDED_RECT_NV: u32 = 0xE8;
pub const GL_ROUND_NV: u32 = 0x90A4;
pub const GL_SAMPLER: u32 = 0x82E6;
pub const GL_SAMPLER_1D: u32 = 0x8B5D;
pub const GL_SAMPLER_1D_ARB: u32 = 0x8B5D;
pub const GL_SAMPLER_1D_ARRAY: u32 = 0x8DC0;
pub const GL_SAMPLER_1D_ARRAY_EXT: u32 = 0x8DC0;
pub const GL_SAMPLER_1D_ARRAY_SHADOW: u32 = 0x8DC3;
pub const GL_SAMPLER_1D_ARRAY_SHADOW_EXT: u32 = 0x8DC3;
pub const GL_SAMPLER_1D_SHADOW: u32 = 0x8B61;
pub const GL_SAMPLER_1D_SHADOW_ARB: u32 = 0x8B61;
pub const GL_SAMPLER_2D: u32 = 0x8B5E;
pub const GL_SAMPLER_2D_ARB: u32 = 0x8B5E;
pub const GL_SAMPLER_2D_ARRAY: u32 = 0x8DC1;
pub const GL_SAMPLER_2D_ARRAY_EXT: u32 = 0x8DC1;
pub const GL_SAMPLER_2D_ARRAY_SHADOW: u32 = 0x8DC4;
pub const GL_SAMPLER_2D_ARRAY_SHADOW_EXT: u32 = 0x8DC4;
pub const GL_SAMPLER_2D_MULTISAMPLE: u32 = 0x9108;
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 0x910B;
pub const GL_SAMPLER_2D_RECT: u32 = 0x8B63;
pub const GL_SAMPLER_2D_RECT_ARB: u32 = 0x8B63;
pub const GL_SAMPLER_2D_RECT_SHADOW: u32 = 0x8B64;
pub const GL_SAMPLER_2D_RECT_SHADOW_ARB: u32 = 0x8B64;
pub const GL_SAMPLER_2D_SHADOW: u32 = 0x8B62;
pub const GL_SAMPLER_2D_SHADOW_ARB: u32 = 0x8B62;
pub const GL_SAMPLER_3D: u32 = 0x8B5F;
pub const GL_SAMPLER_3D_ARB: u32 = 0x8B5F;
pub const GL_SAMPLER_BINDING: u32 = 0x8919;
pub const GL_SAMPLER_BUFFER: u32 = 0x8DC2;
pub const GL_SAMPLER_BUFFER_AMD: u32 = 0x9001;
pub const GL_SAMPLER_BUFFER_EXT: u32 = 0x8DC2;
pub const GL_SAMPLER_CUBE: u32 = 0x8B60;
pub const GL_SAMPLER_CUBE_ARB: u32 = 0x8B60;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 0x900C;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB: u32 = 0x900D;
pub const GL_SAMPLER_CUBE_SHADOW: u32 = 0x8DC5;
pub const GL_SAMPLER_CUBE_SHADOW_EXT: u32 = 0x8DC5;
pub const GL_SAMPLER_OBJECT_AMD: u32 = 0x9155;
pub const GL_SAMPLER_RENDERBUFFER_NV: u32 = 0x8E56;
pub const GL_SAMPLES: u32 = 0x80A9;
pub const GL_SAMPLES_3DFX: u32 = 0x86B4;
pub const GL_SAMPLES_ARB: u32 = 0x80A9;
pub const GL_SAMPLES_EXT: u32 = 0x80A9;
pub const GL_SAMPLES_PASSED: u32 = 0x8914;
pub const GL_SAMPLES_PASSED_ARB: u32 = 0x8914;
pub const GL_SAMPLES_SGIS: u32 = 0x80A9;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE: u32 = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB: u32 = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_MASK_EXT: u32 = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_MASK_SGIS: u32 = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_ONE: u32 = 0x809F;
pub const GL_SAMPLE_ALPHA_TO_ONE_ARB: u32 = 0x809F;
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT: u32 = 0x809F;
pub const GL_SAMPLE_ALPHA_TO_ONE_SGIS: u32 = 0x809F;
pub const GL_SAMPLE_BUFFERS: u32 = 0x80A8;
pub const GL_SAMPLE_BUFFERS_3DFX: u32 = 0x86B3;
pub const GL_SAMPLE_BUFFERS_ARB: u32 = 0x80A8;
pub const GL_SAMPLE_BUFFERS_EXT: u32 = 0x80A8;
pub const GL_SAMPLE_BUFFERS_SGIS: u32 = 0x80A8;
pub const GL_SAMPLE_COVERAGE: u32 = 0x80A0;
pub const GL_SAMPLE_COVERAGE_ARB: u32 = 0x80A0;
pub const GL_SAMPLE_COVERAGE_INVERT: u32 = 0x80AB;
pub const GL_SAMPLE_COVERAGE_INVERT_ARB: u32 = 0x80AB;
pub const GL_SAMPLE_COVERAGE_VALUE: u32 = 0x80AA;
pub const GL_SAMPLE_COVERAGE_VALUE_ARB: u32 = 0x80AA;
pub const GL_SAMPLE_LOCATION_ARB: u32 = 0x8E50;
pub const GL_SAMPLE_LOCATION_NV: u32 = 0x8E50;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB: u32 = 0x933F;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV: u32 = 0x933F;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB: u32 = 0x933E;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV: u32 = 0x933E;
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB: u32 = 0x933D;
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV: u32 = 0x933D;
pub const GL_SAMPLE_MASK: u32 = 0x8E51;
pub const GL_SAMPLE_MASK_EXT: u32 = 0x80A0;
pub const GL_SAMPLE_MASK_INVERT_EXT: u32 = 0x80AB;
pub const GL_SAMPLE_MASK_INVERT_SGIS: u32 = 0x80AB;
pub const GL_SAMPLE_MASK_NV: u32 = 0x8E51;
pub const GL_SAMPLE_MASK_SGIS: u32 = 0x80A0;
pub const GL_SAMPLE_MASK_VALUE: u32 = 0x8E52;
pub const GL_SAMPLE_MASK_VALUE_EXT: u32 = 0x80AA;
pub const GL_SAMPLE_MASK_VALUE_NV: u32 = 0x8E52;
pub const GL_SAMPLE_MASK_VALUE_SGIS: u32 = 0x80AA;
pub const GL_SAMPLE_PATTERN_EXT: u32 = 0x80AC;
pub const GL_SAMPLE_PATTERN_SGIS: u32 = 0x80AC;
pub const GL_SAMPLE_POSITION: u32 = 0x8E50;
pub const GL_SAMPLE_POSITION_NV: u32 = 0x8E50;
pub const GL_SAMPLE_SHADING_ARB: u32 = 0x8C36;
pub const GL_SATURATE_BIT_ATI: u32 = 0x00000040;
pub const GL_SCALAR_EXT: u32 = 0x87BE;
pub const GL_SCALEBIAS_HINT_SGIX: u32 = 0x8322;
pub const GL_SCALED_RESOLVE_FASTEST_EXT: u32 = 0x90BA;
pub const GL_SCALED_RESOLVE_NICEST_EXT: u32 = 0x90BB;
pub const GL_SCALE_BY_FOUR_NV: u32 = 0x853F;
pub const GL_SCALE_BY_ONE_HALF_NV: u32 = 0x8540;
pub const GL_SCALE_BY_TWO_NV: u32 = 0x853E;
pub const GL_SCISSOR_BOX: u32 = 0x0C10;
pub const GL_SCISSOR_BOX_EXCLUSIVE_NV: u32 = 0x9556;
pub const GL_SCISSOR_COMMAND_NV: u32 = 0x0011;
pub const GL_SCISSOR_TEST: u32 = 0x0C11;
pub const GL_SCISSOR_TEST_EXCLUSIVE_NV: u32 = 0x9555;
pub const GL_SCREEN_COORDINATES_REND: u32 = 0x8490;
pub const GL_SCREEN_KHR: u32 = 0x9295;
pub const GL_SCREEN_NV: u32 = 0x9295;
pub const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV: u32 = 0x8F27;
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889C;
pub const GL_SECONDARY_COLOR_ARRAY_EXT: u32 = 0x845E;
pub const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV: u32 = 0x8F31;
pub const GL_SECONDARY_COLOR_ARRAY_LIST_IBM: u32 = 103077;
pub const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM: u32 = 103087;
pub const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT: u32 = 0x845D;
pub const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT: u32 = 0x845A;
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT: u32 = 0x845C;
pub const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT: u32 = 0x845B;
pub const GL_SECONDARY_COLOR_NV: u32 = 0x852D;
pub const GL_SECONDARY_INTERPOLATOR_ATI: u32 = 0x896D;
pub const GL_SEMAPHORE_TYPE_BINARY_NV: u32 = 0x95B4;
pub const GL_SEMAPHORE_TYPE_NV: u32 = 0x95B3;
pub const GL_SEMAPHORE_TYPE_TIMELINE_NV: u32 = 0x95B5;
pub const GL_SEPARABLE_2D_EXT: u32 = 0x8012;
pub const GL_SEPARATE_ATTRIBS: u32 = 0x8C8D;
pub const GL_SEPARATE_ATTRIBS_EXT: u32 = 0x8C8D;
pub const GL_SEPARATE_ATTRIBS_NV: u32 = 0x8C8D;
pub const GL_SEPARATE_SPECULAR_COLOR_EXT: u32 = 0x81FA;
pub const GL_SET: u32 = 0x150F;
pub const GL_SET_AMD: u32 = 0x874A;
pub const GL_SHADER: u32 = 0x82E1;
pub const GL_SHADER_BINARY_FORMATS: u32 = 0x8DF8;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V: u32 = 0x9551;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB: u32 = 0x9551;
pub const GL_SHADER_COMPILER: u32 = 0x8DFA;
pub const GL_SHADER_CONSISTENT_NV: u32 = 0x86DD;
pub const GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV: u32 = 0x00000010;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT: u32 = 0x00000020;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT: u32 = 0x00000020;
pub const GL_SHADER_IMAGE_ATOMIC: u32 = 0x82A6;
pub const GL_SHADER_IMAGE_LOAD: u32 = 0x82A4;
pub const GL_SHADER_IMAGE_STORE: u32 = 0x82A5;
pub const GL_SHADER_INCLUDE_ARB: u32 = 0x8DAE;
pub const GL_SHADER_OBJECT_ARB: u32 = 0x8B48;
pub const GL_SHADER_OBJECT_EXT: u32 = 0x8B48;
pub const GL_SHADER_OPERATION_NV: u32 = 0x86DF;
pub const GL_SHADER_SOURCE_LENGTH: u32 = 0x8B88;
pub const GL_SHADER_STORAGE_BARRIER_BIT: u32 = 0x00002000;
pub const GL_SHADER_STORAGE_BLOCK: u32 = 0x92E6;
pub const GL_SHADER_STORAGE_BUFFER: u32 = 0x90D2;
pub const GL_SHADER_STORAGE_BUFFER_BINDING: u32 = 0x90D3;
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT: u32 = 0x90DF;
pub const GL_SHADER_STORAGE_BUFFER_SIZE: u32 = 0x90D5;
pub const GL_SHADER_STORAGE_BUFFER_START: u32 = 0x90D4;
pub const GL_SHADER_TYPE: u32 = 0x8B4F;
pub const GL_SHADING_LANGUAGE_VERSION: u32 = 0x8B8C;
pub const GL_SHADING_LANGUAGE_VERSION_ARB: u32 = 0x8B8C;
pub const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV: u32 = 0x956F;
pub const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV: u32 = 0x9566;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV: u32 = 0x9567;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV: u32 = 0x9568;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV: u32 = 0x9569;
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV: u32 = 0x956A;
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV: u32 = 0x956B;
pub const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV: u32 = 0x9565;
pub const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV: u32 = 0x956C;
pub const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV: u32 = 0x956D;
pub const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV: u32 = 0x956E;
pub const GL_SHADING_RATE_IMAGE_BINDING_NV: u32 = 0x955B;
pub const GL_SHADING_RATE_IMAGE_NV: u32 = 0x9563;
pub const GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV: u32 = 0x95B2;
pub const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV: u32 = 0x955E;
pub const GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV: u32 = 0x95B1;
pub const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV: u32 = 0x955D;
pub const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV: u32 = 0x955C;
pub const GL_SHADING_RATE_NO_INVOCATIONS_NV: u32 = 0x9564;
pub const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV: u32 = 0x95AE;
pub const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV: u32 = 0x95AF;
pub const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV: u32 = 0x95B0;
pub const GL_SHADOW_AMBIENT_SGIX: u32 = 0x80BF;
pub const GL_SHADOW_ATTENUATION_EXT: u32 = 0x834E;
pub const GL_SHARED_EDGE_NV: u32 = 0xC0;
pub const GL_SHARED_TEXTURE_PALETTE_EXT: u32 = 0x81FB;
pub const GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS: u32 = 0x80B0;
pub const GL_SHORT: u32 = 0x1402;
pub const GL_SIGNALED: u32 = 0x9119;
pub const GL_SIGNED_ALPHA8_NV: u32 = 0x8706;
pub const GL_SIGNED_ALPHA_NV: u32 = 0x8705;
pub const GL_SIGNED_HILO16_NV: u32 = 0x86FA;
pub const GL_SIGNED_HILO8_NV: u32 = 0x885F;
pub const GL_SIGNED_HILO_NV: u32 = 0x86F9;
pub const GL_SIGNED_IDENTITY_NV: u32 = 0x853C;
pub const GL_SIGNED_INTENSITY8_NV: u32 = 0x8708;
pub const GL_SIGNED_INTENSITY_NV: u32 = 0x8707;
pub const GL_SIGNED_LUMINANCE8_ALPHA8_NV: u32 = 0x8704;
pub const GL_SIGNED_LUMINANCE8_NV: u32 = 0x8702;
pub const GL_SIGNED_LUMINANCE_ALPHA_NV: u32 = 0x8703;
pub const GL_SIGNED_LUMINANCE_NV: u32 = 0x8701;
pub const GL_SIGNED_NEGATE_NV: u32 = 0x853D;
pub const GL_SIGNED_NORMALIZED: u32 = 0x8F9C;
pub const GL_SIGNED_RGB8_NV: u32 = 0x86FF;
pub const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV: u32 = 0x870D;
pub const GL_SIGNED_RGBA8_NV: u32 = 0x86FC;
pub const GL_SIGNED_RGBA_NV: u32 = 0x86FB;
pub const GL_SIGNED_RGB_NV: u32 = 0x86FE;
pub const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV: u32 = 0x870C;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST: u32 = 0x82AC;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE: u32 = 0x82AE;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST: u32 = 0x82AD;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE: u32 = 0x82AF;
pub const GL_SINGLE_COLOR_EXT: u32 = 0x81F9;
pub const GL_SKIP_COMPONENTS1_NV: i32 = -6;
pub const GL_SKIP_COMPONENTS2_NV: i32 = -5;
pub const GL_SKIP_COMPONENTS3_NV: i32 = -4;
pub const GL_SKIP_COMPONENTS4_NV: i32 = -3;
pub const GL_SKIP_DECODE_EXT: u32 = 0x8A4A;
pub const GL_SKIP_MISSING_GLYPH_NV: u32 = 0x90A9;
pub const GL_SLICE_ACCUM_SUN: u32 = 0x85CC;
pub const GL_SLUMINANCE8_ALPHA8_EXT: u32 = 0x8C45;
pub const GL_SLUMINANCE8_EXT: u32 = 0x8C47;
pub const GL_SLUMINANCE_ALPHA_EXT: u32 = 0x8C44;
pub const GL_SLUMINANCE_EXT: u32 = 0x8C46;
pub const GL_SMALL_CCW_ARC_TO_NV: u32 = 0x12;
pub const GL_SMALL_CW_ARC_TO_NV: u32 = 0x14;
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV: u32 = 0x10;
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY: u32 = 0x0B23;
pub const GL_SMOOTH_LINE_WIDTH_RANGE: u32 = 0x0B22;
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY: u32 = 0x0B13;
pub const GL_SMOOTH_POINT_SIZE_RANGE: u32 = 0x0B12;
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV: u32 = 0x0E;
pub const GL_SM_COUNT_NV: u32 = 0x933B;
pub const GL_SOFTLIGHT_KHR: u32 = 0x929C;
pub const GL_SOFTLIGHT_NV: u32 = 0x929C;
pub const GL_SOURCE0_ALPHA_ARB: u32 = 0x8588;
pub const GL_SOURCE0_ALPHA_EXT: u32 = 0x8588;
pub const GL_SOURCE0_RGB_ARB: u32 = 0x8580;
pub const GL_SOURCE0_RGB_EXT: u32 = 0x8580;
pub const GL_SOURCE1_ALPHA: u32 = 0x8589;
pub const GL_SOURCE1_ALPHA_ARB: u32 = 0x8589;
pub const GL_SOURCE1_ALPHA_EXT: u32 = 0x8589;
pub const GL_SOURCE1_RGB_ARB: u32 = 0x8581;
pub const GL_SOURCE1_RGB_EXT: u32 = 0x8581;
pub const GL_SOURCE2_ALPHA_ARB: u32 = 0x858A;
pub const GL_SOURCE2_ALPHA_EXT: u32 = 0x858A;
pub const GL_SOURCE2_RGB_ARB: u32 = 0x8582;
pub const GL_SOURCE2_RGB_EXT: u32 = 0x8582;
pub const GL_SOURCE3_ALPHA_NV: u32 = 0x858B;
pub const GL_SOURCE3_RGB_NV: u32 = 0x8583;
pub const GL_SPARE0_NV: u32 = 0x852E;
pub const GL_SPARE0_PLUS_SECONDARY_COLOR_NV: u32 = 0x8532;
pub const GL_SPARE1_NV: u32 = 0x852F;
pub const GL_SPARSE_BUFFER_PAGE_SIZE_ARB: u32 = 0x82F8;
pub const GL_SPARSE_STORAGE_BIT_ARB: u32 = 0x0400;
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB: u32 = 0x91A9;
pub const GL_SPIR_V_BINARY: u32 = 0x9552;
pub const GL_SPIR_V_BINARY_ARB: u32 = 0x9552;
pub const GL_SPIR_V_EXTENSIONS: u32 = 0x9553;
pub const GL_SPRITE_AXIAL_SGIX: u32 = 0x814C;
pub const GL_SPRITE_AXIS_SGIX: u32 = 0x814A;
pub const GL_SPRITE_EYE_ALIGNED_SGIX: u32 = 0x814E;
pub const GL_SPRITE_MODE_SGIX: u32 = 0x8149;
pub const GL_SPRITE_OBJECT_ALIGNED_SGIX: u32 = 0x814D;
pub const GL_SPRITE_SGIX: u32 = 0x8148;
pub const GL_SPRITE_TRANSLATION_SGIX: u32 = 0x814B;
pub const GL_SQUARE_NV: u32 = 0x90A3;
pub const GL_SR8_EXT: u32 = 0x8FBD;
pub const GL_SRC1_ALPHA: u32 = 0x8589;
pub const GL_SRC1_COLOR: u32 = 0x88F9;
pub const GL_SRC_ALPHA: u32 = 0x0302;
pub const GL_SRC_ALPHA_SATURATE: u32 = 0x0308;
pub const GL_SRC_ATOP_NV: u32 = 0x928E;
pub const GL_SRC_COLOR: u32 = 0x0300;
pub const GL_SRC_IN_NV: u32 = 0x928A;
pub const GL_SRC_NV: u32 = 0x9286;
pub const GL_SRC_OUT_NV: u32 = 0x928C;
pub const GL_SRC_OVER_NV: u32 = 0x9288;
pub const GL_SRG8_EXT: u32 = 0x8FBE;
pub const GL_SRGB: u32 = 0x8C40;
pub const GL_SRGB8: u32 = 0x8C41;
pub const GL_SRGB8_ALPHA8: u32 = 0x8C43;
pub const GL_SRGB8_ALPHA8_EXT: u32 = 0x8C43;
pub const GL_SRGB8_EXT: u32 = 0x8C41;
pub const GL_SRGB_ALPHA: u32 = 0x8C42;
pub const GL_SRGB_ALPHA_EXT: u32 = 0x8C42;
pub const GL_SRGB_DECODE_ARB: u32 = 0x8299;
pub const GL_SRGB_EXT: u32 = 0x8C40;
pub const GL_SRGB_READ: u32 = 0x8297;
pub const GL_SRGB_WRITE: u32 = 0x8298;
pub const GL_STACK_OVERFLOW: u32 = 0x0503;
pub const GL_STACK_UNDERFLOW: u32 = 0x0504;
pub const GL_STANDARD_FONT_FORMAT_NV: u32 = 0x936C;
pub const GL_STANDARD_FONT_NAME_NV: u32 = 0x9072;
pub const GL_STATIC_ATI: u32 = 0x8760;
pub const GL_STATIC_COPY: u32 = 0x88E6;
pub const GL_STATIC_COPY_ARB: u32 = 0x88E6;
pub const GL_STATIC_DRAW: u32 = 0x88E4;
pub const GL_STATIC_DRAW_ARB: u32 = 0x88E4;
pub const GL_STATIC_READ: u32 = 0x88E5;
pub const GL_STATIC_READ_ARB: u32 = 0x88E5;
pub const GL_STATIC_VERTEX_ARRAY_IBM: u32 = 103061;
pub const GL_STENCIL: u32 = 0x1802;
pub const GL_STENCIL_ATTACHMENT: u32 = 0x8D20;
pub const GL_STENCIL_ATTACHMENT_EXT: u32 = 0x8D20;
pub const GL_STENCIL_BACK_FAIL: u32 = 0x8801;
pub const GL_STENCIL_BACK_FAIL_ATI: u32 = 0x8801;
pub const GL_STENCIL_BACK_FUNC: u32 = 0x8800;
pub const GL_STENCIL_BACK_FUNC_ATI: u32 = 0x8800;
pub const GL_STENCIL_BACK_OP_VALUE_AMD: u32 = 0x874D;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL: u32 = 0x8802;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI: u32 = 0x8802;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS: u32 = 0x8803;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI: u32 = 0x8803;
pub const GL_STENCIL_BACK_REF: u32 = 0x8CA3;
pub const GL_STENCIL_BACK_VALUE_MASK: u32 = 0x8CA4;
pub const GL_STENCIL_BACK_WRITEMASK: u32 = 0x8CA5;
pub const GL_STENCIL_BUFFER_BIT: u32 = 0x00000400;
pub const GL_STENCIL_CLEAR_TAG_VALUE_EXT: u32 = 0x88F3;
pub const GL_STENCIL_CLEAR_VALUE: u32 = 0x0B91;
pub const GL_STENCIL_COMPONENTS: u32 = 0x8285;
pub const GL_STENCIL_FAIL: u32 = 0x0B94;
pub const GL_STENCIL_FUNC: u32 = 0x0B92;
pub const GL_STENCIL_INDEX: u32 = 0x1901;
pub const GL_STENCIL_INDEX1: u32 = 0x8D46;
pub const GL_STENCIL_INDEX16: u32 = 0x8D49;
pub const GL_STENCIL_INDEX16_EXT: u32 = 0x8D49;
pub const GL_STENCIL_INDEX1_EXT: u32 = 0x8D46;
pub const GL_STENCIL_INDEX4: u32 = 0x8D47;
pub const GL_STENCIL_INDEX4_EXT: u32 = 0x8D47;
pub const GL_STENCIL_INDEX8: u32 = 0x8D48;
pub const GL_STENCIL_INDEX8_EXT: u32 = 0x8D48;
pub const GL_STENCIL_OP_VALUE_AMD: u32 = 0x874C;
pub const GL_STENCIL_PASS_DEPTH_FAIL: u32 = 0x0B95;
pub const GL_STENCIL_PASS_DEPTH_PASS: u32 = 0x0B96;
pub const GL_STENCIL_REF: u32 = 0x0B97;
pub const GL_STENCIL_REF_COMMAND_NV: u32 = 0x000C;
pub const GL_STENCIL_RENDERABLE: u32 = 0x8288;
pub const GL_STENCIL_SAMPLES_NV: u32 = 0x932E;
pub const GL_STENCIL_TAG_BITS_EXT: u32 = 0x88F2;
pub const GL_STENCIL_TEST: u32 = 0x0B90;
pub const GL_STENCIL_TEST_TWO_SIDE_EXT: u32 = 0x8910;
pub const GL_STENCIL_VALUE_MASK: u32 = 0x0B93;
pub const GL_STENCIL_WRITEMASK: u32 = 0x0B98;
pub const GL_STEREO: u32 = 0x0C33;
pub const GL_STORAGE_CACHED_APPLE: u32 = 0x85BE;
pub const GL_STORAGE_CLIENT_APPLE: u32 = 0x85B4;
pub const GL_STORAGE_PRIVATE_APPLE: u32 = 0x85BD;
pub const GL_STORAGE_SHARED_APPLE: u32 = 0x85BF;
pub const GL_STREAM_COPY: u32 = 0x88E2;
pub const GL_STREAM_COPY_ARB: u32 = 0x88E2;
pub const GL_STREAM_DRAW: u32 = 0x88E0;
pub const GL_STREAM_DRAW_ARB: u32 = 0x88E0;
pub const GL_STREAM_RASTERIZATION_AMD: u32 = 0x91A0;
pub const GL_STREAM_READ: u32 = 0x88E1;
pub const GL_STREAM_READ_ARB: u32 = 0x88E1;
pub const GL_STRICT_DEPTHFUNC_HINT_PGI: u32 = 0x1A216;
pub const GL_STRICT_LIGHTING_HINT_PGI: u32 = 0x1A217;
pub const GL_STRICT_SCISSOR_HINT_PGI: u32 = 0x1A218;
pub const GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR: u32 = 0x00000004;
pub const GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR: u32 = 0x00000008;
pub const GL_SUBGROUP_FEATURE_BASIC_BIT_KHR: u32 = 0x00000001;
pub const GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR: u32 = 0x00000040;
pub const GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV: u32 = 0x00000100;
pub const GL_SUBGROUP_FEATURE_QUAD_BIT_KHR: u32 = 0x00000080;
pub const GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR: u32 = 0x00000010;
pub const GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR: u32 = 0x00000020;
pub const GL_SUBGROUP_FEATURE_VOTE_BIT_KHR: u32 = 0x00000002;
pub const GL_SUBGROUP_QUAD_ALL_STAGES_KHR: u32 = 0x9535;
pub const GL_SUBGROUP_SIZE_KHR: u32 = 0x9532;
pub const GL_SUBGROUP_SUPPORTED_FEATURES_KHR: u32 = 0x9534;
pub const GL_SUBGROUP_SUPPORTED_STAGES_KHR: u32 = 0x9533;
pub const GL_SUBPIXEL_BITS: u32 = 0x0D50;
pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV: u32 = 0x9347;
pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV: u32 = 0x9348;
pub const GL_SUBSAMPLE_DISTANCE_AMD: u32 = 0x883F;
pub const GL_SUBTRACT_ARB: u32 = 0x84E7;
pub const GL_SUB_ATI: u32 = 0x8965;
pub const GL_SUCCESS_NV: u32 = 0x902F;
pub const GL_SUPERSAMPLE_SCALE_X_NV: u32 = 0x9372;
pub const GL_SUPERSAMPLE_SCALE_Y_NV: u32 = 0x9373;
pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD: u32 = 0x91B7;
pub const GL_SURFACE_MAPPED_NV: u32 = 0x8700;
pub const GL_SURFACE_REGISTERED_NV: u32 = 0x86FD;
pub const GL_SURFACE_STATE_NV: u32 = 0x86EB;
pub const GL_SWIZZLE_STQ_ATI: u32 = 0x8977;
pub const GL_SWIZZLE_STQ_DQ_ATI: u32 = 0x8979;
pub const GL_SWIZZLE_STRQ_ATI: u32 = 0x897A;
pub const GL_SWIZZLE_STRQ_DQ_ATI: u32 = 0x897B;
pub const GL_SWIZZLE_STR_ATI: u32 = 0x8976;
pub const GL_SWIZZLE_STR_DR_ATI: u32 = 0x8978;
pub const GL_SYNC_CL_EVENT_ARB: u32 = 0x8240;
pub const GL_SYNC_CL_EVENT_COMPLETE_ARB: u32 = 0x8241;
pub const GL_SYNC_CONDITION: u32 = 0x9113;
pub const GL_SYNC_FENCE: u32 = 0x9116;
pub const GL_SYNC_FLAGS: u32 = 0x9115;
pub const GL_SYNC_FLUSH_COMMANDS_BIT: u32 = 0x00000001;
pub const GL_SYNC_GPU_COMMANDS_COMPLETE: u32 = 0x9117;
pub const GL_SYNC_STATUS: u32 = 0x9114;
pub const GL_SYNC_X11_FENCE_EXT: u32 = 0x90E1;
pub const GL_SYSTEM_FONT_NAME_NV: u32 = 0x9073;
pub const GL_T2F_IUI_N3F_V2F_EXT: u32 = 0x81B3;
pub const GL_T2F_IUI_N3F_V3F_EXT: u32 = 0x81B4;
pub const GL_T2F_IUI_V2F_EXT: u32 = 0x81B1;
pub const GL_T2F_IUI_V3F_EXT: u32 = 0x81B2;
pub const GL_TABLE_TOO_LARGE_EXT: u32 = 0x8031;
pub const GL_TANGENT_ARRAY_EXT: u32 = 0x8439;
pub const GL_TANGENT_ARRAY_POINTER_EXT: u32 = 0x8442;
pub const GL_TANGENT_ARRAY_STRIDE_EXT: u32 = 0x843F;
pub const GL_TANGENT_ARRAY_TYPE_EXT: u32 = 0x843E;
pub const GL_TASK_SHADER_BIT_NV: u32 = 0x00000080;
pub const GL_TASK_SHADER_NV: u32 = 0x955A;
pub const GL_TASK_SUBROUTINE_NV: u32 = 0x957D;
pub const GL_TASK_SUBROUTINE_UNIFORM_NV: u32 = 0x957F;
pub const GL_TASK_WORK_GROUP_SIZE_NV: u32 = 0x953F;
pub const GL_TERMINATE_SEQUENCE_COMMAND_NV: u32 = 0x0000;
pub const GL_TESSELLATION_FACTOR_AMD: u32 = 0x9005;
pub const GL_TESSELLATION_MODE_AMD: u32 = 0x9004;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES: u32 = 0x8E75;
pub const GL_TESS_CONTROL_PROGRAM_NV: u32 = 0x891E;
pub const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV: u32 = 0x8C74;
pub const GL_TESS_CONTROL_SHADER: u32 = 0x8E88;
pub const GL_TESS_CONTROL_SHADER_BIT: u32 = 0x00000008;
pub const GL_TESS_CONTROL_SHADER_PATCHES: u32 = 0x82F1;
pub const GL_TESS_CONTROL_SHADER_PATCHES_ARB: u32 = 0x82F1;
pub const GL_TESS_CONTROL_SUBROUTINE: u32 = 0x92E9;
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM: u32 = 0x92EF;
pub const GL_TESS_CONTROL_TEXTURE: u32 = 0x829C;
pub const GL_TESS_EVALUATION_PROGRAM_NV: u32 = 0x891F;
pub const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV: u32 = 0x8C75;
pub const GL_TESS_EVALUATION_SHADER: u32 = 0x8E87;
pub const GL_TESS_EVALUATION_SHADER_BIT: u32 = 0x00000010;
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS: u32 = 0x82F2;
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB: u32 = 0x82F2;
pub const GL_TESS_EVALUATION_SUBROUTINE: u32 = 0x92EA;
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM: u32 = 0x92F0;
pub const GL_TESS_EVALUATION_TEXTURE: u32 = 0x829D;
pub const GL_TESS_GEN_MODE: u32 = 0x8E76;
pub const GL_TESS_GEN_POINT_MODE: u32 = 0x8E79;
pub const GL_TESS_GEN_SPACING: u32 = 0x8E77;
pub const GL_TESS_GEN_VERTEX_ORDER: u32 = 0x8E78;
pub const GL_TEXCOORD1_BIT_PGI: u32 = 0x10000000;
pub const GL_TEXCOORD2_BIT_PGI: u32 = 0x20000000;
pub const GL_TEXCOORD3_BIT_PGI: u32 = 0x40000000;
pub const GL_TEXCOORD4_BIT_PGI: u32 = 0x80000000;
pub const GL_TEXTURE: u32 = 0x1702;
pub const GL_TEXTURE0: u32 = 0x84C0;
pub const GL_TEXTURE0_ARB: u32 = 0x84C0;
pub const GL_TEXTURE1: u32 = 0x84C1;
pub const GL_TEXTURE10: u32 = 0x84CA;
pub const GL_TEXTURE10_ARB: u32 = 0x84CA;
pub const GL_TEXTURE11: u32 = 0x84CB;
pub const GL_TEXTURE11_ARB: u32 = 0x84CB;
pub const GL_TEXTURE12: u32 = 0x84CC;
pub const GL_TEXTURE12_ARB: u32 = 0x84CC;
pub const GL_TEXTURE13: u32 = 0x84CD;
pub const GL_TEXTURE13_ARB: u32 = 0x84CD;
pub const GL_TEXTURE14: u32 = 0x84CE;
pub const GL_TEXTURE14_ARB: u32 = 0x84CE;
pub const GL_TEXTURE15: u32 = 0x84CF;
pub const GL_TEXTURE15_ARB: u32 = 0x84CF;
pub const GL_TEXTURE16: u32 = 0x84D0;
pub const GL_TEXTURE16_ARB: u32 = 0x84D0;
pub const GL_TEXTURE17: u32 = 0x84D1;
pub const GL_TEXTURE17_ARB: u32 = 0x84D1;
pub const GL_TEXTURE18: u32 = 0x84D2;
pub const GL_TEXTURE18_ARB: u32 = 0x84D2;
pub const GL_TEXTURE19: u32 = 0x84D3;
pub const GL_TEXTURE19_ARB: u32 = 0x84D3;
pub const GL_TEXTURE1_ARB: u32 = 0x84C1;
pub const GL_TEXTURE2: u32 = 0x84C2;
pub const GL_TEXTURE20: u32 = 0x84D4;
pub const GL_TEXTURE20_ARB: u32 = 0x84D4;
pub const GL_TEXTURE21: u32 = 0x84D5;
pub const GL_TEXTURE21_ARB: u32 = 0x84D5;
pub const GL_TEXTURE22: u32 = 0x84D6;
pub const GL_TEXTURE22_ARB: u32 = 0x84D6;
pub const GL_TEXTURE23: u32 = 0x84D7;
pub const GL_TEXTURE23_ARB: u32 = 0x84D7;
pub const GL_TEXTURE24: u32 = 0x84D8;
pub const GL_TEXTURE24_ARB: u32 = 0x84D8;
pub const GL_TEXTURE25: u32 = 0x84D9;
pub const GL_TEXTURE25_ARB: u32 = 0x84D9;
pub const GL_TEXTURE26: u32 = 0x84DA;
pub const GL_TEXTURE26_ARB: u32 = 0x84DA;
pub const GL_TEXTURE27: u32 = 0x84DB;
pub const GL_TEXTURE27_ARB: u32 = 0x84DB;
pub const GL_TEXTURE28: u32 = 0x84DC;
pub const GL_TEXTURE28_ARB: u32 = 0x84DC;
pub const GL_TEXTURE29: u32 = 0x84DD;
pub const GL_TEXTURE29_ARB: u32 = 0x84DD;
pub const GL_TEXTURE2_ARB: u32 = 0x84C2;
pub const GL_TEXTURE3: u32 = 0x84C3;
pub const GL_TEXTURE30: u32 = 0x84DE;
pub const GL_TEXTURE30_ARB: u32 = 0x84DE;
pub const GL_TEXTURE31: u32 = 0x84DF;
pub const GL_TEXTURE31_ARB: u32 = 0x84DF;
pub const GL_TEXTURE3_ARB: u32 = 0x84C3;
pub const GL_TEXTURE4: u32 = 0x84C4;
pub const GL_TEXTURE4_ARB: u32 = 0x84C4;
pub const GL_TEXTURE5: u32 = 0x84C5;
pub const GL_TEXTURE5_ARB: u32 = 0x84C5;
pub const GL_TEXTURE6: u32 = 0x84C6;
pub const GL_TEXTURE6_ARB: u32 = 0x84C6;
pub const GL_TEXTURE7: u32 = 0x84C7;
pub const GL_TEXTURE7_ARB: u32 = 0x84C7;
pub const GL_TEXTURE8: u32 = 0x84C8;
pub const GL_TEXTURE8_ARB: u32 = 0x84C8;
pub const GL_TEXTURE9: u32 = 0x84C9;
pub const GL_TEXTURE9_ARB: u32 = 0x84C9;
pub const GL_TEXTURE_1D: u32 = 0x0DE0;
pub const GL_TEXTURE_1D_ARRAY: u32 = 0x8C18;
pub const GL_TEXTURE_1D_ARRAY_EXT: u32 = 0x8C18;
pub const GL_TEXTURE_1D_BINDING_EXT: u32 = 0x8068;
pub const GL_TEXTURE_1D_STACK_BINDING_MESAX: u32 = 0x875D;
pub const GL_TEXTURE_1D_STACK_MESAX: u32 = 0x8759;
pub const GL_TEXTURE_2D: u32 = 0x0DE1;
pub const GL_TEXTURE_2D_ARRAY: u32 = 0x8C1A;
pub const GL_TEXTURE_2D_ARRAY_EXT: u32 = 0x8C1A;
pub const GL_TEXTURE_2D_BINDING_EXT: u32 = 0x8069;
pub const GL_TEXTURE_2D_MULTISAMPLE: u32 = 0x9100;
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY: u32 = 0x9102;
pub const GL_TEXTURE_2D_STACK_BINDING_MESAX: u32 = 0x875E;
pub const GL_TEXTURE_2D_STACK_MESAX: u32 = 0x875A;
pub const GL_TEXTURE_3D: u32 = 0x806F;
pub const GL_TEXTURE_3D_BINDING_EXT: u32 = 0x806A;
pub const GL_TEXTURE_3D_EXT: u32 = 0x806F;
pub const GL_TEXTURE_4DSIZE_SGIS: u32 = 0x8136;
pub const GL_TEXTURE_4D_BINDING_SGIS: u32 = 0x814F;
pub const GL_TEXTURE_4D_SGIS: u32 = 0x8134;
pub const GL_TEXTURE_ALPHA_SIZE: u32 = 0x805F;
pub const GL_TEXTURE_ALPHA_SIZE_EXT: u32 = 0x805F;
pub const GL_TEXTURE_ALPHA_TYPE: u32 = 0x8C13;
pub const GL_TEXTURE_ALPHA_TYPE_ARB: u32 = 0x8C13;
pub const GL_TEXTURE_APPLICATION_MODE_EXT: u32 = 0x834F;
pub const GL_TEXTURE_BASE_LEVEL: u32 = 0x813C;
pub const GL_TEXTURE_BASE_LEVEL_SGIS: u32 = 0x813C;
pub const GL_TEXTURE_BINDING_1D: u32 = 0x8068;
pub const GL_TEXTURE_BINDING_1D_ARRAY: u32 = 0x8C1C;
pub const GL_TEXTURE_BINDING_1D_ARRAY_EXT: u32 = 0x8C1C;
pub const GL_TEXTURE_BINDING_2D: u32 = 0x8069;
pub const GL_TEXTURE_BINDING_2D_ARRAY: u32 = 0x8C1D;
pub const GL_TEXTURE_BINDING_2D_ARRAY_EXT: u32 = 0x8C1D;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE: u32 = 0x9104;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: u32 = 0x9105;
pub const GL_TEXTURE_BINDING_3D: u32 = 0x806A;
pub const GL_TEXTURE_BINDING_BUFFER: u32 = 0x8C2C;
pub const GL_TEXTURE_BINDING_BUFFER_ARB: u32 = 0x8C2C;
pub const GL_TEXTURE_BINDING_BUFFER_EXT: u32 = 0x8C2C;
pub const GL_TEXTURE_BINDING_CUBE_MAP: u32 = 0x8514;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB: u32 = 0x8514;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY: u32 = 0x900A;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB: u32 = 0x900A;
pub const GL_TEXTURE_BINDING_CUBE_MAP_EXT: u32 = 0x8514;
pub const GL_TEXTURE_BINDING_RECTANGLE: u32 = 0x84F6;
pub const GL_TEXTURE_BINDING_RECTANGLE_ARB: u32 = 0x84F6;
pub const GL_TEXTURE_BINDING_RECTANGLE_NV: u32 = 0x84F6;
pub const GL_TEXTURE_BINDING_RENDERBUFFER_NV: u32 = 0x8E53;
pub const GL_TEXTURE_BLUE_SIZE: u32 = 0x805E;
pub const GL_TEXTURE_BLUE_SIZE_EXT: u32 = 0x805E;
pub const GL_TEXTURE_BLUE_TYPE: u32 = 0x8C12;
pub const GL_TEXTURE_BLUE_TYPE_ARB: u32 = 0x8C12;
pub const GL_TEXTURE_BORDER_COLOR: u32 = 0x1004;
pub const GL_TEXTURE_BORDER_VALUES_NV: u32 = 0x871A;
pub const GL_TEXTURE_BUFFER: u32 = 0x8C2A;
pub const GL_TEXTURE_BUFFER_ARB: u32 = 0x8C2A;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING: u32 = 0x8C2D;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB: u32 = 0x8C2D;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT: u32 = 0x8C2D;
pub const GL_TEXTURE_BUFFER_EXT: u32 = 0x8C2A;
pub const GL_TEXTURE_BUFFER_FORMAT_ARB: u32 = 0x8C2E;
pub const GL_TEXTURE_BUFFER_FORMAT_EXT: u32 = 0x8C2E;
pub const GL_TEXTURE_BUFFER_OFFSET: u32 = 0x919D;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT: u32 = 0x919F;
pub const GL_TEXTURE_BUFFER_SIZE: u32 = 0x919E;
pub const GL_TEXTURE_CLIPMAP_CENTER_SGIX: u32 = 0x8171;
pub const GL_TEXTURE_CLIPMAP_DEPTH_SGIX: u32 = 0x8176;
pub const GL_TEXTURE_CLIPMAP_FRAME_SGIX: u32 = 0x8172;
pub const GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX: u32 = 0x8175;
pub const GL_TEXTURE_CLIPMAP_OFFSET_SGIX: u32 = 0x8173;
pub const GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX: u32 = 0x8174;
pub const GL_TEXTURE_COLOR_SAMPLES_NV: u32 = 0x9046;
pub const GL_TEXTURE_COLOR_TABLE_SGI: u32 = 0x80BC;
pub const GL_TEXTURE_COLOR_WRITEMASK_SGIS: u32 = 0x81EF;
pub const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB: u32 = 0x80BF;
pub const GL_TEXTURE_COMPARE_FUNC: u32 = 0x884D;
pub const GL_TEXTURE_COMPARE_FUNC_ARB: u32 = 0x884D;
pub const GL_TEXTURE_COMPARE_MODE: u32 = 0x884C;
pub const GL_TEXTURE_COMPARE_MODE_ARB: u32 = 0x884C;
pub const GL_TEXTURE_COMPARE_OPERATOR_SGIX: u32 = 0x819B;
pub const GL_TEXTURE_COMPARE_SGIX: u32 = 0x819A;
pub const GL_TEXTURE_COMPRESSED: u32 = 0x86A1;
pub const GL_TEXTURE_COMPRESSED_ARB: u32 = 0x86A1;
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT: u32 = 0x82B2;
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE: u32 = 0x82B3;
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH: u32 = 0x82B1;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE: u32 = 0x86A0;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB: u32 = 0x86A0;
pub const GL_TEXTURE_COMPRESSION_HINT: u32 = 0x84EF;
pub const GL_TEXTURE_COMPRESSION_HINT_ARB: u32 = 0x84EF;
pub const GL_TEXTURE_CONSTANT_DATA_SUNX: u32 = 0x81D6;
pub const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV: u32 = 0x8F25;
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889A;
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT: u32 = 0x808B;
pub const GL_TEXTURE_COORD_ARRAY_EXT: u32 = 0x8078;
pub const GL_TEXTURE_COORD_ARRAY_LENGTH_NV: u32 = 0x8F2F;
pub const GL_TEXTURE_COORD_ARRAY_LIST_IBM: u32 = 103074;
pub const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM: u32 = 103084;
pub const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL: u32 = 0x83F8;
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT: u32 = 0x8092;
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT: u32 = 0x8088;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT: u32 = 0x808A;
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT: u32 = 0x8089;
pub const GL_TEXTURE_COORD_NV: u32 = 0x8C79;
pub const GL_TEXTURE_COVERAGE_SAMPLES_NV: u32 = 0x9045;
pub const GL_TEXTURE_CUBE_MAP: u32 = 0x8513;
pub const GL_TEXTURE_CUBE_MAP_ARB: u32 = 0x8513;
pub const GL_TEXTURE_CUBE_MAP_ARRAY: u32 = 0x9009;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB: u32 = 0x9009;
pub const GL_TEXTURE_CUBE_MAP_EXT: u32 = 0x8513;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X: u32 = 0x8516;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB: u32 = 0x8516;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT: u32 = 0x8516;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: u32 = 0x8518;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB: u32 = 0x8518;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT: u32 = 0x8518;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: u32 = 0x851A;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB: u32 = 0x851A;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT: u32 = 0x851A;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X: u32 = 0x8515;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB: u32 = 0x8515;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT: u32 = 0x8515;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y: u32 = 0x8517;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB: u32 = 0x8517;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT: u32 = 0x8517;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z: u32 = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB: u32 = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT: u32 = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS: u32 = 0x884F;
pub const GL_TEXTURE_DEFORMATION_BIT_SGIX: u32 = 0x00000001;
pub const GL_TEXTURE_DEFORMATION_SGIX: u32 = 0x8195;
pub const GL_TEXTURE_DEPTH: u32 = 0x8071;
pub const GL_TEXTURE_DEPTH_EXT: u32 = 0x8071;
pub const GL_TEXTURE_DEPTH_SIZE: u32 = 0x884A;
pub const GL_TEXTURE_DEPTH_SIZE_ARB: u32 = 0x884A;
pub const GL_TEXTURE_DEPTH_TYPE: u32 = 0x8C16;
pub const GL_TEXTURE_DEPTH_TYPE_ARB: u32 = 0x8C16;
pub const GL_TEXTURE_DS_SIZE_NV: u32 = 0x871D;
pub const GL_TEXTURE_DT_SIZE_NV: u32 = 0x871E;
pub const GL_TEXTURE_ENV_BIAS_SGIX: u32 = 0x80BE;
pub const GL_TEXTURE_FETCH_BARRIER_BIT: u32 = 0x00000008;
pub const GL_TEXTURE_FETCH_BARRIER_BIT_EXT: u32 = 0x00000008;
pub const GL_TEXTURE_FILTER4_SIZE_SGIS: u32 = 0x8147;
pub const GL_TEXTURE_FILTER_CONTROL_EXT: u32 = 0x8500;
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS: u32 = 0x9107;
pub const GL_TEXTURE_FLOAT_COMPONENTS_NV: u32 = 0x888C;
pub const GL_TEXTURE_FREE_MEMORY_ATI: u32 = 0x87FC;
pub const GL_TEXTURE_GATHER: u32 = 0x82A2;
pub const GL_TEXTURE_GATHER_SHADOW: u32 = 0x82A3;
pub const GL_TEXTURE_GEQUAL_R_SGIX: u32 = 0x819D;
pub const GL_TEXTURE_GREEN_SIZE: u32 = 0x805D;
pub const GL_TEXTURE_GREEN_SIZE_EXT: u32 = 0x805D;
pub const GL_TEXTURE_GREEN_TYPE: u32 = 0x8C11;
pub const GL_TEXTURE_GREEN_TYPE_ARB: u32 = 0x8C11;
pub const GL_TEXTURE_HEIGHT: u32 = 0x1001;
pub const GL_TEXTURE_HI_SIZE_NV: u32 = 0x871B;
pub const GL_TEXTURE_IMAGE_FORMAT: u32 = 0x828F;
pub const GL_TEXTURE_IMAGE_TYPE: u32 = 0x8290;
pub const GL_TEXTURE_IMMUTABLE_FORMAT: u32 = 0x912F;
pub const GL_TEXTURE_IMMUTABLE_LEVELS: u32 = 0x82DF;
pub const GL_TEXTURE_INDEX_SIZE_EXT: u32 = 0x80ED;
pub const GL_TEXTURE_INTENSITY_SIZE_EXT: u32 = 0x8061;
pub const GL_TEXTURE_INTENSITY_TYPE_ARB: u32 = 0x8C15;
pub const GL_TEXTURE_INTERNAL_FORMAT: u32 = 0x1003;
pub const GL_TEXTURE_LEQUAL_R_SGIX: u32 = 0x819C;
pub const GL_TEXTURE_LIGHTING_MODE_HP: u32 = 0x8167;
pub const GL_TEXTURE_LIGHT_EXT: u32 = 0x8350;
pub const GL_TEXTURE_LOD_BIAS: u32 = 0x8501;
pub const GL_TEXTURE_LOD_BIAS_EXT: u32 = 0x8501;
pub const GL_TEXTURE_LOD_BIAS_R_SGIX: u32 = 0x8190;
pub const GL_TEXTURE_LOD_BIAS_S_SGIX: u32 = 0x818E;
pub const GL_TEXTURE_LOD_BIAS_T_SGIX: u32 = 0x818F;
pub const GL_TEXTURE_LO_SIZE_NV: u32 = 0x871C;
pub const GL_TEXTURE_LUMINANCE_SIZE_EXT: u32 = 0x8060;
pub const GL_TEXTURE_LUMINANCE_TYPE_ARB: u32 = 0x8C14;
pub const GL_TEXTURE_MAG_FILTER: u32 = 0x2800;
pub const GL_TEXTURE_MAG_SIZE_NV: u32 = 0x871F;
pub const GL_TEXTURE_MATERIAL_FACE_EXT: u32 = 0x8351;
pub const GL_TEXTURE_MATERIAL_PARAMETER_EXT: u32 = 0x8352;
pub const GL_TEXTURE_MAX_ANISOTROPY: u32 = 0x84FE;
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 0x84FE;
pub const GL_TEXTURE_MAX_CLAMP_R_SGIX: u32 = 0x836B;
pub const GL_TEXTURE_MAX_CLAMP_S_SGIX: u32 = 0x8369;
pub const GL_TEXTURE_MAX_CLAMP_T_SGIX: u32 = 0x836A;
pub const GL_TEXTURE_MAX_LEVEL: u32 = 0x813D;
pub const GL_TEXTURE_MAX_LEVEL_SGIS: u32 = 0x813D;
pub const GL_TEXTURE_MAX_LOD: u32 = 0x813B;
pub const GL_TEXTURE_MAX_LOD_SGIS: u32 = 0x813B;
pub const GL_TEXTURE_MEMORY_LAYOUT_INTEL: u32 = 0x83FF;
pub const GL_TEXTURE_MIN_FILTER: u32 = 0x2801;
pub const GL_TEXTURE_MIN_LOD: u32 = 0x813A;
pub const GL_TEXTURE_MIN_LOD_SGIS: u32 = 0x813A;
pub const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX: u32 = 0x812E;
pub const GL_TEXTURE_NORMAL_EXT: u32 = 0x85AF;
pub const GL_TEXTURE_POST_SPECULAR_HP: u32 = 0x8168;
pub const GL_TEXTURE_PRE_SPECULAR_HP: u32 = 0x8169;
pub const GL_TEXTURE_PRIORITY_EXT: u32 = 0x8066;
pub const GL_TEXTURE_RANGE_LENGTH_APPLE: u32 = 0x85B7;
pub const GL_TEXTURE_RANGE_POINTER_APPLE: u32 = 0x85B8;
pub const GL_TEXTURE_RECTANGLE: u32 = 0x84F5;
pub const GL_TEXTURE_RECTANGLE_ARB: u32 = 0x84F5;
pub const GL_TEXTURE_RECTANGLE_NV: u32 = 0x84F5;
pub const GL_TEXTURE_REDUCTION_MODE_ARB: u32 = 0x9366;
pub const GL_TEXTURE_REDUCTION_MODE_EXT: u32 = 0x9366;
pub const GL_TEXTURE_RED_SIZE: u32 = 0x805C;
pub const GL_TEXTURE_RED_SIZE_EXT: u32 = 0x805C;
pub const GL_TEXTURE_RED_TYPE: u32 = 0x8C10;
pub const GL_TEXTURE_RED_TYPE_ARB: u32 = 0x8C10;
pub const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV: u32 = 0x8E54;
pub const GL_TEXTURE_RENDERBUFFER_NV: u32 = 0x8E55;
pub const GL_TEXTURE_RESIDENT_EXT: u32 = 0x8067;
pub const GL_TEXTURE_SAMPLES: u32 = 0x9106;
pub const GL_TEXTURE_SHADER_NV: u32 = 0x86DE;
pub const GL_TEXTURE_SHADOW: u32 = 0x82A1;
pub const GL_TEXTURE_SHARED_SIZE: u32 = 0x8C3F;
pub const GL_TEXTURE_SHARED_SIZE_EXT: u32 = 0x8C3F;
pub const GL_TEXTURE_SPARSE_ARB: u32 = 0x91A6;
pub const GL_TEXTURE_SRGB_DECODE_EXT: u32 = 0x8A48;
pub const GL_TEXTURE_STENCIL_SIZE: u32 = 0x88F1;
pub const GL_TEXTURE_STENCIL_SIZE_EXT: u32 = 0x88F1;
pub const GL_TEXTURE_STORAGE_HINT_APPLE: u32 = 0x85BC;
pub const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD: u32 = 0x00000001;
pub const GL_TEXTURE_SWIZZLE_A: u32 = 0x8E45;
pub const GL_TEXTURE_SWIZZLE_A_EXT: u32 = 0x8E45;
pub const GL_TEXTURE_SWIZZLE_B: u32 = 0x8E44;
pub const GL_TEXTURE_SWIZZLE_B_EXT: u32 = 0x8E44;
pub const GL_TEXTURE_SWIZZLE_G: u32 = 0x8E43;
pub const GL_TEXTURE_SWIZZLE_G_EXT: u32 = 0x8E43;
pub const GL_TEXTURE_SWIZZLE_R: u32 = 0x8E42;
pub const GL_TEXTURE_SWIZZLE_RGBA: u32 = 0x8E46;
pub const GL_TEXTURE_SWIZZLE_RGBA_EXT: u32 = 0x8E46;
pub const GL_TEXTURE_SWIZZLE_R_EXT: u32 = 0x8E42;
pub const GL_TEXTURE_TARGET: u32 = 0x1006;
pub const GL_TEXTURE_TILING_EXT: u32 = 0x9580;
pub const GL_TEXTURE_TOO_LARGE_EXT: u32 = 0x8065;
pub const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV: u32 = 0x888F;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT: u32 = 0x00000100;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT: u32 = 0x00000100;
pub const GL_TEXTURE_VIEW: u32 = 0x82B5;
pub const GL_TEXTURE_VIEW_MIN_LAYER: u32 = 0x82DD;
pub const GL_TEXTURE_VIEW_MIN_LEVEL: u32 = 0x82DB;
pub const GL_TEXTURE_VIEW_NUM_LAYERS: u32 = 0x82DE;
pub const GL_TEXTURE_VIEW_NUM_LEVELS: u32 = 0x82DC;
pub const GL_TEXTURE_WIDTH: u32 = 0x1000;
pub const GL_TEXTURE_WRAP_Q_SGIS: u32 = 0x8137;
pub const GL_TEXTURE_WRAP_R: u32 = 0x8072;
pub const GL_TEXTURE_WRAP_R_EXT: u32 = 0x8072;
pub const GL_TEXTURE_WRAP_S: u32 = 0x2802;
pub const GL_TEXTURE_WRAP_T: u32 = 0x2803;
pub const GL_TEXT_FRAGMENT_SHADER_ATI: u32 = 0x8200;
pub const GL_TILE_RASTER_ORDER_FIXED_MESA: u32 = 0x8BB8;
pub const GL_TILE_RASTER_ORDER_INCREASING_X_MESA: u32 = 0x8BB9;
pub const GL_TILE_RASTER_ORDER_INCREASING_Y_MESA: u32 = 0x8BBA;
pub const GL_TILING_TYPES_EXT: u32 = 0x9583;
pub const GL_TIMELINE_SEMAPHORE_VALUE_NV: u32 = 0x9595;
pub const GL_TIMEOUT_EXPIRED: u32 = 0x911B;
pub const GL_TIMEOUT_IGNORED: u64 = 0xFFFFFFFFFFFFFFFF;
pub const GL_TIMESTAMP: u32 = 0x8E28;
pub const GL_TIME_ELAPSED: u32 = 0x88BF;
pub const GL_TIME_ELAPSED_EXT: u32 = 0x88BF;
pub const GL_TOP_LEVEL_ARRAY_SIZE: u32 = 0x930C;
pub const GL_TOP_LEVEL_ARRAY_STRIDE: u32 = 0x930D;
pub const GL_TRACK_MATRIX_NV: u32 = 0x8648;
pub const GL_TRACK_MATRIX_TRANSFORM_NV: u32 = 0x8649;
pub const GL_TRANSFORM_FEEDBACK: u32 = 0x8E22;
pub const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV: u32 = 0x8C7E;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT: u32 = 0x00000800;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT: u32 = 0x00000800;
pub const GL_TRANSFORM_FEEDBACK_BINDING: u32 = 0x8E25;
pub const GL_TRANSFORM_FEEDBACK_BINDING_NV: u32 = 0x8E25;
pub const GL_TRANSFORM_FEEDBACK_BUFFER: u32 = 0x8C8E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE: u32 = 0x8E24;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV: u32 = 0x8E24;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING: u32 = 0x8C8F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT: u32 = 0x8C8F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV: u32 = 0x8C8F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_EXT: u32 = 0x8C8E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX: u32 = 0x934B;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE: u32 = 0x8C7F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT: u32 = 0x8C7F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV: u32 = 0x8C7F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_NV: u32 = 0x8C8E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED: u32 = 0x8E23;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV: u32 = 0x8E23;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE: u32 = 0x8C85;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT: u32 = 0x8C85;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV: u32 = 0x8C85;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START: u32 = 0x8C84;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT: u32 = 0x8C84;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV: u32 = 0x8C84;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE: u32 = 0x934C;
pub const GL_TRANSFORM_FEEDBACK_NV: u32 = 0x8E22;
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW: u32 = 0x82EC;
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB: u32 = 0x82EC;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: u32 = 0x8C88;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT: u32 = 0x8C88;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV: u32 = 0x8C88;
pub const GL_TRANSFORM_FEEDBACK_RECORD_NV: u32 = 0x8C86;
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW: u32 = 0x82ED;
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB: u32 = 0x82ED;
pub const GL_TRANSFORM_FEEDBACK_VARYING: u32 = 0x92F4;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS: u32 = 0x8C83;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT: u32 = 0x8C83;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_NV: u32 = 0x8C83;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: u32 = 0x8C76;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT: u32 = 0x8C76;
pub const GL_TRANSFORM_HINT_APPLE: u32 = 0x85B1;
pub const GL_TRANSLATE_2D_NV: u32 = 0x9090;
pub const GL_TRANSLATE_3D_NV: u32 = 0x9091;
pub const GL_TRANSLATE_X_NV: u32 = 0x908E;
pub const GL_TRANSLATE_Y_NV: u32 = 0x908F;
pub const GL_TRANSPOSE_AFFINE_2D_NV: u32 = 0x9096;
pub const GL_TRANSPOSE_AFFINE_3D_NV: u32 = 0x9098;
pub const GL_TRANSPOSE_COLOR_MATRIX_ARB: u32 = 0x84E6;
pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB: u32 = 0x88B7;
pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB: u32 = 0x84E3;
pub const GL_TRANSPOSE_NV: u32 = 0x862C;
pub const GL_TRANSPOSE_PROGRAM_MATRIX_EXT: u32 = 0x8E2E;
pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB: u32 = 0x84E4;
pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB: u32 = 0x84E5;
pub const GL_TRIANGLES: u32 = 0x0004;
pub const GL_TRIANGLES_ADJACENCY: u32 = 0x000C;
pub const GL_TRIANGLES_ADJACENCY_ARB: u32 = 0x000C;
pub const GL_TRIANGLES_ADJACENCY_EXT: u32 = 0x000C;
pub const GL_TRIANGLE_FAN: u32 = 0x0006;
pub const GL_TRIANGLE_LIST_SUN: u32 = 0x81D7;
pub const GL_TRIANGLE_MESH_SUN: u32 = 0x8615;
pub const GL_TRIANGLE_STRIP: u32 = 0x0005;
pub const GL_TRIANGLE_STRIP_ADJACENCY: u32 = 0x000D;
pub const GL_TRIANGLE_STRIP_ADJACENCY_ARB: u32 = 0x000D;
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT: u32 = 0x000D;
pub const GL_TRIANGULAR_NV: u32 = 0x90A5;
pub const GL_TRUE: u32 = 1;
pub const GL_TYPE: u32 = 0x92FA;
pub const GL_UNCORRELATED_NV: u32 = 0x9282;
pub const GL_UNDEFINED_APPLE: u32 = 0x8A1C;
pub const GL_UNDEFINED_VERTEX: u32 = 0x8260;
pub const GL_UNIFORM: u32 = 0x92E1;
pub const GL_UNIFORM_ADDRESS_COMMAND_NV: u32 = 0x000A;
pub const GL_UNIFORM_ARRAY_STRIDE: u32 = 0x8A3C;
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX: u32 = 0x92DA;
pub const GL_UNIFORM_BARRIER_BIT: u32 = 0x00000004;
pub const GL_UNIFORM_BARRIER_BIT_EXT: u32 = 0x00000004;
pub const GL_UNIFORM_BLOCK: u32 = 0x92E2;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS: u32 = 0x8A42;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: u32 = 0x8A43;
pub const GL_UNIFORM_BLOCK_BINDING: u32 = 0x8A3F;
pub const GL_UNIFORM_BLOCK_DATA_SIZE: u32 = 0x8A40;
pub const GL_UNIFORM_BLOCK_INDEX: u32 = 0x8A3A;
pub const GL_UNIFORM_BLOCK_NAME_LENGTH: u32 = 0x8A41;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER: u32 = 0x90EC;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: u32 = 0x8A46;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: u32 = 0x8A45;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV: u32 = 0x959C;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV: u32 = 0x959D;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 0x84F0;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 0x84F1;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: u32 = 0x8A44;
pub const GL_UNIFORM_BUFFER: u32 = 0x8A11;
pub const GL_UNIFORM_BUFFER_ADDRESS_NV: u32 = 0x936F;
pub const GL_UNIFORM_BUFFER_BINDING: u32 = 0x8A28;
pub const GL_UNIFORM_BUFFER_BINDING_EXT: u32 = 0x8DEF;
pub const GL_UNIFORM_BUFFER_EXT: u32 = 0x8DEE;
pub const GL_UNIFORM_BUFFER_LENGTH_NV: u32 = 0x9370;
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT: u32 = 0x8A34;
pub const GL_UNIFORM_BUFFER_SIZE: u32 = 0x8A2A;
pub const GL_UNIFORM_BUFFER_START: u32 = 0x8A29;
pub const GL_UNIFORM_BUFFER_UNIFIED_NV: u32 = 0x936E;
pub const GL_UNIFORM_IS_ROW_MAJOR: u32 = 0x8A3E;
pub const GL_UNIFORM_MATRIX_STRIDE: u32 = 0x8A3D;
pub const GL_UNIFORM_NAME_LENGTH: u32 = 0x8A39;
pub const GL_UNIFORM_OFFSET: u32 = 0x8A3B;
pub const GL_UNIFORM_SIZE: u32 = 0x8A38;
pub const GL_UNIFORM_TYPE: u32 = 0x8A37;
pub const GL_UNKNOWN_CONTEXT_RESET: u32 = 0x8255;
pub const GL_UNKNOWN_CONTEXT_RESET_ARB: u32 = 0x8255;
pub const GL_UNPACK_ALIGNMENT: u32 = 0x0CF5;
pub const GL_UNPACK_CLIENT_STORAGE_APPLE: u32 = 0x85B2;
pub const GL_UNPACK_CMYK_HINT_EXT: u32 = 0x800F;
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH: u32 = 0x9129;
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT: u32 = 0x9128;
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE: u32 = 0x912A;
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH: u32 = 0x9127;
pub const GL_UNPACK_CONSTANT_DATA_SUNX: u32 = 0x81D5;
pub const GL_UNPACK_IMAGE_DEPTH_SGIS: u32 = 0x8133;
pub const GL_UNPACK_IMAGE_HEIGHT: u32 = 0x806E;
pub const GL_UNPACK_IMAGE_HEIGHT_EXT: u32 = 0x806E;
pub const GL_UNPACK_LSB_FIRST: u32 = 0x0CF1;
pub const GL_UNPACK_RESAMPLE_OML: u32 = 0x8985;
pub const GL_UNPACK_RESAMPLE_SGIX: u32 = 0x842F;
pub const GL_UNPACK_ROW_BYTES_APPLE: u32 = 0x8A16;
pub const GL_UNPACK_ROW_LENGTH: u32 = 0x0CF2;
pub const GL_UNPACK_SKIP_IMAGES: u32 = 0x806D;
pub const GL_UNPACK_SKIP_IMAGES_EXT: u32 = 0x806D;
pub const GL_UNPACK_SKIP_PIXELS: u32 = 0x0CF4;
pub const GL_UNPACK_SKIP_ROWS: u32 = 0x0CF3;
pub const GL_UNPACK_SKIP_VOLUMES_SGIS: u32 = 0x8132;
pub const GL_UNPACK_SUBSAMPLE_RATE_SGIX: u32 = 0x85A1;
pub const GL_UNPACK_SWAP_BYTES: u32 = 0x0CF0;
pub const GL_UNSIGNALED: u32 = 0x9118;
pub const GL_UNSIGNED_BYTE: u32 = 0x1401;
pub const GL_UNSIGNED_BYTE_2_3_3_REV: u32 = 0x8362;
pub const GL_UNSIGNED_BYTE_3_3_2: u32 = 0x8032;
pub const GL_UNSIGNED_BYTE_3_3_2_EXT: u32 = 0x8032;
pub const GL_UNSIGNED_IDENTITY_NV: u32 = 0x8536;
pub const GL_UNSIGNED_INT: u32 = 0x1405;
pub const GL_UNSIGNED_INT16_NV: u32 = 0x8FF0;
pub const GL_UNSIGNED_INT16_VEC2_NV: u32 = 0x8FF1;
pub const GL_UNSIGNED_INT16_VEC3_NV: u32 = 0x8FF2;
pub const GL_UNSIGNED_INT16_VEC4_NV: u32 = 0x8FF3;
pub const GL_UNSIGNED_INT64_AMD: u32 = 0x8BC2;
pub const GL_UNSIGNED_INT64_ARB: u32 = 0x140F;
pub const GL_UNSIGNED_INT64_NV: u32 = 0x140F;
pub const GL_UNSIGNED_INT64_VEC2_ARB: u32 = 0x8FF5;
pub const GL_UNSIGNED_INT64_VEC2_NV: u32 = 0x8FF5;
pub const GL_UNSIGNED_INT64_VEC3_ARB: u32 = 0x8FF6;
pub const GL_UNSIGNED_INT64_VEC3_NV: u32 = 0x8FF6;
pub const GL_UNSIGNED_INT64_VEC4_ARB: u32 = 0x8FF7;
pub const GL_UNSIGNED_INT64_VEC4_NV: u32 = 0x8FF7;
pub const GL_UNSIGNED_INT8_NV: u32 = 0x8FEC;
pub const GL_UNSIGNED_INT8_VEC2_NV: u32 = 0x8FED;
pub const GL_UNSIGNED_INT8_VEC3_NV: u32 = 0x8FEE;
pub const GL_UNSIGNED_INT8_VEC4_NV: u32 = 0x8FEF;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV: u32 = 0x8C3B;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT: u32 = 0x8C3B;
pub const GL_UNSIGNED_INT_10_10_10_2: u32 = 0x8036;
pub const GL_UNSIGNED_INT_10_10_10_2_EXT: u32 = 0x8036;
pub const GL_UNSIGNED_INT_24_8: u32 = 0x84FA;
pub const GL_UNSIGNED_INT_24_8_EXT: u32 = 0x84FA;
pub const GL_UNSIGNED_INT_24_8_NV: u32 = 0x84FA;
pub const GL_UNSIGNED_INT_2_10_10_10_REV: u32 = 0x8368;
pub const GL_UNSIGNED_INT_5_9_9_9_REV: u32 = 0x8C3E;
pub const GL_UNSIGNED_INT_5_9_9_9_REV_EXT: u32 = 0x8C3E;
pub const GL_UNSIGNED_INT_8_8_8_8: u32 = 0x8035;
pub const GL_UNSIGNED_INT_8_8_8_8_EXT: u32 = 0x8035;
pub const GL_UNSIGNED_INT_8_8_8_8_REV: u32 = 0x8367;
pub const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV: u32 = 0x86DB;
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER: u32 = 0x92DB;
pub const GL_UNSIGNED_INT_IMAGE_1D: u32 = 0x9062;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY: u32 = 0x9068;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT: u32 = 0x9068;
pub const GL_UNSIGNED_INT_IMAGE_1D_EXT: u32 = 0x9062;
pub const GL_UNSIGNED_INT_IMAGE_2D: u32 = 0x9063;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY: u32 = 0x9069;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT: u32 = 0x9069;
pub const GL_UNSIGNED_INT_IMAGE_2D_EXT: u32 = 0x9063;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE: u32 = 0x906B;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 0x906C;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: u32 = 0x906C;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT: u32 = 0x906B;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT: u32 = 0x9065;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT: u32 = 0x9065;
pub const GL_UNSIGNED_INT_IMAGE_3D: u32 = 0x9064;
pub const GL_UNSIGNED_INT_IMAGE_3D_EXT: u32 = 0x9064;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER: u32 = 0x9067;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT: u32 = 0x9067;
pub const GL_UNSIGNED_INT_IMAGE_CUBE: u32 = 0x9066;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_EXT: u32 = 0x9066;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY: u32 = 0x906A;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 0x906A;
pub const GL_UNSIGNED_INT_S8_S8_8_8_NV: u32 = 0x86DA;
pub const GL_UNSIGNED_INT_SAMPLER_1D: u32 = 0x8DD1;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY: u32 = 0x8DD6;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT: u32 = 0x8DD6;
pub const GL_UNSIGNED_INT_SAMPLER_1D_EXT: u32 = 0x8DD1;
pub const GL_UNSIGNED_INT_SAMPLER_2D: u32 = 0x8DD2;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY: u32 = 0x8DD7;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT: u32 = 0x8DD7;
pub const GL_UNSIGNED_INT_SAMPLER_2D_EXT: u32 = 0x8DD2;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: u32 = 0x910A;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 0x910D;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT: u32 = 0x8DD5;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT: u32 = 0x8DD5;
pub const GL_UNSIGNED_INT_SAMPLER_3D: u32 = 0x8DD3;
pub const GL_UNSIGNED_INT_SAMPLER_3D_EXT: u32 = 0x8DD3;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER: u32 = 0x8DD8;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD: u32 = 0x9003;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT: u32 = 0x8DD8;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE: u32 = 0x8DD4;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT: u32 = 0x8DD4;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 0x900F;
pub const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV: u32 = 0x8E58;
pub const GL_UNSIGNED_INT_VEC2: u32 = 0x8DC6;
pub const GL_UNSIGNED_INT_VEC2_EXT: u32 = 0x8DC6;
pub const GL_UNSIGNED_INT_VEC3: u32 = 0x8DC7;
pub const GL_UNSIGNED_INT_VEC3_EXT: u32 = 0x8DC7;
pub const GL_UNSIGNED_INT_VEC4: u32 = 0x8DC8;
pub const GL_UNSIGNED_INT_VEC4_EXT: u32 = 0x8DC8;
pub const GL_UNSIGNED_INVERT_NV: u32 = 0x8537;
pub const GL_UNSIGNED_NORMALIZED: u32 = 0x8C17;
pub const GL_UNSIGNED_NORMALIZED_ARB: u32 = 0x8C17;
pub const GL_UNSIGNED_SHORT: u32 = 0x1403;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV: u32 = 0x8366;
pub const GL_UNSIGNED_SHORT_4_4_4_4: u32 = 0x8033;
pub const GL_UNSIGNED_SHORT_4_4_4_4_EXT: u32 = 0x8033;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV: u32 = 0x8365;
pub const GL_UNSIGNED_SHORT_5_5_5_1: u32 = 0x8034;
pub const GL_UNSIGNED_SHORT_5_5_5_1_EXT: u32 = 0x8034;
pub const GL_UNSIGNED_SHORT_5_6_5: u32 = 0x8363;
pub const GL_UNSIGNED_SHORT_5_6_5_REV: u32 = 0x8364;
pub const GL_UNSIGNED_SHORT_8_8_APPLE: u32 = 0x85BA;
pub const GL_UNSIGNED_SHORT_8_8_MESA: u32 = 0x85BA;
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE: u32 = 0x85BB;
pub const GL_UNSIGNED_SHORT_8_8_REV_MESA: u32 = 0x85BB;
pub const GL_UPLOAD_GPU_MASK_NVX: u32 = 0x954A;
pub const GL_UPPER_LEFT: u32 = 0x8CA2;
pub const GL_USE_MISSING_GLYPH_NV: u32 = 0x90AA;
pub const GL_UTF16_NV: u32 = 0x909B;
pub const GL_UTF8_NV: u32 = 0x909A;
pub const GL_UUID_SIZE_EXT: u32 = 16;
pub const GL_VALIDATE_STATUS: u32 = 0x8B83;
pub const GL_VARIABLE_A_NV: u32 = 0x8523;
pub const GL_VARIABLE_B_NV: u32 = 0x8524;
pub const GL_VARIABLE_C_NV: u32 = 0x8525;
pub const GL_VARIABLE_D_NV: u32 = 0x8526;
pub const GL_VARIABLE_E_NV: u32 = 0x8527;
pub const GL_VARIABLE_F_NV: u32 = 0x8528;
pub const GL_VARIABLE_G_NV: u32 = 0x8529;
pub const GL_VARIANT_ARRAY_EXT: u32 = 0x87E8;
pub const GL_VARIANT_ARRAY_POINTER_EXT: u32 = 0x87E9;
pub const GL_VARIANT_ARRAY_STRIDE_EXT: u32 = 0x87E6;
pub const GL_VARIANT_ARRAY_TYPE_EXT: u32 = 0x87E7;
pub const GL_VARIANT_DATATYPE_EXT: u32 = 0x87E5;
pub const GL_VARIANT_EXT: u32 = 0x87C1;
pub const GL_VARIANT_VALUE_EXT: u32 = 0x87E4;
pub const GL_VBO_FREE_MEMORY_ATI: u32 = 0x87FB;
pub const GL_VECTOR_EXT: u32 = 0x87BF;
pub const GL_VENDOR: u32 = 0x1F00;
pub const GL_VERSION: u32 = 0x1F02;
pub const GL_VERTEX23_BIT_PGI: u32 = 0x00000004;
pub const GL_VERTEX4_BIT_PGI: u32 = 0x00000008;
pub const GL_VERTEX_ARRAY: u32 = 0x8074;
pub const GL_VERTEX_ARRAY_ADDRESS_NV: u32 = 0x8F21;
pub const GL_VERTEX_ARRAY_BINDING: u32 = 0x85B5;
pub const GL_VERTEX_ARRAY_BINDING_APPLE: u32 = 0x85B5;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8896;
pub const GL_VERTEX_ARRAY_COUNT_EXT: u32 = 0x807D;
pub const GL_VERTEX_ARRAY_EXT: u32 = 0x8074;
pub const GL_VERTEX_ARRAY_LENGTH_NV: u32 = 0x8F2B;
pub const GL_VERTEX_ARRAY_LIST_IBM: u32 = 103070;
pub const GL_VERTEX_ARRAY_LIST_STRIDE_IBM: u32 = 103080;
pub const GL_VERTEX_ARRAY_OBJECT_AMD: u32 = 0x9154;
pub const GL_VERTEX_ARRAY_OBJECT_EXT: u32 = 0x9154;
pub const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL: u32 = 0x83F5;
pub const GL_VERTEX_ARRAY_POINTER_EXT: u32 = 0x808E;
pub const GL_VERTEX_ARRAY_RANGE_APPLE: u32 = 0x851D;
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE: u32 = 0x851E;
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_NV: u32 = 0x851E;
pub const GL_VERTEX_ARRAY_RANGE_NV: u32 = 0x851D;
pub const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE: u32 = 0x8521;
pub const GL_VERTEX_ARRAY_RANGE_POINTER_NV: u32 = 0x8521;
pub const GL_VERTEX_ARRAY_RANGE_VALID_NV: u32 = 0x851F;
pub const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV: u32 = 0x8533;
pub const GL_VERTEX_ARRAY_SIZE_EXT: u32 = 0x807A;
pub const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE: u32 = 0x851F;
pub const GL_VERTEX_ARRAY_STRIDE_EXT: u32 = 0x807C;
pub const GL_VERTEX_ARRAY_TYPE_EXT: u32 = 0x807B;
pub const GL_VERTEX_ATTRIB_ARRAY0_NV: u32 = 0x8650;
pub const GL_VERTEX_ATTRIB_ARRAY10_NV: u32 = 0x865A;
pub const GL_VERTEX_ATTRIB_ARRAY11_NV: u32 = 0x865B;
pub const GL_VERTEX_ATTRIB_ARRAY12_NV: u32 = 0x865C;
pub const GL_VERTEX_ATTRIB_ARRAY13_NV: u32 = 0x865D;
pub const GL_VERTEX_ATTRIB_ARRAY14_NV: u32 = 0x865E;
pub const GL_VERTEX_ATTRIB_ARRAY15_NV: u32 = 0x865F;
pub const GL_VERTEX_ATTRIB_ARRAY1_NV: u32 = 0x8651;
pub const GL_VERTEX_ATTRIB_ARRAY2_NV: u32 = 0x8652;
pub const GL_VERTEX_ATTRIB_ARRAY3_NV: u32 = 0x8653;
pub const GL_VERTEX_ATTRIB_ARRAY4_NV: u32 = 0x8654;
pub const GL_VERTEX_ATTRIB_ARRAY5_NV: u32 = 0x8655;
pub const GL_VERTEX_ATTRIB_ARRAY6_NV: u32 = 0x8656;
pub const GL_VERTEX_ATTRIB_ARRAY7_NV: u32 = 0x8657;
pub const GL_VERTEX_ATTRIB_ARRAY8_NV: u32 = 0x8658;
pub const GL_VERTEX_ATTRIB_ARRAY9_NV: u32 = 0x8659;
pub const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV: u32 = 0x8F20;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT: u32 = 0x00000001;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT: u32 = 0x00000001;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: u32 = 0x889F;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889F;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR: u32 = 0x88FE;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB: u32 = 0x88FE;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED: u32 = 0x8622;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB: u32 = 0x8622;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER: u32 = 0x88FD;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT: u32 = 0x88FD;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV: u32 = 0x88FD;
pub const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV: u32 = 0x8F2A;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: u32 = 0x886A;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB: u32 = 0x886A;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER: u32 = 0x8645;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB: u32 = 0x8645;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE: u32 = 0x8623;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB: u32 = 0x8623;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE: u32 = 0x8624;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB: u32 = 0x8624;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE: u32 = 0x8625;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB: u32 = 0x8625;
pub const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV: u32 = 0x8F1E;
pub const GL_VERTEX_ATTRIB_BINDING: u32 = 0x82D4;
pub const GL_VERTEX_ATTRIB_MAP1_APPLE: u32 = 0x8A00;
pub const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE: u32 = 0x8A03;
pub const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE: u32 = 0x8A05;
pub const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE: u32 = 0x8A04;
pub const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE: u32 = 0x8A02;
pub const GL_VERTEX_ATTRIB_MAP2_APPLE: u32 = 0x8A01;
pub const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE: u32 = 0x8A07;
pub const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE: u32 = 0x8A09;
pub const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE: u32 = 0x8A08;
pub const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE: u32 = 0x8A06;
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET: u32 = 0x82D5;
pub const GL_VERTEX_BINDING_DIVISOR: u32 = 0x82D6;
pub const GL_VERTEX_BINDING_OFFSET: u32 = 0x82D7;
pub const GL_VERTEX_BINDING_STRIDE: u32 = 0x82D8;
pub const GL_VERTEX_BLEND_ARB: u32 = 0x86A7;
pub const GL_VERTEX_CONSISTENT_HINT_PGI: u32 = 0x1A22B;
pub const GL_VERTEX_DATA_HINT_PGI: u32 = 0x1A22A;
pub const GL_VERTEX_ELEMENT_SWIZZLE_AMD: u32 = 0x91A4;
pub const GL_VERTEX_ID_NV: u32 = 0x8C7B;
pub const GL_VERTEX_ID_SWIZZLE_AMD: u32 = 0x91A5;
pub const GL_VERTEX_PRECLIP_HINT_SGIX: u32 = 0x83EF;
pub const GL_VERTEX_PRECLIP_SGIX: u32 = 0x83EE;
pub const GL_VERTEX_PROGRAM_ARB: u32 = 0x8620;
pub const GL_VERTEX_PROGRAM_BINDING_NV: u32 = 0x864A;
pub const GL_VERTEX_PROGRAM_NV: u32 = 0x8620;
pub const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV: u32 = 0x8DA2;
pub const GL_VERTEX_PROGRAM_POINT_SIZE: u32 = 0x8642;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB: u32 = 0x8642;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_NV: u32 = 0x8642;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB: u32 = 0x8643;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_NV: u32 = 0x8643;
pub const GL_VERTEX_SHADER: u32 = 0x8B31;
pub const GL_VERTEX_SHADER_ARB: u32 = 0x8B31;
pub const GL_VERTEX_SHADER_BINDING_EXT: u32 = 0x8781;
pub const GL_VERTEX_SHADER_BIT: u32 = 0x00000001;
pub const GL_VERTEX_SHADER_EXT: u32 = 0x8780;
pub const GL_VERTEX_SHADER_INSTRUCTIONS_EXT: u32 = 0x87CF;
pub const GL_VERTEX_SHADER_INVARIANTS_EXT: u32 = 0x87D1;
pub const GL_VERTEX_SHADER_INVOCATIONS: u32 = 0x82F0;
pub const GL_VERTEX_SHADER_INVOCATIONS_ARB: u32 = 0x82F0;
pub const GL_VERTEX_SHADER_LOCALS_EXT: u32 = 0x87D3;
pub const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: u32 = 0x87D2;
pub const GL_VERTEX_SHADER_OPTIMIZED_EXT: u32 = 0x87D4;
pub const GL_VERTEX_SHADER_VARIANTS_EXT: u32 = 0x87D0;
pub const GL_VERTEX_SOURCE_ATI: u32 = 0x8774;
pub const GL_VERTEX_STATE_PROGRAM_NV: u32 = 0x8621;
pub const GL_VERTEX_STREAM0_ATI: u32 = 0x876C;
pub const GL_VERTEX_STREAM1_ATI: u32 = 0x876D;
pub const GL_VERTEX_STREAM2_ATI: u32 = 0x876E;
pub const GL_VERTEX_STREAM3_ATI: u32 = 0x876F;
pub const GL_VERTEX_STREAM4_ATI: u32 = 0x8770;
pub const GL_VERTEX_STREAM5_ATI: u32 = 0x8771;
pub const GL_VERTEX_STREAM6_ATI: u32 = 0x8772;
pub const GL_VERTEX_STREAM7_ATI: u32 = 0x8773;
pub const GL_VERTEX_SUBROUTINE: u32 = 0x92E8;
pub const GL_VERTEX_SUBROUTINE_UNIFORM: u32 = 0x92EE;
pub const GL_VERTEX_TEXTURE: u32 = 0x829B;
pub const GL_VERTEX_WEIGHTING_EXT: u32 = 0x8509;
pub const GL_VERTEX_WEIGHT_ARRAY_EXT: u32 = 0x850C;
pub const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT: u32 = 0x8510;
pub const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT: u32 = 0x850D;
pub const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT: u32 = 0x850F;
pub const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT: u32 = 0x850E;
pub const GL_VERTICAL_LINE_TO_NV: u32 = 0x08;
pub const GL_VERTICES_SUBMITTED: u32 = 0x82EE;
pub const GL_VERTICES_SUBMITTED_ARB: u32 = 0x82EE;
pub const GL_VIBRANCE_BIAS_NV: u32 = 0x8719;
pub const GL_VIBRANCE_SCALE_NV: u32 = 0x8713;
pub const GL_VIDEO_BUFFER_BINDING_NV: u32 = 0x9021;
pub const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV: u32 = 0x902D;
pub const GL_VIDEO_BUFFER_NV: u32 = 0x9020;
pub const GL_VIDEO_BUFFER_PITCH_NV: u32 = 0x9028;
pub const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV: u32 = 0x903B;
pub const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV: u32 = 0x903A;
pub const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV: u32 = 0x9039;
pub const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV: u32 = 0x9038;
pub const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV: u32 = 0x903C;
pub const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV: u32 = 0x9026;
pub const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV: u32 = 0x9029;
pub const GL_VIDEO_COLOR_CONVERSION_MAX_NV: u32 = 0x902A;
pub const GL_VIDEO_COLOR_CONVERSION_MIN_NV: u32 = 0x902B;
pub const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV: u32 = 0x902C;
pub const GL_VIEWPORT: u32 = 0x0BA2;
pub const GL_VIEWPORT_BOUNDS_RANGE: u32 = 0x825D;
pub const GL_VIEWPORT_COMMAND_NV: u32 = 0x0010;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX: u32 = 0x825F;
pub const GL_VIEWPORT_POSITION_W_SCALE_NV: u32 = 0x937C;
pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV: u32 = 0x937D;
pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV: u32 = 0x937E;
pub const GL_VIEWPORT_SUBPIXEL_BITS: u32 = 0x825C;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV: u32 = 0x9357;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV: u32 = 0x9351;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV: u32 = 0x9353;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV: u32 = 0x9355;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV: u32 = 0x9356;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV: u32 = 0x9350;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV: u32 = 0x9352;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV: u32 = 0x9354;
pub const GL_VIEWPORT_SWIZZLE_W_NV: u32 = 0x935B;
pub const GL_VIEWPORT_SWIZZLE_X_NV: u32 = 0x9358;
pub const GL_VIEWPORT_SWIZZLE_Y_NV: u32 = 0x9359;
pub const GL_VIEWPORT_SWIZZLE_Z_NV: u32 = 0x935A;
pub const GL_VIEW_CLASS_128_BITS: u32 = 0x82C4;
pub const GL_VIEW_CLASS_16_BITS: u32 = 0x82CA;
pub const GL_VIEW_CLASS_24_BITS: u32 = 0x82C9;
pub const GL_VIEW_CLASS_32_BITS: u32 = 0x82C8;
pub const GL_VIEW_CLASS_48_BITS: u32 = 0x82C7;
pub const GL_VIEW_CLASS_64_BITS: u32 = 0x82C6;
pub const GL_VIEW_CLASS_8_BITS: u32 = 0x82CB;
pub const GL_VIEW_CLASS_96_BITS: u32 = 0x82C5;
pub const GL_VIEW_CLASS_ASTC_10x10_RGBA: u32 = 0x9393;
pub const GL_VIEW_CLASS_ASTC_10x5_RGBA: u32 = 0x9390;
pub const GL_VIEW_CLASS_ASTC_10x6_RGBA: u32 = 0x9391;
pub const GL_VIEW_CLASS_ASTC_10x8_RGBA: u32 = 0x9392;
pub const GL_VIEW_CLASS_ASTC_12x10_RGBA: u32 = 0x9394;
pub const GL_VIEW_CLASS_ASTC_12x12_RGBA: u32 = 0x9395;
pub const GL_VIEW_CLASS_ASTC_4x4_RGBA: u32 = 0x9388;
pub const GL_VIEW_CLASS_ASTC_5x4_RGBA: u32 = 0x9389;
pub const GL_VIEW_CLASS_ASTC_5x5_RGBA: u32 = 0x938A;
pub const GL_VIEW_CLASS_ASTC_6x5_RGBA: u32 = 0x938B;
pub const GL_VIEW_CLASS_ASTC_6x6_RGBA: u32 = 0x938C;
pub const GL_VIEW_CLASS_ASTC_8x5_RGBA: u32 = 0x938D;
pub const GL_VIEW_CLASS_ASTC_8x6_RGBA: u32 = 0x938E;
pub const GL_VIEW_CLASS_ASTC_8x8_RGBA: u32 = 0x938F;
pub const GL_VIEW_CLASS_BPTC_FLOAT: u32 = 0x82D3;
pub const GL_VIEW_CLASS_BPTC_UNORM: u32 = 0x82D2;
pub const GL_VIEW_CLASS_EAC_R11: u32 = 0x9383;
pub const GL_VIEW_CLASS_EAC_RG11: u32 = 0x9384;
pub const GL_VIEW_CLASS_ETC2_EAC_RGBA: u32 = 0x9387;
pub const GL_VIEW_CLASS_ETC2_RGB: u32 = 0x9385;
pub const GL_VIEW_CLASS_ETC2_RGBA: u32 = 0x9386;
pub const GL_VIEW_CLASS_RGTC1_RED: u32 = 0x82D0;
pub const GL_VIEW_CLASS_RGTC2_RG: u32 = 0x82D1;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB: u32 = 0x82CC;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA: u32 = 0x82CD;
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA: u32 = 0x82CE;
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA: u32 = 0x82CF;
pub const GL_VIEW_COMPATIBILITY_CLASS: u32 = 0x82B6;
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB: u32 = 0x91A7;
pub const GL_VIRTUAL_PAGE_SIZE_X_AMD: u32 = 0x9195;
pub const GL_VIRTUAL_PAGE_SIZE_X_ARB: u32 = 0x9195;
pub const GL_VIRTUAL_PAGE_SIZE_Y_AMD: u32 = 0x9196;
pub const GL_VIRTUAL_PAGE_SIZE_Y_ARB: u32 = 0x9196;
pub const GL_VIRTUAL_PAGE_SIZE_Z_AMD: u32 = 0x9197;
pub const GL_VIRTUAL_PAGE_SIZE_Z_ARB: u32 = 0x9197;
pub const GL_VIVIDLIGHT_NV: u32 = 0x92A6;
pub const GL_VOLATILE_APPLE: u32 = 0x8A1A;
pub const GL_WAIT_FAILED: u32 = 0x911D;
pub const GL_WARPS_PER_SM_NV: u32 = 0x933A;
pub const GL_WARP_SIZE_NV: u32 = 0x9339;
pub const GL_WEIGHTED_AVERAGE_ARB: u32 = 0x9367;
pub const GL_WEIGHTED_AVERAGE_EXT: u32 = 0x9367;
pub const GL_WEIGHT_ARRAY_ARB: u32 = 0x86AD;
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889E;
pub const GL_WEIGHT_ARRAY_POINTER_ARB: u32 = 0x86AC;
pub const GL_WEIGHT_ARRAY_SIZE_ARB: u32 = 0x86AB;
pub const GL_WEIGHT_ARRAY_STRIDE_ARB: u32 = 0x86AA;
pub const GL_WEIGHT_ARRAY_TYPE_ARB: u32 = 0x86A9;
pub const GL_WEIGHT_SUM_UNITY_ARB: u32 = 0x86A6;
pub const GL_WIDE_LINE_HINT_PGI: u32 = 0x1A222;
pub const GL_WINDOW_RECTANGLE_EXT: u32 = 0x8F12;
pub const GL_WINDOW_RECTANGLE_MODE_EXT: u32 = 0x8F13;
pub const GL_WRAP_BORDER_SUN: u32 = 0x81D4;
pub const GL_WRITE_DISCARD_NV: u32 = 0x88BE;
pub const GL_WRITE_ONLY: u32 = 0x88B9;
pub const GL_WRITE_ONLY_ARB: u32 = 0x88B9;
pub const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV: u32 = 0x887A;
pub const GL_WRITE_PIXEL_DATA_RANGE_NV: u32 = 0x8878;
pub const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV: u32 = 0x887C;
pub const GL_W_EXT: u32 = 0x87D8;
pub const GL_XOR: u32 = 0x1506;
pub const GL_XOR_NV: u32 = 0x1506;
pub const GL_X_EXT: u32 = 0x87D5;
pub const GL_YCBAYCR8A_4224_NV: u32 = 0x9032;
pub const GL_YCBCR_422_APPLE: u32 = 0x85B9;
pub const GL_YCBCR_MESA: u32 = 0x8757;
pub const GL_YCBYCR8_422_NV: u32 = 0x9031;
pub const GL_YCRCBA_SGIX: u32 = 0x8319;
pub const GL_YCRCB_422_SGIX: u32 = 0x81BB;
pub const GL_YCRCB_444_SGIX: u32 = 0x81BC;
pub const GL_YCRCB_SGIX: u32 = 0x8318;
pub const GL_Y_EXT: u32 = 0x87D6;
pub const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV: u32 = 0x9036;
pub const GL_Z4Y12Z4CB12Z4CR12_444_NV: u32 = 0x9037;
pub const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV: u32 = 0x9035;
pub const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV: u32 = 0x9034;
pub const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV: u32 = 0x9033;
pub const GL_ZERO: u32 = 0;
pub const GL_ZERO_EXT: u32 = 0x87DD;
pub const GL_ZERO_TO_ONE: u32 = 0x935F;
pub const GL_Z_EXT: u32 = 0x87D7;

pub const gl = struct {
    pub const Features = packed struct {
        GL_VERSION_1_0: bool = true,
        GL_VERSION_1_1: bool = true,
        GL_VERSION_1_2: bool = true,
        GL_VERSION_1_3: bool = true,
        GL_VERSION_1_4: bool = true,
        GL_VERSION_1_5: bool = true,
        GL_VERSION_2_0: bool = true,
        GL_VERSION_2_1: bool = true,
        GL_VERSION_3_0: bool = true,
        GL_VERSION_3_1: bool = true,
        GL_VERSION_3_2: bool = true,
        GL_VERSION_3_3: bool = true,
        GL_3DFX_tbuffer: bool = true,
        GL_AMD_debug_output: bool = true,
        GL_AMD_draw_buffers_blend: bool = true,
        GL_AMD_framebuffer_multisample_advanced: bool = true,
        GL_AMD_framebuffer_sample_positions: bool = true,
        GL_AMD_gpu_shader_int64: bool = true,
        GL_AMD_interleaved_elements: bool = true,
        GL_AMD_multi_draw_indirect: bool = true,
        GL_AMD_name_gen_delete: bool = true,
        GL_AMD_occlusion_query_event: bool = true,
        GL_AMD_performance_monitor: bool = true,
        GL_AMD_sample_positions: bool = true,
        GL_AMD_sparse_texture: bool = true,
        GL_AMD_stencil_operation_extended: bool = true,
        GL_AMD_vertex_shader_tessellator: bool = true,
        GL_APPLE_element_array: bool = true,
        GL_APPLE_fence: bool = true,
        GL_APPLE_flush_buffer_range: bool = true,
        GL_APPLE_object_purgeable: bool = true,
        GL_APPLE_texture_range: bool = true,
        GL_APPLE_vertex_array_object: bool = true,
        GL_APPLE_vertex_array_range: bool = true,
        GL_APPLE_vertex_program_evaluators: bool = true,
        GL_ARB_ES2_compatibility: bool = true,
        GL_ARB_ES3_1_compatibility: bool = true,
        GL_ARB_ES3_2_compatibility: bool = true,
        GL_ARB_base_instance: bool = true,
        GL_ARB_bindless_texture: bool = true,
        GL_ARB_blend_func_extended: bool = true,
        GL_ARB_buffer_storage: bool = true,
        GL_ARB_cl_event: bool = true,
        GL_ARB_clear_buffer_object: bool = true,
        GL_ARB_clear_texture: bool = true,
        GL_ARB_clip_control: bool = true,
        GL_ARB_color_buffer_float: bool = true,
        GL_ARB_compute_shader: bool = true,
        GL_ARB_compute_variable_group_size: bool = true,
        GL_ARB_copy_buffer: bool = true,
        GL_ARB_copy_image: bool = true,
        GL_ARB_debug_output: bool = true,
        GL_ARB_direct_state_access: bool = true,
        GL_ARB_draw_buffers: bool = true,
        GL_ARB_draw_buffers_blend: bool = true,
        GL_ARB_draw_elements_base_vertex: bool = true,
        GL_ARB_draw_indirect: bool = true,
        GL_ARB_draw_instanced: bool = true,
        GL_ARB_fragment_program: bool = true,
        GL_ARB_framebuffer_no_attachments: bool = true,
        GL_ARB_framebuffer_object: bool = true,
        GL_ARB_geometry_shader4: bool = true,
        GL_ARB_get_program_binary: bool = true,
        GL_ARB_get_texture_sub_image: bool = true,
        GL_ARB_gl_spirv: bool = true,
        GL_ARB_gpu_shader_fp64: bool = true,
        GL_ARB_gpu_shader_int64: bool = true,
        GL_ARB_imaging: bool = true,
        GL_ARB_indirect_parameters: bool = true,
        GL_ARB_instanced_arrays: bool = true,
        GL_ARB_internalformat_query: bool = true,
        GL_ARB_internalformat_query2: bool = true,
        GL_ARB_invalidate_subdata: bool = true,
        GL_ARB_map_buffer_range: bool = true,
        GL_ARB_matrix_palette: bool = true,
        GL_ARB_multi_bind: bool = true,
        GL_ARB_multi_draw_indirect: bool = true,
        GL_ARB_multisample: bool = true,
        GL_ARB_multitexture: bool = true,
        GL_ARB_occlusion_query: bool = true,
        GL_ARB_parallel_shader_compile: bool = true,
        GL_ARB_point_parameters: bool = true,
        GL_ARB_polygon_offset_clamp: bool = true,
        GL_ARB_program_interface_query: bool = true,
        GL_ARB_provoking_vertex: bool = true,
        GL_ARB_robustness: bool = true,
        GL_ARB_sample_locations: bool = true,
        GL_ARB_sample_shading: bool = true,
        GL_ARB_sampler_objects: bool = true,
        GL_ARB_separate_shader_objects: bool = true,
        GL_ARB_shader_atomic_counters: bool = true,
        GL_ARB_shader_image_load_store: bool = true,
        GL_ARB_shader_objects: bool = true,
        GL_ARB_shader_storage_buffer_object: bool = true,
        GL_ARB_shader_subroutine: bool = true,
        GL_ARB_shading_language_include: bool = true,
        GL_ARB_sparse_buffer: bool = true,
        GL_ARB_sparse_texture: bool = true,
        GL_ARB_sync: bool = true,
        GL_ARB_tessellation_shader: bool = true,
        GL_ARB_texture_barrier: bool = true,
        GL_ARB_texture_buffer_object: bool = true,
        GL_ARB_texture_buffer_range: bool = true,
        GL_ARB_texture_compression: bool = true,
        GL_ARB_texture_multisample: bool = true,
        GL_ARB_texture_storage: bool = true,
        GL_ARB_texture_storage_multisample: bool = true,
        GL_ARB_texture_view: bool = true,
        GL_ARB_timer_query: bool = true,
        GL_ARB_transform_feedback2: bool = true,
        GL_ARB_transform_feedback3: bool = true,
        GL_ARB_transform_feedback_instanced: bool = true,
        GL_ARB_transpose_matrix: bool = true,
        GL_ARB_uniform_buffer_object: bool = true,
        GL_ARB_vertex_array_object: bool = true,
        GL_ARB_vertex_attrib_64bit: bool = true,
        GL_ARB_vertex_attrib_binding: bool = true,
        GL_ARB_vertex_blend: bool = true,
        GL_ARB_vertex_buffer_object: bool = true,
        GL_ARB_vertex_program: bool = true,
        GL_ARB_vertex_shader: bool = true,
        GL_ARB_vertex_type_2_10_10_10_rev: bool = true,
        GL_ARB_viewport_array: bool = true,
        GL_ARB_window_pos: bool = true,
        GL_ATI_draw_buffers: bool = true,
        GL_ATI_element_array: bool = true,
        GL_ATI_envmap_bumpmap: bool = true,
        GL_ATI_fragment_shader: bool = true,
        GL_ATI_map_object_buffer: bool = true,
        GL_ATI_pn_triangles: bool = true,
        GL_ATI_separate_stencil: bool = true,
        GL_ATI_vertex_array_object: bool = true,
        GL_ATI_vertex_attrib_array_object: bool = true,
        GL_ATI_vertex_streams: bool = true,
        GL_EXT_EGL_image_storage: bool = true,
        GL_EXT_bindable_uniform: bool = true,
        GL_EXT_blend_color: bool = true,
        GL_EXT_blend_equation_separate: bool = true,
        GL_EXT_blend_func_separate: bool = true,
        GL_EXT_blend_minmax: bool = true,
        GL_EXT_color_subtable: bool = true,
        GL_EXT_compiled_vertex_array: bool = true,
        GL_EXT_convolution: bool = true,
        GL_EXT_coordinate_frame: bool = true,
        GL_EXT_copy_texture: bool = true,
        GL_EXT_cull_vertex: bool = true,
        GL_EXT_debug_label: bool = true,
        GL_EXT_debug_marker: bool = true,
        GL_EXT_depth_bounds_test: bool = true,
        GL_EXT_direct_state_access: bool = true,
        GL_EXT_draw_buffers2: bool = true,
        GL_EXT_draw_instanced: bool = true,
        GL_EXT_draw_range_elements: bool = true,
        GL_EXT_external_buffer: bool = true,
        GL_EXT_fog_coord: bool = true,
        GL_EXT_framebuffer_blit: bool = true,
        GL_EXT_framebuffer_multisample: bool = true,
        GL_EXT_framebuffer_object: bool = true,
        GL_EXT_geometry_shader4: bool = true,
        GL_EXT_gpu_program_parameters: bool = true,
        GL_EXT_gpu_shader4: bool = true,
        GL_EXT_histogram: bool = true,
        GL_EXT_index_func: bool = true,
        GL_EXT_index_material: bool = true,
        GL_EXT_light_texture: bool = true,
        GL_EXT_memory_object: bool = true,
        GL_EXT_memory_object_fd: bool = true,
        GL_EXT_memory_object_win32: bool = true,
        GL_EXT_multi_draw_arrays: bool = true,
        GL_EXT_multisample: bool = true,
        GL_EXT_paletted_texture: bool = true,
        GL_EXT_pixel_transform: bool = true,
        GL_EXT_point_parameters: bool = true,
        GL_EXT_polygon_offset: bool = true,
        GL_EXT_polygon_offset_clamp: bool = true,
        GL_EXT_provoking_vertex: bool = true,
        GL_EXT_raster_multisample: bool = true,
        GL_EXT_secondary_color: bool = true,
        GL_EXT_semaphore: bool = true,
        GL_EXT_semaphore_fd: bool = true,
        GL_EXT_semaphore_win32: bool = true,
        GL_EXT_separate_shader_objects: bool = true,
        GL_EXT_shader_framebuffer_fetch_non_coherent: bool = true,
        GL_EXT_shader_image_load_store: bool = true,
        GL_EXT_stencil_clear_tag: bool = true,
        GL_EXT_stencil_two_side: bool = true,
        GL_EXT_subtexture: bool = true,
        GL_EXT_texture3D: bool = true,
        GL_EXT_texture_array: bool = true,
        GL_EXT_texture_buffer_object: bool = true,
        GL_EXT_texture_integer: bool = true,
        GL_EXT_texture_object: bool = true,
        GL_EXT_texture_perturb_normal: bool = true,
        GL_EXT_timer_query: bool = true,
        GL_EXT_transform_feedback: bool = true,
        GL_EXT_vertex_array: bool = true,
        GL_EXT_vertex_attrib_64bit: bool = true,
        GL_EXT_vertex_shader: bool = true,
        GL_EXT_vertex_weighting: bool = true,
        GL_EXT_win32_keyed_mutex: bool = true,
        GL_EXT_window_rectangles: bool = true,
        GL_EXT_x11_sync_object: bool = true,
        GL_GREMEDY_frame_terminator: bool = true,
        GL_GREMEDY_string_marker: bool = true,
        GL_HP_image_transform: bool = true,
        GL_IBM_multimode_draw_arrays: bool = true,
        GL_IBM_static_data: bool = true,
        GL_IBM_vertex_array_lists: bool = true,
        GL_INGR_blend_func_separate: bool = true,
        GL_INTEL_framebuffer_CMAA: bool = true,
        GL_INTEL_map_texture: bool = true,
        GL_INTEL_parallel_arrays: bool = true,
        GL_INTEL_performance_query: bool = true,
        GL_KHR_blend_equation_advanced: bool = true,
        GL_KHR_debug: bool = true,
        GL_KHR_parallel_shader_compile: bool = true,
        GL_KHR_robustness: bool = true,
        GL_MESA_framebuffer_flip_y: bool = true,
        GL_MESA_resize_buffers: bool = true,
        GL_MESA_window_pos: bool = true,
        GL_NVX_conditional_render: bool = true,
        GL_NVX_gpu_multicast2: bool = true,
        GL_NVX_linked_gpu_multicast: bool = true,
        GL_NVX_progress_fence: bool = true,
        GL_NV_alpha_to_coverage_dither_control: bool = true,
        GL_NV_bindless_multi_draw_indirect: bool = true,
        GL_NV_bindless_multi_draw_indirect_count: bool = true,
        GL_NV_bindless_texture: bool = true,
        GL_NV_blend_equation_advanced: bool = true,
        GL_NV_clip_space_w_scaling: bool = true,
        GL_NV_command_list: bool = true,
        GL_NV_conditional_render: bool = true,
        GL_NV_conservative_raster: bool = true,
        GL_NV_conservative_raster_dilate: bool = true,
        GL_NV_conservative_raster_pre_snap_triangles: bool = true,
        GL_NV_copy_image: bool = true,
        GL_NV_depth_buffer_float: bool = true,
        GL_NV_draw_texture: bool = true,
        GL_NV_draw_vulkan_image: bool = true,
        GL_NV_evaluators: bool = true,
        GL_NV_explicit_multisample: bool = true,
        GL_NV_fence: bool = true,
        GL_NV_fragment_coverage_to_color: bool = true,
        GL_NV_fragment_program: bool = true,
        GL_NV_framebuffer_mixed_samples: bool = true,
        GL_NV_framebuffer_multisample_coverage: bool = true,
        GL_NV_geometry_program4: bool = true,
        GL_NV_gpu_multicast: bool = true,
        GL_NV_gpu_program4: bool = true,
        GL_NV_gpu_program5: bool = true,
        GL_NV_gpu_shader5: bool = true,
        GL_NV_half_float: bool = true,
        GL_NV_internalformat_sample_query: bool = true,
        GL_NV_memory_attachment: bool = true,
        GL_NV_memory_object_sparse: bool = true,
        GL_NV_mesh_shader: bool = true,
        GL_NV_occlusion_query: bool = true,
        GL_NV_parameter_buffer_object: bool = true,
        GL_NV_path_rendering: bool = true,
        GL_NV_pixel_data_range: bool = true,
        GL_NV_point_sprite: bool = true,
        GL_NV_present_video: bool = true,
        GL_NV_primitive_restart: bool = true,
        GL_NV_query_resource: bool = true,
        GL_NV_query_resource_tag: bool = true,
        GL_NV_register_combiners: bool = true,
        GL_NV_register_combiners2: bool = true,
        GL_NV_sample_locations: bool = true,
        GL_NV_scissor_exclusive: bool = true,
        GL_NV_shader_buffer_load: bool = true,
        GL_NV_shading_rate_image: bool = true,
        GL_NV_texture_barrier: bool = true,
        GL_NV_texture_multisample: bool = true,
        GL_NV_timeline_semaphore: bool = true,
        GL_NV_transform_feedback: bool = true,
        GL_NV_transform_feedback2: bool = true,
        GL_NV_vdpau_interop: bool = true,
        GL_NV_vdpau_interop2: bool = true,
        GL_NV_vertex_array_range: bool = true,
        GL_NV_vertex_attrib_integer_64bit: bool = true,
        GL_NV_vertex_buffer_unified_memory: bool = true,
        GL_NV_vertex_program: bool = true,
        GL_NV_vertex_program4: bool = true,
        GL_NV_video_capture: bool = true,
        GL_NV_viewport_swizzle: bool = true,
        GL_OES_byte_coordinates: bool = true,
        GL_OES_fixed_point: bool = true,
        GL_OES_query_matrix: bool = true,
        GL_OES_single_precision: bool = true,
        GL_OVR_multiview: bool = true,
        GL_PGI_misc_hints: bool = true,
        GL_SGIS_detail_texture: bool = true,
        GL_SGIS_fog_function: bool = true,
        GL_SGIS_multisample: bool = true,
        GL_SGIS_pixel_texture: bool = true,
        GL_SGIS_point_parameters: bool = true,
        GL_SGIS_sharpen_texture: bool = true,
        GL_SGIS_texture4D: bool = true,
        GL_SGIS_texture_color_mask: bool = true,
        GL_SGIS_texture_filter4: bool = true,
        GL_SGIX_async: bool = true,
        GL_SGIX_flush_raster: bool = true,
        GL_SGIX_fragment_lighting: bool = true,
        GL_SGIX_framezoom: bool = true,
        GL_SGIX_igloo_interface: bool = true,
        GL_SGIX_instruments: bool = true,
        GL_SGIX_list_priority: bool = true,
        GL_SGIX_pixel_texture: bool = true,
        GL_SGIX_polynomial_ffd: bool = true,
        GL_SGIX_reference_plane: bool = true,
        GL_SGIX_sprite: bool = true,
        GL_SGIX_tag_sample_buffer: bool = true,
        GL_SGI_color_table: bool = true,
        GL_SUNX_constant_data: bool = true,
        GL_SUN_global_alpha: bool = true,
        GL_SUN_mesh_array: bool = true,
        GL_SUN_triangle_list: bool = true,
        GL_SUN_vertex: bool = true,
    };

    features: Features = .{},

    AccumxOES: glAccumxOES = @ptrCast(glAccumxOES, gl.missingFunctionPanic),
    AcquireKeyedMutexWin32EXT: glAcquireKeyedMutexWin32EXT = @ptrCast(glAcquireKeyedMutexWin32EXT, gl.missingFunctionPanic),
    ActiveProgramEXT: glActiveProgramEXT = @ptrCast(glActiveProgramEXT, gl.missingFunctionPanic),
    ActiveShaderProgram: glActiveShaderProgram = @ptrCast(glActiveShaderProgram, gl.missingFunctionPanic),
    ActiveStencilFaceEXT: glActiveStencilFaceEXT = @ptrCast(glActiveStencilFaceEXT, gl.missingFunctionPanic),
    ActiveTexture: glActiveTexture = @ptrCast(glActiveTexture, gl.missingFunctionPanic),
    ActiveTextureARB: glActiveTextureARB = @ptrCast(glActiveTextureARB, gl.missingFunctionPanic),
    ActiveVaryingNV: glActiveVaryingNV = @ptrCast(glActiveVaryingNV, gl.missingFunctionPanic),
    AlphaFragmentOp1ATI: glAlphaFragmentOp1ATI = @ptrCast(glAlphaFragmentOp1ATI, gl.missingFunctionPanic),
    AlphaFragmentOp2ATI: glAlphaFragmentOp2ATI = @ptrCast(glAlphaFragmentOp2ATI, gl.missingFunctionPanic),
    AlphaFragmentOp3ATI: glAlphaFragmentOp3ATI = @ptrCast(glAlphaFragmentOp3ATI, gl.missingFunctionPanic),
    AlphaFuncxOES: glAlphaFuncxOES = @ptrCast(glAlphaFuncxOES, gl.missingFunctionPanic),
    AlphaToCoverageDitherControlNV: glAlphaToCoverageDitherControlNV = @ptrCast(glAlphaToCoverageDitherControlNV, gl.missingFunctionPanic),
    ApplyFramebufferAttachmentCMAAINTEL: glApplyFramebufferAttachmentCMAAINTEL = @ptrCast(glApplyFramebufferAttachmentCMAAINTEL, gl.missingFunctionPanic),
    ApplyTextureEXT: glApplyTextureEXT = @ptrCast(glApplyTextureEXT, gl.missingFunctionPanic),
    AreProgramsResidentNV: glAreProgramsResidentNV = @ptrCast(glAreProgramsResidentNV, gl.missingFunctionPanic),
    AreTexturesResidentEXT: glAreTexturesResidentEXT = @ptrCast(glAreTexturesResidentEXT, gl.missingFunctionPanic),
    ArrayElementEXT: glArrayElementEXT = @ptrCast(glArrayElementEXT, gl.missingFunctionPanic),
    ArrayObjectATI: glArrayObjectATI = @ptrCast(glArrayObjectATI, gl.missingFunctionPanic),
    AsyncCopyBufferSubDataNVX: glAsyncCopyBufferSubDataNVX = @ptrCast(glAsyncCopyBufferSubDataNVX, gl.missingFunctionPanic),
    AsyncCopyImageSubDataNVX: glAsyncCopyImageSubDataNVX = @ptrCast(glAsyncCopyImageSubDataNVX, gl.missingFunctionPanic),
    AsyncMarkerSGIX: glAsyncMarkerSGIX = @ptrCast(glAsyncMarkerSGIX, gl.missingFunctionPanic),
    AttachObjectARB: glAttachObjectARB = @ptrCast(glAttachObjectARB, gl.missingFunctionPanic),
    AttachShader: glAttachShader = @ptrCast(glAttachShader, gl.missingFunctionPanic),
    BeginConditionalRender: glBeginConditionalRender = @ptrCast(glBeginConditionalRender, gl.missingFunctionPanic),
    BeginConditionalRenderNV: glBeginConditionalRenderNV = @ptrCast(glBeginConditionalRenderNV, gl.missingFunctionPanic),
    BeginConditionalRenderNVX: glBeginConditionalRenderNVX = @ptrCast(glBeginConditionalRenderNVX, gl.missingFunctionPanic),
    BeginFragmentShaderATI: glBeginFragmentShaderATI = @ptrCast(glBeginFragmentShaderATI, gl.missingFunctionPanic),
    BeginOcclusionQueryNV: glBeginOcclusionQueryNV = @ptrCast(glBeginOcclusionQueryNV, gl.missingFunctionPanic),
    BeginPerfMonitorAMD: glBeginPerfMonitorAMD = @ptrCast(glBeginPerfMonitorAMD, gl.missingFunctionPanic),
    BeginPerfQueryINTEL: glBeginPerfQueryINTEL = @ptrCast(glBeginPerfQueryINTEL, gl.missingFunctionPanic),
    BeginQuery: glBeginQuery = @ptrCast(glBeginQuery, gl.missingFunctionPanic),
    BeginQueryARB: glBeginQueryARB = @ptrCast(glBeginQueryARB, gl.missingFunctionPanic),
    BeginQueryIndexed: glBeginQueryIndexed = @ptrCast(glBeginQueryIndexed, gl.missingFunctionPanic),
    BeginTransformFeedback: glBeginTransformFeedback = @ptrCast(glBeginTransformFeedback, gl.missingFunctionPanic),
    BeginTransformFeedbackEXT: glBeginTransformFeedbackEXT = @ptrCast(glBeginTransformFeedbackEXT, gl.missingFunctionPanic),
    BeginTransformFeedbackNV: glBeginTransformFeedbackNV = @ptrCast(glBeginTransformFeedbackNV, gl.missingFunctionPanic),
    BeginVertexShaderEXT: glBeginVertexShaderEXT = @ptrCast(glBeginVertexShaderEXT, gl.missingFunctionPanic),
    BeginVideoCaptureNV: glBeginVideoCaptureNV = @ptrCast(glBeginVideoCaptureNV, gl.missingFunctionPanic),
    BindAttribLocation: glBindAttribLocation = @ptrCast(glBindAttribLocation, gl.missingFunctionPanic),
    BindAttribLocationARB: glBindAttribLocationARB = @ptrCast(glBindAttribLocationARB, gl.missingFunctionPanic),
    BindBuffer: glBindBuffer = @ptrCast(glBindBuffer, gl.missingFunctionPanic),
    BindBufferARB: glBindBufferARB = @ptrCast(glBindBufferARB, gl.missingFunctionPanic),
    BindBufferBase: glBindBufferBase = @ptrCast(glBindBufferBase, gl.missingFunctionPanic),
    BindBufferBaseEXT: glBindBufferBaseEXT = @ptrCast(glBindBufferBaseEXT, gl.missingFunctionPanic),
    BindBufferBaseNV: glBindBufferBaseNV = @ptrCast(glBindBufferBaseNV, gl.missingFunctionPanic),
    BindBufferOffsetEXT: glBindBufferOffsetEXT = @ptrCast(glBindBufferOffsetEXT, gl.missingFunctionPanic),
    BindBufferOffsetNV: glBindBufferOffsetNV = @ptrCast(glBindBufferOffsetNV, gl.missingFunctionPanic),
    BindBufferRange: glBindBufferRange = @ptrCast(glBindBufferRange, gl.missingFunctionPanic),
    BindBufferRangeEXT: glBindBufferRangeEXT = @ptrCast(glBindBufferRangeEXT, gl.missingFunctionPanic),
    BindBufferRangeNV: glBindBufferRangeNV = @ptrCast(glBindBufferRangeNV, gl.missingFunctionPanic),
    BindBuffersBase: glBindBuffersBase = @ptrCast(glBindBuffersBase, gl.missingFunctionPanic),
    BindBuffersRange: glBindBuffersRange = @ptrCast(glBindBuffersRange, gl.missingFunctionPanic),
    BindFragDataLocation: glBindFragDataLocation = @ptrCast(glBindFragDataLocation, gl.missingFunctionPanic),
    BindFragDataLocationEXT: glBindFragDataLocationEXT = @ptrCast(glBindFragDataLocationEXT, gl.missingFunctionPanic),
    BindFragDataLocationIndexed: glBindFragDataLocationIndexed = @ptrCast(glBindFragDataLocationIndexed, gl.missingFunctionPanic),
    BindFragmentShaderATI: glBindFragmentShaderATI = @ptrCast(glBindFragmentShaderATI, gl.missingFunctionPanic),
    BindFramebuffer: glBindFramebuffer = @ptrCast(glBindFramebuffer, gl.missingFunctionPanic),
    BindFramebufferEXT: glBindFramebufferEXT = @ptrCast(glBindFramebufferEXT, gl.missingFunctionPanic),
    BindImageTexture: glBindImageTexture = @ptrCast(glBindImageTexture, gl.missingFunctionPanic),
    BindImageTextureEXT: glBindImageTextureEXT = @ptrCast(glBindImageTextureEXT, gl.missingFunctionPanic),
    BindImageTextures: glBindImageTextures = @ptrCast(glBindImageTextures, gl.missingFunctionPanic),
    BindLightParameterEXT: glBindLightParameterEXT = @ptrCast(glBindLightParameterEXT, gl.missingFunctionPanic),
    BindMaterialParameterEXT: glBindMaterialParameterEXT = @ptrCast(glBindMaterialParameterEXT, gl.missingFunctionPanic),
    BindMultiTextureEXT: glBindMultiTextureEXT = @ptrCast(glBindMultiTextureEXT, gl.missingFunctionPanic),
    BindParameterEXT: glBindParameterEXT = @ptrCast(glBindParameterEXT, gl.missingFunctionPanic),
    BindProgramARB: glBindProgramARB = @ptrCast(glBindProgramARB, gl.missingFunctionPanic),
    BindProgramNV: glBindProgramNV = @ptrCast(glBindProgramNV, gl.missingFunctionPanic),
    BindProgramPipeline: glBindProgramPipeline = @ptrCast(glBindProgramPipeline, gl.missingFunctionPanic),
    BindRenderbuffer: glBindRenderbuffer = @ptrCast(glBindRenderbuffer, gl.missingFunctionPanic),
    BindRenderbufferEXT: glBindRenderbufferEXT = @ptrCast(glBindRenderbufferEXT, gl.missingFunctionPanic),
    BindSampler: glBindSampler = @ptrCast(glBindSampler, gl.missingFunctionPanic),
    BindSamplers: glBindSamplers = @ptrCast(glBindSamplers, gl.missingFunctionPanic),
    BindShadingRateImageNV: glBindShadingRateImageNV = @ptrCast(glBindShadingRateImageNV, gl.missingFunctionPanic),
    BindTexGenParameterEXT: glBindTexGenParameterEXT = @ptrCast(glBindTexGenParameterEXT, gl.missingFunctionPanic),
    BindTexture: glBindTexture = @ptrCast(glBindTexture, gl.missingFunctionPanic),
    BindTextureEXT: glBindTextureEXT = @ptrCast(glBindTextureEXT, gl.missingFunctionPanic),
    BindTextureUnit: glBindTextureUnit = @ptrCast(glBindTextureUnit, gl.missingFunctionPanic),
    BindTextureUnitParameterEXT: glBindTextureUnitParameterEXT = @ptrCast(glBindTextureUnitParameterEXT, gl.missingFunctionPanic),
    BindTextures: glBindTextures = @ptrCast(glBindTextures, gl.missingFunctionPanic),
    BindTransformFeedback: glBindTransformFeedback = @ptrCast(glBindTransformFeedback, gl.missingFunctionPanic),
    BindTransformFeedbackNV: glBindTransformFeedbackNV = @ptrCast(glBindTransformFeedbackNV, gl.missingFunctionPanic),
    BindVertexArray: glBindVertexArray = @ptrCast(glBindVertexArray, gl.missingFunctionPanic),
    BindVertexArrayAPPLE: glBindVertexArrayAPPLE = @ptrCast(glBindVertexArrayAPPLE, gl.missingFunctionPanic),
    BindVertexBuffer: glBindVertexBuffer = @ptrCast(glBindVertexBuffer, gl.missingFunctionPanic),
    BindVertexBuffers: glBindVertexBuffers = @ptrCast(glBindVertexBuffers, gl.missingFunctionPanic),
    BindVertexShaderEXT: glBindVertexShaderEXT = @ptrCast(glBindVertexShaderEXT, gl.missingFunctionPanic),
    BindVideoCaptureStreamBufferNV: glBindVideoCaptureStreamBufferNV = @ptrCast(glBindVideoCaptureStreamBufferNV, gl.missingFunctionPanic),
    BindVideoCaptureStreamTextureNV: glBindVideoCaptureStreamTextureNV = @ptrCast(glBindVideoCaptureStreamTextureNV, gl.missingFunctionPanic),
    Binormal3bEXT: glBinormal3bEXT = @ptrCast(glBinormal3bEXT, gl.missingFunctionPanic),
    Binormal3bvEXT: glBinormal3bvEXT = @ptrCast(glBinormal3bvEXT, gl.missingFunctionPanic),
    Binormal3dEXT: glBinormal3dEXT = @ptrCast(glBinormal3dEXT, gl.missingFunctionPanic),
    Binormal3dvEXT: glBinormal3dvEXT = @ptrCast(glBinormal3dvEXT, gl.missingFunctionPanic),
    Binormal3fEXT: glBinormal3fEXT = @ptrCast(glBinormal3fEXT, gl.missingFunctionPanic),
    Binormal3fvEXT: glBinormal3fvEXT = @ptrCast(glBinormal3fvEXT, gl.missingFunctionPanic),
    Binormal3iEXT: glBinormal3iEXT = @ptrCast(glBinormal3iEXT, gl.missingFunctionPanic),
    Binormal3ivEXT: glBinormal3ivEXT = @ptrCast(glBinormal3ivEXT, gl.missingFunctionPanic),
    Binormal3sEXT: glBinormal3sEXT = @ptrCast(glBinormal3sEXT, gl.missingFunctionPanic),
    Binormal3svEXT: glBinormal3svEXT = @ptrCast(glBinormal3svEXT, gl.missingFunctionPanic),
    BinormalPointerEXT: glBinormalPointerEXT = @ptrCast(glBinormalPointerEXT, gl.missingFunctionPanic),
    BitmapxOES: glBitmapxOES = @ptrCast(glBitmapxOES, gl.missingFunctionPanic),
    BlendBarrierKHR: glBlendBarrierKHR = @ptrCast(glBlendBarrierKHR, gl.missingFunctionPanic),
    BlendBarrierNV: glBlendBarrierNV = @ptrCast(glBlendBarrierNV, gl.missingFunctionPanic),
    BlendColor: glBlendColor = @ptrCast(glBlendColor, gl.missingFunctionPanic),
    BlendColorEXT: glBlendColorEXT = @ptrCast(glBlendColorEXT, gl.missingFunctionPanic),
    BlendColorxOES: glBlendColorxOES = @ptrCast(glBlendColorxOES, gl.missingFunctionPanic),
    BlendEquation: glBlendEquation = @ptrCast(glBlendEquation, gl.missingFunctionPanic),
    BlendEquationEXT: glBlendEquationEXT = @ptrCast(glBlendEquationEXT, gl.missingFunctionPanic),
    BlendEquationIndexedAMD: glBlendEquationIndexedAMD = @ptrCast(glBlendEquationIndexedAMD, gl.missingFunctionPanic),
    BlendEquationSeparate: glBlendEquationSeparate = @ptrCast(glBlendEquationSeparate, gl.missingFunctionPanic),
    BlendEquationSeparateEXT: glBlendEquationSeparateEXT = @ptrCast(glBlendEquationSeparateEXT, gl.missingFunctionPanic),
    BlendEquationSeparateIndexedAMD: glBlendEquationSeparateIndexedAMD = @ptrCast(glBlendEquationSeparateIndexedAMD, gl.missingFunctionPanic),
    BlendEquationSeparateiARB: glBlendEquationSeparateiARB = @ptrCast(glBlendEquationSeparateiARB, gl.missingFunctionPanic),
    BlendEquationiARB: glBlendEquationiARB = @ptrCast(glBlendEquationiARB, gl.missingFunctionPanic),
    BlendFunc: glBlendFunc = @ptrCast(glBlendFunc, gl.missingFunctionPanic),
    BlendFuncIndexedAMD: glBlendFuncIndexedAMD = @ptrCast(glBlendFuncIndexedAMD, gl.missingFunctionPanic),
    BlendFuncSeparate: glBlendFuncSeparate = @ptrCast(glBlendFuncSeparate, gl.missingFunctionPanic),
    BlendFuncSeparateEXT: glBlendFuncSeparateEXT = @ptrCast(glBlendFuncSeparateEXT, gl.missingFunctionPanic),
    BlendFuncSeparateINGR: glBlendFuncSeparateINGR = @ptrCast(glBlendFuncSeparateINGR, gl.missingFunctionPanic),
    BlendFuncSeparateIndexedAMD: glBlendFuncSeparateIndexedAMD = @ptrCast(glBlendFuncSeparateIndexedAMD, gl.missingFunctionPanic),
    BlendFuncSeparateiARB: glBlendFuncSeparateiARB = @ptrCast(glBlendFuncSeparateiARB, gl.missingFunctionPanic),
    BlendFunciARB: glBlendFunciARB = @ptrCast(glBlendFunciARB, gl.missingFunctionPanic),
    BlendParameteriNV: glBlendParameteriNV = @ptrCast(glBlendParameteriNV, gl.missingFunctionPanic),
    BlitFramebuffer: glBlitFramebuffer = @ptrCast(glBlitFramebuffer, gl.missingFunctionPanic),
    BlitFramebufferEXT: glBlitFramebufferEXT = @ptrCast(glBlitFramebufferEXT, gl.missingFunctionPanic),
    BlitNamedFramebuffer: glBlitNamedFramebuffer = @ptrCast(glBlitNamedFramebuffer, gl.missingFunctionPanic),
    BufferAddressRangeNV: glBufferAddressRangeNV = @ptrCast(glBufferAddressRangeNV, gl.missingFunctionPanic),
    BufferAttachMemoryNV: glBufferAttachMemoryNV = @ptrCast(glBufferAttachMemoryNV, gl.missingFunctionPanic),
    BufferData: glBufferData = @ptrCast(glBufferData, gl.missingFunctionPanic),
    BufferDataARB: glBufferDataARB = @ptrCast(glBufferDataARB, gl.missingFunctionPanic),
    BufferPageCommitmentARB: glBufferPageCommitmentARB = @ptrCast(glBufferPageCommitmentARB, gl.missingFunctionPanic),
    BufferPageCommitmentMemNV: glBufferPageCommitmentMemNV = @ptrCast(glBufferPageCommitmentMemNV, gl.missingFunctionPanic),
    BufferParameteriAPPLE: glBufferParameteriAPPLE = @ptrCast(glBufferParameteriAPPLE, gl.missingFunctionPanic),
    BufferStorage: glBufferStorage = @ptrCast(glBufferStorage, gl.missingFunctionPanic),
    BufferStorageExternalEXT: glBufferStorageExternalEXT = @ptrCast(glBufferStorageExternalEXT, gl.missingFunctionPanic),
    BufferStorageMemEXT: glBufferStorageMemEXT = @ptrCast(glBufferStorageMemEXT, gl.missingFunctionPanic),
    BufferSubData: glBufferSubData = @ptrCast(glBufferSubData, gl.missingFunctionPanic),
    BufferSubDataARB: glBufferSubDataARB = @ptrCast(glBufferSubDataARB, gl.missingFunctionPanic),
    CallCommandListNV: glCallCommandListNV = @ptrCast(glCallCommandListNV, gl.missingFunctionPanic),
    CheckFramebufferStatus: glCheckFramebufferStatus = @ptrCast(glCheckFramebufferStatus, gl.missingFunctionPanic),
    CheckFramebufferStatusEXT: glCheckFramebufferStatusEXT = @ptrCast(glCheckFramebufferStatusEXT, gl.missingFunctionPanic),
    CheckNamedFramebufferStatus: glCheckNamedFramebufferStatus = @ptrCast(glCheckNamedFramebufferStatus, gl.missingFunctionPanic),
    CheckNamedFramebufferStatusEXT: glCheckNamedFramebufferStatusEXT = @ptrCast(glCheckNamedFramebufferStatusEXT, gl.missingFunctionPanic),
    ClampColor: glClampColor = @ptrCast(glClampColor, gl.missingFunctionPanic),
    ClampColorARB: glClampColorARB = @ptrCast(glClampColorARB, gl.missingFunctionPanic),
    Clear: glClear = @ptrCast(glClear, gl.missingFunctionPanic),
    ClearAccumxOES: glClearAccumxOES = @ptrCast(glClearAccumxOES, gl.missingFunctionPanic),
    ClearBufferData: glClearBufferData = @ptrCast(glClearBufferData, gl.missingFunctionPanic),
    ClearBufferSubData: glClearBufferSubData = @ptrCast(glClearBufferSubData, gl.missingFunctionPanic),
    ClearBufferfi: glClearBufferfi = @ptrCast(glClearBufferfi, gl.missingFunctionPanic),
    ClearBufferfv: glClearBufferfv = @ptrCast(glClearBufferfv, gl.missingFunctionPanic),
    ClearBufferiv: glClearBufferiv = @ptrCast(glClearBufferiv, gl.missingFunctionPanic),
    ClearBufferuiv: glClearBufferuiv = @ptrCast(glClearBufferuiv, gl.missingFunctionPanic),
    ClearColor: glClearColor = @ptrCast(glClearColor, gl.missingFunctionPanic),
    ClearColorIiEXT: glClearColorIiEXT = @ptrCast(glClearColorIiEXT, gl.missingFunctionPanic),
    ClearColorIuiEXT: glClearColorIuiEXT = @ptrCast(glClearColorIuiEXT, gl.missingFunctionPanic),
    ClearColorxOES: glClearColorxOES = @ptrCast(glClearColorxOES, gl.missingFunctionPanic),
    ClearDepth: glClearDepth = @ptrCast(glClearDepth, gl.missingFunctionPanic),
    ClearDepthdNV: glClearDepthdNV = @ptrCast(glClearDepthdNV, gl.missingFunctionPanic),
    ClearDepthf: glClearDepthf = @ptrCast(glClearDepthf, gl.missingFunctionPanic),
    ClearDepthfOES: glClearDepthfOES = @ptrCast(glClearDepthfOES, gl.missingFunctionPanic),
    ClearDepthxOES: glClearDepthxOES = @ptrCast(glClearDepthxOES, gl.missingFunctionPanic),
    ClearNamedBufferData: glClearNamedBufferData = @ptrCast(glClearNamedBufferData, gl.missingFunctionPanic),
    ClearNamedBufferDataEXT: glClearNamedBufferDataEXT = @ptrCast(glClearNamedBufferDataEXT, gl.missingFunctionPanic),
    ClearNamedBufferSubData: glClearNamedBufferSubData = @ptrCast(glClearNamedBufferSubData, gl.missingFunctionPanic),
    ClearNamedBufferSubDataEXT: glClearNamedBufferSubDataEXT = @ptrCast(glClearNamedBufferSubDataEXT, gl.missingFunctionPanic),
    ClearNamedFramebufferfi: glClearNamedFramebufferfi = @ptrCast(glClearNamedFramebufferfi, gl.missingFunctionPanic),
    ClearNamedFramebufferfv: glClearNamedFramebufferfv = @ptrCast(glClearNamedFramebufferfv, gl.missingFunctionPanic),
    ClearNamedFramebufferiv: glClearNamedFramebufferiv = @ptrCast(glClearNamedFramebufferiv, gl.missingFunctionPanic),
    ClearNamedFramebufferuiv: glClearNamedFramebufferuiv = @ptrCast(glClearNamedFramebufferuiv, gl.missingFunctionPanic),
    ClearStencil: glClearStencil = @ptrCast(glClearStencil, gl.missingFunctionPanic),
    ClearTexImage: glClearTexImage = @ptrCast(glClearTexImage, gl.missingFunctionPanic),
    ClearTexSubImage: glClearTexSubImage = @ptrCast(glClearTexSubImage, gl.missingFunctionPanic),
    ClientActiveTextureARB: glClientActiveTextureARB = @ptrCast(glClientActiveTextureARB, gl.missingFunctionPanic),
    ClientActiveVertexStreamATI: glClientActiveVertexStreamATI = @ptrCast(glClientActiveVertexStreamATI, gl.missingFunctionPanic),
    ClientAttribDefaultEXT: glClientAttribDefaultEXT = @ptrCast(glClientAttribDefaultEXT, gl.missingFunctionPanic),
    ClientWaitSemaphoreui64NVX: glClientWaitSemaphoreui64NVX = @ptrCast(glClientWaitSemaphoreui64NVX, gl.missingFunctionPanic),
    ClientWaitSync: glClientWaitSync = @ptrCast(glClientWaitSync, gl.missingFunctionPanic),
    ClipControl: glClipControl = @ptrCast(glClipControl, gl.missingFunctionPanic),
    ClipPlanefOES: glClipPlanefOES = @ptrCast(glClipPlanefOES, gl.missingFunctionPanic),
    ClipPlanexOES: glClipPlanexOES = @ptrCast(glClipPlanexOES, gl.missingFunctionPanic),
    Color3fVertex3fSUN: glColor3fVertex3fSUN = @ptrCast(glColor3fVertex3fSUN, gl.missingFunctionPanic),
    Color3fVertex3fvSUN: glColor3fVertex3fvSUN = @ptrCast(glColor3fVertex3fvSUN, gl.missingFunctionPanic),
    Color3hNV: glColor3hNV = @ptrCast(glColor3hNV, gl.missingFunctionPanic),
    Color3hvNV: glColor3hvNV = @ptrCast(glColor3hvNV, gl.missingFunctionPanic),
    Color3xOES: glColor3xOES = @ptrCast(glColor3xOES, gl.missingFunctionPanic),
    Color3xvOES: glColor3xvOES = @ptrCast(glColor3xvOES, gl.missingFunctionPanic),
    Color4fNormal3fVertex3fSUN: glColor4fNormal3fVertex3fSUN = @ptrCast(glColor4fNormal3fVertex3fSUN, gl.missingFunctionPanic),
    Color4fNormal3fVertex3fvSUN: glColor4fNormal3fVertex3fvSUN = @ptrCast(glColor4fNormal3fVertex3fvSUN, gl.missingFunctionPanic),
    Color4hNV: glColor4hNV = @ptrCast(glColor4hNV, gl.missingFunctionPanic),
    Color4hvNV: glColor4hvNV = @ptrCast(glColor4hvNV, gl.missingFunctionPanic),
    Color4ubVertex2fSUN: glColor4ubVertex2fSUN = @ptrCast(glColor4ubVertex2fSUN, gl.missingFunctionPanic),
    Color4ubVertex2fvSUN: glColor4ubVertex2fvSUN = @ptrCast(glColor4ubVertex2fvSUN, gl.missingFunctionPanic),
    Color4ubVertex3fSUN: glColor4ubVertex3fSUN = @ptrCast(glColor4ubVertex3fSUN, gl.missingFunctionPanic),
    Color4ubVertex3fvSUN: glColor4ubVertex3fvSUN = @ptrCast(glColor4ubVertex3fvSUN, gl.missingFunctionPanic),
    Color4xOES: glColor4xOES = @ptrCast(glColor4xOES, gl.missingFunctionPanic),
    Color4xvOES: glColor4xvOES = @ptrCast(glColor4xvOES, gl.missingFunctionPanic),
    ColorFormatNV: glColorFormatNV = @ptrCast(glColorFormatNV, gl.missingFunctionPanic),
    ColorFragmentOp1ATI: glColorFragmentOp1ATI = @ptrCast(glColorFragmentOp1ATI, gl.missingFunctionPanic),
    ColorFragmentOp2ATI: glColorFragmentOp2ATI = @ptrCast(glColorFragmentOp2ATI, gl.missingFunctionPanic),
    ColorFragmentOp3ATI: glColorFragmentOp3ATI = @ptrCast(glColorFragmentOp3ATI, gl.missingFunctionPanic),
    ColorMask: glColorMask = @ptrCast(glColorMask, gl.missingFunctionPanic),
    ColorMaskIndexedEXT: glColorMaskIndexedEXT = @ptrCast(glColorMaskIndexedEXT, gl.missingFunctionPanic),
    ColorMaski: glColorMaski = @ptrCast(glColorMaski, gl.missingFunctionPanic),
    ColorPointerEXT: glColorPointerEXT = @ptrCast(glColorPointerEXT, gl.missingFunctionPanic),
    ColorPointerListIBM: glColorPointerListIBM = @ptrCast(glColorPointerListIBM, gl.missingFunctionPanic),
    ColorPointervINTEL: glColorPointervINTEL = @ptrCast(glColorPointervINTEL, gl.missingFunctionPanic),
    ColorSubTableEXT: glColorSubTableEXT = @ptrCast(glColorSubTableEXT, gl.missingFunctionPanic),
    ColorTableEXT: glColorTableEXT = @ptrCast(glColorTableEXT, gl.missingFunctionPanic),
    ColorTableParameterfvSGI: glColorTableParameterfvSGI = @ptrCast(glColorTableParameterfvSGI, gl.missingFunctionPanic),
    ColorTableParameterivSGI: glColorTableParameterivSGI = @ptrCast(glColorTableParameterivSGI, gl.missingFunctionPanic),
    ColorTableSGI: glColorTableSGI = @ptrCast(glColorTableSGI, gl.missingFunctionPanic),
    CombinerInputNV: glCombinerInputNV = @ptrCast(glCombinerInputNV, gl.missingFunctionPanic),
    CombinerOutputNV: glCombinerOutputNV = @ptrCast(glCombinerOutputNV, gl.missingFunctionPanic),
    CombinerParameterfNV: glCombinerParameterfNV = @ptrCast(glCombinerParameterfNV, gl.missingFunctionPanic),
    CombinerParameterfvNV: glCombinerParameterfvNV = @ptrCast(glCombinerParameterfvNV, gl.missingFunctionPanic),
    CombinerParameteriNV: glCombinerParameteriNV = @ptrCast(glCombinerParameteriNV, gl.missingFunctionPanic),
    CombinerParameterivNV: glCombinerParameterivNV = @ptrCast(glCombinerParameterivNV, gl.missingFunctionPanic),
    CombinerStageParameterfvNV: glCombinerStageParameterfvNV = @ptrCast(glCombinerStageParameterfvNV, gl.missingFunctionPanic),
    CommandListSegmentsNV: glCommandListSegmentsNV = @ptrCast(glCommandListSegmentsNV, gl.missingFunctionPanic),
    CompileCommandListNV: glCompileCommandListNV = @ptrCast(glCompileCommandListNV, gl.missingFunctionPanic),
    CompileShader: glCompileShader = @ptrCast(glCompileShader, gl.missingFunctionPanic),
    CompileShaderARB: glCompileShaderARB = @ptrCast(glCompileShaderARB, gl.missingFunctionPanic),
    CompileShaderIncludeARB: glCompileShaderIncludeARB = @ptrCast(glCompileShaderIncludeARB, gl.missingFunctionPanic),
    CompressedMultiTexImage1DEXT: glCompressedMultiTexImage1DEXT = @ptrCast(glCompressedMultiTexImage1DEXT, gl.missingFunctionPanic),
    CompressedMultiTexImage2DEXT: glCompressedMultiTexImage2DEXT = @ptrCast(glCompressedMultiTexImage2DEXT, gl.missingFunctionPanic),
    CompressedMultiTexImage3DEXT: glCompressedMultiTexImage3DEXT = @ptrCast(glCompressedMultiTexImage3DEXT, gl.missingFunctionPanic),
    CompressedMultiTexSubImage1DEXT: glCompressedMultiTexSubImage1DEXT = @ptrCast(glCompressedMultiTexSubImage1DEXT, gl.missingFunctionPanic),
    CompressedMultiTexSubImage2DEXT: glCompressedMultiTexSubImage2DEXT = @ptrCast(glCompressedMultiTexSubImage2DEXT, gl.missingFunctionPanic),
    CompressedMultiTexSubImage3DEXT: glCompressedMultiTexSubImage3DEXT = @ptrCast(glCompressedMultiTexSubImage3DEXT, gl.missingFunctionPanic),
    CompressedTexImage1D: glCompressedTexImage1D = @ptrCast(glCompressedTexImage1D, gl.missingFunctionPanic),
    CompressedTexImage1DARB: glCompressedTexImage1DARB = @ptrCast(glCompressedTexImage1DARB, gl.missingFunctionPanic),
    CompressedTexImage2D: glCompressedTexImage2D = @ptrCast(glCompressedTexImage2D, gl.missingFunctionPanic),
    CompressedTexImage2DARB: glCompressedTexImage2DARB = @ptrCast(glCompressedTexImage2DARB, gl.missingFunctionPanic),
    CompressedTexImage3D: glCompressedTexImage3D = @ptrCast(glCompressedTexImage3D, gl.missingFunctionPanic),
    CompressedTexImage3DARB: glCompressedTexImage3DARB = @ptrCast(glCompressedTexImage3DARB, gl.missingFunctionPanic),
    CompressedTexSubImage1D: glCompressedTexSubImage1D = @ptrCast(glCompressedTexSubImage1D, gl.missingFunctionPanic),
    CompressedTexSubImage1DARB: glCompressedTexSubImage1DARB = @ptrCast(glCompressedTexSubImage1DARB, gl.missingFunctionPanic),
    CompressedTexSubImage2D: glCompressedTexSubImage2D = @ptrCast(glCompressedTexSubImage2D, gl.missingFunctionPanic),
    CompressedTexSubImage2DARB: glCompressedTexSubImage2DARB = @ptrCast(glCompressedTexSubImage2DARB, gl.missingFunctionPanic),
    CompressedTexSubImage3D: glCompressedTexSubImage3D = @ptrCast(glCompressedTexSubImage3D, gl.missingFunctionPanic),
    CompressedTexSubImage3DARB: glCompressedTexSubImage3DARB = @ptrCast(glCompressedTexSubImage3DARB, gl.missingFunctionPanic),
    CompressedTextureImage1DEXT: glCompressedTextureImage1DEXT = @ptrCast(glCompressedTextureImage1DEXT, gl.missingFunctionPanic),
    CompressedTextureImage2DEXT: glCompressedTextureImage2DEXT = @ptrCast(glCompressedTextureImage2DEXT, gl.missingFunctionPanic),
    CompressedTextureImage3DEXT: glCompressedTextureImage3DEXT = @ptrCast(glCompressedTextureImage3DEXT, gl.missingFunctionPanic),
    CompressedTextureSubImage1D: glCompressedTextureSubImage1D = @ptrCast(glCompressedTextureSubImage1D, gl.missingFunctionPanic),
    CompressedTextureSubImage1DEXT: glCompressedTextureSubImage1DEXT = @ptrCast(glCompressedTextureSubImage1DEXT, gl.missingFunctionPanic),
    CompressedTextureSubImage2D: glCompressedTextureSubImage2D = @ptrCast(glCompressedTextureSubImage2D, gl.missingFunctionPanic),
    CompressedTextureSubImage2DEXT: glCompressedTextureSubImage2DEXT = @ptrCast(glCompressedTextureSubImage2DEXT, gl.missingFunctionPanic),
    CompressedTextureSubImage3D: glCompressedTextureSubImage3D = @ptrCast(glCompressedTextureSubImage3D, gl.missingFunctionPanic),
    CompressedTextureSubImage3DEXT: glCompressedTextureSubImage3DEXT = @ptrCast(glCompressedTextureSubImage3DEXT, gl.missingFunctionPanic),
    ConservativeRasterParameterfNV: glConservativeRasterParameterfNV = @ptrCast(glConservativeRasterParameterfNV, gl.missingFunctionPanic),
    ConservativeRasterParameteriNV: glConservativeRasterParameteriNV = @ptrCast(glConservativeRasterParameteriNV, gl.missingFunctionPanic),
    ConvolutionFilter1DEXT: glConvolutionFilter1DEXT = @ptrCast(glConvolutionFilter1DEXT, gl.missingFunctionPanic),
    ConvolutionFilter2DEXT: glConvolutionFilter2DEXT = @ptrCast(glConvolutionFilter2DEXT, gl.missingFunctionPanic),
    ConvolutionParameterfEXT: glConvolutionParameterfEXT = @ptrCast(glConvolutionParameterfEXT, gl.missingFunctionPanic),
    ConvolutionParameterfvEXT: glConvolutionParameterfvEXT = @ptrCast(glConvolutionParameterfvEXT, gl.missingFunctionPanic),
    ConvolutionParameteriEXT: glConvolutionParameteriEXT = @ptrCast(glConvolutionParameteriEXT, gl.missingFunctionPanic),
    ConvolutionParameterivEXT: glConvolutionParameterivEXT = @ptrCast(glConvolutionParameterivEXT, gl.missingFunctionPanic),
    ConvolutionParameterxOES: glConvolutionParameterxOES = @ptrCast(glConvolutionParameterxOES, gl.missingFunctionPanic),
    ConvolutionParameterxvOES: glConvolutionParameterxvOES = @ptrCast(glConvolutionParameterxvOES, gl.missingFunctionPanic),
    CopyBufferSubData: glCopyBufferSubData = @ptrCast(glCopyBufferSubData, gl.missingFunctionPanic),
    CopyColorSubTableEXT: glCopyColorSubTableEXT = @ptrCast(glCopyColorSubTableEXT, gl.missingFunctionPanic),
    CopyColorTableSGI: glCopyColorTableSGI = @ptrCast(glCopyColorTableSGI, gl.missingFunctionPanic),
    CopyConvolutionFilter1DEXT: glCopyConvolutionFilter1DEXT = @ptrCast(glCopyConvolutionFilter1DEXT, gl.missingFunctionPanic),
    CopyConvolutionFilter2DEXT: glCopyConvolutionFilter2DEXT = @ptrCast(glCopyConvolutionFilter2DEXT, gl.missingFunctionPanic),
    CopyImageSubData: glCopyImageSubData = @ptrCast(glCopyImageSubData, gl.missingFunctionPanic),
    CopyImageSubDataNV: glCopyImageSubDataNV = @ptrCast(glCopyImageSubDataNV, gl.missingFunctionPanic),
    CopyMultiTexImage1DEXT: glCopyMultiTexImage1DEXT = @ptrCast(glCopyMultiTexImage1DEXT, gl.missingFunctionPanic),
    CopyMultiTexImage2DEXT: glCopyMultiTexImage2DEXT = @ptrCast(glCopyMultiTexImage2DEXT, gl.missingFunctionPanic),
    CopyMultiTexSubImage1DEXT: glCopyMultiTexSubImage1DEXT = @ptrCast(glCopyMultiTexSubImage1DEXT, gl.missingFunctionPanic),
    CopyMultiTexSubImage2DEXT: glCopyMultiTexSubImage2DEXT = @ptrCast(glCopyMultiTexSubImage2DEXT, gl.missingFunctionPanic),
    CopyMultiTexSubImage3DEXT: glCopyMultiTexSubImage3DEXT = @ptrCast(glCopyMultiTexSubImage3DEXT, gl.missingFunctionPanic),
    CopyNamedBufferSubData: glCopyNamedBufferSubData = @ptrCast(glCopyNamedBufferSubData, gl.missingFunctionPanic),
    CopyPathNV: glCopyPathNV = @ptrCast(glCopyPathNV, gl.missingFunctionPanic),
    CopyTexImage1D: glCopyTexImage1D = @ptrCast(glCopyTexImage1D, gl.missingFunctionPanic),
    CopyTexImage1DEXT: glCopyTexImage1DEXT = @ptrCast(glCopyTexImage1DEXT, gl.missingFunctionPanic),
    CopyTexImage2D: glCopyTexImage2D = @ptrCast(glCopyTexImage2D, gl.missingFunctionPanic),
    CopyTexImage2DEXT: glCopyTexImage2DEXT = @ptrCast(glCopyTexImage2DEXT, gl.missingFunctionPanic),
    CopyTexSubImage1D: glCopyTexSubImage1D = @ptrCast(glCopyTexSubImage1D, gl.missingFunctionPanic),
    CopyTexSubImage1DEXT: glCopyTexSubImage1DEXT = @ptrCast(glCopyTexSubImage1DEXT, gl.missingFunctionPanic),
    CopyTexSubImage2D: glCopyTexSubImage2D = @ptrCast(glCopyTexSubImage2D, gl.missingFunctionPanic),
    CopyTexSubImage2DEXT: glCopyTexSubImage2DEXT = @ptrCast(glCopyTexSubImage2DEXT, gl.missingFunctionPanic),
    CopyTexSubImage3D: glCopyTexSubImage3D = @ptrCast(glCopyTexSubImage3D, gl.missingFunctionPanic),
    CopyTexSubImage3DEXT: glCopyTexSubImage3DEXT = @ptrCast(glCopyTexSubImage3DEXT, gl.missingFunctionPanic),
    CopyTextureImage1DEXT: glCopyTextureImage1DEXT = @ptrCast(glCopyTextureImage1DEXT, gl.missingFunctionPanic),
    CopyTextureImage2DEXT: glCopyTextureImage2DEXT = @ptrCast(glCopyTextureImage2DEXT, gl.missingFunctionPanic),
    CopyTextureSubImage1D: glCopyTextureSubImage1D = @ptrCast(glCopyTextureSubImage1D, gl.missingFunctionPanic),
    CopyTextureSubImage1DEXT: glCopyTextureSubImage1DEXT = @ptrCast(glCopyTextureSubImage1DEXT, gl.missingFunctionPanic),
    CopyTextureSubImage2D: glCopyTextureSubImage2D = @ptrCast(glCopyTextureSubImage2D, gl.missingFunctionPanic),
    CopyTextureSubImage2DEXT: glCopyTextureSubImage2DEXT = @ptrCast(glCopyTextureSubImage2DEXT, gl.missingFunctionPanic),
    CopyTextureSubImage3D: glCopyTextureSubImage3D = @ptrCast(glCopyTextureSubImage3D, gl.missingFunctionPanic),
    CopyTextureSubImage3DEXT: glCopyTextureSubImage3DEXT = @ptrCast(glCopyTextureSubImage3DEXT, gl.missingFunctionPanic),
    CoverFillPathInstancedNV: glCoverFillPathInstancedNV = @ptrCast(glCoverFillPathInstancedNV, gl.missingFunctionPanic),
    CoverFillPathNV: glCoverFillPathNV = @ptrCast(glCoverFillPathNV, gl.missingFunctionPanic),
    CoverStrokePathInstancedNV: glCoverStrokePathInstancedNV = @ptrCast(glCoverStrokePathInstancedNV, gl.missingFunctionPanic),
    CoverStrokePathNV: glCoverStrokePathNV = @ptrCast(glCoverStrokePathNV, gl.missingFunctionPanic),
    CoverageModulationNV: glCoverageModulationNV = @ptrCast(glCoverageModulationNV, gl.missingFunctionPanic),
    CoverageModulationTableNV: glCoverageModulationTableNV = @ptrCast(glCoverageModulationTableNV, gl.missingFunctionPanic),
    CreateBuffers: glCreateBuffers = @ptrCast(glCreateBuffers, gl.missingFunctionPanic),
    CreateCommandListsNV: glCreateCommandListsNV = @ptrCast(glCreateCommandListsNV, gl.missingFunctionPanic),
    CreateFramebuffers: glCreateFramebuffers = @ptrCast(glCreateFramebuffers, gl.missingFunctionPanic),
    CreateMemoryObjectsEXT: glCreateMemoryObjectsEXT = @ptrCast(glCreateMemoryObjectsEXT, gl.missingFunctionPanic),
    CreatePerfQueryINTEL: glCreatePerfQueryINTEL = @ptrCast(glCreatePerfQueryINTEL, gl.missingFunctionPanic),
    CreateProgram: glCreateProgram = @ptrCast(glCreateProgram, gl.missingFunctionPanic),
    CreateProgramObjectARB: glCreateProgramObjectARB = @ptrCast(glCreateProgramObjectARB, gl.missingFunctionPanic),
    CreateProgramPipelines: glCreateProgramPipelines = @ptrCast(glCreateProgramPipelines, gl.missingFunctionPanic),
    CreateProgressFenceNVX: glCreateProgressFenceNVX = @ptrCast(glCreateProgressFenceNVX, gl.missingFunctionPanic),
    CreateQueries: glCreateQueries = @ptrCast(glCreateQueries, gl.missingFunctionPanic),
    CreateRenderbuffers: glCreateRenderbuffers = @ptrCast(glCreateRenderbuffers, gl.missingFunctionPanic),
    CreateSamplers: glCreateSamplers = @ptrCast(glCreateSamplers, gl.missingFunctionPanic),
    CreateSemaphoresNV: glCreateSemaphoresNV = @ptrCast(glCreateSemaphoresNV, gl.missingFunctionPanic),
    CreateShader: glCreateShader = @ptrCast(glCreateShader, gl.missingFunctionPanic),
    CreateShaderObjectARB: glCreateShaderObjectARB = @ptrCast(glCreateShaderObjectARB, gl.missingFunctionPanic),
    CreateShaderProgramEXT: glCreateShaderProgramEXT = @ptrCast(glCreateShaderProgramEXT, gl.missingFunctionPanic),
    CreateShaderProgramv: glCreateShaderProgramv = @ptrCast(glCreateShaderProgramv, gl.missingFunctionPanic),
    CreateStatesNV: glCreateStatesNV = @ptrCast(glCreateStatesNV, gl.missingFunctionPanic),
    CreateSyncFromCLeventARB: glCreateSyncFromCLeventARB = @ptrCast(glCreateSyncFromCLeventARB, gl.missingFunctionPanic),
    CreateTextures: glCreateTextures = @ptrCast(glCreateTextures, gl.missingFunctionPanic),
    CreateTransformFeedbacks: glCreateTransformFeedbacks = @ptrCast(glCreateTransformFeedbacks, gl.missingFunctionPanic),
    CreateVertexArrays: glCreateVertexArrays = @ptrCast(glCreateVertexArrays, gl.missingFunctionPanic),
    CullFace: glCullFace = @ptrCast(glCullFace, gl.missingFunctionPanic),
    CullParameterdvEXT: glCullParameterdvEXT = @ptrCast(glCullParameterdvEXT, gl.missingFunctionPanic),
    CullParameterfvEXT: glCullParameterfvEXT = @ptrCast(glCullParameterfvEXT, gl.missingFunctionPanic),
    CurrentPaletteMatrixARB: glCurrentPaletteMatrixARB = @ptrCast(glCurrentPaletteMatrixARB, gl.missingFunctionPanic),
    DebugMessageCallback: glDebugMessageCallback = @ptrCast(glDebugMessageCallback, gl.missingFunctionPanic),
    DebugMessageCallbackAMD: glDebugMessageCallbackAMD = @ptrCast(glDebugMessageCallbackAMD, gl.missingFunctionPanic),
    DebugMessageCallbackARB: glDebugMessageCallbackARB = @ptrCast(glDebugMessageCallbackARB, gl.missingFunctionPanic),
    DebugMessageControl: glDebugMessageControl = @ptrCast(glDebugMessageControl, gl.missingFunctionPanic),
    DebugMessageControlARB: glDebugMessageControlARB = @ptrCast(glDebugMessageControlARB, gl.missingFunctionPanic),
    DebugMessageEnableAMD: glDebugMessageEnableAMD = @ptrCast(glDebugMessageEnableAMD, gl.missingFunctionPanic),
    DebugMessageInsert: glDebugMessageInsert = @ptrCast(glDebugMessageInsert, gl.missingFunctionPanic),
    DebugMessageInsertAMD: glDebugMessageInsertAMD = @ptrCast(glDebugMessageInsertAMD, gl.missingFunctionPanic),
    DebugMessageInsertARB: glDebugMessageInsertARB = @ptrCast(glDebugMessageInsertARB, gl.missingFunctionPanic),
    DeformSGIX: glDeformSGIX = @ptrCast(glDeformSGIX, gl.missingFunctionPanic),
    DeformationMap3dSGIX: glDeformationMap3dSGIX = @ptrCast(glDeformationMap3dSGIX, gl.missingFunctionPanic),
    DeformationMap3fSGIX: glDeformationMap3fSGIX = @ptrCast(glDeformationMap3fSGIX, gl.missingFunctionPanic),
    DeleteAsyncMarkersSGIX: glDeleteAsyncMarkersSGIX = @ptrCast(glDeleteAsyncMarkersSGIX, gl.missingFunctionPanic),
    DeleteBuffers: glDeleteBuffers = @ptrCast(glDeleteBuffers, gl.missingFunctionPanic),
    DeleteBuffersARB: glDeleteBuffersARB = @ptrCast(glDeleteBuffersARB, gl.missingFunctionPanic),
    DeleteCommandListsNV: glDeleteCommandListsNV = @ptrCast(glDeleteCommandListsNV, gl.missingFunctionPanic),
    DeleteFencesAPPLE: glDeleteFencesAPPLE = @ptrCast(glDeleteFencesAPPLE, gl.missingFunctionPanic),
    DeleteFencesNV: glDeleteFencesNV = @ptrCast(glDeleteFencesNV, gl.missingFunctionPanic),
    DeleteFragmentShaderATI: glDeleteFragmentShaderATI = @ptrCast(glDeleteFragmentShaderATI, gl.missingFunctionPanic),
    DeleteFramebuffers: glDeleteFramebuffers = @ptrCast(glDeleteFramebuffers, gl.missingFunctionPanic),
    DeleteFramebuffersEXT: glDeleteFramebuffersEXT = @ptrCast(glDeleteFramebuffersEXT, gl.missingFunctionPanic),
    DeleteMemoryObjectsEXT: glDeleteMemoryObjectsEXT = @ptrCast(glDeleteMemoryObjectsEXT, gl.missingFunctionPanic),
    DeleteNamedStringARB: glDeleteNamedStringARB = @ptrCast(glDeleteNamedStringARB, gl.missingFunctionPanic),
    DeleteNamesAMD: glDeleteNamesAMD = @ptrCast(glDeleteNamesAMD, gl.missingFunctionPanic),
    DeleteObjectARB: glDeleteObjectARB = @ptrCast(glDeleteObjectARB, gl.missingFunctionPanic),
    DeleteOcclusionQueriesNV: glDeleteOcclusionQueriesNV = @ptrCast(glDeleteOcclusionQueriesNV, gl.missingFunctionPanic),
    DeletePathsNV: glDeletePathsNV = @ptrCast(glDeletePathsNV, gl.missingFunctionPanic),
    DeletePerfMonitorsAMD: glDeletePerfMonitorsAMD = @ptrCast(glDeletePerfMonitorsAMD, gl.missingFunctionPanic),
    DeletePerfQueryINTEL: glDeletePerfQueryINTEL = @ptrCast(glDeletePerfQueryINTEL, gl.missingFunctionPanic),
    DeleteProgram: glDeleteProgram = @ptrCast(glDeleteProgram, gl.missingFunctionPanic),
    DeleteProgramPipelines: glDeleteProgramPipelines = @ptrCast(glDeleteProgramPipelines, gl.missingFunctionPanic),
    DeleteProgramsARB: glDeleteProgramsARB = @ptrCast(glDeleteProgramsARB, gl.missingFunctionPanic),
    DeleteProgramsNV: glDeleteProgramsNV = @ptrCast(glDeleteProgramsNV, gl.missingFunctionPanic),
    DeleteQueries: glDeleteQueries = @ptrCast(glDeleteQueries, gl.missingFunctionPanic),
    DeleteQueriesARB: glDeleteQueriesARB = @ptrCast(glDeleteQueriesARB, gl.missingFunctionPanic),
    DeleteQueryResourceTagNV: glDeleteQueryResourceTagNV = @ptrCast(glDeleteQueryResourceTagNV, gl.missingFunctionPanic),
    DeleteRenderbuffers: glDeleteRenderbuffers = @ptrCast(glDeleteRenderbuffers, gl.missingFunctionPanic),
    DeleteRenderbuffersEXT: glDeleteRenderbuffersEXT = @ptrCast(glDeleteRenderbuffersEXT, gl.missingFunctionPanic),
    DeleteSamplers: glDeleteSamplers = @ptrCast(glDeleteSamplers, gl.missingFunctionPanic),
    DeleteSemaphoresEXT: glDeleteSemaphoresEXT = @ptrCast(glDeleteSemaphoresEXT, gl.missingFunctionPanic),
    DeleteShader: glDeleteShader = @ptrCast(glDeleteShader, gl.missingFunctionPanic),
    DeleteStatesNV: glDeleteStatesNV = @ptrCast(glDeleteStatesNV, gl.missingFunctionPanic),
    DeleteSync: glDeleteSync = @ptrCast(glDeleteSync, gl.missingFunctionPanic),
    DeleteTextures: glDeleteTextures = @ptrCast(glDeleteTextures, gl.missingFunctionPanic),
    DeleteTexturesEXT: glDeleteTexturesEXT = @ptrCast(glDeleteTexturesEXT, gl.missingFunctionPanic),
    DeleteTransformFeedbacks: glDeleteTransformFeedbacks = @ptrCast(glDeleteTransformFeedbacks, gl.missingFunctionPanic),
    DeleteTransformFeedbacksNV: glDeleteTransformFeedbacksNV = @ptrCast(glDeleteTransformFeedbacksNV, gl.missingFunctionPanic),
    DeleteVertexArrays: glDeleteVertexArrays = @ptrCast(glDeleteVertexArrays, gl.missingFunctionPanic),
    DeleteVertexArraysAPPLE: glDeleteVertexArraysAPPLE = @ptrCast(glDeleteVertexArraysAPPLE, gl.missingFunctionPanic),
    DeleteVertexShaderEXT: glDeleteVertexShaderEXT = @ptrCast(glDeleteVertexShaderEXT, gl.missingFunctionPanic),
    DepthBoundsEXT: glDepthBoundsEXT = @ptrCast(glDepthBoundsEXT, gl.missingFunctionPanic),
    DepthBoundsdNV: glDepthBoundsdNV = @ptrCast(glDepthBoundsdNV, gl.missingFunctionPanic),
    DepthFunc: glDepthFunc = @ptrCast(glDepthFunc, gl.missingFunctionPanic),
    DepthMask: glDepthMask = @ptrCast(glDepthMask, gl.missingFunctionPanic),
    DepthRange: glDepthRange = @ptrCast(glDepthRange, gl.missingFunctionPanic),
    DepthRangeArraydvNV: glDepthRangeArraydvNV = @ptrCast(glDepthRangeArraydvNV, gl.missingFunctionPanic),
    DepthRangeArrayv: glDepthRangeArrayv = @ptrCast(glDepthRangeArrayv, gl.missingFunctionPanic),
    DepthRangeIndexed: glDepthRangeIndexed = @ptrCast(glDepthRangeIndexed, gl.missingFunctionPanic),
    DepthRangeIndexeddNV: glDepthRangeIndexeddNV = @ptrCast(glDepthRangeIndexeddNV, gl.missingFunctionPanic),
    DepthRangedNV: glDepthRangedNV = @ptrCast(glDepthRangedNV, gl.missingFunctionPanic),
    DepthRangef: glDepthRangef = @ptrCast(glDepthRangef, gl.missingFunctionPanic),
    DepthRangefOES: glDepthRangefOES = @ptrCast(glDepthRangefOES, gl.missingFunctionPanic),
    DepthRangexOES: glDepthRangexOES = @ptrCast(glDepthRangexOES, gl.missingFunctionPanic),
    DetachObjectARB: glDetachObjectARB = @ptrCast(glDetachObjectARB, gl.missingFunctionPanic),
    DetachShader: glDetachShader = @ptrCast(glDetachShader, gl.missingFunctionPanic),
    DetailTexFuncSGIS: glDetailTexFuncSGIS = @ptrCast(glDetailTexFuncSGIS, gl.missingFunctionPanic),
    Disable: glDisable = @ptrCast(glDisable, gl.missingFunctionPanic),
    DisableClientStateIndexedEXT: glDisableClientStateIndexedEXT = @ptrCast(glDisableClientStateIndexedEXT, gl.missingFunctionPanic),
    DisableClientStateiEXT: glDisableClientStateiEXT = @ptrCast(glDisableClientStateiEXT, gl.missingFunctionPanic),
    DisableIndexedEXT: glDisableIndexedEXT = @ptrCast(glDisableIndexedEXT, gl.missingFunctionPanic),
    DisableVariantClientStateEXT: glDisableVariantClientStateEXT = @ptrCast(glDisableVariantClientStateEXT, gl.missingFunctionPanic),
    DisableVertexArrayAttrib: glDisableVertexArrayAttrib = @ptrCast(glDisableVertexArrayAttrib, gl.missingFunctionPanic),
    DisableVertexArrayAttribEXT: glDisableVertexArrayAttribEXT = @ptrCast(glDisableVertexArrayAttribEXT, gl.missingFunctionPanic),
    DisableVertexArrayEXT: glDisableVertexArrayEXT = @ptrCast(glDisableVertexArrayEXT, gl.missingFunctionPanic),
    DisableVertexAttribAPPLE: glDisableVertexAttribAPPLE = @ptrCast(glDisableVertexAttribAPPLE, gl.missingFunctionPanic),
    DisableVertexAttribArray: glDisableVertexAttribArray = @ptrCast(glDisableVertexAttribArray, gl.missingFunctionPanic),
    DisableVertexAttribArrayARB: glDisableVertexAttribArrayARB = @ptrCast(glDisableVertexAttribArrayARB, gl.missingFunctionPanic),
    Disablei: glDisablei = @ptrCast(glDisablei, gl.missingFunctionPanic),
    DispatchCompute: glDispatchCompute = @ptrCast(glDispatchCompute, gl.missingFunctionPanic),
    DispatchComputeGroupSizeARB: glDispatchComputeGroupSizeARB = @ptrCast(glDispatchComputeGroupSizeARB, gl.missingFunctionPanic),
    DispatchComputeIndirect: glDispatchComputeIndirect = @ptrCast(glDispatchComputeIndirect, gl.missingFunctionPanic),
    DrawArrays: glDrawArrays = @ptrCast(glDrawArrays, gl.missingFunctionPanic),
    DrawArraysEXT: glDrawArraysEXT = @ptrCast(glDrawArraysEXT, gl.missingFunctionPanic),
    DrawArraysIndirect: glDrawArraysIndirect = @ptrCast(glDrawArraysIndirect, gl.missingFunctionPanic),
    DrawArraysInstanced: glDrawArraysInstanced = @ptrCast(glDrawArraysInstanced, gl.missingFunctionPanic),
    DrawArraysInstancedARB: glDrawArraysInstancedARB = @ptrCast(glDrawArraysInstancedARB, gl.missingFunctionPanic),
    DrawArraysInstancedBaseInstance: glDrawArraysInstancedBaseInstance = @ptrCast(glDrawArraysInstancedBaseInstance, gl.missingFunctionPanic),
    DrawArraysInstancedEXT: glDrawArraysInstancedEXT = @ptrCast(glDrawArraysInstancedEXT, gl.missingFunctionPanic),
    DrawBuffer: glDrawBuffer = @ptrCast(glDrawBuffer, gl.missingFunctionPanic),
    DrawBuffers: glDrawBuffers = @ptrCast(glDrawBuffers, gl.missingFunctionPanic),
    DrawBuffersARB: glDrawBuffersARB = @ptrCast(glDrawBuffersARB, gl.missingFunctionPanic),
    DrawBuffersATI: glDrawBuffersATI = @ptrCast(glDrawBuffersATI, gl.missingFunctionPanic),
    DrawCommandsAddressNV: glDrawCommandsAddressNV = @ptrCast(glDrawCommandsAddressNV, gl.missingFunctionPanic),
    DrawCommandsNV: glDrawCommandsNV = @ptrCast(glDrawCommandsNV, gl.missingFunctionPanic),
    DrawCommandsStatesAddressNV: glDrawCommandsStatesAddressNV = @ptrCast(glDrawCommandsStatesAddressNV, gl.missingFunctionPanic),
    DrawCommandsStatesNV: glDrawCommandsStatesNV = @ptrCast(glDrawCommandsStatesNV, gl.missingFunctionPanic),
    DrawElementArrayAPPLE: glDrawElementArrayAPPLE = @ptrCast(glDrawElementArrayAPPLE, gl.missingFunctionPanic),
    DrawElementArrayATI: glDrawElementArrayATI = @ptrCast(glDrawElementArrayATI, gl.missingFunctionPanic),
    DrawElements: glDrawElements = @ptrCast(glDrawElements, gl.missingFunctionPanic),
    DrawElementsBaseVertex: glDrawElementsBaseVertex = @ptrCast(glDrawElementsBaseVertex, gl.missingFunctionPanic),
    DrawElementsIndirect: glDrawElementsIndirect = @ptrCast(glDrawElementsIndirect, gl.missingFunctionPanic),
    DrawElementsInstanced: glDrawElementsInstanced = @ptrCast(glDrawElementsInstanced, gl.missingFunctionPanic),
    DrawElementsInstancedARB: glDrawElementsInstancedARB = @ptrCast(glDrawElementsInstancedARB, gl.missingFunctionPanic),
    DrawElementsInstancedBaseInstance: glDrawElementsInstancedBaseInstance = @ptrCast(glDrawElementsInstancedBaseInstance, gl.missingFunctionPanic),
    DrawElementsInstancedBaseVertex: glDrawElementsInstancedBaseVertex = @ptrCast(glDrawElementsInstancedBaseVertex, gl.missingFunctionPanic),
    DrawElementsInstancedBaseVertexBaseInstance: glDrawElementsInstancedBaseVertexBaseInstance = @ptrCast(glDrawElementsInstancedBaseVertexBaseInstance, gl.missingFunctionPanic),
    DrawElementsInstancedEXT: glDrawElementsInstancedEXT = @ptrCast(glDrawElementsInstancedEXT, gl.missingFunctionPanic),
    DrawMeshArraysSUN: glDrawMeshArraysSUN = @ptrCast(glDrawMeshArraysSUN, gl.missingFunctionPanic),
    DrawMeshTasksIndirectNV: glDrawMeshTasksIndirectNV = @ptrCast(glDrawMeshTasksIndirectNV, gl.missingFunctionPanic),
    DrawMeshTasksNV: glDrawMeshTasksNV = @ptrCast(glDrawMeshTasksNV, gl.missingFunctionPanic),
    DrawRangeElementArrayAPPLE: glDrawRangeElementArrayAPPLE = @ptrCast(glDrawRangeElementArrayAPPLE, gl.missingFunctionPanic),
    DrawRangeElementArrayATI: glDrawRangeElementArrayATI = @ptrCast(glDrawRangeElementArrayATI, gl.missingFunctionPanic),
    DrawRangeElements: glDrawRangeElements = @ptrCast(glDrawRangeElements, gl.missingFunctionPanic),
    DrawRangeElementsBaseVertex: glDrawRangeElementsBaseVertex = @ptrCast(glDrawRangeElementsBaseVertex, gl.missingFunctionPanic),
    DrawRangeElementsEXT: glDrawRangeElementsEXT = @ptrCast(glDrawRangeElementsEXT, gl.missingFunctionPanic),
    DrawTextureNV: glDrawTextureNV = @ptrCast(glDrawTextureNV, gl.missingFunctionPanic),
    DrawTransformFeedback: glDrawTransformFeedback = @ptrCast(glDrawTransformFeedback, gl.missingFunctionPanic),
    DrawTransformFeedbackInstanced: glDrawTransformFeedbackInstanced = @ptrCast(glDrawTransformFeedbackInstanced, gl.missingFunctionPanic),
    DrawTransformFeedbackNV: glDrawTransformFeedbackNV = @ptrCast(glDrawTransformFeedbackNV, gl.missingFunctionPanic),
    DrawTransformFeedbackStream: glDrawTransformFeedbackStream = @ptrCast(glDrawTransformFeedbackStream, gl.missingFunctionPanic),
    DrawTransformFeedbackStreamInstanced: glDrawTransformFeedbackStreamInstanced = @ptrCast(glDrawTransformFeedbackStreamInstanced, gl.missingFunctionPanic),
    DrawVkImageNV: glDrawVkImageNV = @ptrCast(glDrawVkImageNV, gl.missingFunctionPanic),
    EGLImageTargetTexStorageEXT: glEGLImageTargetTexStorageEXT = @ptrCast(glEGLImageTargetTexStorageEXT, gl.missingFunctionPanic),
    EGLImageTargetTextureStorageEXT: glEGLImageTargetTextureStorageEXT = @ptrCast(glEGLImageTargetTextureStorageEXT, gl.missingFunctionPanic),
    EdgeFlagFormatNV: glEdgeFlagFormatNV = @ptrCast(glEdgeFlagFormatNV, gl.missingFunctionPanic),
    EdgeFlagPointerEXT: glEdgeFlagPointerEXT = @ptrCast(glEdgeFlagPointerEXT, gl.missingFunctionPanic),
    EdgeFlagPointerListIBM: glEdgeFlagPointerListIBM = @ptrCast(glEdgeFlagPointerListIBM, gl.missingFunctionPanic),
    ElementPointerAPPLE: glElementPointerAPPLE = @ptrCast(glElementPointerAPPLE, gl.missingFunctionPanic),
    ElementPointerATI: glElementPointerATI = @ptrCast(glElementPointerATI, gl.missingFunctionPanic),
    Enable: glEnable = @ptrCast(glEnable, gl.missingFunctionPanic),
    EnableClientStateIndexedEXT: glEnableClientStateIndexedEXT = @ptrCast(glEnableClientStateIndexedEXT, gl.missingFunctionPanic),
    EnableClientStateiEXT: glEnableClientStateiEXT = @ptrCast(glEnableClientStateiEXT, gl.missingFunctionPanic),
    EnableIndexedEXT: glEnableIndexedEXT = @ptrCast(glEnableIndexedEXT, gl.missingFunctionPanic),
    EnableVariantClientStateEXT: glEnableVariantClientStateEXT = @ptrCast(glEnableVariantClientStateEXT, gl.missingFunctionPanic),
    EnableVertexArrayAttrib: glEnableVertexArrayAttrib = @ptrCast(glEnableVertexArrayAttrib, gl.missingFunctionPanic),
    EnableVertexArrayAttribEXT: glEnableVertexArrayAttribEXT = @ptrCast(glEnableVertexArrayAttribEXT, gl.missingFunctionPanic),
    EnableVertexArrayEXT: glEnableVertexArrayEXT = @ptrCast(glEnableVertexArrayEXT, gl.missingFunctionPanic),
    EnableVertexAttribAPPLE: glEnableVertexAttribAPPLE = @ptrCast(glEnableVertexAttribAPPLE, gl.missingFunctionPanic),
    EnableVertexAttribArray: glEnableVertexAttribArray = @ptrCast(glEnableVertexAttribArray, gl.missingFunctionPanic),
    EnableVertexAttribArrayARB: glEnableVertexAttribArrayARB = @ptrCast(glEnableVertexAttribArrayARB, gl.missingFunctionPanic),
    Enablei: glEnablei = @ptrCast(glEnablei, gl.missingFunctionPanic),
    EndConditionalRender: glEndConditionalRender = @ptrCast(glEndConditionalRender, gl.missingFunctionPanic),
    EndConditionalRenderNV: glEndConditionalRenderNV = @ptrCast(glEndConditionalRenderNV, gl.missingFunctionPanic),
    EndConditionalRenderNVX: glEndConditionalRenderNVX = @ptrCast(glEndConditionalRenderNVX, gl.missingFunctionPanic),
    EndFragmentShaderATI: glEndFragmentShaderATI = @ptrCast(glEndFragmentShaderATI, gl.missingFunctionPanic),
    EndOcclusionQueryNV: glEndOcclusionQueryNV = @ptrCast(glEndOcclusionQueryNV, gl.missingFunctionPanic),
    EndPerfMonitorAMD: glEndPerfMonitorAMD = @ptrCast(glEndPerfMonitorAMD, gl.missingFunctionPanic),
    EndPerfQueryINTEL: glEndPerfQueryINTEL = @ptrCast(glEndPerfQueryINTEL, gl.missingFunctionPanic),
    EndQuery: glEndQuery = @ptrCast(glEndQuery, gl.missingFunctionPanic),
    EndQueryARB: glEndQueryARB = @ptrCast(glEndQueryARB, gl.missingFunctionPanic),
    EndQueryIndexed: glEndQueryIndexed = @ptrCast(glEndQueryIndexed, gl.missingFunctionPanic),
    EndTransformFeedback: glEndTransformFeedback = @ptrCast(glEndTransformFeedback, gl.missingFunctionPanic),
    EndTransformFeedbackEXT: glEndTransformFeedbackEXT = @ptrCast(glEndTransformFeedbackEXT, gl.missingFunctionPanic),
    EndTransformFeedbackNV: glEndTransformFeedbackNV = @ptrCast(glEndTransformFeedbackNV, gl.missingFunctionPanic),
    EndVertexShaderEXT: glEndVertexShaderEXT = @ptrCast(glEndVertexShaderEXT, gl.missingFunctionPanic),
    EndVideoCaptureNV: glEndVideoCaptureNV = @ptrCast(glEndVideoCaptureNV, gl.missingFunctionPanic),
    EvalCoord1xOES: glEvalCoord1xOES = @ptrCast(glEvalCoord1xOES, gl.missingFunctionPanic),
    EvalCoord1xvOES: glEvalCoord1xvOES = @ptrCast(glEvalCoord1xvOES, gl.missingFunctionPanic),
    EvalCoord2xOES: glEvalCoord2xOES = @ptrCast(glEvalCoord2xOES, gl.missingFunctionPanic),
    EvalCoord2xvOES: glEvalCoord2xvOES = @ptrCast(glEvalCoord2xvOES, gl.missingFunctionPanic),
    EvalMapsNV: glEvalMapsNV = @ptrCast(glEvalMapsNV, gl.missingFunctionPanic),
    EvaluateDepthValuesARB: glEvaluateDepthValuesARB = @ptrCast(glEvaluateDepthValuesARB, gl.missingFunctionPanic),
    ExecuteProgramNV: glExecuteProgramNV = @ptrCast(glExecuteProgramNV, gl.missingFunctionPanic),
    ExtractComponentEXT: glExtractComponentEXT = @ptrCast(glExtractComponentEXT, gl.missingFunctionPanic),
    FeedbackBufferxOES: glFeedbackBufferxOES = @ptrCast(glFeedbackBufferxOES, gl.missingFunctionPanic),
    FenceSync: glFenceSync = @ptrCast(glFenceSync, gl.missingFunctionPanic),
    FinalCombinerInputNV: glFinalCombinerInputNV = @ptrCast(glFinalCombinerInputNV, gl.missingFunctionPanic),
    Finish: glFinish = @ptrCast(glFinish, gl.missingFunctionPanic),
    FinishAsyncSGIX: glFinishAsyncSGIX = @ptrCast(glFinishAsyncSGIX, gl.missingFunctionPanic),
    FinishFenceAPPLE: glFinishFenceAPPLE = @ptrCast(glFinishFenceAPPLE, gl.missingFunctionPanic),
    FinishFenceNV: glFinishFenceNV = @ptrCast(glFinishFenceNV, gl.missingFunctionPanic),
    FinishObjectAPPLE: glFinishObjectAPPLE = @ptrCast(glFinishObjectAPPLE, gl.missingFunctionPanic),
    FinishTextureSUNX: glFinishTextureSUNX = @ptrCast(glFinishTextureSUNX, gl.missingFunctionPanic),
    Flush: glFlush = @ptrCast(glFlush, gl.missingFunctionPanic),
    FlushMappedBufferRange: glFlushMappedBufferRange = @ptrCast(glFlushMappedBufferRange, gl.missingFunctionPanic),
    FlushMappedBufferRangeAPPLE: glFlushMappedBufferRangeAPPLE = @ptrCast(glFlushMappedBufferRangeAPPLE, gl.missingFunctionPanic),
    FlushMappedNamedBufferRange: glFlushMappedNamedBufferRange = @ptrCast(glFlushMappedNamedBufferRange, gl.missingFunctionPanic),
    FlushMappedNamedBufferRangeEXT: glFlushMappedNamedBufferRangeEXT = @ptrCast(glFlushMappedNamedBufferRangeEXT, gl.missingFunctionPanic),
    FlushPixelDataRangeNV: glFlushPixelDataRangeNV = @ptrCast(glFlushPixelDataRangeNV, gl.missingFunctionPanic),
    FlushRasterSGIX: glFlushRasterSGIX = @ptrCast(glFlushRasterSGIX, gl.missingFunctionPanic),
    FlushStaticDataIBM: glFlushStaticDataIBM = @ptrCast(glFlushStaticDataIBM, gl.missingFunctionPanic),
    FlushVertexArrayRangeAPPLE: glFlushVertexArrayRangeAPPLE = @ptrCast(glFlushVertexArrayRangeAPPLE, gl.missingFunctionPanic),
    FlushVertexArrayRangeNV: glFlushVertexArrayRangeNV = @ptrCast(glFlushVertexArrayRangeNV, gl.missingFunctionPanic),
    FogCoordFormatNV: glFogCoordFormatNV = @ptrCast(glFogCoordFormatNV, gl.missingFunctionPanic),
    FogCoordPointerEXT: glFogCoordPointerEXT = @ptrCast(glFogCoordPointerEXT, gl.missingFunctionPanic),
    FogCoordPointerListIBM: glFogCoordPointerListIBM = @ptrCast(glFogCoordPointerListIBM, gl.missingFunctionPanic),
    FogCoorddEXT: glFogCoorddEXT = @ptrCast(glFogCoorddEXT, gl.missingFunctionPanic),
    FogCoorddvEXT: glFogCoorddvEXT = @ptrCast(glFogCoorddvEXT, gl.missingFunctionPanic),
    FogCoordfEXT: glFogCoordfEXT = @ptrCast(glFogCoordfEXT, gl.missingFunctionPanic),
    FogCoordfvEXT: glFogCoordfvEXT = @ptrCast(glFogCoordfvEXT, gl.missingFunctionPanic),
    FogCoordhNV: glFogCoordhNV = @ptrCast(glFogCoordhNV, gl.missingFunctionPanic),
    FogCoordhvNV: glFogCoordhvNV = @ptrCast(glFogCoordhvNV, gl.missingFunctionPanic),
    FogFuncSGIS: glFogFuncSGIS = @ptrCast(glFogFuncSGIS, gl.missingFunctionPanic),
    FogxOES: glFogxOES = @ptrCast(glFogxOES, gl.missingFunctionPanic),
    FogxvOES: glFogxvOES = @ptrCast(glFogxvOES, gl.missingFunctionPanic),
    FragmentColorMaterialSGIX: glFragmentColorMaterialSGIX = @ptrCast(glFragmentColorMaterialSGIX, gl.missingFunctionPanic),
    FragmentCoverageColorNV: glFragmentCoverageColorNV = @ptrCast(glFragmentCoverageColorNV, gl.missingFunctionPanic),
    FragmentLightModelfSGIX: glFragmentLightModelfSGIX = @ptrCast(glFragmentLightModelfSGIX, gl.missingFunctionPanic),
    FragmentLightModelfvSGIX: glFragmentLightModelfvSGIX = @ptrCast(glFragmentLightModelfvSGIX, gl.missingFunctionPanic),
    FragmentLightModeliSGIX: glFragmentLightModeliSGIX = @ptrCast(glFragmentLightModeliSGIX, gl.missingFunctionPanic),
    FragmentLightModelivSGIX: glFragmentLightModelivSGIX = @ptrCast(glFragmentLightModelivSGIX, gl.missingFunctionPanic),
    FragmentLightfSGIX: glFragmentLightfSGIX = @ptrCast(glFragmentLightfSGIX, gl.missingFunctionPanic),
    FragmentLightfvSGIX: glFragmentLightfvSGIX = @ptrCast(glFragmentLightfvSGIX, gl.missingFunctionPanic),
    FragmentLightiSGIX: glFragmentLightiSGIX = @ptrCast(glFragmentLightiSGIX, gl.missingFunctionPanic),
    FragmentLightivSGIX: glFragmentLightivSGIX = @ptrCast(glFragmentLightivSGIX, gl.missingFunctionPanic),
    FragmentMaterialfSGIX: glFragmentMaterialfSGIX = @ptrCast(glFragmentMaterialfSGIX, gl.missingFunctionPanic),
    FragmentMaterialfvSGIX: glFragmentMaterialfvSGIX = @ptrCast(glFragmentMaterialfvSGIX, gl.missingFunctionPanic),
    FragmentMaterialiSGIX: glFragmentMaterialiSGIX = @ptrCast(glFragmentMaterialiSGIX, gl.missingFunctionPanic),
    FragmentMaterialivSGIX: glFragmentMaterialivSGIX = @ptrCast(glFragmentMaterialivSGIX, gl.missingFunctionPanic),
    FrameTerminatorGREMEDY: glFrameTerminatorGREMEDY = @ptrCast(glFrameTerminatorGREMEDY, gl.missingFunctionPanic),
    FrameZoomSGIX: glFrameZoomSGIX = @ptrCast(glFrameZoomSGIX, gl.missingFunctionPanic),
    FramebufferDrawBufferEXT: glFramebufferDrawBufferEXT = @ptrCast(glFramebufferDrawBufferEXT, gl.missingFunctionPanic),
    FramebufferDrawBuffersEXT: glFramebufferDrawBuffersEXT = @ptrCast(glFramebufferDrawBuffersEXT, gl.missingFunctionPanic),
    FramebufferFetchBarrierEXT: glFramebufferFetchBarrierEXT = @ptrCast(glFramebufferFetchBarrierEXT, gl.missingFunctionPanic),
    FramebufferParameteri: glFramebufferParameteri = @ptrCast(glFramebufferParameteri, gl.missingFunctionPanic),
    FramebufferParameteriMESA: glFramebufferParameteriMESA = @ptrCast(glFramebufferParameteriMESA, gl.missingFunctionPanic),
    FramebufferReadBufferEXT: glFramebufferReadBufferEXT = @ptrCast(glFramebufferReadBufferEXT, gl.missingFunctionPanic),
    FramebufferRenderbuffer: glFramebufferRenderbuffer = @ptrCast(glFramebufferRenderbuffer, gl.missingFunctionPanic),
    FramebufferRenderbufferEXT: glFramebufferRenderbufferEXT = @ptrCast(glFramebufferRenderbufferEXT, gl.missingFunctionPanic),
    FramebufferSampleLocationsfvARB: glFramebufferSampleLocationsfvARB = @ptrCast(glFramebufferSampleLocationsfvARB, gl.missingFunctionPanic),
    FramebufferSampleLocationsfvNV: glFramebufferSampleLocationsfvNV = @ptrCast(glFramebufferSampleLocationsfvNV, gl.missingFunctionPanic),
    FramebufferSamplePositionsfvAMD: glFramebufferSamplePositionsfvAMD = @ptrCast(glFramebufferSamplePositionsfvAMD, gl.missingFunctionPanic),
    FramebufferTexture: glFramebufferTexture = @ptrCast(glFramebufferTexture, gl.missingFunctionPanic),
    FramebufferTexture1D: glFramebufferTexture1D = @ptrCast(glFramebufferTexture1D, gl.missingFunctionPanic),
    FramebufferTexture1DEXT: glFramebufferTexture1DEXT = @ptrCast(glFramebufferTexture1DEXT, gl.missingFunctionPanic),
    FramebufferTexture2D: glFramebufferTexture2D = @ptrCast(glFramebufferTexture2D, gl.missingFunctionPanic),
    FramebufferTexture2DEXT: glFramebufferTexture2DEXT = @ptrCast(glFramebufferTexture2DEXT, gl.missingFunctionPanic),
    FramebufferTexture3D: glFramebufferTexture3D = @ptrCast(glFramebufferTexture3D, gl.missingFunctionPanic),
    FramebufferTexture3DEXT: glFramebufferTexture3DEXT = @ptrCast(glFramebufferTexture3DEXT, gl.missingFunctionPanic),
    FramebufferTextureARB: glFramebufferTextureARB = @ptrCast(glFramebufferTextureARB, gl.missingFunctionPanic),
    FramebufferTextureEXT: glFramebufferTextureEXT = @ptrCast(glFramebufferTextureEXT, gl.missingFunctionPanic),
    FramebufferTextureFaceARB: glFramebufferTextureFaceARB = @ptrCast(glFramebufferTextureFaceARB, gl.missingFunctionPanic),
    FramebufferTextureFaceEXT: glFramebufferTextureFaceEXT = @ptrCast(glFramebufferTextureFaceEXT, gl.missingFunctionPanic),
    FramebufferTextureLayer: glFramebufferTextureLayer = @ptrCast(glFramebufferTextureLayer, gl.missingFunctionPanic),
    FramebufferTextureLayerARB: glFramebufferTextureLayerARB = @ptrCast(glFramebufferTextureLayerARB, gl.missingFunctionPanic),
    FramebufferTextureLayerEXT: glFramebufferTextureLayerEXT = @ptrCast(glFramebufferTextureLayerEXT, gl.missingFunctionPanic),
    FramebufferTextureMultiviewOVR: glFramebufferTextureMultiviewOVR = @ptrCast(glFramebufferTextureMultiviewOVR, gl.missingFunctionPanic),
    FreeObjectBufferATI: glFreeObjectBufferATI = @ptrCast(glFreeObjectBufferATI, gl.missingFunctionPanic),
    FrontFace: glFrontFace = @ptrCast(glFrontFace, gl.missingFunctionPanic),
    FrustumfOES: glFrustumfOES = @ptrCast(glFrustumfOES, gl.missingFunctionPanic),
    FrustumxOES: glFrustumxOES = @ptrCast(glFrustumxOES, gl.missingFunctionPanic),
    GenAsyncMarkersSGIX: glGenAsyncMarkersSGIX = @ptrCast(glGenAsyncMarkersSGIX, gl.missingFunctionPanic),
    GenBuffers: glGenBuffers = @ptrCast(glGenBuffers, gl.missingFunctionPanic),
    GenBuffersARB: glGenBuffersARB = @ptrCast(glGenBuffersARB, gl.missingFunctionPanic),
    GenFencesAPPLE: glGenFencesAPPLE = @ptrCast(glGenFencesAPPLE, gl.missingFunctionPanic),
    GenFencesNV: glGenFencesNV = @ptrCast(glGenFencesNV, gl.missingFunctionPanic),
    GenFragmentShadersATI: glGenFragmentShadersATI = @ptrCast(glGenFragmentShadersATI, gl.missingFunctionPanic),
    GenFramebuffers: glGenFramebuffers = @ptrCast(glGenFramebuffers, gl.missingFunctionPanic),
    GenFramebuffersEXT: glGenFramebuffersEXT = @ptrCast(glGenFramebuffersEXT, gl.missingFunctionPanic),
    GenNamesAMD: glGenNamesAMD = @ptrCast(glGenNamesAMD, gl.missingFunctionPanic),
    GenOcclusionQueriesNV: glGenOcclusionQueriesNV = @ptrCast(glGenOcclusionQueriesNV, gl.missingFunctionPanic),
    GenPathsNV: glGenPathsNV = @ptrCast(glGenPathsNV, gl.missingFunctionPanic),
    GenPerfMonitorsAMD: glGenPerfMonitorsAMD = @ptrCast(glGenPerfMonitorsAMD, gl.missingFunctionPanic),
    GenProgramPipelines: glGenProgramPipelines = @ptrCast(glGenProgramPipelines, gl.missingFunctionPanic),
    GenProgramsARB: glGenProgramsARB = @ptrCast(glGenProgramsARB, gl.missingFunctionPanic),
    GenProgramsNV: glGenProgramsNV = @ptrCast(glGenProgramsNV, gl.missingFunctionPanic),
    GenQueries: glGenQueries = @ptrCast(glGenQueries, gl.missingFunctionPanic),
    GenQueriesARB: glGenQueriesARB = @ptrCast(glGenQueriesARB, gl.missingFunctionPanic),
    GenQueryResourceTagNV: glGenQueryResourceTagNV = @ptrCast(glGenQueryResourceTagNV, gl.missingFunctionPanic),
    GenRenderbuffers: glGenRenderbuffers = @ptrCast(glGenRenderbuffers, gl.missingFunctionPanic),
    GenRenderbuffersEXT: glGenRenderbuffersEXT = @ptrCast(glGenRenderbuffersEXT, gl.missingFunctionPanic),
    GenSamplers: glGenSamplers = @ptrCast(glGenSamplers, gl.missingFunctionPanic),
    GenSemaphoresEXT: glGenSemaphoresEXT = @ptrCast(glGenSemaphoresEXT, gl.missingFunctionPanic),
    GenSymbolsEXT: glGenSymbolsEXT = @ptrCast(glGenSymbolsEXT, gl.missingFunctionPanic),
    GenTextures: glGenTextures = @ptrCast(glGenTextures, gl.missingFunctionPanic),
    GenTexturesEXT: glGenTexturesEXT = @ptrCast(glGenTexturesEXT, gl.missingFunctionPanic),
    GenTransformFeedbacks: glGenTransformFeedbacks = @ptrCast(glGenTransformFeedbacks, gl.missingFunctionPanic),
    GenTransformFeedbacksNV: glGenTransformFeedbacksNV = @ptrCast(glGenTransformFeedbacksNV, gl.missingFunctionPanic),
    GenVertexArrays: glGenVertexArrays = @ptrCast(glGenVertexArrays, gl.missingFunctionPanic),
    GenVertexArraysAPPLE: glGenVertexArraysAPPLE = @ptrCast(glGenVertexArraysAPPLE, gl.missingFunctionPanic),
    GenVertexShadersEXT: glGenVertexShadersEXT = @ptrCast(glGenVertexShadersEXT, gl.missingFunctionPanic),
    GenerateMipmap: glGenerateMipmap = @ptrCast(glGenerateMipmap, gl.missingFunctionPanic),
    GenerateMipmapEXT: glGenerateMipmapEXT = @ptrCast(glGenerateMipmapEXT, gl.missingFunctionPanic),
    GenerateMultiTexMipmapEXT: glGenerateMultiTexMipmapEXT = @ptrCast(glGenerateMultiTexMipmapEXT, gl.missingFunctionPanic),
    GenerateTextureMipmap: glGenerateTextureMipmap = @ptrCast(glGenerateTextureMipmap, gl.missingFunctionPanic),
    GenerateTextureMipmapEXT: glGenerateTextureMipmapEXT = @ptrCast(glGenerateTextureMipmapEXT, gl.missingFunctionPanic),
    GetActiveAtomicCounterBufferiv: glGetActiveAtomicCounterBufferiv = @ptrCast(glGetActiveAtomicCounterBufferiv, gl.missingFunctionPanic),
    GetActiveAttrib: glGetActiveAttrib = @ptrCast(glGetActiveAttrib, gl.missingFunctionPanic),
    GetActiveAttribARB: glGetActiveAttribARB = @ptrCast(glGetActiveAttribARB, gl.missingFunctionPanic),
    GetActiveSubroutineName: glGetActiveSubroutineName = @ptrCast(glGetActiveSubroutineName, gl.missingFunctionPanic),
    GetActiveSubroutineUniformName: glGetActiveSubroutineUniformName = @ptrCast(glGetActiveSubroutineUniformName, gl.missingFunctionPanic),
    GetActiveSubroutineUniformiv: glGetActiveSubroutineUniformiv = @ptrCast(glGetActiveSubroutineUniformiv, gl.missingFunctionPanic),
    GetActiveUniform: glGetActiveUniform = @ptrCast(glGetActiveUniform, gl.missingFunctionPanic),
    GetActiveUniformARB: glGetActiveUniformARB = @ptrCast(glGetActiveUniformARB, gl.missingFunctionPanic),
    GetActiveUniformBlockName: glGetActiveUniformBlockName = @ptrCast(glGetActiveUniformBlockName, gl.missingFunctionPanic),
    GetActiveUniformBlockiv: glGetActiveUniformBlockiv = @ptrCast(glGetActiveUniformBlockiv, gl.missingFunctionPanic),
    GetActiveUniformName: glGetActiveUniformName = @ptrCast(glGetActiveUniformName, gl.missingFunctionPanic),
    GetActiveUniformsiv: glGetActiveUniformsiv = @ptrCast(glGetActiveUniformsiv, gl.missingFunctionPanic),
    GetActiveVaryingNV: glGetActiveVaryingNV = @ptrCast(glGetActiveVaryingNV, gl.missingFunctionPanic),
    GetArrayObjectfvATI: glGetArrayObjectfvATI = @ptrCast(glGetArrayObjectfvATI, gl.missingFunctionPanic),
    GetArrayObjectivATI: glGetArrayObjectivATI = @ptrCast(glGetArrayObjectivATI, gl.missingFunctionPanic),
    GetAttachedObjectsARB: glGetAttachedObjectsARB = @ptrCast(glGetAttachedObjectsARB, gl.missingFunctionPanic),
    GetAttachedShaders: glGetAttachedShaders = @ptrCast(glGetAttachedShaders, gl.missingFunctionPanic),
    GetAttribLocation: glGetAttribLocation = @ptrCast(glGetAttribLocation, gl.missingFunctionPanic),
    GetAttribLocationARB: glGetAttribLocationARB = @ptrCast(glGetAttribLocationARB, gl.missingFunctionPanic),
    GetBooleanIndexedvEXT: glGetBooleanIndexedvEXT = @ptrCast(glGetBooleanIndexedvEXT, gl.missingFunctionPanic),
    GetBooleani_v: glGetBooleani_v = @ptrCast(glGetBooleani_v, gl.missingFunctionPanic),
    GetBooleanv: glGetBooleanv = @ptrCast(glGetBooleanv, gl.missingFunctionPanic),
    GetBufferParameteri64v: glGetBufferParameteri64v = @ptrCast(glGetBufferParameteri64v, gl.missingFunctionPanic),
    GetBufferParameteriv: glGetBufferParameteriv = @ptrCast(glGetBufferParameteriv, gl.missingFunctionPanic),
    GetBufferParameterivARB: glGetBufferParameterivARB = @ptrCast(glGetBufferParameterivARB, gl.missingFunctionPanic),
    GetBufferParameterui64vNV: glGetBufferParameterui64vNV = @ptrCast(glGetBufferParameterui64vNV, gl.missingFunctionPanic),
    GetBufferPointerv: glGetBufferPointerv = @ptrCast(glGetBufferPointerv, gl.missingFunctionPanic),
    GetBufferPointervARB: glGetBufferPointervARB = @ptrCast(glGetBufferPointervARB, gl.missingFunctionPanic),
    GetBufferSubData: glGetBufferSubData = @ptrCast(glGetBufferSubData, gl.missingFunctionPanic),
    GetBufferSubDataARB: glGetBufferSubDataARB = @ptrCast(glGetBufferSubDataARB, gl.missingFunctionPanic),
    GetClipPlanefOES: glGetClipPlanefOES = @ptrCast(glGetClipPlanefOES, gl.missingFunctionPanic),
    GetClipPlanexOES: glGetClipPlanexOES = @ptrCast(glGetClipPlanexOES, gl.missingFunctionPanic),
    GetColorTableEXT: glGetColorTableEXT = @ptrCast(glGetColorTableEXT, gl.missingFunctionPanic),
    GetColorTableParameterfvEXT: glGetColorTableParameterfvEXT = @ptrCast(glGetColorTableParameterfvEXT, gl.missingFunctionPanic),
    GetColorTableParameterfvSGI: glGetColorTableParameterfvSGI = @ptrCast(glGetColorTableParameterfvSGI, gl.missingFunctionPanic),
    GetColorTableParameterivEXT: glGetColorTableParameterivEXT = @ptrCast(glGetColorTableParameterivEXT, gl.missingFunctionPanic),
    GetColorTableParameterivSGI: glGetColorTableParameterivSGI = @ptrCast(glGetColorTableParameterivSGI, gl.missingFunctionPanic),
    GetColorTableSGI: glGetColorTableSGI = @ptrCast(glGetColorTableSGI, gl.missingFunctionPanic),
    GetCombinerInputParameterfvNV: glGetCombinerInputParameterfvNV = @ptrCast(glGetCombinerInputParameterfvNV, gl.missingFunctionPanic),
    GetCombinerInputParameterivNV: glGetCombinerInputParameterivNV = @ptrCast(glGetCombinerInputParameterivNV, gl.missingFunctionPanic),
    GetCombinerOutputParameterfvNV: glGetCombinerOutputParameterfvNV = @ptrCast(glGetCombinerOutputParameterfvNV, gl.missingFunctionPanic),
    GetCombinerOutputParameterivNV: glGetCombinerOutputParameterivNV = @ptrCast(glGetCombinerOutputParameterivNV, gl.missingFunctionPanic),
    GetCombinerStageParameterfvNV: glGetCombinerStageParameterfvNV = @ptrCast(glGetCombinerStageParameterfvNV, gl.missingFunctionPanic),
    GetCommandHeaderNV: glGetCommandHeaderNV = @ptrCast(glGetCommandHeaderNV, gl.missingFunctionPanic),
    GetCompressedMultiTexImageEXT: glGetCompressedMultiTexImageEXT = @ptrCast(glGetCompressedMultiTexImageEXT, gl.missingFunctionPanic),
    GetCompressedTexImage: glGetCompressedTexImage = @ptrCast(glGetCompressedTexImage, gl.missingFunctionPanic),
    GetCompressedTexImageARB: glGetCompressedTexImageARB = @ptrCast(glGetCompressedTexImageARB, gl.missingFunctionPanic),
    GetCompressedTextureImage: glGetCompressedTextureImage = @ptrCast(glGetCompressedTextureImage, gl.missingFunctionPanic),
    GetCompressedTextureImageEXT: glGetCompressedTextureImageEXT = @ptrCast(glGetCompressedTextureImageEXT, gl.missingFunctionPanic),
    GetCompressedTextureSubImage: glGetCompressedTextureSubImage = @ptrCast(glGetCompressedTextureSubImage, gl.missingFunctionPanic),
    GetConvolutionFilterEXT: glGetConvolutionFilterEXT = @ptrCast(glGetConvolutionFilterEXT, gl.missingFunctionPanic),
    GetConvolutionParameterfvEXT: glGetConvolutionParameterfvEXT = @ptrCast(glGetConvolutionParameterfvEXT, gl.missingFunctionPanic),
    GetConvolutionParameterivEXT: glGetConvolutionParameterivEXT = @ptrCast(glGetConvolutionParameterivEXT, gl.missingFunctionPanic),
    GetConvolutionParameterxvOES: glGetConvolutionParameterxvOES = @ptrCast(glGetConvolutionParameterxvOES, gl.missingFunctionPanic),
    GetCoverageModulationTableNV: glGetCoverageModulationTableNV = @ptrCast(glGetCoverageModulationTableNV, gl.missingFunctionPanic),
    GetDebugMessageLog: glGetDebugMessageLog = @ptrCast(glGetDebugMessageLog, gl.missingFunctionPanic),
    GetDebugMessageLogAMD: glGetDebugMessageLogAMD = @ptrCast(glGetDebugMessageLogAMD, gl.missingFunctionPanic),
    GetDebugMessageLogARB: glGetDebugMessageLogARB = @ptrCast(glGetDebugMessageLogARB, gl.missingFunctionPanic),
    GetDetailTexFuncSGIS: glGetDetailTexFuncSGIS = @ptrCast(glGetDetailTexFuncSGIS, gl.missingFunctionPanic),
    GetDoubleIndexedvEXT: glGetDoubleIndexedvEXT = @ptrCast(glGetDoubleIndexedvEXT, gl.missingFunctionPanic),
    GetDoublei_v: glGetDoublei_v = @ptrCast(glGetDoublei_v, gl.missingFunctionPanic),
    GetDoublei_vEXT: glGetDoublei_vEXT = @ptrCast(glGetDoublei_vEXT, gl.missingFunctionPanic),
    GetDoublev: glGetDoublev = @ptrCast(glGetDoublev, gl.missingFunctionPanic),
    GetError: glGetError = @ptrCast(glGetError, gl.missingFunctionPanic),
    GetFenceivNV: glGetFenceivNV = @ptrCast(glGetFenceivNV, gl.missingFunctionPanic),
    GetFinalCombinerInputParameterfvNV: glGetFinalCombinerInputParameterfvNV = @ptrCast(glGetFinalCombinerInputParameterfvNV, gl.missingFunctionPanic),
    GetFinalCombinerInputParameterivNV: glGetFinalCombinerInputParameterivNV = @ptrCast(glGetFinalCombinerInputParameterivNV, gl.missingFunctionPanic),
    GetFirstPerfQueryIdINTEL: glGetFirstPerfQueryIdINTEL = @ptrCast(glGetFirstPerfQueryIdINTEL, gl.missingFunctionPanic),
    GetFixedvOES: glGetFixedvOES = @ptrCast(glGetFixedvOES, gl.missingFunctionPanic),
    GetFloatIndexedvEXT: glGetFloatIndexedvEXT = @ptrCast(glGetFloatIndexedvEXT, gl.missingFunctionPanic),
    GetFloati_v: glGetFloati_v = @ptrCast(glGetFloati_v, gl.missingFunctionPanic),
    GetFloati_vEXT: glGetFloati_vEXT = @ptrCast(glGetFloati_vEXT, gl.missingFunctionPanic),
    GetFloatv: glGetFloatv = @ptrCast(glGetFloatv, gl.missingFunctionPanic),
    GetFogFuncSGIS: glGetFogFuncSGIS = @ptrCast(glGetFogFuncSGIS, gl.missingFunctionPanic),
    GetFragDataIndex: glGetFragDataIndex = @ptrCast(glGetFragDataIndex, gl.missingFunctionPanic),
    GetFragDataLocation: glGetFragDataLocation = @ptrCast(glGetFragDataLocation, gl.missingFunctionPanic),
    GetFragDataLocationEXT: glGetFragDataLocationEXT = @ptrCast(glGetFragDataLocationEXT, gl.missingFunctionPanic),
    GetFragmentLightfvSGIX: glGetFragmentLightfvSGIX = @ptrCast(glGetFragmentLightfvSGIX, gl.missingFunctionPanic),
    GetFragmentLightivSGIX: glGetFragmentLightivSGIX = @ptrCast(glGetFragmentLightivSGIX, gl.missingFunctionPanic),
    GetFragmentMaterialfvSGIX: glGetFragmentMaterialfvSGIX = @ptrCast(glGetFragmentMaterialfvSGIX, gl.missingFunctionPanic),
    GetFragmentMaterialivSGIX: glGetFragmentMaterialivSGIX = @ptrCast(glGetFragmentMaterialivSGIX, gl.missingFunctionPanic),
    GetFramebufferAttachmentParameteriv: glGetFramebufferAttachmentParameteriv = @ptrCast(glGetFramebufferAttachmentParameteriv, gl.missingFunctionPanic),
    GetFramebufferAttachmentParameterivEXT: glGetFramebufferAttachmentParameterivEXT = @ptrCast(glGetFramebufferAttachmentParameterivEXT, gl.missingFunctionPanic),
    GetFramebufferParameterfvAMD: glGetFramebufferParameterfvAMD = @ptrCast(glGetFramebufferParameterfvAMD, gl.missingFunctionPanic),
    GetFramebufferParameteriv: glGetFramebufferParameteriv = @ptrCast(glGetFramebufferParameteriv, gl.missingFunctionPanic),
    GetFramebufferParameterivEXT: glGetFramebufferParameterivEXT = @ptrCast(glGetFramebufferParameterivEXT, gl.missingFunctionPanic),
    GetFramebufferParameterivMESA: glGetFramebufferParameterivMESA = @ptrCast(glGetFramebufferParameterivMESA, gl.missingFunctionPanic),
    GetGraphicsResetStatus: glGetGraphicsResetStatus = @ptrCast(glGetGraphicsResetStatus, gl.missingFunctionPanic),
    GetGraphicsResetStatusARB: glGetGraphicsResetStatusARB = @ptrCast(glGetGraphicsResetStatusARB, gl.missingFunctionPanic),
    GetHandleARB: glGetHandleARB = @ptrCast(glGetHandleARB, gl.missingFunctionPanic),
    GetHistogramEXT: glGetHistogramEXT = @ptrCast(glGetHistogramEXT, gl.missingFunctionPanic),
    GetHistogramParameterfvEXT: glGetHistogramParameterfvEXT = @ptrCast(glGetHistogramParameterfvEXT, gl.missingFunctionPanic),
    GetHistogramParameterivEXT: glGetHistogramParameterivEXT = @ptrCast(glGetHistogramParameterivEXT, gl.missingFunctionPanic),
    GetHistogramParameterxvOES: glGetHistogramParameterxvOES = @ptrCast(glGetHistogramParameterxvOES, gl.missingFunctionPanic),
    GetImageHandleARB: glGetImageHandleARB = @ptrCast(glGetImageHandleARB, gl.missingFunctionPanic),
    GetImageHandleNV: glGetImageHandleNV = @ptrCast(glGetImageHandleNV, gl.missingFunctionPanic),
    GetImageTransformParameterfvHP: glGetImageTransformParameterfvHP = @ptrCast(glGetImageTransformParameterfvHP, gl.missingFunctionPanic),
    GetImageTransformParameterivHP: glGetImageTransformParameterivHP = @ptrCast(glGetImageTransformParameterivHP, gl.missingFunctionPanic),
    GetInfoLogARB: glGetInfoLogARB = @ptrCast(glGetInfoLogARB, gl.missingFunctionPanic),
    GetInstrumentsSGIX: glGetInstrumentsSGIX = @ptrCast(glGetInstrumentsSGIX, gl.missingFunctionPanic),
    GetInteger64i_v: glGetInteger64i_v = @ptrCast(glGetInteger64i_v, gl.missingFunctionPanic),
    GetInteger64v: glGetInteger64v = @ptrCast(glGetInteger64v, gl.missingFunctionPanic),
    GetIntegerIndexedvEXT: glGetIntegerIndexedvEXT = @ptrCast(glGetIntegerIndexedvEXT, gl.missingFunctionPanic),
    GetIntegeri_v: glGetIntegeri_v = @ptrCast(glGetIntegeri_v, gl.missingFunctionPanic),
    GetIntegerui64i_vNV: glGetIntegerui64i_vNV = @ptrCast(glGetIntegerui64i_vNV, gl.missingFunctionPanic),
    GetIntegerui64vNV: glGetIntegerui64vNV = @ptrCast(glGetIntegerui64vNV, gl.missingFunctionPanic),
    GetIntegerv: glGetIntegerv = @ptrCast(glGetIntegerv, gl.missingFunctionPanic),
    GetInternalformatSampleivNV: glGetInternalformatSampleivNV = @ptrCast(glGetInternalformatSampleivNV, gl.missingFunctionPanic),
    GetInternalformati64v: glGetInternalformati64v = @ptrCast(glGetInternalformati64v, gl.missingFunctionPanic),
    GetInternalformativ: glGetInternalformativ = @ptrCast(glGetInternalformativ, gl.missingFunctionPanic),
    GetInvariantBooleanvEXT: glGetInvariantBooleanvEXT = @ptrCast(glGetInvariantBooleanvEXT, gl.missingFunctionPanic),
    GetInvariantFloatvEXT: glGetInvariantFloatvEXT = @ptrCast(glGetInvariantFloatvEXT, gl.missingFunctionPanic),
    GetInvariantIntegervEXT: glGetInvariantIntegervEXT = @ptrCast(glGetInvariantIntegervEXT, gl.missingFunctionPanic),
    GetLightxOES: glGetLightxOES = @ptrCast(glGetLightxOES, gl.missingFunctionPanic),
    GetListParameterfvSGIX: glGetListParameterfvSGIX = @ptrCast(glGetListParameterfvSGIX, gl.missingFunctionPanic),
    GetListParameterivSGIX: glGetListParameterivSGIX = @ptrCast(glGetListParameterivSGIX, gl.missingFunctionPanic),
    GetLocalConstantBooleanvEXT: glGetLocalConstantBooleanvEXT = @ptrCast(glGetLocalConstantBooleanvEXT, gl.missingFunctionPanic),
    GetLocalConstantFloatvEXT: glGetLocalConstantFloatvEXT = @ptrCast(glGetLocalConstantFloatvEXT, gl.missingFunctionPanic),
    GetLocalConstantIntegervEXT: glGetLocalConstantIntegervEXT = @ptrCast(glGetLocalConstantIntegervEXT, gl.missingFunctionPanic),
    GetMapAttribParameterfvNV: glGetMapAttribParameterfvNV = @ptrCast(glGetMapAttribParameterfvNV, gl.missingFunctionPanic),
    GetMapAttribParameterivNV: glGetMapAttribParameterivNV = @ptrCast(glGetMapAttribParameterivNV, gl.missingFunctionPanic),
    GetMapControlPointsNV: glGetMapControlPointsNV = @ptrCast(glGetMapControlPointsNV, gl.missingFunctionPanic),
    GetMapParameterfvNV: glGetMapParameterfvNV = @ptrCast(glGetMapParameterfvNV, gl.missingFunctionPanic),
    GetMapParameterivNV: glGetMapParameterivNV = @ptrCast(glGetMapParameterivNV, gl.missingFunctionPanic),
    GetMapxvOES: glGetMapxvOES = @ptrCast(glGetMapxvOES, gl.missingFunctionPanic),
    GetMaterialxOES: glGetMaterialxOES = @ptrCast(glGetMaterialxOES, gl.missingFunctionPanic),
    GetMemoryObjectDetachedResourcesuivNV: glGetMemoryObjectDetachedResourcesuivNV = @ptrCast(glGetMemoryObjectDetachedResourcesuivNV, gl.missingFunctionPanic),
    GetMemoryObjectParameterivEXT: glGetMemoryObjectParameterivEXT = @ptrCast(glGetMemoryObjectParameterivEXT, gl.missingFunctionPanic),
    GetMinmaxEXT: glGetMinmaxEXT = @ptrCast(glGetMinmaxEXT, gl.missingFunctionPanic),
    GetMinmaxParameterfvEXT: glGetMinmaxParameterfvEXT = @ptrCast(glGetMinmaxParameterfvEXT, gl.missingFunctionPanic),
    GetMinmaxParameterivEXT: glGetMinmaxParameterivEXT = @ptrCast(glGetMinmaxParameterivEXT, gl.missingFunctionPanic),
    GetMultiTexEnvfvEXT: glGetMultiTexEnvfvEXT = @ptrCast(glGetMultiTexEnvfvEXT, gl.missingFunctionPanic),
    GetMultiTexEnvivEXT: glGetMultiTexEnvivEXT = @ptrCast(glGetMultiTexEnvivEXT, gl.missingFunctionPanic),
    GetMultiTexGendvEXT: glGetMultiTexGendvEXT = @ptrCast(glGetMultiTexGendvEXT, gl.missingFunctionPanic),
    GetMultiTexGenfvEXT: glGetMultiTexGenfvEXT = @ptrCast(glGetMultiTexGenfvEXT, gl.missingFunctionPanic),
    GetMultiTexGenivEXT: glGetMultiTexGenivEXT = @ptrCast(glGetMultiTexGenivEXT, gl.missingFunctionPanic),
    GetMultiTexImageEXT: glGetMultiTexImageEXT = @ptrCast(glGetMultiTexImageEXT, gl.missingFunctionPanic),
    GetMultiTexLevelParameterfvEXT: glGetMultiTexLevelParameterfvEXT = @ptrCast(glGetMultiTexLevelParameterfvEXT, gl.missingFunctionPanic),
    GetMultiTexLevelParameterivEXT: glGetMultiTexLevelParameterivEXT = @ptrCast(glGetMultiTexLevelParameterivEXT, gl.missingFunctionPanic),
    GetMultiTexParameterIivEXT: glGetMultiTexParameterIivEXT = @ptrCast(glGetMultiTexParameterIivEXT, gl.missingFunctionPanic),
    GetMultiTexParameterIuivEXT: glGetMultiTexParameterIuivEXT = @ptrCast(glGetMultiTexParameterIuivEXT, gl.missingFunctionPanic),
    GetMultiTexParameterfvEXT: glGetMultiTexParameterfvEXT = @ptrCast(glGetMultiTexParameterfvEXT, gl.missingFunctionPanic),
    GetMultiTexParameterivEXT: glGetMultiTexParameterivEXT = @ptrCast(glGetMultiTexParameterivEXT, gl.missingFunctionPanic),
    GetMultisamplefv: glGetMultisamplefv = @ptrCast(glGetMultisamplefv, gl.missingFunctionPanic),
    GetMultisamplefvNV: glGetMultisamplefvNV = @ptrCast(glGetMultisamplefvNV, gl.missingFunctionPanic),
    GetNamedBufferParameteri64v: glGetNamedBufferParameteri64v = @ptrCast(glGetNamedBufferParameteri64v, gl.missingFunctionPanic),
    GetNamedBufferParameteriv: glGetNamedBufferParameteriv = @ptrCast(glGetNamedBufferParameteriv, gl.missingFunctionPanic),
    GetNamedBufferParameterivEXT: glGetNamedBufferParameterivEXT = @ptrCast(glGetNamedBufferParameterivEXT, gl.missingFunctionPanic),
    GetNamedBufferParameterui64vNV: glGetNamedBufferParameterui64vNV = @ptrCast(glGetNamedBufferParameterui64vNV, gl.missingFunctionPanic),
    GetNamedBufferPointerv: glGetNamedBufferPointerv = @ptrCast(glGetNamedBufferPointerv, gl.missingFunctionPanic),
    GetNamedBufferPointervEXT: glGetNamedBufferPointervEXT = @ptrCast(glGetNamedBufferPointervEXT, gl.missingFunctionPanic),
    GetNamedBufferSubData: glGetNamedBufferSubData = @ptrCast(glGetNamedBufferSubData, gl.missingFunctionPanic),
    GetNamedBufferSubDataEXT: glGetNamedBufferSubDataEXT = @ptrCast(glGetNamedBufferSubDataEXT, gl.missingFunctionPanic),
    GetNamedFramebufferAttachmentParameteriv: glGetNamedFramebufferAttachmentParameteriv = @ptrCast(glGetNamedFramebufferAttachmentParameteriv, gl.missingFunctionPanic),
    GetNamedFramebufferAttachmentParameterivEXT: glGetNamedFramebufferAttachmentParameterivEXT = @ptrCast(glGetNamedFramebufferAttachmentParameterivEXT, gl.missingFunctionPanic),
    GetNamedFramebufferParameterfvAMD: glGetNamedFramebufferParameterfvAMD = @ptrCast(glGetNamedFramebufferParameterfvAMD, gl.missingFunctionPanic),
    GetNamedFramebufferParameteriv: glGetNamedFramebufferParameteriv = @ptrCast(glGetNamedFramebufferParameteriv, gl.missingFunctionPanic),
    GetNamedFramebufferParameterivEXT: glGetNamedFramebufferParameterivEXT = @ptrCast(glGetNamedFramebufferParameterivEXT, gl.missingFunctionPanic),
    GetNamedProgramLocalParameterIivEXT: glGetNamedProgramLocalParameterIivEXT = @ptrCast(glGetNamedProgramLocalParameterIivEXT, gl.missingFunctionPanic),
    GetNamedProgramLocalParameterIuivEXT: glGetNamedProgramLocalParameterIuivEXT = @ptrCast(glGetNamedProgramLocalParameterIuivEXT, gl.missingFunctionPanic),
    GetNamedProgramLocalParameterdvEXT: glGetNamedProgramLocalParameterdvEXT = @ptrCast(glGetNamedProgramLocalParameterdvEXT, gl.missingFunctionPanic),
    GetNamedProgramLocalParameterfvEXT: glGetNamedProgramLocalParameterfvEXT = @ptrCast(glGetNamedProgramLocalParameterfvEXT, gl.missingFunctionPanic),
    GetNamedProgramStringEXT: glGetNamedProgramStringEXT = @ptrCast(glGetNamedProgramStringEXT, gl.missingFunctionPanic),
    GetNamedProgramivEXT: glGetNamedProgramivEXT = @ptrCast(glGetNamedProgramivEXT, gl.missingFunctionPanic),
    GetNamedRenderbufferParameteriv: glGetNamedRenderbufferParameteriv = @ptrCast(glGetNamedRenderbufferParameteriv, gl.missingFunctionPanic),
    GetNamedRenderbufferParameterivEXT: glGetNamedRenderbufferParameterivEXT = @ptrCast(glGetNamedRenderbufferParameterivEXT, gl.missingFunctionPanic),
    GetNamedStringARB: glGetNamedStringARB = @ptrCast(glGetNamedStringARB, gl.missingFunctionPanic),
    GetNamedStringivARB: glGetNamedStringivARB = @ptrCast(glGetNamedStringivARB, gl.missingFunctionPanic),
    GetNextPerfQueryIdINTEL: glGetNextPerfQueryIdINTEL = @ptrCast(glGetNextPerfQueryIdINTEL, gl.missingFunctionPanic),
    GetObjectBufferfvATI: glGetObjectBufferfvATI = @ptrCast(glGetObjectBufferfvATI, gl.missingFunctionPanic),
    GetObjectBufferivATI: glGetObjectBufferivATI = @ptrCast(glGetObjectBufferivATI, gl.missingFunctionPanic),
    GetObjectLabel: glGetObjectLabel = @ptrCast(glGetObjectLabel, gl.missingFunctionPanic),
    GetObjectLabelEXT: glGetObjectLabelEXT = @ptrCast(glGetObjectLabelEXT, gl.missingFunctionPanic),
    GetObjectParameterfvARB: glGetObjectParameterfvARB = @ptrCast(glGetObjectParameterfvARB, gl.missingFunctionPanic),
    GetObjectParameterivAPPLE: glGetObjectParameterivAPPLE = @ptrCast(glGetObjectParameterivAPPLE, gl.missingFunctionPanic),
    GetObjectParameterivARB: glGetObjectParameterivARB = @ptrCast(glGetObjectParameterivARB, gl.missingFunctionPanic),
    GetObjectPtrLabel: glGetObjectPtrLabel = @ptrCast(glGetObjectPtrLabel, gl.missingFunctionPanic),
    GetOcclusionQueryivNV: glGetOcclusionQueryivNV = @ptrCast(glGetOcclusionQueryivNV, gl.missingFunctionPanic),
    GetOcclusionQueryuivNV: glGetOcclusionQueryuivNV = @ptrCast(glGetOcclusionQueryuivNV, gl.missingFunctionPanic),
    GetPathCommandsNV: glGetPathCommandsNV = @ptrCast(glGetPathCommandsNV, gl.missingFunctionPanic),
    GetPathCoordsNV: glGetPathCoordsNV = @ptrCast(glGetPathCoordsNV, gl.missingFunctionPanic),
    GetPathDashArrayNV: glGetPathDashArrayNV = @ptrCast(glGetPathDashArrayNV, gl.missingFunctionPanic),
    GetPathLengthNV: glGetPathLengthNV = @ptrCast(glGetPathLengthNV, gl.missingFunctionPanic),
    GetPathMetricRangeNV: glGetPathMetricRangeNV = @ptrCast(glGetPathMetricRangeNV, gl.missingFunctionPanic),
    GetPathMetricsNV: glGetPathMetricsNV = @ptrCast(glGetPathMetricsNV, gl.missingFunctionPanic),
    GetPathParameterfvNV: glGetPathParameterfvNV = @ptrCast(glGetPathParameterfvNV, gl.missingFunctionPanic),
    GetPathParameterivNV: glGetPathParameterivNV = @ptrCast(glGetPathParameterivNV, gl.missingFunctionPanic),
    GetPathSpacingNV: glGetPathSpacingNV = @ptrCast(glGetPathSpacingNV, gl.missingFunctionPanic),
    GetPerfCounterInfoINTEL: glGetPerfCounterInfoINTEL = @ptrCast(glGetPerfCounterInfoINTEL, gl.missingFunctionPanic),
    GetPerfMonitorCounterDataAMD: glGetPerfMonitorCounterDataAMD = @ptrCast(glGetPerfMonitorCounterDataAMD, gl.missingFunctionPanic),
    GetPerfMonitorCounterInfoAMD: glGetPerfMonitorCounterInfoAMD = @ptrCast(glGetPerfMonitorCounterInfoAMD, gl.missingFunctionPanic),
    GetPerfMonitorCounterStringAMD: glGetPerfMonitorCounterStringAMD = @ptrCast(glGetPerfMonitorCounterStringAMD, gl.missingFunctionPanic),
    GetPerfMonitorCountersAMD: glGetPerfMonitorCountersAMD = @ptrCast(glGetPerfMonitorCountersAMD, gl.missingFunctionPanic),
    GetPerfMonitorGroupStringAMD: glGetPerfMonitorGroupStringAMD = @ptrCast(glGetPerfMonitorGroupStringAMD, gl.missingFunctionPanic),
    GetPerfMonitorGroupsAMD: glGetPerfMonitorGroupsAMD = @ptrCast(glGetPerfMonitorGroupsAMD, gl.missingFunctionPanic),
    GetPerfQueryDataINTEL: glGetPerfQueryDataINTEL = @ptrCast(glGetPerfQueryDataINTEL, gl.missingFunctionPanic),
    GetPerfQueryIdByNameINTEL: glGetPerfQueryIdByNameINTEL = @ptrCast(glGetPerfQueryIdByNameINTEL, gl.missingFunctionPanic),
    GetPerfQueryInfoINTEL: glGetPerfQueryInfoINTEL = @ptrCast(glGetPerfQueryInfoINTEL, gl.missingFunctionPanic),
    GetPixelMapxv: glGetPixelMapxv = @ptrCast(glGetPixelMapxv, gl.missingFunctionPanic),
    GetPixelTexGenParameterfvSGIS: glGetPixelTexGenParameterfvSGIS = @ptrCast(glGetPixelTexGenParameterfvSGIS, gl.missingFunctionPanic),
    GetPixelTexGenParameterivSGIS: glGetPixelTexGenParameterivSGIS = @ptrCast(glGetPixelTexGenParameterivSGIS, gl.missingFunctionPanic),
    GetPixelTransformParameterfvEXT: glGetPixelTransformParameterfvEXT = @ptrCast(glGetPixelTransformParameterfvEXT, gl.missingFunctionPanic),
    GetPixelTransformParameterivEXT: glGetPixelTransformParameterivEXT = @ptrCast(glGetPixelTransformParameterivEXT, gl.missingFunctionPanic),
    GetPointerIndexedvEXT: glGetPointerIndexedvEXT = @ptrCast(glGetPointerIndexedvEXT, gl.missingFunctionPanic),
    GetPointeri_vEXT: glGetPointeri_vEXT = @ptrCast(glGetPointeri_vEXT, gl.missingFunctionPanic),
    GetPointerv: glGetPointerv = @ptrCast(glGetPointerv, gl.missingFunctionPanic),
    GetPointervEXT: glGetPointervEXT = @ptrCast(glGetPointervEXT, gl.missingFunctionPanic),
    GetProgramBinary: glGetProgramBinary = @ptrCast(glGetProgramBinary, gl.missingFunctionPanic),
    GetProgramEnvParameterIivNV: glGetProgramEnvParameterIivNV = @ptrCast(glGetProgramEnvParameterIivNV, gl.missingFunctionPanic),
    GetProgramEnvParameterIuivNV: glGetProgramEnvParameterIuivNV = @ptrCast(glGetProgramEnvParameterIuivNV, gl.missingFunctionPanic),
    GetProgramEnvParameterdvARB: glGetProgramEnvParameterdvARB = @ptrCast(glGetProgramEnvParameterdvARB, gl.missingFunctionPanic),
    GetProgramEnvParameterfvARB: glGetProgramEnvParameterfvARB = @ptrCast(glGetProgramEnvParameterfvARB, gl.missingFunctionPanic),
    GetProgramInfoLog: glGetProgramInfoLog = @ptrCast(glGetProgramInfoLog, gl.missingFunctionPanic),
    GetProgramInterfaceiv: glGetProgramInterfaceiv = @ptrCast(glGetProgramInterfaceiv, gl.missingFunctionPanic),
    GetProgramLocalParameterIivNV: glGetProgramLocalParameterIivNV = @ptrCast(glGetProgramLocalParameterIivNV, gl.missingFunctionPanic),
    GetProgramLocalParameterIuivNV: glGetProgramLocalParameterIuivNV = @ptrCast(glGetProgramLocalParameterIuivNV, gl.missingFunctionPanic),
    GetProgramLocalParameterdvARB: glGetProgramLocalParameterdvARB = @ptrCast(glGetProgramLocalParameterdvARB, gl.missingFunctionPanic),
    GetProgramLocalParameterfvARB: glGetProgramLocalParameterfvARB = @ptrCast(glGetProgramLocalParameterfvARB, gl.missingFunctionPanic),
    GetProgramNamedParameterdvNV: glGetProgramNamedParameterdvNV = @ptrCast(glGetProgramNamedParameterdvNV, gl.missingFunctionPanic),
    GetProgramNamedParameterfvNV: glGetProgramNamedParameterfvNV = @ptrCast(glGetProgramNamedParameterfvNV, gl.missingFunctionPanic),
    GetProgramParameterdvNV: glGetProgramParameterdvNV = @ptrCast(glGetProgramParameterdvNV, gl.missingFunctionPanic),
    GetProgramParameterfvNV: glGetProgramParameterfvNV = @ptrCast(glGetProgramParameterfvNV, gl.missingFunctionPanic),
    GetProgramPipelineInfoLog: glGetProgramPipelineInfoLog = @ptrCast(glGetProgramPipelineInfoLog, gl.missingFunctionPanic),
    GetProgramPipelineiv: glGetProgramPipelineiv = @ptrCast(glGetProgramPipelineiv, gl.missingFunctionPanic),
    GetProgramResourceIndex: glGetProgramResourceIndex = @ptrCast(glGetProgramResourceIndex, gl.missingFunctionPanic),
    GetProgramResourceLocation: glGetProgramResourceLocation = @ptrCast(glGetProgramResourceLocation, gl.missingFunctionPanic),
    GetProgramResourceLocationIndex: glGetProgramResourceLocationIndex = @ptrCast(glGetProgramResourceLocationIndex, gl.missingFunctionPanic),
    GetProgramResourceName: glGetProgramResourceName = @ptrCast(glGetProgramResourceName, gl.missingFunctionPanic),
    GetProgramResourcefvNV: glGetProgramResourcefvNV = @ptrCast(glGetProgramResourcefvNV, gl.missingFunctionPanic),
    GetProgramResourceiv: glGetProgramResourceiv = @ptrCast(glGetProgramResourceiv, gl.missingFunctionPanic),
    GetProgramStageiv: glGetProgramStageiv = @ptrCast(glGetProgramStageiv, gl.missingFunctionPanic),
    GetProgramStringARB: glGetProgramStringARB = @ptrCast(glGetProgramStringARB, gl.missingFunctionPanic),
    GetProgramStringNV: glGetProgramStringNV = @ptrCast(glGetProgramStringNV, gl.missingFunctionPanic),
    GetProgramSubroutineParameteruivNV: glGetProgramSubroutineParameteruivNV = @ptrCast(glGetProgramSubroutineParameteruivNV, gl.missingFunctionPanic),
    GetProgramiv: glGetProgramiv = @ptrCast(glGetProgramiv, gl.missingFunctionPanic),
    GetProgramivARB: glGetProgramivARB = @ptrCast(glGetProgramivARB, gl.missingFunctionPanic),
    GetProgramivNV: glGetProgramivNV = @ptrCast(glGetProgramivNV, gl.missingFunctionPanic),
    GetQueryBufferObjecti64v: glGetQueryBufferObjecti64v = @ptrCast(glGetQueryBufferObjecti64v, gl.missingFunctionPanic),
    GetQueryBufferObjectiv: glGetQueryBufferObjectiv = @ptrCast(glGetQueryBufferObjectiv, gl.missingFunctionPanic),
    GetQueryBufferObjectui64v: glGetQueryBufferObjectui64v = @ptrCast(glGetQueryBufferObjectui64v, gl.missingFunctionPanic),
    GetQueryBufferObjectuiv: glGetQueryBufferObjectuiv = @ptrCast(glGetQueryBufferObjectuiv, gl.missingFunctionPanic),
    GetQueryIndexediv: glGetQueryIndexediv = @ptrCast(glGetQueryIndexediv, gl.missingFunctionPanic),
    GetQueryObjecti64v: glGetQueryObjecti64v = @ptrCast(glGetQueryObjecti64v, gl.missingFunctionPanic),
    GetQueryObjecti64vEXT: glGetQueryObjecti64vEXT = @ptrCast(glGetQueryObjecti64vEXT, gl.missingFunctionPanic),
    GetQueryObjectiv: glGetQueryObjectiv = @ptrCast(glGetQueryObjectiv, gl.missingFunctionPanic),
    GetQueryObjectivARB: glGetQueryObjectivARB = @ptrCast(glGetQueryObjectivARB, gl.missingFunctionPanic),
    GetQueryObjectui64v: glGetQueryObjectui64v = @ptrCast(glGetQueryObjectui64v, gl.missingFunctionPanic),
    GetQueryObjectui64vEXT: glGetQueryObjectui64vEXT = @ptrCast(glGetQueryObjectui64vEXT, gl.missingFunctionPanic),
    GetQueryObjectuiv: glGetQueryObjectuiv = @ptrCast(glGetQueryObjectuiv, gl.missingFunctionPanic),
    GetQueryObjectuivARB: glGetQueryObjectuivARB = @ptrCast(glGetQueryObjectuivARB, gl.missingFunctionPanic),
    GetQueryiv: glGetQueryiv = @ptrCast(glGetQueryiv, gl.missingFunctionPanic),
    GetQueryivARB: glGetQueryivARB = @ptrCast(glGetQueryivARB, gl.missingFunctionPanic),
    GetRenderbufferParameteriv: glGetRenderbufferParameteriv = @ptrCast(glGetRenderbufferParameteriv, gl.missingFunctionPanic),
    GetRenderbufferParameterivEXT: glGetRenderbufferParameterivEXT = @ptrCast(glGetRenderbufferParameterivEXT, gl.missingFunctionPanic),
    GetSamplerParameterIiv: glGetSamplerParameterIiv = @ptrCast(glGetSamplerParameterIiv, gl.missingFunctionPanic),
    GetSamplerParameterIuiv: glGetSamplerParameterIuiv = @ptrCast(glGetSamplerParameterIuiv, gl.missingFunctionPanic),
    GetSamplerParameterfv: glGetSamplerParameterfv = @ptrCast(glGetSamplerParameterfv, gl.missingFunctionPanic),
    GetSamplerParameteriv: glGetSamplerParameteriv = @ptrCast(glGetSamplerParameteriv, gl.missingFunctionPanic),
    GetSemaphoreParameterivNV: glGetSemaphoreParameterivNV = @ptrCast(glGetSemaphoreParameterivNV, gl.missingFunctionPanic),
    GetSemaphoreParameterui64vEXT: glGetSemaphoreParameterui64vEXT = @ptrCast(glGetSemaphoreParameterui64vEXT, gl.missingFunctionPanic),
    GetSeparableFilterEXT: glGetSeparableFilterEXT = @ptrCast(glGetSeparableFilterEXT, gl.missingFunctionPanic),
    GetShaderInfoLog: glGetShaderInfoLog = @ptrCast(glGetShaderInfoLog, gl.missingFunctionPanic),
    GetShaderPrecisionFormat: glGetShaderPrecisionFormat = @ptrCast(glGetShaderPrecisionFormat, gl.missingFunctionPanic),
    GetShaderSource: glGetShaderSource = @ptrCast(glGetShaderSource, gl.missingFunctionPanic),
    GetShaderSourceARB: glGetShaderSourceARB = @ptrCast(glGetShaderSourceARB, gl.missingFunctionPanic),
    GetShaderiv: glGetShaderiv = @ptrCast(glGetShaderiv, gl.missingFunctionPanic),
    GetShadingRateImagePaletteNV: glGetShadingRateImagePaletteNV = @ptrCast(glGetShadingRateImagePaletteNV, gl.missingFunctionPanic),
    GetShadingRateSampleLocationivNV: glGetShadingRateSampleLocationivNV = @ptrCast(glGetShadingRateSampleLocationivNV, gl.missingFunctionPanic),
    GetSharpenTexFuncSGIS: glGetSharpenTexFuncSGIS = @ptrCast(glGetSharpenTexFuncSGIS, gl.missingFunctionPanic),
    GetStageIndexNV: glGetStageIndexNV = @ptrCast(glGetStageIndexNV, gl.missingFunctionPanic),
    GetString: glGetString = @ptrCast(glGetString, gl.missingFunctionPanic),
    GetStringi: glGetStringi = @ptrCast(glGetStringi, gl.missingFunctionPanic),
    GetSubroutineIndex: glGetSubroutineIndex = @ptrCast(glGetSubroutineIndex, gl.missingFunctionPanic),
    GetSubroutineUniformLocation: glGetSubroutineUniformLocation = @ptrCast(glGetSubroutineUniformLocation, gl.missingFunctionPanic),
    GetSynciv: glGetSynciv = @ptrCast(glGetSynciv, gl.missingFunctionPanic),
    GetTexBumpParameterfvATI: glGetTexBumpParameterfvATI = @ptrCast(glGetTexBumpParameterfvATI, gl.missingFunctionPanic),
    GetTexBumpParameterivATI: glGetTexBumpParameterivATI = @ptrCast(glGetTexBumpParameterivATI, gl.missingFunctionPanic),
    GetTexEnvxvOES: glGetTexEnvxvOES = @ptrCast(glGetTexEnvxvOES, gl.missingFunctionPanic),
    GetTexFilterFuncSGIS: glGetTexFilterFuncSGIS = @ptrCast(glGetTexFilterFuncSGIS, gl.missingFunctionPanic),
    GetTexGenxvOES: glGetTexGenxvOES = @ptrCast(glGetTexGenxvOES, gl.missingFunctionPanic),
    GetTexImage: glGetTexImage = @ptrCast(glGetTexImage, gl.missingFunctionPanic),
    GetTexLevelParameterfv: glGetTexLevelParameterfv = @ptrCast(glGetTexLevelParameterfv, gl.missingFunctionPanic),
    GetTexLevelParameteriv: glGetTexLevelParameteriv = @ptrCast(glGetTexLevelParameteriv, gl.missingFunctionPanic),
    GetTexLevelParameterxvOES: glGetTexLevelParameterxvOES = @ptrCast(glGetTexLevelParameterxvOES, gl.missingFunctionPanic),
    GetTexParameterIiv: glGetTexParameterIiv = @ptrCast(glGetTexParameterIiv, gl.missingFunctionPanic),
    GetTexParameterIivEXT: glGetTexParameterIivEXT = @ptrCast(glGetTexParameterIivEXT, gl.missingFunctionPanic),
    GetTexParameterIuiv: glGetTexParameterIuiv = @ptrCast(glGetTexParameterIuiv, gl.missingFunctionPanic),
    GetTexParameterIuivEXT: glGetTexParameterIuivEXT = @ptrCast(glGetTexParameterIuivEXT, gl.missingFunctionPanic),
    GetTexParameterPointervAPPLE: glGetTexParameterPointervAPPLE = @ptrCast(glGetTexParameterPointervAPPLE, gl.missingFunctionPanic),
    GetTexParameterfv: glGetTexParameterfv = @ptrCast(glGetTexParameterfv, gl.missingFunctionPanic),
    GetTexParameteriv: glGetTexParameteriv = @ptrCast(glGetTexParameteriv, gl.missingFunctionPanic),
    GetTexParameterxvOES: glGetTexParameterxvOES = @ptrCast(glGetTexParameterxvOES, gl.missingFunctionPanic),
    GetTextureHandleARB: glGetTextureHandleARB = @ptrCast(glGetTextureHandleARB, gl.missingFunctionPanic),
    GetTextureHandleNV: glGetTextureHandleNV = @ptrCast(glGetTextureHandleNV, gl.missingFunctionPanic),
    GetTextureImage: glGetTextureImage = @ptrCast(glGetTextureImage, gl.missingFunctionPanic),
    GetTextureImageEXT: glGetTextureImageEXT = @ptrCast(glGetTextureImageEXT, gl.missingFunctionPanic),
    GetTextureLevelParameterfv: glGetTextureLevelParameterfv = @ptrCast(glGetTextureLevelParameterfv, gl.missingFunctionPanic),
    GetTextureLevelParameterfvEXT: glGetTextureLevelParameterfvEXT = @ptrCast(glGetTextureLevelParameterfvEXT, gl.missingFunctionPanic),
    GetTextureLevelParameteriv: glGetTextureLevelParameteriv = @ptrCast(glGetTextureLevelParameteriv, gl.missingFunctionPanic),
    GetTextureLevelParameterivEXT: glGetTextureLevelParameterivEXT = @ptrCast(glGetTextureLevelParameterivEXT, gl.missingFunctionPanic),
    GetTextureParameterIiv: glGetTextureParameterIiv = @ptrCast(glGetTextureParameterIiv, gl.missingFunctionPanic),
    GetTextureParameterIivEXT: glGetTextureParameterIivEXT = @ptrCast(glGetTextureParameterIivEXT, gl.missingFunctionPanic),
    GetTextureParameterIuiv: glGetTextureParameterIuiv = @ptrCast(glGetTextureParameterIuiv, gl.missingFunctionPanic),
    GetTextureParameterIuivEXT: glGetTextureParameterIuivEXT = @ptrCast(glGetTextureParameterIuivEXT, gl.missingFunctionPanic),
    GetTextureParameterfv: glGetTextureParameterfv = @ptrCast(glGetTextureParameterfv, gl.missingFunctionPanic),
    GetTextureParameterfvEXT: glGetTextureParameterfvEXT = @ptrCast(glGetTextureParameterfvEXT, gl.missingFunctionPanic),
    GetTextureParameteriv: glGetTextureParameteriv = @ptrCast(glGetTextureParameteriv, gl.missingFunctionPanic),
    GetTextureParameterivEXT: glGetTextureParameterivEXT = @ptrCast(glGetTextureParameterivEXT, gl.missingFunctionPanic),
    GetTextureSamplerHandleARB: glGetTextureSamplerHandleARB = @ptrCast(glGetTextureSamplerHandleARB, gl.missingFunctionPanic),
    GetTextureSamplerHandleNV: glGetTextureSamplerHandleNV = @ptrCast(glGetTextureSamplerHandleNV, gl.missingFunctionPanic),
    GetTextureSubImage: glGetTextureSubImage = @ptrCast(glGetTextureSubImage, gl.missingFunctionPanic),
    GetTrackMatrixivNV: glGetTrackMatrixivNV = @ptrCast(glGetTrackMatrixivNV, gl.missingFunctionPanic),
    GetTransformFeedbackVarying: glGetTransformFeedbackVarying = @ptrCast(glGetTransformFeedbackVarying, gl.missingFunctionPanic),
    GetTransformFeedbackVaryingEXT: glGetTransformFeedbackVaryingEXT = @ptrCast(glGetTransformFeedbackVaryingEXT, gl.missingFunctionPanic),
    GetTransformFeedbackVaryingNV: glGetTransformFeedbackVaryingNV = @ptrCast(glGetTransformFeedbackVaryingNV, gl.missingFunctionPanic),
    GetTransformFeedbacki64_v: glGetTransformFeedbacki64_v = @ptrCast(glGetTransformFeedbacki64_v, gl.missingFunctionPanic),
    GetTransformFeedbacki_v: glGetTransformFeedbacki_v = @ptrCast(glGetTransformFeedbacki_v, gl.missingFunctionPanic),
    GetTransformFeedbackiv: glGetTransformFeedbackiv = @ptrCast(glGetTransformFeedbackiv, gl.missingFunctionPanic),
    GetUniformBlockIndex: glGetUniformBlockIndex = @ptrCast(glGetUniformBlockIndex, gl.missingFunctionPanic),
    GetUniformBufferSizeEXT: glGetUniformBufferSizeEXT = @ptrCast(glGetUniformBufferSizeEXT, gl.missingFunctionPanic),
    GetUniformIndices: glGetUniformIndices = @ptrCast(glGetUniformIndices, gl.missingFunctionPanic),
    GetUniformLocation: glGetUniformLocation = @ptrCast(glGetUniformLocation, gl.missingFunctionPanic),
    GetUniformLocationARB: glGetUniformLocationARB = @ptrCast(glGetUniformLocationARB, gl.missingFunctionPanic),
    GetUniformOffsetEXT: glGetUniformOffsetEXT = @ptrCast(glGetUniformOffsetEXT, gl.missingFunctionPanic),
    GetUniformSubroutineuiv: glGetUniformSubroutineuiv = @ptrCast(glGetUniformSubroutineuiv, gl.missingFunctionPanic),
    GetUniformdv: glGetUniformdv = @ptrCast(glGetUniformdv, gl.missingFunctionPanic),
    GetUniformfv: glGetUniformfv = @ptrCast(glGetUniformfv, gl.missingFunctionPanic),
    GetUniformfvARB: glGetUniformfvARB = @ptrCast(glGetUniformfvARB, gl.missingFunctionPanic),
    GetUniformi64vARB: glGetUniformi64vARB = @ptrCast(glGetUniformi64vARB, gl.missingFunctionPanic),
    GetUniformi64vNV: glGetUniformi64vNV = @ptrCast(glGetUniformi64vNV, gl.missingFunctionPanic),
    GetUniformiv: glGetUniformiv = @ptrCast(glGetUniformiv, gl.missingFunctionPanic),
    GetUniformivARB: glGetUniformivARB = @ptrCast(glGetUniformivARB, gl.missingFunctionPanic),
    GetUniformui64vARB: glGetUniformui64vARB = @ptrCast(glGetUniformui64vARB, gl.missingFunctionPanic),
    GetUniformui64vNV: glGetUniformui64vNV = @ptrCast(glGetUniformui64vNV, gl.missingFunctionPanic),
    GetUniformuiv: glGetUniformuiv = @ptrCast(glGetUniformuiv, gl.missingFunctionPanic),
    GetUniformuivEXT: glGetUniformuivEXT = @ptrCast(glGetUniformuivEXT, gl.missingFunctionPanic),
    GetUnsignedBytei_vEXT: glGetUnsignedBytei_vEXT = @ptrCast(glGetUnsignedBytei_vEXT, gl.missingFunctionPanic),
    GetUnsignedBytevEXT: glGetUnsignedBytevEXT = @ptrCast(glGetUnsignedBytevEXT, gl.missingFunctionPanic),
    GetVariantArrayObjectfvATI: glGetVariantArrayObjectfvATI = @ptrCast(glGetVariantArrayObjectfvATI, gl.missingFunctionPanic),
    GetVariantArrayObjectivATI: glGetVariantArrayObjectivATI = @ptrCast(glGetVariantArrayObjectivATI, gl.missingFunctionPanic),
    GetVariantBooleanvEXT: glGetVariantBooleanvEXT = @ptrCast(glGetVariantBooleanvEXT, gl.missingFunctionPanic),
    GetVariantFloatvEXT: glGetVariantFloatvEXT = @ptrCast(glGetVariantFloatvEXT, gl.missingFunctionPanic),
    GetVariantIntegervEXT: glGetVariantIntegervEXT = @ptrCast(glGetVariantIntegervEXT, gl.missingFunctionPanic),
    GetVariantPointervEXT: glGetVariantPointervEXT = @ptrCast(glGetVariantPointervEXT, gl.missingFunctionPanic),
    GetVaryingLocationNV: glGetVaryingLocationNV = @ptrCast(glGetVaryingLocationNV, gl.missingFunctionPanic),
    GetVertexArrayIndexed64iv: glGetVertexArrayIndexed64iv = @ptrCast(glGetVertexArrayIndexed64iv, gl.missingFunctionPanic),
    GetVertexArrayIndexediv: glGetVertexArrayIndexediv = @ptrCast(glGetVertexArrayIndexediv, gl.missingFunctionPanic),
    GetVertexArrayIntegeri_vEXT: glGetVertexArrayIntegeri_vEXT = @ptrCast(glGetVertexArrayIntegeri_vEXT, gl.missingFunctionPanic),
    GetVertexArrayIntegervEXT: glGetVertexArrayIntegervEXT = @ptrCast(glGetVertexArrayIntegervEXT, gl.missingFunctionPanic),
    GetVertexArrayPointeri_vEXT: glGetVertexArrayPointeri_vEXT = @ptrCast(glGetVertexArrayPointeri_vEXT, gl.missingFunctionPanic),
    GetVertexArrayPointervEXT: glGetVertexArrayPointervEXT = @ptrCast(glGetVertexArrayPointervEXT, gl.missingFunctionPanic),
    GetVertexArrayiv: glGetVertexArrayiv = @ptrCast(glGetVertexArrayiv, gl.missingFunctionPanic),
    GetVertexAttribArrayObjectfvATI: glGetVertexAttribArrayObjectfvATI = @ptrCast(glGetVertexAttribArrayObjectfvATI, gl.missingFunctionPanic),
    GetVertexAttribArrayObjectivATI: glGetVertexAttribArrayObjectivATI = @ptrCast(glGetVertexAttribArrayObjectivATI, gl.missingFunctionPanic),
    GetVertexAttribIiv: glGetVertexAttribIiv = @ptrCast(glGetVertexAttribIiv, gl.missingFunctionPanic),
    GetVertexAttribIivEXT: glGetVertexAttribIivEXT = @ptrCast(glGetVertexAttribIivEXT, gl.missingFunctionPanic),
    GetVertexAttribIuiv: glGetVertexAttribIuiv = @ptrCast(glGetVertexAttribIuiv, gl.missingFunctionPanic),
    GetVertexAttribIuivEXT: glGetVertexAttribIuivEXT = @ptrCast(glGetVertexAttribIuivEXT, gl.missingFunctionPanic),
    GetVertexAttribLdv: glGetVertexAttribLdv = @ptrCast(glGetVertexAttribLdv, gl.missingFunctionPanic),
    GetVertexAttribLdvEXT: glGetVertexAttribLdvEXT = @ptrCast(glGetVertexAttribLdvEXT, gl.missingFunctionPanic),
    GetVertexAttribLi64vNV: glGetVertexAttribLi64vNV = @ptrCast(glGetVertexAttribLi64vNV, gl.missingFunctionPanic),
    GetVertexAttribLui64vARB: glGetVertexAttribLui64vARB = @ptrCast(glGetVertexAttribLui64vARB, gl.missingFunctionPanic),
    GetVertexAttribLui64vNV: glGetVertexAttribLui64vNV = @ptrCast(glGetVertexAttribLui64vNV, gl.missingFunctionPanic),
    GetVertexAttribPointerv: glGetVertexAttribPointerv = @ptrCast(glGetVertexAttribPointerv, gl.missingFunctionPanic),
    GetVertexAttribPointervARB: glGetVertexAttribPointervARB = @ptrCast(glGetVertexAttribPointervARB, gl.missingFunctionPanic),
    GetVertexAttribPointervNV: glGetVertexAttribPointervNV = @ptrCast(glGetVertexAttribPointervNV, gl.missingFunctionPanic),
    GetVertexAttribdv: glGetVertexAttribdv = @ptrCast(glGetVertexAttribdv, gl.missingFunctionPanic),
    GetVertexAttribdvARB: glGetVertexAttribdvARB = @ptrCast(glGetVertexAttribdvARB, gl.missingFunctionPanic),
    GetVertexAttribdvNV: glGetVertexAttribdvNV = @ptrCast(glGetVertexAttribdvNV, gl.missingFunctionPanic),
    GetVertexAttribfv: glGetVertexAttribfv = @ptrCast(glGetVertexAttribfv, gl.missingFunctionPanic),
    GetVertexAttribfvARB: glGetVertexAttribfvARB = @ptrCast(glGetVertexAttribfvARB, gl.missingFunctionPanic),
    GetVertexAttribfvNV: glGetVertexAttribfvNV = @ptrCast(glGetVertexAttribfvNV, gl.missingFunctionPanic),
    GetVertexAttribiv: glGetVertexAttribiv = @ptrCast(glGetVertexAttribiv, gl.missingFunctionPanic),
    GetVertexAttribivARB: glGetVertexAttribivARB = @ptrCast(glGetVertexAttribivARB, gl.missingFunctionPanic),
    GetVertexAttribivNV: glGetVertexAttribivNV = @ptrCast(glGetVertexAttribivNV, gl.missingFunctionPanic),
    GetVideoCaptureStreamdvNV: glGetVideoCaptureStreamdvNV = @ptrCast(glGetVideoCaptureStreamdvNV, gl.missingFunctionPanic),
    GetVideoCaptureStreamfvNV: glGetVideoCaptureStreamfvNV = @ptrCast(glGetVideoCaptureStreamfvNV, gl.missingFunctionPanic),
    GetVideoCaptureStreamivNV: glGetVideoCaptureStreamivNV = @ptrCast(glGetVideoCaptureStreamivNV, gl.missingFunctionPanic),
    GetVideoCaptureivNV: glGetVideoCaptureivNV = @ptrCast(glGetVideoCaptureivNV, gl.missingFunctionPanic),
    GetVideoi64vNV: glGetVideoi64vNV = @ptrCast(glGetVideoi64vNV, gl.missingFunctionPanic),
    GetVideoivNV: glGetVideoivNV = @ptrCast(glGetVideoivNV, gl.missingFunctionPanic),
    GetVideoui64vNV: glGetVideoui64vNV = @ptrCast(glGetVideoui64vNV, gl.missingFunctionPanic),
    GetVideouivNV: glGetVideouivNV = @ptrCast(glGetVideouivNV, gl.missingFunctionPanic),
    GetVkProcAddrNV: glGetVkProcAddrNV = @ptrCast(glGetVkProcAddrNV, gl.missingFunctionPanic),
    GetnCompressedTexImageARB: glGetnCompressedTexImageARB = @ptrCast(glGetnCompressedTexImageARB, gl.missingFunctionPanic),
    GetnTexImageARB: glGetnTexImageARB = @ptrCast(glGetnTexImageARB, gl.missingFunctionPanic),
    GetnUniformdvARB: glGetnUniformdvARB = @ptrCast(glGetnUniformdvARB, gl.missingFunctionPanic),
    GetnUniformfv: glGetnUniformfv = @ptrCast(glGetnUniformfv, gl.missingFunctionPanic),
    GetnUniformfvARB: glGetnUniformfvARB = @ptrCast(glGetnUniformfvARB, gl.missingFunctionPanic),
    GetnUniformi64vARB: glGetnUniformi64vARB = @ptrCast(glGetnUniformi64vARB, gl.missingFunctionPanic),
    GetnUniformiv: glGetnUniformiv = @ptrCast(glGetnUniformiv, gl.missingFunctionPanic),
    GetnUniformivARB: glGetnUniformivARB = @ptrCast(glGetnUniformivARB, gl.missingFunctionPanic),
    GetnUniformui64vARB: glGetnUniformui64vARB = @ptrCast(glGetnUniformui64vARB, gl.missingFunctionPanic),
    GetnUniformuiv: glGetnUniformuiv = @ptrCast(glGetnUniformuiv, gl.missingFunctionPanic),
    GetnUniformuivARB: glGetnUniformuivARB = @ptrCast(glGetnUniformuivARB, gl.missingFunctionPanic),
    GlobalAlphaFactorbSUN: glGlobalAlphaFactorbSUN = @ptrCast(glGlobalAlphaFactorbSUN, gl.missingFunctionPanic),
    GlobalAlphaFactordSUN: glGlobalAlphaFactordSUN = @ptrCast(glGlobalAlphaFactordSUN, gl.missingFunctionPanic),
    GlobalAlphaFactorfSUN: glGlobalAlphaFactorfSUN = @ptrCast(glGlobalAlphaFactorfSUN, gl.missingFunctionPanic),
    GlobalAlphaFactoriSUN: glGlobalAlphaFactoriSUN = @ptrCast(glGlobalAlphaFactoriSUN, gl.missingFunctionPanic),
    GlobalAlphaFactorsSUN: glGlobalAlphaFactorsSUN = @ptrCast(glGlobalAlphaFactorsSUN, gl.missingFunctionPanic),
    GlobalAlphaFactorubSUN: glGlobalAlphaFactorubSUN = @ptrCast(glGlobalAlphaFactorubSUN, gl.missingFunctionPanic),
    GlobalAlphaFactoruiSUN: glGlobalAlphaFactoruiSUN = @ptrCast(glGlobalAlphaFactoruiSUN, gl.missingFunctionPanic),
    GlobalAlphaFactorusSUN: glGlobalAlphaFactorusSUN = @ptrCast(glGlobalAlphaFactorusSUN, gl.missingFunctionPanic),
    Hint: glHint = @ptrCast(glHint, gl.missingFunctionPanic),
    HintPGI: glHintPGI = @ptrCast(glHintPGI, gl.missingFunctionPanic),
    HistogramEXT: glHistogramEXT = @ptrCast(glHistogramEXT, gl.missingFunctionPanic),
    IglooInterfaceSGIX: glIglooInterfaceSGIX = @ptrCast(glIglooInterfaceSGIX, gl.missingFunctionPanic),
    ImageTransformParameterfHP: glImageTransformParameterfHP = @ptrCast(glImageTransformParameterfHP, gl.missingFunctionPanic),
    ImageTransformParameterfvHP: glImageTransformParameterfvHP = @ptrCast(glImageTransformParameterfvHP, gl.missingFunctionPanic),
    ImageTransformParameteriHP: glImageTransformParameteriHP = @ptrCast(glImageTransformParameteriHP, gl.missingFunctionPanic),
    ImageTransformParameterivHP: glImageTransformParameterivHP = @ptrCast(glImageTransformParameterivHP, gl.missingFunctionPanic),
    ImportMemoryFdEXT: glImportMemoryFdEXT = @ptrCast(glImportMemoryFdEXT, gl.missingFunctionPanic),
    ImportMemoryWin32HandleEXT: glImportMemoryWin32HandleEXT = @ptrCast(glImportMemoryWin32HandleEXT, gl.missingFunctionPanic),
    ImportMemoryWin32NameEXT: glImportMemoryWin32NameEXT = @ptrCast(glImportMemoryWin32NameEXT, gl.missingFunctionPanic),
    ImportSemaphoreFdEXT: glImportSemaphoreFdEXT = @ptrCast(glImportSemaphoreFdEXT, gl.missingFunctionPanic),
    ImportSemaphoreWin32HandleEXT: glImportSemaphoreWin32HandleEXT = @ptrCast(glImportSemaphoreWin32HandleEXT, gl.missingFunctionPanic),
    ImportSemaphoreWin32NameEXT: glImportSemaphoreWin32NameEXT = @ptrCast(glImportSemaphoreWin32NameEXT, gl.missingFunctionPanic),
    ImportSyncEXT: glImportSyncEXT = @ptrCast(glImportSyncEXT, gl.missingFunctionPanic),
    IndexFormatNV: glIndexFormatNV = @ptrCast(glIndexFormatNV, gl.missingFunctionPanic),
    IndexFuncEXT: glIndexFuncEXT = @ptrCast(glIndexFuncEXT, gl.missingFunctionPanic),
    IndexMaterialEXT: glIndexMaterialEXT = @ptrCast(glIndexMaterialEXT, gl.missingFunctionPanic),
    IndexPointerEXT: glIndexPointerEXT = @ptrCast(glIndexPointerEXT, gl.missingFunctionPanic),
    IndexPointerListIBM: glIndexPointerListIBM = @ptrCast(glIndexPointerListIBM, gl.missingFunctionPanic),
    IndexxOES: glIndexxOES = @ptrCast(glIndexxOES, gl.missingFunctionPanic),
    IndexxvOES: glIndexxvOES = @ptrCast(glIndexxvOES, gl.missingFunctionPanic),
    InsertComponentEXT: glInsertComponentEXT = @ptrCast(glInsertComponentEXT, gl.missingFunctionPanic),
    InsertEventMarkerEXT: glInsertEventMarkerEXT = @ptrCast(glInsertEventMarkerEXT, gl.missingFunctionPanic),
    InstrumentsBufferSGIX: glInstrumentsBufferSGIX = @ptrCast(glInstrumentsBufferSGIX, gl.missingFunctionPanic),
    InterpolatePathsNV: glInterpolatePathsNV = @ptrCast(glInterpolatePathsNV, gl.missingFunctionPanic),
    InvalidateBufferData: glInvalidateBufferData = @ptrCast(glInvalidateBufferData, gl.missingFunctionPanic),
    InvalidateBufferSubData: glInvalidateBufferSubData = @ptrCast(glInvalidateBufferSubData, gl.missingFunctionPanic),
    InvalidateFramebuffer: glInvalidateFramebuffer = @ptrCast(glInvalidateFramebuffer, gl.missingFunctionPanic),
    InvalidateNamedFramebufferData: glInvalidateNamedFramebufferData = @ptrCast(glInvalidateNamedFramebufferData, gl.missingFunctionPanic),
    InvalidateNamedFramebufferSubData: glInvalidateNamedFramebufferSubData = @ptrCast(glInvalidateNamedFramebufferSubData, gl.missingFunctionPanic),
    InvalidateSubFramebuffer: glInvalidateSubFramebuffer = @ptrCast(glInvalidateSubFramebuffer, gl.missingFunctionPanic),
    InvalidateTexImage: glInvalidateTexImage = @ptrCast(glInvalidateTexImage, gl.missingFunctionPanic),
    InvalidateTexSubImage: glInvalidateTexSubImage = @ptrCast(glInvalidateTexSubImage, gl.missingFunctionPanic),
    IsAsyncMarkerSGIX: glIsAsyncMarkerSGIX = @ptrCast(glIsAsyncMarkerSGIX, gl.missingFunctionPanic),
    IsBuffer: glIsBuffer = @ptrCast(glIsBuffer, gl.missingFunctionPanic),
    IsBufferARB: glIsBufferARB = @ptrCast(glIsBufferARB, gl.missingFunctionPanic),
    IsBufferResidentNV: glIsBufferResidentNV = @ptrCast(glIsBufferResidentNV, gl.missingFunctionPanic),
    IsCommandListNV: glIsCommandListNV = @ptrCast(glIsCommandListNV, gl.missingFunctionPanic),
    IsEnabled: glIsEnabled = @ptrCast(glIsEnabled, gl.missingFunctionPanic),
    IsEnabledIndexedEXT: glIsEnabledIndexedEXT = @ptrCast(glIsEnabledIndexedEXT, gl.missingFunctionPanic),
    IsEnabledi: glIsEnabledi = @ptrCast(glIsEnabledi, gl.missingFunctionPanic),
    IsFenceAPPLE: glIsFenceAPPLE = @ptrCast(glIsFenceAPPLE, gl.missingFunctionPanic),
    IsFenceNV: glIsFenceNV = @ptrCast(glIsFenceNV, gl.missingFunctionPanic),
    IsFramebuffer: glIsFramebuffer = @ptrCast(glIsFramebuffer, gl.missingFunctionPanic),
    IsFramebufferEXT: glIsFramebufferEXT = @ptrCast(glIsFramebufferEXT, gl.missingFunctionPanic),
    IsImageHandleResidentARB: glIsImageHandleResidentARB = @ptrCast(glIsImageHandleResidentARB, gl.missingFunctionPanic),
    IsImageHandleResidentNV: glIsImageHandleResidentNV = @ptrCast(glIsImageHandleResidentNV, gl.missingFunctionPanic),
    IsMemoryObjectEXT: glIsMemoryObjectEXT = @ptrCast(glIsMemoryObjectEXT, gl.missingFunctionPanic),
    IsNameAMD: glIsNameAMD = @ptrCast(glIsNameAMD, gl.missingFunctionPanic),
    IsNamedBufferResidentNV: glIsNamedBufferResidentNV = @ptrCast(glIsNamedBufferResidentNV, gl.missingFunctionPanic),
    IsNamedStringARB: glIsNamedStringARB = @ptrCast(glIsNamedStringARB, gl.missingFunctionPanic),
    IsObjectBufferATI: glIsObjectBufferATI = @ptrCast(glIsObjectBufferATI, gl.missingFunctionPanic),
    IsOcclusionQueryNV: glIsOcclusionQueryNV = @ptrCast(glIsOcclusionQueryNV, gl.missingFunctionPanic),
    IsPathNV: glIsPathNV = @ptrCast(glIsPathNV, gl.missingFunctionPanic),
    IsPointInFillPathNV: glIsPointInFillPathNV = @ptrCast(glIsPointInFillPathNV, gl.missingFunctionPanic),
    IsPointInStrokePathNV: glIsPointInStrokePathNV = @ptrCast(glIsPointInStrokePathNV, gl.missingFunctionPanic),
    IsProgram: glIsProgram = @ptrCast(glIsProgram, gl.missingFunctionPanic),
    IsProgramARB: glIsProgramARB = @ptrCast(glIsProgramARB, gl.missingFunctionPanic),
    IsProgramNV: glIsProgramNV = @ptrCast(glIsProgramNV, gl.missingFunctionPanic),
    IsProgramPipeline: glIsProgramPipeline = @ptrCast(glIsProgramPipeline, gl.missingFunctionPanic),
    IsQuery: glIsQuery = @ptrCast(glIsQuery, gl.missingFunctionPanic),
    IsQueryARB: glIsQueryARB = @ptrCast(glIsQueryARB, gl.missingFunctionPanic),
    IsRenderbuffer: glIsRenderbuffer = @ptrCast(glIsRenderbuffer, gl.missingFunctionPanic),
    IsRenderbufferEXT: glIsRenderbufferEXT = @ptrCast(glIsRenderbufferEXT, gl.missingFunctionPanic),
    IsSampler: glIsSampler = @ptrCast(glIsSampler, gl.missingFunctionPanic),
    IsSemaphoreEXT: glIsSemaphoreEXT = @ptrCast(glIsSemaphoreEXT, gl.missingFunctionPanic),
    IsShader: glIsShader = @ptrCast(glIsShader, gl.missingFunctionPanic),
    IsStateNV: glIsStateNV = @ptrCast(glIsStateNV, gl.missingFunctionPanic),
    IsSync: glIsSync = @ptrCast(glIsSync, gl.missingFunctionPanic),
    IsTexture: glIsTexture = @ptrCast(glIsTexture, gl.missingFunctionPanic),
    IsTextureEXT: glIsTextureEXT = @ptrCast(glIsTextureEXT, gl.missingFunctionPanic),
    IsTextureHandleResidentARB: glIsTextureHandleResidentARB = @ptrCast(glIsTextureHandleResidentARB, gl.missingFunctionPanic),
    IsTextureHandleResidentNV: glIsTextureHandleResidentNV = @ptrCast(glIsTextureHandleResidentNV, gl.missingFunctionPanic),
    IsTransformFeedback: glIsTransformFeedback = @ptrCast(glIsTransformFeedback, gl.missingFunctionPanic),
    IsTransformFeedbackNV: glIsTransformFeedbackNV = @ptrCast(glIsTransformFeedbackNV, gl.missingFunctionPanic),
    IsVariantEnabledEXT: glIsVariantEnabledEXT = @ptrCast(glIsVariantEnabledEXT, gl.missingFunctionPanic),
    IsVertexArray: glIsVertexArray = @ptrCast(glIsVertexArray, gl.missingFunctionPanic),
    IsVertexArrayAPPLE: glIsVertexArrayAPPLE = @ptrCast(glIsVertexArrayAPPLE, gl.missingFunctionPanic),
    IsVertexAttribEnabledAPPLE: glIsVertexAttribEnabledAPPLE = @ptrCast(glIsVertexAttribEnabledAPPLE, gl.missingFunctionPanic),
    LGPUCopyImageSubDataNVX: glLGPUCopyImageSubDataNVX = @ptrCast(glLGPUCopyImageSubDataNVX, gl.missingFunctionPanic),
    LGPUInterlockNVX: glLGPUInterlockNVX = @ptrCast(glLGPUInterlockNVX, gl.missingFunctionPanic),
    LGPUNamedBufferSubDataNVX: glLGPUNamedBufferSubDataNVX = @ptrCast(glLGPUNamedBufferSubDataNVX, gl.missingFunctionPanic),
    LabelObjectEXT: glLabelObjectEXT = @ptrCast(glLabelObjectEXT, gl.missingFunctionPanic),
    LightEnviSGIX: glLightEnviSGIX = @ptrCast(glLightEnviSGIX, gl.missingFunctionPanic),
    LightModelxOES: glLightModelxOES = @ptrCast(glLightModelxOES, gl.missingFunctionPanic),
    LightModelxvOES: glLightModelxvOES = @ptrCast(glLightModelxvOES, gl.missingFunctionPanic),
    LightxOES: glLightxOES = @ptrCast(glLightxOES, gl.missingFunctionPanic),
    LightxvOES: glLightxvOES = @ptrCast(glLightxvOES, gl.missingFunctionPanic),
    LineWidth: glLineWidth = @ptrCast(glLineWidth, gl.missingFunctionPanic),
    LineWidthxOES: glLineWidthxOES = @ptrCast(glLineWidthxOES, gl.missingFunctionPanic),
    LinkProgram: glLinkProgram = @ptrCast(glLinkProgram, gl.missingFunctionPanic),
    LinkProgramARB: glLinkProgramARB = @ptrCast(glLinkProgramARB, gl.missingFunctionPanic),
    ListDrawCommandsStatesClientNV: glListDrawCommandsStatesClientNV = @ptrCast(glListDrawCommandsStatesClientNV, gl.missingFunctionPanic),
    ListParameterfSGIX: glListParameterfSGIX = @ptrCast(glListParameterfSGIX, gl.missingFunctionPanic),
    ListParameterfvSGIX: glListParameterfvSGIX = @ptrCast(glListParameterfvSGIX, gl.missingFunctionPanic),
    ListParameteriSGIX: glListParameteriSGIX = @ptrCast(glListParameteriSGIX, gl.missingFunctionPanic),
    ListParameterivSGIX: glListParameterivSGIX = @ptrCast(glListParameterivSGIX, gl.missingFunctionPanic),
    LoadIdentityDeformationMapSGIX: glLoadIdentityDeformationMapSGIX = @ptrCast(glLoadIdentityDeformationMapSGIX, gl.missingFunctionPanic),
    LoadMatrixxOES: glLoadMatrixxOES = @ptrCast(glLoadMatrixxOES, gl.missingFunctionPanic),
    LoadProgramNV: glLoadProgramNV = @ptrCast(glLoadProgramNV, gl.missingFunctionPanic),
    LoadTransposeMatrixdARB: glLoadTransposeMatrixdARB = @ptrCast(glLoadTransposeMatrixdARB, gl.missingFunctionPanic),
    LoadTransposeMatrixfARB: glLoadTransposeMatrixfARB = @ptrCast(glLoadTransposeMatrixfARB, gl.missingFunctionPanic),
    LoadTransposeMatrixxOES: glLoadTransposeMatrixxOES = @ptrCast(glLoadTransposeMatrixxOES, gl.missingFunctionPanic),
    LockArraysEXT: glLockArraysEXT = @ptrCast(glLockArraysEXT, gl.missingFunctionPanic),
    LogicOp: glLogicOp = @ptrCast(glLogicOp, gl.missingFunctionPanic),
    MakeBufferNonResidentNV: glMakeBufferNonResidentNV = @ptrCast(glMakeBufferNonResidentNV, gl.missingFunctionPanic),
    MakeBufferResidentNV: glMakeBufferResidentNV = @ptrCast(glMakeBufferResidentNV, gl.missingFunctionPanic),
    MakeImageHandleNonResidentARB: glMakeImageHandleNonResidentARB = @ptrCast(glMakeImageHandleNonResidentARB, gl.missingFunctionPanic),
    MakeImageHandleNonResidentNV: glMakeImageHandleNonResidentNV = @ptrCast(glMakeImageHandleNonResidentNV, gl.missingFunctionPanic),
    MakeImageHandleResidentARB: glMakeImageHandleResidentARB = @ptrCast(glMakeImageHandleResidentARB, gl.missingFunctionPanic),
    MakeImageHandleResidentNV: glMakeImageHandleResidentNV = @ptrCast(glMakeImageHandleResidentNV, gl.missingFunctionPanic),
    MakeNamedBufferNonResidentNV: glMakeNamedBufferNonResidentNV = @ptrCast(glMakeNamedBufferNonResidentNV, gl.missingFunctionPanic),
    MakeNamedBufferResidentNV: glMakeNamedBufferResidentNV = @ptrCast(glMakeNamedBufferResidentNV, gl.missingFunctionPanic),
    MakeTextureHandleNonResidentARB: glMakeTextureHandleNonResidentARB = @ptrCast(glMakeTextureHandleNonResidentARB, gl.missingFunctionPanic),
    MakeTextureHandleNonResidentNV: glMakeTextureHandleNonResidentNV = @ptrCast(glMakeTextureHandleNonResidentNV, gl.missingFunctionPanic),
    MakeTextureHandleResidentARB: glMakeTextureHandleResidentARB = @ptrCast(glMakeTextureHandleResidentARB, gl.missingFunctionPanic),
    MakeTextureHandleResidentNV: glMakeTextureHandleResidentNV = @ptrCast(glMakeTextureHandleResidentNV, gl.missingFunctionPanic),
    Map1xOES: glMap1xOES = @ptrCast(glMap1xOES, gl.missingFunctionPanic),
    Map2xOES: glMap2xOES = @ptrCast(glMap2xOES, gl.missingFunctionPanic),
    MapBuffer: glMapBuffer = @ptrCast(glMapBuffer, gl.missingFunctionPanic),
    MapBufferARB: glMapBufferARB = @ptrCast(glMapBufferARB, gl.missingFunctionPanic),
    MapBufferRange: glMapBufferRange = @ptrCast(glMapBufferRange, gl.missingFunctionPanic),
    MapControlPointsNV: glMapControlPointsNV = @ptrCast(glMapControlPointsNV, gl.missingFunctionPanic),
    MapGrid1xOES: glMapGrid1xOES = @ptrCast(glMapGrid1xOES, gl.missingFunctionPanic),
    MapGrid2xOES: glMapGrid2xOES = @ptrCast(glMapGrid2xOES, gl.missingFunctionPanic),
    MapNamedBuffer: glMapNamedBuffer = @ptrCast(glMapNamedBuffer, gl.missingFunctionPanic),
    MapNamedBufferEXT: glMapNamedBufferEXT = @ptrCast(glMapNamedBufferEXT, gl.missingFunctionPanic),
    MapNamedBufferRange: glMapNamedBufferRange = @ptrCast(glMapNamedBufferRange, gl.missingFunctionPanic),
    MapNamedBufferRangeEXT: glMapNamedBufferRangeEXT = @ptrCast(glMapNamedBufferRangeEXT, gl.missingFunctionPanic),
    MapObjectBufferATI: glMapObjectBufferATI = @ptrCast(glMapObjectBufferATI, gl.missingFunctionPanic),
    MapParameterfvNV: glMapParameterfvNV = @ptrCast(glMapParameterfvNV, gl.missingFunctionPanic),
    MapParameterivNV: glMapParameterivNV = @ptrCast(glMapParameterivNV, gl.missingFunctionPanic),
    MapTexture2DINTEL: glMapTexture2DINTEL = @ptrCast(glMapTexture2DINTEL, gl.missingFunctionPanic),
    MapVertexAttrib1dAPPLE: glMapVertexAttrib1dAPPLE = @ptrCast(glMapVertexAttrib1dAPPLE, gl.missingFunctionPanic),
    MapVertexAttrib1fAPPLE: glMapVertexAttrib1fAPPLE = @ptrCast(glMapVertexAttrib1fAPPLE, gl.missingFunctionPanic),
    MapVertexAttrib2dAPPLE: glMapVertexAttrib2dAPPLE = @ptrCast(glMapVertexAttrib2dAPPLE, gl.missingFunctionPanic),
    MapVertexAttrib2fAPPLE: glMapVertexAttrib2fAPPLE = @ptrCast(glMapVertexAttrib2fAPPLE, gl.missingFunctionPanic),
    MaterialxOES: glMaterialxOES = @ptrCast(glMaterialxOES, gl.missingFunctionPanic),
    MaterialxvOES: glMaterialxvOES = @ptrCast(glMaterialxvOES, gl.missingFunctionPanic),
    MatrixFrustumEXT: glMatrixFrustumEXT = @ptrCast(glMatrixFrustumEXT, gl.missingFunctionPanic),
    MatrixIndexPointerARB: glMatrixIndexPointerARB = @ptrCast(glMatrixIndexPointerARB, gl.missingFunctionPanic),
    MatrixIndexubvARB: glMatrixIndexubvARB = @ptrCast(glMatrixIndexubvARB, gl.missingFunctionPanic),
    MatrixIndexuivARB: glMatrixIndexuivARB = @ptrCast(glMatrixIndexuivARB, gl.missingFunctionPanic),
    MatrixIndexusvARB: glMatrixIndexusvARB = @ptrCast(glMatrixIndexusvARB, gl.missingFunctionPanic),
    MatrixLoad3x2fNV: glMatrixLoad3x2fNV = @ptrCast(glMatrixLoad3x2fNV, gl.missingFunctionPanic),
    MatrixLoad3x3fNV: glMatrixLoad3x3fNV = @ptrCast(glMatrixLoad3x3fNV, gl.missingFunctionPanic),
    MatrixLoadIdentityEXT: glMatrixLoadIdentityEXT = @ptrCast(glMatrixLoadIdentityEXT, gl.missingFunctionPanic),
    MatrixLoadTranspose3x3fNV: glMatrixLoadTranspose3x3fNV = @ptrCast(glMatrixLoadTranspose3x3fNV, gl.missingFunctionPanic),
    MatrixLoadTransposedEXT: glMatrixLoadTransposedEXT = @ptrCast(glMatrixLoadTransposedEXT, gl.missingFunctionPanic),
    MatrixLoadTransposefEXT: glMatrixLoadTransposefEXT = @ptrCast(glMatrixLoadTransposefEXT, gl.missingFunctionPanic),
    MatrixLoaddEXT: glMatrixLoaddEXT = @ptrCast(glMatrixLoaddEXT, gl.missingFunctionPanic),
    MatrixLoadfEXT: glMatrixLoadfEXT = @ptrCast(glMatrixLoadfEXT, gl.missingFunctionPanic),
    MatrixMult3x2fNV: glMatrixMult3x2fNV = @ptrCast(glMatrixMult3x2fNV, gl.missingFunctionPanic),
    MatrixMult3x3fNV: glMatrixMult3x3fNV = @ptrCast(glMatrixMult3x3fNV, gl.missingFunctionPanic),
    MatrixMultTranspose3x3fNV: glMatrixMultTranspose3x3fNV = @ptrCast(glMatrixMultTranspose3x3fNV, gl.missingFunctionPanic),
    MatrixMultTransposedEXT: glMatrixMultTransposedEXT = @ptrCast(glMatrixMultTransposedEXT, gl.missingFunctionPanic),
    MatrixMultTransposefEXT: glMatrixMultTransposefEXT = @ptrCast(glMatrixMultTransposefEXT, gl.missingFunctionPanic),
    MatrixMultdEXT: glMatrixMultdEXT = @ptrCast(glMatrixMultdEXT, gl.missingFunctionPanic),
    MatrixMultfEXT: glMatrixMultfEXT = @ptrCast(glMatrixMultfEXT, gl.missingFunctionPanic),
    MatrixOrthoEXT: glMatrixOrthoEXT = @ptrCast(glMatrixOrthoEXT, gl.missingFunctionPanic),
    MatrixPopEXT: glMatrixPopEXT = @ptrCast(glMatrixPopEXT, gl.missingFunctionPanic),
    MatrixPushEXT: glMatrixPushEXT = @ptrCast(glMatrixPushEXT, gl.missingFunctionPanic),
    MatrixRotatedEXT: glMatrixRotatedEXT = @ptrCast(glMatrixRotatedEXT, gl.missingFunctionPanic),
    MatrixRotatefEXT: glMatrixRotatefEXT = @ptrCast(glMatrixRotatefEXT, gl.missingFunctionPanic),
    MatrixScaledEXT: glMatrixScaledEXT = @ptrCast(glMatrixScaledEXT, gl.missingFunctionPanic),
    MatrixScalefEXT: glMatrixScalefEXT = @ptrCast(glMatrixScalefEXT, gl.missingFunctionPanic),
    MatrixTranslatedEXT: glMatrixTranslatedEXT = @ptrCast(glMatrixTranslatedEXT, gl.missingFunctionPanic),
    MatrixTranslatefEXT: glMatrixTranslatefEXT = @ptrCast(glMatrixTranslatefEXT, gl.missingFunctionPanic),
    MaxShaderCompilerThreadsARB: glMaxShaderCompilerThreadsARB = @ptrCast(glMaxShaderCompilerThreadsARB, gl.missingFunctionPanic),
    MaxShaderCompilerThreadsKHR: glMaxShaderCompilerThreadsKHR = @ptrCast(glMaxShaderCompilerThreadsKHR, gl.missingFunctionPanic),
    MemoryBarrier: glMemoryBarrier = @ptrCast(glMemoryBarrier, gl.missingFunctionPanic),
    MemoryBarrierByRegion: glMemoryBarrierByRegion = @ptrCast(glMemoryBarrierByRegion, gl.missingFunctionPanic),
    MemoryBarrierEXT: glMemoryBarrierEXT = @ptrCast(glMemoryBarrierEXT, gl.missingFunctionPanic),
    MemoryObjectParameterivEXT: glMemoryObjectParameterivEXT = @ptrCast(glMemoryObjectParameterivEXT, gl.missingFunctionPanic),
    MinSampleShadingARB: glMinSampleShadingARB = @ptrCast(glMinSampleShadingARB, gl.missingFunctionPanic),
    MinmaxEXT: glMinmaxEXT = @ptrCast(glMinmaxEXT, gl.missingFunctionPanic),
    MultMatrixxOES: glMultMatrixxOES = @ptrCast(glMultMatrixxOES, gl.missingFunctionPanic),
    MultTransposeMatrixdARB: glMultTransposeMatrixdARB = @ptrCast(glMultTransposeMatrixdARB, gl.missingFunctionPanic),
    MultTransposeMatrixfARB: glMultTransposeMatrixfARB = @ptrCast(glMultTransposeMatrixfARB, gl.missingFunctionPanic),
    MultTransposeMatrixxOES: glMultTransposeMatrixxOES = @ptrCast(glMultTransposeMatrixxOES, gl.missingFunctionPanic),
    MultiDrawArrays: glMultiDrawArrays = @ptrCast(glMultiDrawArrays, gl.missingFunctionPanic),
    MultiDrawArraysEXT: glMultiDrawArraysEXT = @ptrCast(glMultiDrawArraysEXT, gl.missingFunctionPanic),
    MultiDrawArraysIndirect: glMultiDrawArraysIndirect = @ptrCast(glMultiDrawArraysIndirect, gl.missingFunctionPanic),
    MultiDrawArraysIndirectAMD: glMultiDrawArraysIndirectAMD = @ptrCast(glMultiDrawArraysIndirectAMD, gl.missingFunctionPanic),
    MultiDrawArraysIndirectBindlessCountNV: glMultiDrawArraysIndirectBindlessCountNV = @ptrCast(glMultiDrawArraysIndirectBindlessCountNV, gl.missingFunctionPanic),
    MultiDrawArraysIndirectBindlessNV: glMultiDrawArraysIndirectBindlessNV = @ptrCast(glMultiDrawArraysIndirectBindlessNV, gl.missingFunctionPanic),
    MultiDrawArraysIndirectCountARB: glMultiDrawArraysIndirectCountARB = @ptrCast(glMultiDrawArraysIndirectCountARB, gl.missingFunctionPanic),
    MultiDrawElementArrayAPPLE: glMultiDrawElementArrayAPPLE = @ptrCast(glMultiDrawElementArrayAPPLE, gl.missingFunctionPanic),
    MultiDrawElements: glMultiDrawElements = @ptrCast(glMultiDrawElements, gl.missingFunctionPanic),
    MultiDrawElementsBaseVertex: glMultiDrawElementsBaseVertex = @ptrCast(glMultiDrawElementsBaseVertex, gl.missingFunctionPanic),
    MultiDrawElementsEXT: glMultiDrawElementsEXT = @ptrCast(glMultiDrawElementsEXT, gl.missingFunctionPanic),
    MultiDrawElementsIndirect: glMultiDrawElementsIndirect = @ptrCast(glMultiDrawElementsIndirect, gl.missingFunctionPanic),
    MultiDrawElementsIndirectAMD: glMultiDrawElementsIndirectAMD = @ptrCast(glMultiDrawElementsIndirectAMD, gl.missingFunctionPanic),
    MultiDrawElementsIndirectBindlessCountNV: glMultiDrawElementsIndirectBindlessCountNV = @ptrCast(glMultiDrawElementsIndirectBindlessCountNV, gl.missingFunctionPanic),
    MultiDrawElementsIndirectBindlessNV: glMultiDrawElementsIndirectBindlessNV = @ptrCast(glMultiDrawElementsIndirectBindlessNV, gl.missingFunctionPanic),
    MultiDrawElementsIndirectCountARB: glMultiDrawElementsIndirectCountARB = @ptrCast(glMultiDrawElementsIndirectCountARB, gl.missingFunctionPanic),
    MultiDrawMeshTasksIndirectCountNV: glMultiDrawMeshTasksIndirectCountNV = @ptrCast(glMultiDrawMeshTasksIndirectCountNV, gl.missingFunctionPanic),
    MultiDrawMeshTasksIndirectNV: glMultiDrawMeshTasksIndirectNV = @ptrCast(glMultiDrawMeshTasksIndirectNV, gl.missingFunctionPanic),
    MultiDrawRangeElementArrayAPPLE: glMultiDrawRangeElementArrayAPPLE = @ptrCast(glMultiDrawRangeElementArrayAPPLE, gl.missingFunctionPanic),
    MultiModeDrawArraysIBM: glMultiModeDrawArraysIBM = @ptrCast(glMultiModeDrawArraysIBM, gl.missingFunctionPanic),
    MultiModeDrawElementsIBM: glMultiModeDrawElementsIBM = @ptrCast(glMultiModeDrawElementsIBM, gl.missingFunctionPanic),
    MultiTexBufferEXT: glMultiTexBufferEXT = @ptrCast(glMultiTexBufferEXT, gl.missingFunctionPanic),
    MultiTexCoord1bOES: glMultiTexCoord1bOES = @ptrCast(glMultiTexCoord1bOES, gl.missingFunctionPanic),
    MultiTexCoord1bvOES: glMultiTexCoord1bvOES = @ptrCast(glMultiTexCoord1bvOES, gl.missingFunctionPanic),
    MultiTexCoord1dARB: glMultiTexCoord1dARB = @ptrCast(glMultiTexCoord1dARB, gl.missingFunctionPanic),
    MultiTexCoord1dvARB: glMultiTexCoord1dvARB = @ptrCast(glMultiTexCoord1dvARB, gl.missingFunctionPanic),
    MultiTexCoord1fARB: glMultiTexCoord1fARB = @ptrCast(glMultiTexCoord1fARB, gl.missingFunctionPanic),
    MultiTexCoord1fvARB: glMultiTexCoord1fvARB = @ptrCast(glMultiTexCoord1fvARB, gl.missingFunctionPanic),
    MultiTexCoord1hNV: glMultiTexCoord1hNV = @ptrCast(glMultiTexCoord1hNV, gl.missingFunctionPanic),
    MultiTexCoord1hvNV: glMultiTexCoord1hvNV = @ptrCast(glMultiTexCoord1hvNV, gl.missingFunctionPanic),
    MultiTexCoord1iARB: glMultiTexCoord1iARB = @ptrCast(glMultiTexCoord1iARB, gl.missingFunctionPanic),
    MultiTexCoord1ivARB: glMultiTexCoord1ivARB = @ptrCast(glMultiTexCoord1ivARB, gl.missingFunctionPanic),
    MultiTexCoord1sARB: glMultiTexCoord1sARB = @ptrCast(glMultiTexCoord1sARB, gl.missingFunctionPanic),
    MultiTexCoord1svARB: glMultiTexCoord1svARB = @ptrCast(glMultiTexCoord1svARB, gl.missingFunctionPanic),
    MultiTexCoord1xOES: glMultiTexCoord1xOES = @ptrCast(glMultiTexCoord1xOES, gl.missingFunctionPanic),
    MultiTexCoord1xvOES: glMultiTexCoord1xvOES = @ptrCast(glMultiTexCoord1xvOES, gl.missingFunctionPanic),
    MultiTexCoord2bOES: glMultiTexCoord2bOES = @ptrCast(glMultiTexCoord2bOES, gl.missingFunctionPanic),
    MultiTexCoord2bvOES: glMultiTexCoord2bvOES = @ptrCast(glMultiTexCoord2bvOES, gl.missingFunctionPanic),
    MultiTexCoord2dARB: glMultiTexCoord2dARB = @ptrCast(glMultiTexCoord2dARB, gl.missingFunctionPanic),
    MultiTexCoord2dvARB: glMultiTexCoord2dvARB = @ptrCast(glMultiTexCoord2dvARB, gl.missingFunctionPanic),
    MultiTexCoord2fARB: glMultiTexCoord2fARB = @ptrCast(glMultiTexCoord2fARB, gl.missingFunctionPanic),
    MultiTexCoord2fvARB: glMultiTexCoord2fvARB = @ptrCast(glMultiTexCoord2fvARB, gl.missingFunctionPanic),
    MultiTexCoord2hNV: glMultiTexCoord2hNV = @ptrCast(glMultiTexCoord2hNV, gl.missingFunctionPanic),
    MultiTexCoord2hvNV: glMultiTexCoord2hvNV = @ptrCast(glMultiTexCoord2hvNV, gl.missingFunctionPanic),
    MultiTexCoord2iARB: glMultiTexCoord2iARB = @ptrCast(glMultiTexCoord2iARB, gl.missingFunctionPanic),
    MultiTexCoord2ivARB: glMultiTexCoord2ivARB = @ptrCast(glMultiTexCoord2ivARB, gl.missingFunctionPanic),
    MultiTexCoord2sARB: glMultiTexCoord2sARB = @ptrCast(glMultiTexCoord2sARB, gl.missingFunctionPanic),
    MultiTexCoord2svARB: glMultiTexCoord2svARB = @ptrCast(glMultiTexCoord2svARB, gl.missingFunctionPanic),
    MultiTexCoord2xOES: glMultiTexCoord2xOES = @ptrCast(glMultiTexCoord2xOES, gl.missingFunctionPanic),
    MultiTexCoord2xvOES: glMultiTexCoord2xvOES = @ptrCast(glMultiTexCoord2xvOES, gl.missingFunctionPanic),
    MultiTexCoord3bOES: glMultiTexCoord3bOES = @ptrCast(glMultiTexCoord3bOES, gl.missingFunctionPanic),
    MultiTexCoord3bvOES: glMultiTexCoord3bvOES = @ptrCast(glMultiTexCoord3bvOES, gl.missingFunctionPanic),
    MultiTexCoord3dARB: glMultiTexCoord3dARB = @ptrCast(glMultiTexCoord3dARB, gl.missingFunctionPanic),
    MultiTexCoord3dvARB: glMultiTexCoord3dvARB = @ptrCast(glMultiTexCoord3dvARB, gl.missingFunctionPanic),
    MultiTexCoord3fARB: glMultiTexCoord3fARB = @ptrCast(glMultiTexCoord3fARB, gl.missingFunctionPanic),
    MultiTexCoord3fvARB: glMultiTexCoord3fvARB = @ptrCast(glMultiTexCoord3fvARB, gl.missingFunctionPanic),
    MultiTexCoord3hNV: glMultiTexCoord3hNV = @ptrCast(glMultiTexCoord3hNV, gl.missingFunctionPanic),
    MultiTexCoord3hvNV: glMultiTexCoord3hvNV = @ptrCast(glMultiTexCoord3hvNV, gl.missingFunctionPanic),
    MultiTexCoord3iARB: glMultiTexCoord3iARB = @ptrCast(glMultiTexCoord3iARB, gl.missingFunctionPanic),
    MultiTexCoord3ivARB: glMultiTexCoord3ivARB = @ptrCast(glMultiTexCoord3ivARB, gl.missingFunctionPanic),
    MultiTexCoord3sARB: glMultiTexCoord3sARB = @ptrCast(glMultiTexCoord3sARB, gl.missingFunctionPanic),
    MultiTexCoord3svARB: glMultiTexCoord3svARB = @ptrCast(glMultiTexCoord3svARB, gl.missingFunctionPanic),
    MultiTexCoord3xOES: glMultiTexCoord3xOES = @ptrCast(glMultiTexCoord3xOES, gl.missingFunctionPanic),
    MultiTexCoord3xvOES: glMultiTexCoord3xvOES = @ptrCast(glMultiTexCoord3xvOES, gl.missingFunctionPanic),
    MultiTexCoord4bOES: glMultiTexCoord4bOES = @ptrCast(glMultiTexCoord4bOES, gl.missingFunctionPanic),
    MultiTexCoord4bvOES: glMultiTexCoord4bvOES = @ptrCast(glMultiTexCoord4bvOES, gl.missingFunctionPanic),
    MultiTexCoord4dARB: glMultiTexCoord4dARB = @ptrCast(glMultiTexCoord4dARB, gl.missingFunctionPanic),
    MultiTexCoord4dvARB: glMultiTexCoord4dvARB = @ptrCast(glMultiTexCoord4dvARB, gl.missingFunctionPanic),
    MultiTexCoord4fARB: glMultiTexCoord4fARB = @ptrCast(glMultiTexCoord4fARB, gl.missingFunctionPanic),
    MultiTexCoord4fvARB: glMultiTexCoord4fvARB = @ptrCast(glMultiTexCoord4fvARB, gl.missingFunctionPanic),
    MultiTexCoord4hNV: glMultiTexCoord4hNV = @ptrCast(glMultiTexCoord4hNV, gl.missingFunctionPanic),
    MultiTexCoord4hvNV: glMultiTexCoord4hvNV = @ptrCast(glMultiTexCoord4hvNV, gl.missingFunctionPanic),
    MultiTexCoord4iARB: glMultiTexCoord4iARB = @ptrCast(glMultiTexCoord4iARB, gl.missingFunctionPanic),
    MultiTexCoord4ivARB: glMultiTexCoord4ivARB = @ptrCast(glMultiTexCoord4ivARB, gl.missingFunctionPanic),
    MultiTexCoord4sARB: glMultiTexCoord4sARB = @ptrCast(glMultiTexCoord4sARB, gl.missingFunctionPanic),
    MultiTexCoord4svARB: glMultiTexCoord4svARB = @ptrCast(glMultiTexCoord4svARB, gl.missingFunctionPanic),
    MultiTexCoord4xOES: glMultiTexCoord4xOES = @ptrCast(glMultiTexCoord4xOES, gl.missingFunctionPanic),
    MultiTexCoord4xvOES: glMultiTexCoord4xvOES = @ptrCast(glMultiTexCoord4xvOES, gl.missingFunctionPanic),
    MultiTexCoordPointerEXT: glMultiTexCoordPointerEXT = @ptrCast(glMultiTexCoordPointerEXT, gl.missingFunctionPanic),
    MultiTexEnvfEXT: glMultiTexEnvfEXT = @ptrCast(glMultiTexEnvfEXT, gl.missingFunctionPanic),
    MultiTexEnvfvEXT: glMultiTexEnvfvEXT = @ptrCast(glMultiTexEnvfvEXT, gl.missingFunctionPanic),
    MultiTexEnviEXT: glMultiTexEnviEXT = @ptrCast(glMultiTexEnviEXT, gl.missingFunctionPanic),
    MultiTexEnvivEXT: glMultiTexEnvivEXT = @ptrCast(glMultiTexEnvivEXT, gl.missingFunctionPanic),
    MultiTexGendEXT: glMultiTexGendEXT = @ptrCast(glMultiTexGendEXT, gl.missingFunctionPanic),
    MultiTexGendvEXT: glMultiTexGendvEXT = @ptrCast(glMultiTexGendvEXT, gl.missingFunctionPanic),
    MultiTexGenfEXT: glMultiTexGenfEXT = @ptrCast(glMultiTexGenfEXT, gl.missingFunctionPanic),
    MultiTexGenfvEXT: glMultiTexGenfvEXT = @ptrCast(glMultiTexGenfvEXT, gl.missingFunctionPanic),
    MultiTexGeniEXT: glMultiTexGeniEXT = @ptrCast(glMultiTexGeniEXT, gl.missingFunctionPanic),
    MultiTexGenivEXT: glMultiTexGenivEXT = @ptrCast(glMultiTexGenivEXT, gl.missingFunctionPanic),
    MultiTexImage1DEXT: glMultiTexImage1DEXT = @ptrCast(glMultiTexImage1DEXT, gl.missingFunctionPanic),
    MultiTexImage2DEXT: glMultiTexImage2DEXT = @ptrCast(glMultiTexImage2DEXT, gl.missingFunctionPanic),
    MultiTexImage3DEXT: glMultiTexImage3DEXT = @ptrCast(glMultiTexImage3DEXT, gl.missingFunctionPanic),
    MultiTexParameterIivEXT: glMultiTexParameterIivEXT = @ptrCast(glMultiTexParameterIivEXT, gl.missingFunctionPanic),
    MultiTexParameterIuivEXT: glMultiTexParameterIuivEXT = @ptrCast(glMultiTexParameterIuivEXT, gl.missingFunctionPanic),
    MultiTexParameterfEXT: glMultiTexParameterfEXT = @ptrCast(glMultiTexParameterfEXT, gl.missingFunctionPanic),
    MultiTexParameterfvEXT: glMultiTexParameterfvEXT = @ptrCast(glMultiTexParameterfvEXT, gl.missingFunctionPanic),
    MultiTexParameteriEXT: glMultiTexParameteriEXT = @ptrCast(glMultiTexParameteriEXT, gl.missingFunctionPanic),
    MultiTexParameterivEXT: glMultiTexParameterivEXT = @ptrCast(glMultiTexParameterivEXT, gl.missingFunctionPanic),
    MultiTexRenderbufferEXT: glMultiTexRenderbufferEXT = @ptrCast(glMultiTexRenderbufferEXT, gl.missingFunctionPanic),
    MultiTexSubImage1DEXT: glMultiTexSubImage1DEXT = @ptrCast(glMultiTexSubImage1DEXT, gl.missingFunctionPanic),
    MultiTexSubImage2DEXT: glMultiTexSubImage2DEXT = @ptrCast(glMultiTexSubImage2DEXT, gl.missingFunctionPanic),
    MultiTexSubImage3DEXT: glMultiTexSubImage3DEXT = @ptrCast(glMultiTexSubImage3DEXT, gl.missingFunctionPanic),
    MulticastBarrierNV: glMulticastBarrierNV = @ptrCast(glMulticastBarrierNV, gl.missingFunctionPanic),
    MulticastBlitFramebufferNV: glMulticastBlitFramebufferNV = @ptrCast(glMulticastBlitFramebufferNV, gl.missingFunctionPanic),
    MulticastBufferSubDataNV: glMulticastBufferSubDataNV = @ptrCast(glMulticastBufferSubDataNV, gl.missingFunctionPanic),
    MulticastCopyBufferSubDataNV: glMulticastCopyBufferSubDataNV = @ptrCast(glMulticastCopyBufferSubDataNV, gl.missingFunctionPanic),
    MulticastCopyImageSubDataNV: glMulticastCopyImageSubDataNV = @ptrCast(glMulticastCopyImageSubDataNV, gl.missingFunctionPanic),
    MulticastFramebufferSampleLocationsfvNV: glMulticastFramebufferSampleLocationsfvNV = @ptrCast(glMulticastFramebufferSampleLocationsfvNV, gl.missingFunctionPanic),
    MulticastGetQueryObjecti64vNV: glMulticastGetQueryObjecti64vNV = @ptrCast(glMulticastGetQueryObjecti64vNV, gl.missingFunctionPanic),
    MulticastGetQueryObjectivNV: glMulticastGetQueryObjectivNV = @ptrCast(glMulticastGetQueryObjectivNV, gl.missingFunctionPanic),
    MulticastGetQueryObjectui64vNV: glMulticastGetQueryObjectui64vNV = @ptrCast(glMulticastGetQueryObjectui64vNV, gl.missingFunctionPanic),
    MulticastGetQueryObjectuivNV: glMulticastGetQueryObjectuivNV = @ptrCast(glMulticastGetQueryObjectuivNV, gl.missingFunctionPanic),
    MulticastScissorArrayvNVX: glMulticastScissorArrayvNVX = @ptrCast(glMulticastScissorArrayvNVX, gl.missingFunctionPanic),
    MulticastViewportArrayvNVX: glMulticastViewportArrayvNVX = @ptrCast(glMulticastViewportArrayvNVX, gl.missingFunctionPanic),
    MulticastViewportPositionWScaleNVX: glMulticastViewportPositionWScaleNVX = @ptrCast(glMulticastViewportPositionWScaleNVX, gl.missingFunctionPanic),
    MulticastWaitSyncNV: glMulticastWaitSyncNV = @ptrCast(glMulticastWaitSyncNV, gl.missingFunctionPanic),
    NamedBufferAttachMemoryNV: glNamedBufferAttachMemoryNV = @ptrCast(glNamedBufferAttachMemoryNV, gl.missingFunctionPanic),
    NamedBufferData: glNamedBufferData = @ptrCast(glNamedBufferData, gl.missingFunctionPanic),
    NamedBufferDataEXT: glNamedBufferDataEXT = @ptrCast(glNamedBufferDataEXT, gl.missingFunctionPanic),
    NamedBufferPageCommitmentARB: glNamedBufferPageCommitmentARB = @ptrCast(glNamedBufferPageCommitmentARB, gl.missingFunctionPanic),
    NamedBufferPageCommitmentEXT: glNamedBufferPageCommitmentEXT = @ptrCast(glNamedBufferPageCommitmentEXT, gl.missingFunctionPanic),
    NamedBufferPageCommitmentMemNV: glNamedBufferPageCommitmentMemNV = @ptrCast(glNamedBufferPageCommitmentMemNV, gl.missingFunctionPanic),
    NamedBufferStorage: glNamedBufferStorage = @ptrCast(glNamedBufferStorage, gl.missingFunctionPanic),
    NamedBufferStorageEXT: glNamedBufferStorageEXT = @ptrCast(glNamedBufferStorageEXT, gl.missingFunctionPanic),
    NamedBufferStorageExternalEXT: glNamedBufferStorageExternalEXT = @ptrCast(glNamedBufferStorageExternalEXT, gl.missingFunctionPanic),
    NamedBufferStorageMemEXT: glNamedBufferStorageMemEXT = @ptrCast(glNamedBufferStorageMemEXT, gl.missingFunctionPanic),
    NamedBufferSubData: glNamedBufferSubData = @ptrCast(glNamedBufferSubData, gl.missingFunctionPanic),
    NamedBufferSubDataEXT: glNamedBufferSubDataEXT = @ptrCast(glNamedBufferSubDataEXT, gl.missingFunctionPanic),
    NamedCopyBufferSubDataEXT: glNamedCopyBufferSubDataEXT = @ptrCast(glNamedCopyBufferSubDataEXT, gl.missingFunctionPanic),
    NamedFramebufferDrawBuffer: glNamedFramebufferDrawBuffer = @ptrCast(glNamedFramebufferDrawBuffer, gl.missingFunctionPanic),
    NamedFramebufferDrawBuffers: glNamedFramebufferDrawBuffers = @ptrCast(glNamedFramebufferDrawBuffers, gl.missingFunctionPanic),
    NamedFramebufferParameteri: glNamedFramebufferParameteri = @ptrCast(glNamedFramebufferParameteri, gl.missingFunctionPanic),
    NamedFramebufferParameteriEXT: glNamedFramebufferParameteriEXT = @ptrCast(glNamedFramebufferParameteriEXT, gl.missingFunctionPanic),
    NamedFramebufferReadBuffer: glNamedFramebufferReadBuffer = @ptrCast(glNamedFramebufferReadBuffer, gl.missingFunctionPanic),
    NamedFramebufferRenderbuffer: glNamedFramebufferRenderbuffer = @ptrCast(glNamedFramebufferRenderbuffer, gl.missingFunctionPanic),
    NamedFramebufferRenderbufferEXT: glNamedFramebufferRenderbufferEXT = @ptrCast(glNamedFramebufferRenderbufferEXT, gl.missingFunctionPanic),
    NamedFramebufferSampleLocationsfvARB: glNamedFramebufferSampleLocationsfvARB = @ptrCast(glNamedFramebufferSampleLocationsfvARB, gl.missingFunctionPanic),
    NamedFramebufferSampleLocationsfvNV: glNamedFramebufferSampleLocationsfvNV = @ptrCast(glNamedFramebufferSampleLocationsfvNV, gl.missingFunctionPanic),
    NamedFramebufferSamplePositionsfvAMD: glNamedFramebufferSamplePositionsfvAMD = @ptrCast(glNamedFramebufferSamplePositionsfvAMD, gl.missingFunctionPanic),
    NamedFramebufferTexture: glNamedFramebufferTexture = @ptrCast(glNamedFramebufferTexture, gl.missingFunctionPanic),
    NamedFramebufferTexture1DEXT: glNamedFramebufferTexture1DEXT = @ptrCast(glNamedFramebufferTexture1DEXT, gl.missingFunctionPanic),
    NamedFramebufferTexture2DEXT: glNamedFramebufferTexture2DEXT = @ptrCast(glNamedFramebufferTexture2DEXT, gl.missingFunctionPanic),
    NamedFramebufferTexture3DEXT: glNamedFramebufferTexture3DEXT = @ptrCast(glNamedFramebufferTexture3DEXT, gl.missingFunctionPanic),
    NamedFramebufferTextureEXT: glNamedFramebufferTextureEXT = @ptrCast(glNamedFramebufferTextureEXT, gl.missingFunctionPanic),
    NamedFramebufferTextureFaceEXT: glNamedFramebufferTextureFaceEXT = @ptrCast(glNamedFramebufferTextureFaceEXT, gl.missingFunctionPanic),
    NamedFramebufferTextureLayer: glNamedFramebufferTextureLayer = @ptrCast(glNamedFramebufferTextureLayer, gl.missingFunctionPanic),
    NamedFramebufferTextureLayerEXT: glNamedFramebufferTextureLayerEXT = @ptrCast(glNamedFramebufferTextureLayerEXT, gl.missingFunctionPanic),
    NamedProgramLocalParameter4dEXT: glNamedProgramLocalParameter4dEXT = @ptrCast(glNamedProgramLocalParameter4dEXT, gl.missingFunctionPanic),
    NamedProgramLocalParameter4dvEXT: glNamedProgramLocalParameter4dvEXT = @ptrCast(glNamedProgramLocalParameter4dvEXT, gl.missingFunctionPanic),
    NamedProgramLocalParameter4fEXT: glNamedProgramLocalParameter4fEXT = @ptrCast(glNamedProgramLocalParameter4fEXT, gl.missingFunctionPanic),
    NamedProgramLocalParameter4fvEXT: glNamedProgramLocalParameter4fvEXT = @ptrCast(glNamedProgramLocalParameter4fvEXT, gl.missingFunctionPanic),
    NamedProgramLocalParameterI4iEXT: glNamedProgramLocalParameterI4iEXT = @ptrCast(glNamedProgramLocalParameterI4iEXT, gl.missingFunctionPanic),
    NamedProgramLocalParameterI4ivEXT: glNamedProgramLocalParameterI4ivEXT = @ptrCast(glNamedProgramLocalParameterI4ivEXT, gl.missingFunctionPanic),
    NamedProgramLocalParameterI4uiEXT: glNamedProgramLocalParameterI4uiEXT = @ptrCast(glNamedProgramLocalParameterI4uiEXT, gl.missingFunctionPanic),
    NamedProgramLocalParameterI4uivEXT: glNamedProgramLocalParameterI4uivEXT = @ptrCast(glNamedProgramLocalParameterI4uivEXT, gl.missingFunctionPanic),
    NamedProgramLocalParameters4fvEXT: glNamedProgramLocalParameters4fvEXT = @ptrCast(glNamedProgramLocalParameters4fvEXT, gl.missingFunctionPanic),
    NamedProgramLocalParametersI4ivEXT: glNamedProgramLocalParametersI4ivEXT = @ptrCast(glNamedProgramLocalParametersI4ivEXT, gl.missingFunctionPanic),
    NamedProgramLocalParametersI4uivEXT: glNamedProgramLocalParametersI4uivEXT = @ptrCast(glNamedProgramLocalParametersI4uivEXT, gl.missingFunctionPanic),
    NamedProgramStringEXT: glNamedProgramStringEXT = @ptrCast(glNamedProgramStringEXT, gl.missingFunctionPanic),
    NamedRenderbufferStorage: glNamedRenderbufferStorage = @ptrCast(glNamedRenderbufferStorage, gl.missingFunctionPanic),
    NamedRenderbufferStorageEXT: glNamedRenderbufferStorageEXT = @ptrCast(glNamedRenderbufferStorageEXT, gl.missingFunctionPanic),
    NamedRenderbufferStorageMultisample: glNamedRenderbufferStorageMultisample = @ptrCast(glNamedRenderbufferStorageMultisample, gl.missingFunctionPanic),
    NamedRenderbufferStorageMultisampleAdvancedAMD: glNamedRenderbufferStorageMultisampleAdvancedAMD = @ptrCast(glNamedRenderbufferStorageMultisampleAdvancedAMD, gl.missingFunctionPanic),
    NamedRenderbufferStorageMultisampleCoverageEXT: glNamedRenderbufferStorageMultisampleCoverageEXT = @ptrCast(glNamedRenderbufferStorageMultisampleCoverageEXT, gl.missingFunctionPanic),
    NamedRenderbufferStorageMultisampleEXT: glNamedRenderbufferStorageMultisampleEXT = @ptrCast(glNamedRenderbufferStorageMultisampleEXT, gl.missingFunctionPanic),
    NamedStringARB: glNamedStringARB = @ptrCast(glNamedStringARB, gl.missingFunctionPanic),
    NewObjectBufferATI: glNewObjectBufferATI = @ptrCast(glNewObjectBufferATI, gl.missingFunctionPanic),
    Normal3fVertex3fSUN: glNormal3fVertex3fSUN = @ptrCast(glNormal3fVertex3fSUN, gl.missingFunctionPanic),
    Normal3fVertex3fvSUN: glNormal3fVertex3fvSUN = @ptrCast(glNormal3fVertex3fvSUN, gl.missingFunctionPanic),
    Normal3hNV: glNormal3hNV = @ptrCast(glNormal3hNV, gl.missingFunctionPanic),
    Normal3hvNV: glNormal3hvNV = @ptrCast(glNormal3hvNV, gl.missingFunctionPanic),
    Normal3xOES: glNormal3xOES = @ptrCast(glNormal3xOES, gl.missingFunctionPanic),
    Normal3xvOES: glNormal3xvOES = @ptrCast(glNormal3xvOES, gl.missingFunctionPanic),
    NormalFormatNV: glNormalFormatNV = @ptrCast(glNormalFormatNV, gl.missingFunctionPanic),
    NormalPointerEXT: glNormalPointerEXT = @ptrCast(glNormalPointerEXT, gl.missingFunctionPanic),
    NormalPointerListIBM: glNormalPointerListIBM = @ptrCast(glNormalPointerListIBM, gl.missingFunctionPanic),
    NormalPointervINTEL: glNormalPointervINTEL = @ptrCast(glNormalPointervINTEL, gl.missingFunctionPanic),
    NormalStream3bATI: glNormalStream3bATI = @ptrCast(glNormalStream3bATI, gl.missingFunctionPanic),
    NormalStream3bvATI: glNormalStream3bvATI = @ptrCast(glNormalStream3bvATI, gl.missingFunctionPanic),
    NormalStream3dATI: glNormalStream3dATI = @ptrCast(glNormalStream3dATI, gl.missingFunctionPanic),
    NormalStream3dvATI: glNormalStream3dvATI = @ptrCast(glNormalStream3dvATI, gl.missingFunctionPanic),
    NormalStream3fATI: glNormalStream3fATI = @ptrCast(glNormalStream3fATI, gl.missingFunctionPanic),
    NormalStream3fvATI: glNormalStream3fvATI = @ptrCast(glNormalStream3fvATI, gl.missingFunctionPanic),
    NormalStream3iATI: glNormalStream3iATI = @ptrCast(glNormalStream3iATI, gl.missingFunctionPanic),
    NormalStream3ivATI: glNormalStream3ivATI = @ptrCast(glNormalStream3ivATI, gl.missingFunctionPanic),
    NormalStream3sATI: glNormalStream3sATI = @ptrCast(glNormalStream3sATI, gl.missingFunctionPanic),
    NormalStream3svATI: glNormalStream3svATI = @ptrCast(glNormalStream3svATI, gl.missingFunctionPanic),
    ObjectLabel: glObjectLabel = @ptrCast(glObjectLabel, gl.missingFunctionPanic),
    ObjectPtrLabel: glObjectPtrLabel = @ptrCast(glObjectPtrLabel, gl.missingFunctionPanic),
    ObjectPurgeableAPPLE: glObjectPurgeableAPPLE = @ptrCast(glObjectPurgeableAPPLE, gl.missingFunctionPanic),
    ObjectUnpurgeableAPPLE: glObjectUnpurgeableAPPLE = @ptrCast(glObjectUnpurgeableAPPLE, gl.missingFunctionPanic),
    OrthofOES: glOrthofOES = @ptrCast(glOrthofOES, gl.missingFunctionPanic),
    OrthoxOES: glOrthoxOES = @ptrCast(glOrthoxOES, gl.missingFunctionPanic),
    PNTrianglesfATI: glPNTrianglesfATI = @ptrCast(glPNTrianglesfATI, gl.missingFunctionPanic),
    PNTrianglesiATI: glPNTrianglesiATI = @ptrCast(glPNTrianglesiATI, gl.missingFunctionPanic),
    PassTexCoordATI: glPassTexCoordATI = @ptrCast(glPassTexCoordATI, gl.missingFunctionPanic),
    PassThroughxOES: glPassThroughxOES = @ptrCast(glPassThroughxOES, gl.missingFunctionPanic),
    PatchParameterfv: glPatchParameterfv = @ptrCast(glPatchParameterfv, gl.missingFunctionPanic),
    PatchParameteri: glPatchParameteri = @ptrCast(glPatchParameteri, gl.missingFunctionPanic),
    PathCommandsNV: glPathCommandsNV = @ptrCast(glPathCommandsNV, gl.missingFunctionPanic),
    PathCoordsNV: glPathCoordsNV = @ptrCast(glPathCoordsNV, gl.missingFunctionPanic),
    PathCoverDepthFuncNV: glPathCoverDepthFuncNV = @ptrCast(glPathCoverDepthFuncNV, gl.missingFunctionPanic),
    PathDashArrayNV: glPathDashArrayNV = @ptrCast(glPathDashArrayNV, gl.missingFunctionPanic),
    PathGlyphIndexArrayNV: glPathGlyphIndexArrayNV = @ptrCast(glPathGlyphIndexArrayNV, gl.missingFunctionPanic),
    PathGlyphIndexRangeNV: glPathGlyphIndexRangeNV = @ptrCast(glPathGlyphIndexRangeNV, gl.missingFunctionPanic),
    PathGlyphRangeNV: glPathGlyphRangeNV = @ptrCast(glPathGlyphRangeNV, gl.missingFunctionPanic),
    PathGlyphsNV: glPathGlyphsNV = @ptrCast(glPathGlyphsNV, gl.missingFunctionPanic),
    PathMemoryGlyphIndexArrayNV: glPathMemoryGlyphIndexArrayNV = @ptrCast(glPathMemoryGlyphIndexArrayNV, gl.missingFunctionPanic),
    PathParameterfNV: glPathParameterfNV = @ptrCast(glPathParameterfNV, gl.missingFunctionPanic),
    PathParameterfvNV: glPathParameterfvNV = @ptrCast(glPathParameterfvNV, gl.missingFunctionPanic),
    PathParameteriNV: glPathParameteriNV = @ptrCast(glPathParameteriNV, gl.missingFunctionPanic),
    PathParameterivNV: glPathParameterivNV = @ptrCast(glPathParameterivNV, gl.missingFunctionPanic),
    PathStencilDepthOffsetNV: glPathStencilDepthOffsetNV = @ptrCast(glPathStencilDepthOffsetNV, gl.missingFunctionPanic),
    PathStencilFuncNV: glPathStencilFuncNV = @ptrCast(glPathStencilFuncNV, gl.missingFunctionPanic),
    PathStringNV: glPathStringNV = @ptrCast(glPathStringNV, gl.missingFunctionPanic),
    PathSubCommandsNV: glPathSubCommandsNV = @ptrCast(glPathSubCommandsNV, gl.missingFunctionPanic),
    PathSubCoordsNV: glPathSubCoordsNV = @ptrCast(glPathSubCoordsNV, gl.missingFunctionPanic),
    PauseTransformFeedback: glPauseTransformFeedback = @ptrCast(glPauseTransformFeedback, gl.missingFunctionPanic),
    PauseTransformFeedbackNV: glPauseTransformFeedbackNV = @ptrCast(glPauseTransformFeedbackNV, gl.missingFunctionPanic),
    PixelDataRangeNV: glPixelDataRangeNV = @ptrCast(glPixelDataRangeNV, gl.missingFunctionPanic),
    PixelMapx: glPixelMapx = @ptrCast(glPixelMapx, gl.missingFunctionPanic),
    PixelStoref: glPixelStoref = @ptrCast(glPixelStoref, gl.missingFunctionPanic),
    PixelStorei: glPixelStorei = @ptrCast(glPixelStorei, gl.missingFunctionPanic),
    PixelStorex: glPixelStorex = @ptrCast(glPixelStorex, gl.missingFunctionPanic),
    PixelTexGenParameterfSGIS: glPixelTexGenParameterfSGIS = @ptrCast(glPixelTexGenParameterfSGIS, gl.missingFunctionPanic),
    PixelTexGenParameterfvSGIS: glPixelTexGenParameterfvSGIS = @ptrCast(glPixelTexGenParameterfvSGIS, gl.missingFunctionPanic),
    PixelTexGenParameteriSGIS: glPixelTexGenParameteriSGIS = @ptrCast(glPixelTexGenParameteriSGIS, gl.missingFunctionPanic),
    PixelTexGenParameterivSGIS: glPixelTexGenParameterivSGIS = @ptrCast(glPixelTexGenParameterivSGIS, gl.missingFunctionPanic),
    PixelTexGenSGIX: glPixelTexGenSGIX = @ptrCast(glPixelTexGenSGIX, gl.missingFunctionPanic),
    PixelTransferxOES: glPixelTransferxOES = @ptrCast(glPixelTransferxOES, gl.missingFunctionPanic),
    PixelTransformParameterfEXT: glPixelTransformParameterfEXT = @ptrCast(glPixelTransformParameterfEXT, gl.missingFunctionPanic),
    PixelTransformParameterfvEXT: glPixelTransformParameterfvEXT = @ptrCast(glPixelTransformParameterfvEXT, gl.missingFunctionPanic),
    PixelTransformParameteriEXT: glPixelTransformParameteriEXT = @ptrCast(glPixelTransformParameteriEXT, gl.missingFunctionPanic),
    PixelTransformParameterivEXT: glPixelTransformParameterivEXT = @ptrCast(glPixelTransformParameterivEXT, gl.missingFunctionPanic),
    PixelZoomxOES: glPixelZoomxOES = @ptrCast(glPixelZoomxOES, gl.missingFunctionPanic),
    PointAlongPathNV: glPointAlongPathNV = @ptrCast(glPointAlongPathNV, gl.missingFunctionPanic),
    PointParameterf: glPointParameterf = @ptrCast(glPointParameterf, gl.missingFunctionPanic),
    PointParameterfARB: glPointParameterfARB = @ptrCast(glPointParameterfARB, gl.missingFunctionPanic),
    PointParameterfEXT: glPointParameterfEXT = @ptrCast(glPointParameterfEXT, gl.missingFunctionPanic),
    PointParameterfSGIS: glPointParameterfSGIS = @ptrCast(glPointParameterfSGIS, gl.missingFunctionPanic),
    PointParameterfv: glPointParameterfv = @ptrCast(glPointParameterfv, gl.missingFunctionPanic),
    PointParameterfvARB: glPointParameterfvARB = @ptrCast(glPointParameterfvARB, gl.missingFunctionPanic),
    PointParameterfvEXT: glPointParameterfvEXT = @ptrCast(glPointParameterfvEXT, gl.missingFunctionPanic),
    PointParameterfvSGIS: glPointParameterfvSGIS = @ptrCast(glPointParameterfvSGIS, gl.missingFunctionPanic),
    PointParameteri: glPointParameteri = @ptrCast(glPointParameteri, gl.missingFunctionPanic),
    PointParameteriNV: glPointParameteriNV = @ptrCast(glPointParameteriNV, gl.missingFunctionPanic),
    PointParameteriv: glPointParameteriv = @ptrCast(glPointParameteriv, gl.missingFunctionPanic),
    PointParameterivNV: glPointParameterivNV = @ptrCast(glPointParameterivNV, gl.missingFunctionPanic),
    PointParameterxvOES: glPointParameterxvOES = @ptrCast(glPointParameterxvOES, gl.missingFunctionPanic),
    PointSize: glPointSize = @ptrCast(glPointSize, gl.missingFunctionPanic),
    PointSizexOES: glPointSizexOES = @ptrCast(glPointSizexOES, gl.missingFunctionPanic),
    PollAsyncSGIX: glPollAsyncSGIX = @ptrCast(glPollAsyncSGIX, gl.missingFunctionPanic),
    PollInstrumentsSGIX: glPollInstrumentsSGIX = @ptrCast(glPollInstrumentsSGIX, gl.missingFunctionPanic),
    PolygonMode: glPolygonMode = @ptrCast(glPolygonMode, gl.missingFunctionPanic),
    PolygonOffset: glPolygonOffset = @ptrCast(glPolygonOffset, gl.missingFunctionPanic),
    PolygonOffsetClamp: glPolygonOffsetClamp = @ptrCast(glPolygonOffsetClamp, gl.missingFunctionPanic),
    PolygonOffsetClampEXT: glPolygonOffsetClampEXT = @ptrCast(glPolygonOffsetClampEXT, gl.missingFunctionPanic),
    PolygonOffsetEXT: glPolygonOffsetEXT = @ptrCast(glPolygonOffsetEXT, gl.missingFunctionPanic),
    PolygonOffsetxOES: glPolygonOffsetxOES = @ptrCast(glPolygonOffsetxOES, gl.missingFunctionPanic),
    PopDebugGroup: glPopDebugGroup = @ptrCast(glPopDebugGroup, gl.missingFunctionPanic),
    PopGroupMarkerEXT: glPopGroupMarkerEXT = @ptrCast(glPopGroupMarkerEXT, gl.missingFunctionPanic),
    PresentFrameDualFillNV: glPresentFrameDualFillNV = @ptrCast(glPresentFrameDualFillNV, gl.missingFunctionPanic),
    PresentFrameKeyedNV: glPresentFrameKeyedNV = @ptrCast(glPresentFrameKeyedNV, gl.missingFunctionPanic),
    PrimitiveBoundingBoxARB: glPrimitiveBoundingBoxARB = @ptrCast(glPrimitiveBoundingBoxARB, gl.missingFunctionPanic),
    PrimitiveRestartIndex: glPrimitiveRestartIndex = @ptrCast(glPrimitiveRestartIndex, gl.missingFunctionPanic),
    PrimitiveRestartIndexNV: glPrimitiveRestartIndexNV = @ptrCast(glPrimitiveRestartIndexNV, gl.missingFunctionPanic),
    PrimitiveRestartNV: glPrimitiveRestartNV = @ptrCast(glPrimitiveRestartNV, gl.missingFunctionPanic),
    PrioritizeTexturesEXT: glPrioritizeTexturesEXT = @ptrCast(glPrioritizeTexturesEXT, gl.missingFunctionPanic),
    PrioritizeTexturesxOES: glPrioritizeTexturesxOES = @ptrCast(glPrioritizeTexturesxOES, gl.missingFunctionPanic),
    ProgramBinary: glProgramBinary = @ptrCast(glProgramBinary, gl.missingFunctionPanic),
    ProgramBufferParametersIivNV: glProgramBufferParametersIivNV = @ptrCast(glProgramBufferParametersIivNV, gl.missingFunctionPanic),
    ProgramBufferParametersIuivNV: glProgramBufferParametersIuivNV = @ptrCast(glProgramBufferParametersIuivNV, gl.missingFunctionPanic),
    ProgramBufferParametersfvNV: glProgramBufferParametersfvNV = @ptrCast(glProgramBufferParametersfvNV, gl.missingFunctionPanic),
    ProgramEnvParameter4dARB: glProgramEnvParameter4dARB = @ptrCast(glProgramEnvParameter4dARB, gl.missingFunctionPanic),
    ProgramEnvParameter4dvARB: glProgramEnvParameter4dvARB = @ptrCast(glProgramEnvParameter4dvARB, gl.missingFunctionPanic),
    ProgramEnvParameter4fARB: glProgramEnvParameter4fARB = @ptrCast(glProgramEnvParameter4fARB, gl.missingFunctionPanic),
    ProgramEnvParameter4fvARB: glProgramEnvParameter4fvARB = @ptrCast(glProgramEnvParameter4fvARB, gl.missingFunctionPanic),
    ProgramEnvParameterI4iNV: glProgramEnvParameterI4iNV = @ptrCast(glProgramEnvParameterI4iNV, gl.missingFunctionPanic),
    ProgramEnvParameterI4ivNV: glProgramEnvParameterI4ivNV = @ptrCast(glProgramEnvParameterI4ivNV, gl.missingFunctionPanic),
    ProgramEnvParameterI4uiNV: glProgramEnvParameterI4uiNV = @ptrCast(glProgramEnvParameterI4uiNV, gl.missingFunctionPanic),
    ProgramEnvParameterI4uivNV: glProgramEnvParameterI4uivNV = @ptrCast(glProgramEnvParameterI4uivNV, gl.missingFunctionPanic),
    ProgramEnvParameters4fvEXT: glProgramEnvParameters4fvEXT = @ptrCast(glProgramEnvParameters4fvEXT, gl.missingFunctionPanic),
    ProgramEnvParametersI4ivNV: glProgramEnvParametersI4ivNV = @ptrCast(glProgramEnvParametersI4ivNV, gl.missingFunctionPanic),
    ProgramEnvParametersI4uivNV: glProgramEnvParametersI4uivNV = @ptrCast(glProgramEnvParametersI4uivNV, gl.missingFunctionPanic),
    ProgramLocalParameter4dARB: glProgramLocalParameter4dARB = @ptrCast(glProgramLocalParameter4dARB, gl.missingFunctionPanic),
    ProgramLocalParameter4dvARB: glProgramLocalParameter4dvARB = @ptrCast(glProgramLocalParameter4dvARB, gl.missingFunctionPanic),
    ProgramLocalParameter4fARB: glProgramLocalParameter4fARB = @ptrCast(glProgramLocalParameter4fARB, gl.missingFunctionPanic),
    ProgramLocalParameter4fvARB: glProgramLocalParameter4fvARB = @ptrCast(glProgramLocalParameter4fvARB, gl.missingFunctionPanic),
    ProgramLocalParameterI4iNV: glProgramLocalParameterI4iNV = @ptrCast(glProgramLocalParameterI4iNV, gl.missingFunctionPanic),
    ProgramLocalParameterI4ivNV: glProgramLocalParameterI4ivNV = @ptrCast(glProgramLocalParameterI4ivNV, gl.missingFunctionPanic),
    ProgramLocalParameterI4uiNV: glProgramLocalParameterI4uiNV = @ptrCast(glProgramLocalParameterI4uiNV, gl.missingFunctionPanic),
    ProgramLocalParameterI4uivNV: glProgramLocalParameterI4uivNV = @ptrCast(glProgramLocalParameterI4uivNV, gl.missingFunctionPanic),
    ProgramLocalParameters4fvEXT: glProgramLocalParameters4fvEXT = @ptrCast(glProgramLocalParameters4fvEXT, gl.missingFunctionPanic),
    ProgramLocalParametersI4ivNV: glProgramLocalParametersI4ivNV = @ptrCast(glProgramLocalParametersI4ivNV, gl.missingFunctionPanic),
    ProgramLocalParametersI4uivNV: glProgramLocalParametersI4uivNV = @ptrCast(glProgramLocalParametersI4uivNV, gl.missingFunctionPanic),
    ProgramNamedParameter4dNV: glProgramNamedParameter4dNV = @ptrCast(glProgramNamedParameter4dNV, gl.missingFunctionPanic),
    ProgramNamedParameter4dvNV: glProgramNamedParameter4dvNV = @ptrCast(glProgramNamedParameter4dvNV, gl.missingFunctionPanic),
    ProgramNamedParameter4fNV: glProgramNamedParameter4fNV = @ptrCast(glProgramNamedParameter4fNV, gl.missingFunctionPanic),
    ProgramNamedParameter4fvNV: glProgramNamedParameter4fvNV = @ptrCast(glProgramNamedParameter4fvNV, gl.missingFunctionPanic),
    ProgramParameter4dNV: glProgramParameter4dNV = @ptrCast(glProgramParameter4dNV, gl.missingFunctionPanic),
    ProgramParameter4dvNV: glProgramParameter4dvNV = @ptrCast(glProgramParameter4dvNV, gl.missingFunctionPanic),
    ProgramParameter4fNV: glProgramParameter4fNV = @ptrCast(glProgramParameter4fNV, gl.missingFunctionPanic),
    ProgramParameter4fvNV: glProgramParameter4fvNV = @ptrCast(glProgramParameter4fvNV, gl.missingFunctionPanic),
    ProgramParameteri: glProgramParameteri = @ptrCast(glProgramParameteri, gl.missingFunctionPanic),
    ProgramParameteriARB: glProgramParameteriARB = @ptrCast(glProgramParameteriARB, gl.missingFunctionPanic),
    ProgramParameteriEXT: glProgramParameteriEXT = @ptrCast(glProgramParameteriEXT, gl.missingFunctionPanic),
    ProgramParameters4dvNV: glProgramParameters4dvNV = @ptrCast(glProgramParameters4dvNV, gl.missingFunctionPanic),
    ProgramParameters4fvNV: glProgramParameters4fvNV = @ptrCast(glProgramParameters4fvNV, gl.missingFunctionPanic),
    ProgramPathFragmentInputGenNV: glProgramPathFragmentInputGenNV = @ptrCast(glProgramPathFragmentInputGenNV, gl.missingFunctionPanic),
    ProgramStringARB: glProgramStringARB = @ptrCast(glProgramStringARB, gl.missingFunctionPanic),
    ProgramSubroutineParametersuivNV: glProgramSubroutineParametersuivNV = @ptrCast(glProgramSubroutineParametersuivNV, gl.missingFunctionPanic),
    ProgramUniform1d: glProgramUniform1d = @ptrCast(glProgramUniform1d, gl.missingFunctionPanic),
    ProgramUniform1dEXT: glProgramUniform1dEXT = @ptrCast(glProgramUniform1dEXT, gl.missingFunctionPanic),
    ProgramUniform1dv: glProgramUniform1dv = @ptrCast(glProgramUniform1dv, gl.missingFunctionPanic),
    ProgramUniform1dvEXT: glProgramUniform1dvEXT = @ptrCast(glProgramUniform1dvEXT, gl.missingFunctionPanic),
    ProgramUniform1f: glProgramUniform1f = @ptrCast(glProgramUniform1f, gl.missingFunctionPanic),
    ProgramUniform1fEXT: glProgramUniform1fEXT = @ptrCast(glProgramUniform1fEXT, gl.missingFunctionPanic),
    ProgramUniform1fv: glProgramUniform1fv = @ptrCast(glProgramUniform1fv, gl.missingFunctionPanic),
    ProgramUniform1fvEXT: glProgramUniform1fvEXT = @ptrCast(glProgramUniform1fvEXT, gl.missingFunctionPanic),
    ProgramUniform1i: glProgramUniform1i = @ptrCast(glProgramUniform1i, gl.missingFunctionPanic),
    ProgramUniform1i64ARB: glProgramUniform1i64ARB = @ptrCast(glProgramUniform1i64ARB, gl.missingFunctionPanic),
    ProgramUniform1i64NV: glProgramUniform1i64NV = @ptrCast(glProgramUniform1i64NV, gl.missingFunctionPanic),
    ProgramUniform1i64vARB: glProgramUniform1i64vARB = @ptrCast(glProgramUniform1i64vARB, gl.missingFunctionPanic),
    ProgramUniform1i64vNV: glProgramUniform1i64vNV = @ptrCast(glProgramUniform1i64vNV, gl.missingFunctionPanic),
    ProgramUniform1iEXT: glProgramUniform1iEXT = @ptrCast(glProgramUniform1iEXT, gl.missingFunctionPanic),
    ProgramUniform1iv: glProgramUniform1iv = @ptrCast(glProgramUniform1iv, gl.missingFunctionPanic),
    ProgramUniform1ivEXT: glProgramUniform1ivEXT = @ptrCast(glProgramUniform1ivEXT, gl.missingFunctionPanic),
    ProgramUniform1ui: glProgramUniform1ui = @ptrCast(glProgramUniform1ui, gl.missingFunctionPanic),
    ProgramUniform1ui64ARB: glProgramUniform1ui64ARB = @ptrCast(glProgramUniform1ui64ARB, gl.missingFunctionPanic),
    ProgramUniform1ui64NV: glProgramUniform1ui64NV = @ptrCast(glProgramUniform1ui64NV, gl.missingFunctionPanic),
    ProgramUniform1ui64vARB: glProgramUniform1ui64vARB = @ptrCast(glProgramUniform1ui64vARB, gl.missingFunctionPanic),
    ProgramUniform1ui64vNV: glProgramUniform1ui64vNV = @ptrCast(glProgramUniform1ui64vNV, gl.missingFunctionPanic),
    ProgramUniform1uiEXT: glProgramUniform1uiEXT = @ptrCast(glProgramUniform1uiEXT, gl.missingFunctionPanic),
    ProgramUniform1uiv: glProgramUniform1uiv = @ptrCast(glProgramUniform1uiv, gl.missingFunctionPanic),
    ProgramUniform1uivEXT: glProgramUniform1uivEXT = @ptrCast(glProgramUniform1uivEXT, gl.missingFunctionPanic),
    ProgramUniform2d: glProgramUniform2d = @ptrCast(glProgramUniform2d, gl.missingFunctionPanic),
    ProgramUniform2dEXT: glProgramUniform2dEXT = @ptrCast(glProgramUniform2dEXT, gl.missingFunctionPanic),
    ProgramUniform2dv: glProgramUniform2dv = @ptrCast(glProgramUniform2dv, gl.missingFunctionPanic),
    ProgramUniform2dvEXT: glProgramUniform2dvEXT = @ptrCast(glProgramUniform2dvEXT, gl.missingFunctionPanic),
    ProgramUniform2f: glProgramUniform2f = @ptrCast(glProgramUniform2f, gl.missingFunctionPanic),
    ProgramUniform2fEXT: glProgramUniform2fEXT = @ptrCast(glProgramUniform2fEXT, gl.missingFunctionPanic),
    ProgramUniform2fv: glProgramUniform2fv = @ptrCast(glProgramUniform2fv, gl.missingFunctionPanic),
    ProgramUniform2fvEXT: glProgramUniform2fvEXT = @ptrCast(glProgramUniform2fvEXT, gl.missingFunctionPanic),
    ProgramUniform2i: glProgramUniform2i = @ptrCast(glProgramUniform2i, gl.missingFunctionPanic),
    ProgramUniform2i64ARB: glProgramUniform2i64ARB = @ptrCast(glProgramUniform2i64ARB, gl.missingFunctionPanic),
    ProgramUniform2i64NV: glProgramUniform2i64NV = @ptrCast(glProgramUniform2i64NV, gl.missingFunctionPanic),
    ProgramUniform2i64vARB: glProgramUniform2i64vARB = @ptrCast(glProgramUniform2i64vARB, gl.missingFunctionPanic),
    ProgramUniform2i64vNV: glProgramUniform2i64vNV = @ptrCast(glProgramUniform2i64vNV, gl.missingFunctionPanic),
    ProgramUniform2iEXT: glProgramUniform2iEXT = @ptrCast(glProgramUniform2iEXT, gl.missingFunctionPanic),
    ProgramUniform2iv: glProgramUniform2iv = @ptrCast(glProgramUniform2iv, gl.missingFunctionPanic),
    ProgramUniform2ivEXT: glProgramUniform2ivEXT = @ptrCast(glProgramUniform2ivEXT, gl.missingFunctionPanic),
    ProgramUniform2ui: glProgramUniform2ui = @ptrCast(glProgramUniform2ui, gl.missingFunctionPanic),
    ProgramUniform2ui64ARB: glProgramUniform2ui64ARB = @ptrCast(glProgramUniform2ui64ARB, gl.missingFunctionPanic),
    ProgramUniform2ui64NV: glProgramUniform2ui64NV = @ptrCast(glProgramUniform2ui64NV, gl.missingFunctionPanic),
    ProgramUniform2ui64vARB: glProgramUniform2ui64vARB = @ptrCast(glProgramUniform2ui64vARB, gl.missingFunctionPanic),
    ProgramUniform2ui64vNV: glProgramUniform2ui64vNV = @ptrCast(glProgramUniform2ui64vNV, gl.missingFunctionPanic),
    ProgramUniform2uiEXT: glProgramUniform2uiEXT = @ptrCast(glProgramUniform2uiEXT, gl.missingFunctionPanic),
    ProgramUniform2uiv: glProgramUniform2uiv = @ptrCast(glProgramUniform2uiv, gl.missingFunctionPanic),
    ProgramUniform2uivEXT: glProgramUniform2uivEXT = @ptrCast(glProgramUniform2uivEXT, gl.missingFunctionPanic),
    ProgramUniform3d: glProgramUniform3d = @ptrCast(glProgramUniform3d, gl.missingFunctionPanic),
    ProgramUniform3dEXT: glProgramUniform3dEXT = @ptrCast(glProgramUniform3dEXT, gl.missingFunctionPanic),
    ProgramUniform3dv: glProgramUniform3dv = @ptrCast(glProgramUniform3dv, gl.missingFunctionPanic),
    ProgramUniform3dvEXT: glProgramUniform3dvEXT = @ptrCast(glProgramUniform3dvEXT, gl.missingFunctionPanic),
    ProgramUniform3f: glProgramUniform3f = @ptrCast(glProgramUniform3f, gl.missingFunctionPanic),
    ProgramUniform3fEXT: glProgramUniform3fEXT = @ptrCast(glProgramUniform3fEXT, gl.missingFunctionPanic),
    ProgramUniform3fv: glProgramUniform3fv = @ptrCast(glProgramUniform3fv, gl.missingFunctionPanic),
    ProgramUniform3fvEXT: glProgramUniform3fvEXT = @ptrCast(glProgramUniform3fvEXT, gl.missingFunctionPanic),
    ProgramUniform3i: glProgramUniform3i = @ptrCast(glProgramUniform3i, gl.missingFunctionPanic),
    ProgramUniform3i64ARB: glProgramUniform3i64ARB = @ptrCast(glProgramUniform3i64ARB, gl.missingFunctionPanic),
    ProgramUniform3i64NV: glProgramUniform3i64NV = @ptrCast(glProgramUniform3i64NV, gl.missingFunctionPanic),
    ProgramUniform3i64vARB: glProgramUniform3i64vARB = @ptrCast(glProgramUniform3i64vARB, gl.missingFunctionPanic),
    ProgramUniform3i64vNV: glProgramUniform3i64vNV = @ptrCast(glProgramUniform3i64vNV, gl.missingFunctionPanic),
    ProgramUniform3iEXT: glProgramUniform3iEXT = @ptrCast(glProgramUniform3iEXT, gl.missingFunctionPanic),
    ProgramUniform3iv: glProgramUniform3iv = @ptrCast(glProgramUniform3iv, gl.missingFunctionPanic),
    ProgramUniform3ivEXT: glProgramUniform3ivEXT = @ptrCast(glProgramUniform3ivEXT, gl.missingFunctionPanic),
    ProgramUniform3ui: glProgramUniform3ui = @ptrCast(glProgramUniform3ui, gl.missingFunctionPanic),
    ProgramUniform3ui64ARB: glProgramUniform3ui64ARB = @ptrCast(glProgramUniform3ui64ARB, gl.missingFunctionPanic),
    ProgramUniform3ui64NV: glProgramUniform3ui64NV = @ptrCast(glProgramUniform3ui64NV, gl.missingFunctionPanic),
    ProgramUniform3ui64vARB: glProgramUniform3ui64vARB = @ptrCast(glProgramUniform3ui64vARB, gl.missingFunctionPanic),
    ProgramUniform3ui64vNV: glProgramUniform3ui64vNV = @ptrCast(glProgramUniform3ui64vNV, gl.missingFunctionPanic),
    ProgramUniform3uiEXT: glProgramUniform3uiEXT = @ptrCast(glProgramUniform3uiEXT, gl.missingFunctionPanic),
    ProgramUniform3uiv: glProgramUniform3uiv = @ptrCast(glProgramUniform3uiv, gl.missingFunctionPanic),
    ProgramUniform3uivEXT: glProgramUniform3uivEXT = @ptrCast(glProgramUniform3uivEXT, gl.missingFunctionPanic),
    ProgramUniform4d: glProgramUniform4d = @ptrCast(glProgramUniform4d, gl.missingFunctionPanic),
    ProgramUniform4dEXT: glProgramUniform4dEXT = @ptrCast(glProgramUniform4dEXT, gl.missingFunctionPanic),
    ProgramUniform4dv: glProgramUniform4dv = @ptrCast(glProgramUniform4dv, gl.missingFunctionPanic),
    ProgramUniform4dvEXT: glProgramUniform4dvEXT = @ptrCast(glProgramUniform4dvEXT, gl.missingFunctionPanic),
    ProgramUniform4f: glProgramUniform4f = @ptrCast(glProgramUniform4f, gl.missingFunctionPanic),
    ProgramUniform4fEXT: glProgramUniform4fEXT = @ptrCast(glProgramUniform4fEXT, gl.missingFunctionPanic),
    ProgramUniform4fv: glProgramUniform4fv = @ptrCast(glProgramUniform4fv, gl.missingFunctionPanic),
    ProgramUniform4fvEXT: glProgramUniform4fvEXT = @ptrCast(glProgramUniform4fvEXT, gl.missingFunctionPanic),
    ProgramUniform4i: glProgramUniform4i = @ptrCast(glProgramUniform4i, gl.missingFunctionPanic),
    ProgramUniform4i64ARB: glProgramUniform4i64ARB = @ptrCast(glProgramUniform4i64ARB, gl.missingFunctionPanic),
    ProgramUniform4i64NV: glProgramUniform4i64NV = @ptrCast(glProgramUniform4i64NV, gl.missingFunctionPanic),
    ProgramUniform4i64vARB: glProgramUniform4i64vARB = @ptrCast(glProgramUniform4i64vARB, gl.missingFunctionPanic),
    ProgramUniform4i64vNV: glProgramUniform4i64vNV = @ptrCast(glProgramUniform4i64vNV, gl.missingFunctionPanic),
    ProgramUniform4iEXT: glProgramUniform4iEXT = @ptrCast(glProgramUniform4iEXT, gl.missingFunctionPanic),
    ProgramUniform4iv: glProgramUniform4iv = @ptrCast(glProgramUniform4iv, gl.missingFunctionPanic),
    ProgramUniform4ivEXT: glProgramUniform4ivEXT = @ptrCast(glProgramUniform4ivEXT, gl.missingFunctionPanic),
    ProgramUniform4ui: glProgramUniform4ui = @ptrCast(glProgramUniform4ui, gl.missingFunctionPanic),
    ProgramUniform4ui64ARB: glProgramUniform4ui64ARB = @ptrCast(glProgramUniform4ui64ARB, gl.missingFunctionPanic),
    ProgramUniform4ui64NV: glProgramUniform4ui64NV = @ptrCast(glProgramUniform4ui64NV, gl.missingFunctionPanic),
    ProgramUniform4ui64vARB: glProgramUniform4ui64vARB = @ptrCast(glProgramUniform4ui64vARB, gl.missingFunctionPanic),
    ProgramUniform4ui64vNV: glProgramUniform4ui64vNV = @ptrCast(glProgramUniform4ui64vNV, gl.missingFunctionPanic),
    ProgramUniform4uiEXT: glProgramUniform4uiEXT = @ptrCast(glProgramUniform4uiEXT, gl.missingFunctionPanic),
    ProgramUniform4uiv: glProgramUniform4uiv = @ptrCast(glProgramUniform4uiv, gl.missingFunctionPanic),
    ProgramUniform4uivEXT: glProgramUniform4uivEXT = @ptrCast(glProgramUniform4uivEXT, gl.missingFunctionPanic),
    ProgramUniformHandleui64ARB: glProgramUniformHandleui64ARB = @ptrCast(glProgramUniformHandleui64ARB, gl.missingFunctionPanic),
    ProgramUniformHandleui64NV: glProgramUniformHandleui64NV = @ptrCast(glProgramUniformHandleui64NV, gl.missingFunctionPanic),
    ProgramUniformHandleui64vARB: glProgramUniformHandleui64vARB = @ptrCast(glProgramUniformHandleui64vARB, gl.missingFunctionPanic),
    ProgramUniformHandleui64vNV: glProgramUniformHandleui64vNV = @ptrCast(glProgramUniformHandleui64vNV, gl.missingFunctionPanic),
    ProgramUniformMatrix2dv: glProgramUniformMatrix2dv = @ptrCast(glProgramUniformMatrix2dv, gl.missingFunctionPanic),
    ProgramUniformMatrix2dvEXT: glProgramUniformMatrix2dvEXT = @ptrCast(glProgramUniformMatrix2dvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix2fv: glProgramUniformMatrix2fv = @ptrCast(glProgramUniformMatrix2fv, gl.missingFunctionPanic),
    ProgramUniformMatrix2fvEXT: glProgramUniformMatrix2fvEXT = @ptrCast(glProgramUniformMatrix2fvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix2x3dv: glProgramUniformMatrix2x3dv = @ptrCast(glProgramUniformMatrix2x3dv, gl.missingFunctionPanic),
    ProgramUniformMatrix2x3dvEXT: glProgramUniformMatrix2x3dvEXT = @ptrCast(glProgramUniformMatrix2x3dvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix2x3fv: glProgramUniformMatrix2x3fv = @ptrCast(glProgramUniformMatrix2x3fv, gl.missingFunctionPanic),
    ProgramUniformMatrix2x3fvEXT: glProgramUniformMatrix2x3fvEXT = @ptrCast(glProgramUniformMatrix2x3fvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix2x4dv: glProgramUniformMatrix2x4dv = @ptrCast(glProgramUniformMatrix2x4dv, gl.missingFunctionPanic),
    ProgramUniformMatrix2x4dvEXT: glProgramUniformMatrix2x4dvEXT = @ptrCast(glProgramUniformMatrix2x4dvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix2x4fv: glProgramUniformMatrix2x4fv = @ptrCast(glProgramUniformMatrix2x4fv, gl.missingFunctionPanic),
    ProgramUniformMatrix2x4fvEXT: glProgramUniformMatrix2x4fvEXT = @ptrCast(glProgramUniformMatrix2x4fvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix3dv: glProgramUniformMatrix3dv = @ptrCast(glProgramUniformMatrix3dv, gl.missingFunctionPanic),
    ProgramUniformMatrix3dvEXT: glProgramUniformMatrix3dvEXT = @ptrCast(glProgramUniformMatrix3dvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix3fv: glProgramUniformMatrix3fv = @ptrCast(glProgramUniformMatrix3fv, gl.missingFunctionPanic),
    ProgramUniformMatrix3fvEXT: glProgramUniformMatrix3fvEXT = @ptrCast(glProgramUniformMatrix3fvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix3x2dv: glProgramUniformMatrix3x2dv = @ptrCast(glProgramUniformMatrix3x2dv, gl.missingFunctionPanic),
    ProgramUniformMatrix3x2dvEXT: glProgramUniformMatrix3x2dvEXT = @ptrCast(glProgramUniformMatrix3x2dvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix3x2fv: glProgramUniformMatrix3x2fv = @ptrCast(glProgramUniformMatrix3x2fv, gl.missingFunctionPanic),
    ProgramUniformMatrix3x2fvEXT: glProgramUniformMatrix3x2fvEXT = @ptrCast(glProgramUniformMatrix3x2fvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix3x4dv: glProgramUniformMatrix3x4dv = @ptrCast(glProgramUniformMatrix3x4dv, gl.missingFunctionPanic),
    ProgramUniformMatrix3x4dvEXT: glProgramUniformMatrix3x4dvEXT = @ptrCast(glProgramUniformMatrix3x4dvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix3x4fv: glProgramUniformMatrix3x4fv = @ptrCast(glProgramUniformMatrix3x4fv, gl.missingFunctionPanic),
    ProgramUniformMatrix3x4fvEXT: glProgramUniformMatrix3x4fvEXT = @ptrCast(glProgramUniformMatrix3x4fvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix4dv: glProgramUniformMatrix4dv = @ptrCast(glProgramUniformMatrix4dv, gl.missingFunctionPanic),
    ProgramUniformMatrix4dvEXT: glProgramUniformMatrix4dvEXT = @ptrCast(glProgramUniformMatrix4dvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix4fv: glProgramUniformMatrix4fv = @ptrCast(glProgramUniformMatrix4fv, gl.missingFunctionPanic),
    ProgramUniformMatrix4fvEXT: glProgramUniformMatrix4fvEXT = @ptrCast(glProgramUniformMatrix4fvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix4x2dv: glProgramUniformMatrix4x2dv = @ptrCast(glProgramUniformMatrix4x2dv, gl.missingFunctionPanic),
    ProgramUniformMatrix4x2dvEXT: glProgramUniformMatrix4x2dvEXT = @ptrCast(glProgramUniformMatrix4x2dvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix4x2fv: glProgramUniformMatrix4x2fv = @ptrCast(glProgramUniformMatrix4x2fv, gl.missingFunctionPanic),
    ProgramUniformMatrix4x2fvEXT: glProgramUniformMatrix4x2fvEXT = @ptrCast(glProgramUniformMatrix4x2fvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix4x3dv: glProgramUniformMatrix4x3dv = @ptrCast(glProgramUniformMatrix4x3dv, gl.missingFunctionPanic),
    ProgramUniformMatrix4x3dvEXT: glProgramUniformMatrix4x3dvEXT = @ptrCast(glProgramUniformMatrix4x3dvEXT, gl.missingFunctionPanic),
    ProgramUniformMatrix4x3fv: glProgramUniformMatrix4x3fv = @ptrCast(glProgramUniformMatrix4x3fv, gl.missingFunctionPanic),
    ProgramUniformMatrix4x3fvEXT: glProgramUniformMatrix4x3fvEXT = @ptrCast(glProgramUniformMatrix4x3fvEXT, gl.missingFunctionPanic),
    ProgramUniformui64NV: glProgramUniformui64NV = @ptrCast(glProgramUniformui64NV, gl.missingFunctionPanic),
    ProgramUniformui64vNV: glProgramUniformui64vNV = @ptrCast(glProgramUniformui64vNV, gl.missingFunctionPanic),
    ProgramVertexLimitNV: glProgramVertexLimitNV = @ptrCast(glProgramVertexLimitNV, gl.missingFunctionPanic),
    ProvokingVertex: glProvokingVertex = @ptrCast(glProvokingVertex, gl.missingFunctionPanic),
    ProvokingVertexEXT: glProvokingVertexEXT = @ptrCast(glProvokingVertexEXT, gl.missingFunctionPanic),
    PushClientAttribDefaultEXT: glPushClientAttribDefaultEXT = @ptrCast(glPushClientAttribDefaultEXT, gl.missingFunctionPanic),
    PushDebugGroup: glPushDebugGroup = @ptrCast(glPushDebugGroup, gl.missingFunctionPanic),
    PushGroupMarkerEXT: glPushGroupMarkerEXT = @ptrCast(glPushGroupMarkerEXT, gl.missingFunctionPanic),
    QueryCounter: glQueryCounter = @ptrCast(glQueryCounter, gl.missingFunctionPanic),
    QueryMatrixxOES: glQueryMatrixxOES = @ptrCast(glQueryMatrixxOES, gl.missingFunctionPanic),
    QueryObjectParameteruiAMD: glQueryObjectParameteruiAMD = @ptrCast(glQueryObjectParameteruiAMD, gl.missingFunctionPanic),
    QueryResourceNV: glQueryResourceNV = @ptrCast(glQueryResourceNV, gl.missingFunctionPanic),
    QueryResourceTagNV: glQueryResourceTagNV = @ptrCast(glQueryResourceTagNV, gl.missingFunctionPanic),
    RasterPos2xOES: glRasterPos2xOES = @ptrCast(glRasterPos2xOES, gl.missingFunctionPanic),
    RasterPos2xvOES: glRasterPos2xvOES = @ptrCast(glRasterPos2xvOES, gl.missingFunctionPanic),
    RasterPos3xOES: glRasterPos3xOES = @ptrCast(glRasterPos3xOES, gl.missingFunctionPanic),
    RasterPos3xvOES: glRasterPos3xvOES = @ptrCast(glRasterPos3xvOES, gl.missingFunctionPanic),
    RasterPos4xOES: glRasterPos4xOES = @ptrCast(glRasterPos4xOES, gl.missingFunctionPanic),
    RasterPos4xvOES: glRasterPos4xvOES = @ptrCast(glRasterPos4xvOES, gl.missingFunctionPanic),
    RasterSamplesEXT: glRasterSamplesEXT = @ptrCast(glRasterSamplesEXT, gl.missingFunctionPanic),
    ReadBuffer: glReadBuffer = @ptrCast(glReadBuffer, gl.missingFunctionPanic),
    ReadInstrumentsSGIX: glReadInstrumentsSGIX = @ptrCast(glReadInstrumentsSGIX, gl.missingFunctionPanic),
    ReadPixels: glReadPixels = @ptrCast(glReadPixels, gl.missingFunctionPanic),
    ReadnPixels: glReadnPixels = @ptrCast(glReadnPixels, gl.missingFunctionPanic),
    ReadnPixelsARB: glReadnPixelsARB = @ptrCast(glReadnPixelsARB, gl.missingFunctionPanic),
    RectxOES: glRectxOES = @ptrCast(glRectxOES, gl.missingFunctionPanic),
    RectxvOES: glRectxvOES = @ptrCast(glRectxvOES, gl.missingFunctionPanic),
    ReferencePlaneSGIX: glReferencePlaneSGIX = @ptrCast(glReferencePlaneSGIX, gl.missingFunctionPanic),
    ReleaseKeyedMutexWin32EXT: glReleaseKeyedMutexWin32EXT = @ptrCast(glReleaseKeyedMutexWin32EXT, gl.missingFunctionPanic),
    ReleaseShaderCompiler: glReleaseShaderCompiler = @ptrCast(glReleaseShaderCompiler, gl.missingFunctionPanic),
    RenderGpuMaskNV: glRenderGpuMaskNV = @ptrCast(glRenderGpuMaskNV, gl.missingFunctionPanic),
    RenderbufferStorage: glRenderbufferStorage = @ptrCast(glRenderbufferStorage, gl.missingFunctionPanic),
    RenderbufferStorageEXT: glRenderbufferStorageEXT = @ptrCast(glRenderbufferStorageEXT, gl.missingFunctionPanic),
    RenderbufferStorageMultisample: glRenderbufferStorageMultisample = @ptrCast(glRenderbufferStorageMultisample, gl.missingFunctionPanic),
    RenderbufferStorageMultisampleAdvancedAMD: glRenderbufferStorageMultisampleAdvancedAMD = @ptrCast(glRenderbufferStorageMultisampleAdvancedAMD, gl.missingFunctionPanic),
    RenderbufferStorageMultisampleCoverageNV: glRenderbufferStorageMultisampleCoverageNV = @ptrCast(glRenderbufferStorageMultisampleCoverageNV, gl.missingFunctionPanic),
    RenderbufferStorageMultisampleEXT: glRenderbufferStorageMultisampleEXT = @ptrCast(glRenderbufferStorageMultisampleEXT, gl.missingFunctionPanic),
    ReplacementCodePointerSUN: glReplacementCodePointerSUN = @ptrCast(glReplacementCodePointerSUN, gl.missingFunctionPanic),
    ReplacementCodeubSUN: glReplacementCodeubSUN = @ptrCast(glReplacementCodeubSUN, gl.missingFunctionPanic),
    ReplacementCodeubvSUN: glReplacementCodeubvSUN = @ptrCast(glReplacementCodeubvSUN, gl.missingFunctionPanic),
    ReplacementCodeuiColor3fVertex3fSUN: glReplacementCodeuiColor3fVertex3fSUN = @ptrCast(glReplacementCodeuiColor3fVertex3fSUN, gl.missingFunctionPanic),
    ReplacementCodeuiColor3fVertex3fvSUN: glReplacementCodeuiColor3fVertex3fvSUN = @ptrCast(glReplacementCodeuiColor3fVertex3fvSUN, gl.missingFunctionPanic),
    ReplacementCodeuiColor4fNormal3fVertex3fSUN: glReplacementCodeuiColor4fNormal3fVertex3fSUN = @ptrCast(glReplacementCodeuiColor4fNormal3fVertex3fSUN, gl.missingFunctionPanic),
    ReplacementCodeuiColor4fNormal3fVertex3fvSUN: glReplacementCodeuiColor4fNormal3fVertex3fvSUN = @ptrCast(glReplacementCodeuiColor4fNormal3fVertex3fvSUN, gl.missingFunctionPanic),
    ReplacementCodeuiColor4ubVertex3fSUN: glReplacementCodeuiColor4ubVertex3fSUN = @ptrCast(glReplacementCodeuiColor4ubVertex3fSUN, gl.missingFunctionPanic),
    ReplacementCodeuiColor4ubVertex3fvSUN: glReplacementCodeuiColor4ubVertex3fvSUN = @ptrCast(glReplacementCodeuiColor4ubVertex3fvSUN, gl.missingFunctionPanic),
    ReplacementCodeuiNormal3fVertex3fSUN: glReplacementCodeuiNormal3fVertex3fSUN = @ptrCast(glReplacementCodeuiNormal3fVertex3fSUN, gl.missingFunctionPanic),
    ReplacementCodeuiNormal3fVertex3fvSUN: glReplacementCodeuiNormal3fVertex3fvSUN = @ptrCast(glReplacementCodeuiNormal3fVertex3fvSUN, gl.missingFunctionPanic),
    ReplacementCodeuiSUN: glReplacementCodeuiSUN = @ptrCast(glReplacementCodeuiSUN, gl.missingFunctionPanic),
    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = @ptrCast(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, gl.missingFunctionPanic),
    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = @ptrCast(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, gl.missingFunctionPanic),
    ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = @ptrCast(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, gl.missingFunctionPanic),
    ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = @ptrCast(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, gl.missingFunctionPanic),
    ReplacementCodeuiTexCoord2fVertex3fSUN: glReplacementCodeuiTexCoord2fVertex3fSUN = @ptrCast(glReplacementCodeuiTexCoord2fVertex3fSUN, gl.missingFunctionPanic),
    ReplacementCodeuiTexCoord2fVertex3fvSUN: glReplacementCodeuiTexCoord2fVertex3fvSUN = @ptrCast(glReplacementCodeuiTexCoord2fVertex3fvSUN, gl.missingFunctionPanic),
    ReplacementCodeuiVertex3fSUN: glReplacementCodeuiVertex3fSUN = @ptrCast(glReplacementCodeuiVertex3fSUN, gl.missingFunctionPanic),
    ReplacementCodeuiVertex3fvSUN: glReplacementCodeuiVertex3fvSUN = @ptrCast(glReplacementCodeuiVertex3fvSUN, gl.missingFunctionPanic),
    ReplacementCodeuivSUN: glReplacementCodeuivSUN = @ptrCast(glReplacementCodeuivSUN, gl.missingFunctionPanic),
    ReplacementCodeusSUN: glReplacementCodeusSUN = @ptrCast(glReplacementCodeusSUN, gl.missingFunctionPanic),
    ReplacementCodeusvSUN: glReplacementCodeusvSUN = @ptrCast(glReplacementCodeusvSUN, gl.missingFunctionPanic),
    RequestResidentProgramsNV: glRequestResidentProgramsNV = @ptrCast(glRequestResidentProgramsNV, gl.missingFunctionPanic),
    ResetHistogramEXT: glResetHistogramEXT = @ptrCast(glResetHistogramEXT, gl.missingFunctionPanic),
    ResetMemoryObjectParameterNV: glResetMemoryObjectParameterNV = @ptrCast(glResetMemoryObjectParameterNV, gl.missingFunctionPanic),
    ResetMinmaxEXT: glResetMinmaxEXT = @ptrCast(glResetMinmaxEXT, gl.missingFunctionPanic),
    ResizeBuffersMESA: glResizeBuffersMESA = @ptrCast(glResizeBuffersMESA, gl.missingFunctionPanic),
    ResolveDepthValuesNV: glResolveDepthValuesNV = @ptrCast(glResolveDepthValuesNV, gl.missingFunctionPanic),
    ResumeTransformFeedback: glResumeTransformFeedback = @ptrCast(glResumeTransformFeedback, gl.missingFunctionPanic),
    ResumeTransformFeedbackNV: glResumeTransformFeedbackNV = @ptrCast(glResumeTransformFeedbackNV, gl.missingFunctionPanic),
    RotatexOES: glRotatexOES = @ptrCast(glRotatexOES, gl.missingFunctionPanic),
    SampleCoverage: glSampleCoverage = @ptrCast(glSampleCoverage, gl.missingFunctionPanic),
    SampleCoverageARB: glSampleCoverageARB = @ptrCast(glSampleCoverageARB, gl.missingFunctionPanic),
    SampleMapATI: glSampleMapATI = @ptrCast(glSampleMapATI, gl.missingFunctionPanic),
    SampleMaskEXT: glSampleMaskEXT = @ptrCast(glSampleMaskEXT, gl.missingFunctionPanic),
    SampleMaskIndexedNV: glSampleMaskIndexedNV = @ptrCast(glSampleMaskIndexedNV, gl.missingFunctionPanic),
    SampleMaskSGIS: glSampleMaskSGIS = @ptrCast(glSampleMaskSGIS, gl.missingFunctionPanic),
    SampleMaski: glSampleMaski = @ptrCast(glSampleMaski, gl.missingFunctionPanic),
    SamplePatternEXT: glSamplePatternEXT = @ptrCast(glSamplePatternEXT, gl.missingFunctionPanic),
    SamplePatternSGIS: glSamplePatternSGIS = @ptrCast(glSamplePatternSGIS, gl.missingFunctionPanic),
    SamplerParameterIiv: glSamplerParameterIiv = @ptrCast(glSamplerParameterIiv, gl.missingFunctionPanic),
    SamplerParameterIuiv: glSamplerParameterIuiv = @ptrCast(glSamplerParameterIuiv, gl.missingFunctionPanic),
    SamplerParameterf: glSamplerParameterf = @ptrCast(glSamplerParameterf, gl.missingFunctionPanic),
    SamplerParameterfv: glSamplerParameterfv = @ptrCast(glSamplerParameterfv, gl.missingFunctionPanic),
    SamplerParameteri: glSamplerParameteri = @ptrCast(glSamplerParameteri, gl.missingFunctionPanic),
    SamplerParameteriv: glSamplerParameteriv = @ptrCast(glSamplerParameteriv, gl.missingFunctionPanic),
    ScalexOES: glScalexOES = @ptrCast(glScalexOES, gl.missingFunctionPanic),
    Scissor: glScissor = @ptrCast(glScissor, gl.missingFunctionPanic),
    ScissorArrayv: glScissorArrayv = @ptrCast(glScissorArrayv, gl.missingFunctionPanic),
    ScissorExclusiveArrayvNV: glScissorExclusiveArrayvNV = @ptrCast(glScissorExclusiveArrayvNV, gl.missingFunctionPanic),
    ScissorExclusiveNV: glScissorExclusiveNV = @ptrCast(glScissorExclusiveNV, gl.missingFunctionPanic),
    ScissorIndexed: glScissorIndexed = @ptrCast(glScissorIndexed, gl.missingFunctionPanic),
    ScissorIndexedv: glScissorIndexedv = @ptrCast(glScissorIndexedv, gl.missingFunctionPanic),
    SecondaryColor3bEXT: glSecondaryColor3bEXT = @ptrCast(glSecondaryColor3bEXT, gl.missingFunctionPanic),
    SecondaryColor3bvEXT: glSecondaryColor3bvEXT = @ptrCast(glSecondaryColor3bvEXT, gl.missingFunctionPanic),
    SecondaryColor3dEXT: glSecondaryColor3dEXT = @ptrCast(glSecondaryColor3dEXT, gl.missingFunctionPanic),
    SecondaryColor3dvEXT: glSecondaryColor3dvEXT = @ptrCast(glSecondaryColor3dvEXT, gl.missingFunctionPanic),
    SecondaryColor3fEXT: glSecondaryColor3fEXT = @ptrCast(glSecondaryColor3fEXT, gl.missingFunctionPanic),
    SecondaryColor3fvEXT: glSecondaryColor3fvEXT = @ptrCast(glSecondaryColor3fvEXT, gl.missingFunctionPanic),
    SecondaryColor3hNV: glSecondaryColor3hNV = @ptrCast(glSecondaryColor3hNV, gl.missingFunctionPanic),
    SecondaryColor3hvNV: glSecondaryColor3hvNV = @ptrCast(glSecondaryColor3hvNV, gl.missingFunctionPanic),
    SecondaryColor3iEXT: glSecondaryColor3iEXT = @ptrCast(glSecondaryColor3iEXT, gl.missingFunctionPanic),
    SecondaryColor3ivEXT: glSecondaryColor3ivEXT = @ptrCast(glSecondaryColor3ivEXT, gl.missingFunctionPanic),
    SecondaryColor3sEXT: glSecondaryColor3sEXT = @ptrCast(glSecondaryColor3sEXT, gl.missingFunctionPanic),
    SecondaryColor3svEXT: glSecondaryColor3svEXT = @ptrCast(glSecondaryColor3svEXT, gl.missingFunctionPanic),
    SecondaryColor3ubEXT: glSecondaryColor3ubEXT = @ptrCast(glSecondaryColor3ubEXT, gl.missingFunctionPanic),
    SecondaryColor3ubvEXT: glSecondaryColor3ubvEXT = @ptrCast(glSecondaryColor3ubvEXT, gl.missingFunctionPanic),
    SecondaryColor3uiEXT: glSecondaryColor3uiEXT = @ptrCast(glSecondaryColor3uiEXT, gl.missingFunctionPanic),
    SecondaryColor3uivEXT: glSecondaryColor3uivEXT = @ptrCast(glSecondaryColor3uivEXT, gl.missingFunctionPanic),
    SecondaryColor3usEXT: glSecondaryColor3usEXT = @ptrCast(glSecondaryColor3usEXT, gl.missingFunctionPanic),
    SecondaryColor3usvEXT: glSecondaryColor3usvEXT = @ptrCast(glSecondaryColor3usvEXT, gl.missingFunctionPanic),
    SecondaryColorFormatNV: glSecondaryColorFormatNV = @ptrCast(glSecondaryColorFormatNV, gl.missingFunctionPanic),
    SecondaryColorPointerEXT: glSecondaryColorPointerEXT = @ptrCast(glSecondaryColorPointerEXT, gl.missingFunctionPanic),
    SecondaryColorPointerListIBM: glSecondaryColorPointerListIBM = @ptrCast(glSecondaryColorPointerListIBM, gl.missingFunctionPanic),
    SelectPerfMonitorCountersAMD: glSelectPerfMonitorCountersAMD = @ptrCast(glSelectPerfMonitorCountersAMD, gl.missingFunctionPanic),
    SemaphoreParameterivNV: glSemaphoreParameterivNV = @ptrCast(glSemaphoreParameterivNV, gl.missingFunctionPanic),
    SemaphoreParameterui64vEXT: glSemaphoreParameterui64vEXT = @ptrCast(glSemaphoreParameterui64vEXT, gl.missingFunctionPanic),
    SeparableFilter2DEXT: glSeparableFilter2DEXT = @ptrCast(glSeparableFilter2DEXT, gl.missingFunctionPanic),
    SetFenceAPPLE: glSetFenceAPPLE = @ptrCast(glSetFenceAPPLE, gl.missingFunctionPanic),
    SetFenceNV: glSetFenceNV = @ptrCast(glSetFenceNV, gl.missingFunctionPanic),
    SetFragmentShaderConstantATI: glSetFragmentShaderConstantATI = @ptrCast(glSetFragmentShaderConstantATI, gl.missingFunctionPanic),
    SetInvariantEXT: glSetInvariantEXT = @ptrCast(glSetInvariantEXT, gl.missingFunctionPanic),
    SetLocalConstantEXT: glSetLocalConstantEXT = @ptrCast(glSetLocalConstantEXT, gl.missingFunctionPanic),
    SetMultisamplefvAMD: glSetMultisamplefvAMD = @ptrCast(glSetMultisamplefvAMD, gl.missingFunctionPanic),
    ShaderBinary: glShaderBinary = @ptrCast(glShaderBinary, gl.missingFunctionPanic),
    ShaderOp1EXT: glShaderOp1EXT = @ptrCast(glShaderOp1EXT, gl.missingFunctionPanic),
    ShaderOp2EXT: glShaderOp2EXT = @ptrCast(glShaderOp2EXT, gl.missingFunctionPanic),
    ShaderOp3EXT: glShaderOp3EXT = @ptrCast(glShaderOp3EXT, gl.missingFunctionPanic),
    ShaderSource: glShaderSource = @ptrCast(glShaderSource, gl.missingFunctionPanic),
    ShaderSourceARB: glShaderSourceARB = @ptrCast(glShaderSourceARB, gl.missingFunctionPanic),
    ShaderStorageBlockBinding: glShaderStorageBlockBinding = @ptrCast(glShaderStorageBlockBinding, gl.missingFunctionPanic),
    ShadingRateImageBarrierNV: glShadingRateImageBarrierNV = @ptrCast(glShadingRateImageBarrierNV, gl.missingFunctionPanic),
    ShadingRateImagePaletteNV: glShadingRateImagePaletteNV = @ptrCast(glShadingRateImagePaletteNV, gl.missingFunctionPanic),
    ShadingRateSampleOrderCustomNV: glShadingRateSampleOrderCustomNV = @ptrCast(glShadingRateSampleOrderCustomNV, gl.missingFunctionPanic),
    ShadingRateSampleOrderNV: glShadingRateSampleOrderNV = @ptrCast(glShadingRateSampleOrderNV, gl.missingFunctionPanic),
    SharpenTexFuncSGIS: glSharpenTexFuncSGIS = @ptrCast(glSharpenTexFuncSGIS, gl.missingFunctionPanic),
    SignalSemaphoreEXT: glSignalSemaphoreEXT = @ptrCast(glSignalSemaphoreEXT, gl.missingFunctionPanic),
    SignalSemaphoreui64NVX: glSignalSemaphoreui64NVX = @ptrCast(glSignalSemaphoreui64NVX, gl.missingFunctionPanic),
    SignalVkFenceNV: glSignalVkFenceNV = @ptrCast(glSignalVkFenceNV, gl.missingFunctionPanic),
    SignalVkSemaphoreNV: glSignalVkSemaphoreNV = @ptrCast(glSignalVkSemaphoreNV, gl.missingFunctionPanic),
    SpecializeShaderARB: glSpecializeShaderARB = @ptrCast(glSpecializeShaderARB, gl.missingFunctionPanic),
    SpriteParameterfSGIX: glSpriteParameterfSGIX = @ptrCast(glSpriteParameterfSGIX, gl.missingFunctionPanic),
    SpriteParameterfvSGIX: glSpriteParameterfvSGIX = @ptrCast(glSpriteParameterfvSGIX, gl.missingFunctionPanic),
    SpriteParameteriSGIX: glSpriteParameteriSGIX = @ptrCast(glSpriteParameteriSGIX, gl.missingFunctionPanic),
    SpriteParameterivSGIX: glSpriteParameterivSGIX = @ptrCast(glSpriteParameterivSGIX, gl.missingFunctionPanic),
    StartInstrumentsSGIX: glStartInstrumentsSGIX = @ptrCast(glStartInstrumentsSGIX, gl.missingFunctionPanic),
    StateCaptureNV: glStateCaptureNV = @ptrCast(glStateCaptureNV, gl.missingFunctionPanic),
    StencilClearTagEXT: glStencilClearTagEXT = @ptrCast(glStencilClearTagEXT, gl.missingFunctionPanic),
    StencilFillPathInstancedNV: glStencilFillPathInstancedNV = @ptrCast(glStencilFillPathInstancedNV, gl.missingFunctionPanic),
    StencilFillPathNV: glStencilFillPathNV = @ptrCast(glStencilFillPathNV, gl.missingFunctionPanic),
    StencilFunc: glStencilFunc = @ptrCast(glStencilFunc, gl.missingFunctionPanic),
    StencilFuncSeparate: glStencilFuncSeparate = @ptrCast(glStencilFuncSeparate, gl.missingFunctionPanic),
    StencilFuncSeparateATI: glStencilFuncSeparateATI = @ptrCast(glStencilFuncSeparateATI, gl.missingFunctionPanic),
    StencilMask: glStencilMask = @ptrCast(glStencilMask, gl.missingFunctionPanic),
    StencilMaskSeparate: glStencilMaskSeparate = @ptrCast(glStencilMaskSeparate, gl.missingFunctionPanic),
    StencilOp: glStencilOp = @ptrCast(glStencilOp, gl.missingFunctionPanic),
    StencilOpSeparate: glStencilOpSeparate = @ptrCast(glStencilOpSeparate, gl.missingFunctionPanic),
    StencilOpSeparateATI: glStencilOpSeparateATI = @ptrCast(glStencilOpSeparateATI, gl.missingFunctionPanic),
    StencilOpValueAMD: glStencilOpValueAMD = @ptrCast(glStencilOpValueAMD, gl.missingFunctionPanic),
    StencilStrokePathInstancedNV: glStencilStrokePathInstancedNV = @ptrCast(glStencilStrokePathInstancedNV, gl.missingFunctionPanic),
    StencilStrokePathNV: glStencilStrokePathNV = @ptrCast(glStencilStrokePathNV, gl.missingFunctionPanic),
    StencilThenCoverFillPathInstancedNV: glStencilThenCoverFillPathInstancedNV = @ptrCast(glStencilThenCoverFillPathInstancedNV, gl.missingFunctionPanic),
    StencilThenCoverFillPathNV: glStencilThenCoverFillPathNV = @ptrCast(glStencilThenCoverFillPathNV, gl.missingFunctionPanic),
    StencilThenCoverStrokePathInstancedNV: glStencilThenCoverStrokePathInstancedNV = @ptrCast(glStencilThenCoverStrokePathInstancedNV, gl.missingFunctionPanic),
    StencilThenCoverStrokePathNV: glStencilThenCoverStrokePathNV = @ptrCast(glStencilThenCoverStrokePathNV, gl.missingFunctionPanic),
    StopInstrumentsSGIX: glStopInstrumentsSGIX = @ptrCast(glStopInstrumentsSGIX, gl.missingFunctionPanic),
    StringMarkerGREMEDY: glStringMarkerGREMEDY = @ptrCast(glStringMarkerGREMEDY, gl.missingFunctionPanic),
    SubpixelPrecisionBiasNV: glSubpixelPrecisionBiasNV = @ptrCast(glSubpixelPrecisionBiasNV, gl.missingFunctionPanic),
    SwizzleEXT: glSwizzleEXT = @ptrCast(glSwizzleEXT, gl.missingFunctionPanic),
    SyncTextureINTEL: glSyncTextureINTEL = @ptrCast(glSyncTextureINTEL, gl.missingFunctionPanic),
    TagSampleBufferSGIX: glTagSampleBufferSGIX = @ptrCast(glTagSampleBufferSGIX, gl.missingFunctionPanic),
    Tangent3bEXT: glTangent3bEXT = @ptrCast(glTangent3bEXT, gl.missingFunctionPanic),
    Tangent3bvEXT: glTangent3bvEXT = @ptrCast(glTangent3bvEXT, gl.missingFunctionPanic),
    Tangent3dEXT: glTangent3dEXT = @ptrCast(glTangent3dEXT, gl.missingFunctionPanic),
    Tangent3dvEXT: glTangent3dvEXT = @ptrCast(glTangent3dvEXT, gl.missingFunctionPanic),
    Tangent3fEXT: glTangent3fEXT = @ptrCast(glTangent3fEXT, gl.missingFunctionPanic),
    Tangent3fvEXT: glTangent3fvEXT = @ptrCast(glTangent3fvEXT, gl.missingFunctionPanic),
    Tangent3iEXT: glTangent3iEXT = @ptrCast(glTangent3iEXT, gl.missingFunctionPanic),
    Tangent3ivEXT: glTangent3ivEXT = @ptrCast(glTangent3ivEXT, gl.missingFunctionPanic),
    Tangent3sEXT: glTangent3sEXT = @ptrCast(glTangent3sEXT, gl.missingFunctionPanic),
    Tangent3svEXT: glTangent3svEXT = @ptrCast(glTangent3svEXT, gl.missingFunctionPanic),
    TangentPointerEXT: glTangentPointerEXT = @ptrCast(glTangentPointerEXT, gl.missingFunctionPanic),
    TbufferMask3DFX: glTbufferMask3DFX = @ptrCast(glTbufferMask3DFX, gl.missingFunctionPanic),
    TessellationFactorAMD: glTessellationFactorAMD = @ptrCast(glTessellationFactorAMD, gl.missingFunctionPanic),
    TessellationModeAMD: glTessellationModeAMD = @ptrCast(glTessellationModeAMD, gl.missingFunctionPanic),
    TestFenceAPPLE: glTestFenceAPPLE = @ptrCast(glTestFenceAPPLE, gl.missingFunctionPanic),
    TestFenceNV: glTestFenceNV = @ptrCast(glTestFenceNV, gl.missingFunctionPanic),
    TestObjectAPPLE: glTestObjectAPPLE = @ptrCast(glTestObjectAPPLE, gl.missingFunctionPanic),
    TexAttachMemoryNV: glTexAttachMemoryNV = @ptrCast(glTexAttachMemoryNV, gl.missingFunctionPanic),
    TexBuffer: glTexBuffer = @ptrCast(glTexBuffer, gl.missingFunctionPanic),
    TexBufferARB: glTexBufferARB = @ptrCast(glTexBufferARB, gl.missingFunctionPanic),
    TexBufferEXT: glTexBufferEXT = @ptrCast(glTexBufferEXT, gl.missingFunctionPanic),
    TexBufferRange: glTexBufferRange = @ptrCast(glTexBufferRange, gl.missingFunctionPanic),
    TexBumpParameterfvATI: glTexBumpParameterfvATI = @ptrCast(glTexBumpParameterfvATI, gl.missingFunctionPanic),
    TexBumpParameterivATI: glTexBumpParameterivATI = @ptrCast(glTexBumpParameterivATI, gl.missingFunctionPanic),
    TexCoord1bOES: glTexCoord1bOES = @ptrCast(glTexCoord1bOES, gl.missingFunctionPanic),
    TexCoord1bvOES: glTexCoord1bvOES = @ptrCast(glTexCoord1bvOES, gl.missingFunctionPanic),
    TexCoord1hNV: glTexCoord1hNV = @ptrCast(glTexCoord1hNV, gl.missingFunctionPanic),
    TexCoord1hvNV: glTexCoord1hvNV = @ptrCast(glTexCoord1hvNV, gl.missingFunctionPanic),
    TexCoord1xOES: glTexCoord1xOES = @ptrCast(glTexCoord1xOES, gl.missingFunctionPanic),
    TexCoord1xvOES: glTexCoord1xvOES = @ptrCast(glTexCoord1xvOES, gl.missingFunctionPanic),
    TexCoord2bOES: glTexCoord2bOES = @ptrCast(glTexCoord2bOES, gl.missingFunctionPanic),
    TexCoord2bvOES: glTexCoord2bvOES = @ptrCast(glTexCoord2bvOES, gl.missingFunctionPanic),
    TexCoord2fColor3fVertex3fSUN: glTexCoord2fColor3fVertex3fSUN = @ptrCast(glTexCoord2fColor3fVertex3fSUN, gl.missingFunctionPanic),
    TexCoord2fColor3fVertex3fvSUN: glTexCoord2fColor3fVertex3fvSUN = @ptrCast(glTexCoord2fColor3fVertex3fvSUN, gl.missingFunctionPanic),
    TexCoord2fColor4fNormal3fVertex3fSUN: glTexCoord2fColor4fNormal3fVertex3fSUN = @ptrCast(glTexCoord2fColor4fNormal3fVertex3fSUN, gl.missingFunctionPanic),
    TexCoord2fColor4fNormal3fVertex3fvSUN: glTexCoord2fColor4fNormal3fVertex3fvSUN = @ptrCast(glTexCoord2fColor4fNormal3fVertex3fvSUN, gl.missingFunctionPanic),
    TexCoord2fColor4ubVertex3fSUN: glTexCoord2fColor4ubVertex3fSUN = @ptrCast(glTexCoord2fColor4ubVertex3fSUN, gl.missingFunctionPanic),
    TexCoord2fColor4ubVertex3fvSUN: glTexCoord2fColor4ubVertex3fvSUN = @ptrCast(glTexCoord2fColor4ubVertex3fvSUN, gl.missingFunctionPanic),
    TexCoord2fNormal3fVertex3fSUN: glTexCoord2fNormal3fVertex3fSUN = @ptrCast(glTexCoord2fNormal3fVertex3fSUN, gl.missingFunctionPanic),
    TexCoord2fNormal3fVertex3fvSUN: glTexCoord2fNormal3fVertex3fvSUN = @ptrCast(glTexCoord2fNormal3fVertex3fvSUN, gl.missingFunctionPanic),
    TexCoord2fVertex3fSUN: glTexCoord2fVertex3fSUN = @ptrCast(glTexCoord2fVertex3fSUN, gl.missingFunctionPanic),
    TexCoord2fVertex3fvSUN: glTexCoord2fVertex3fvSUN = @ptrCast(glTexCoord2fVertex3fvSUN, gl.missingFunctionPanic),
    TexCoord2hNV: glTexCoord2hNV = @ptrCast(glTexCoord2hNV, gl.missingFunctionPanic),
    TexCoord2hvNV: glTexCoord2hvNV = @ptrCast(glTexCoord2hvNV, gl.missingFunctionPanic),
    TexCoord2xOES: glTexCoord2xOES = @ptrCast(glTexCoord2xOES, gl.missingFunctionPanic),
    TexCoord2xvOES: glTexCoord2xvOES = @ptrCast(glTexCoord2xvOES, gl.missingFunctionPanic),
    TexCoord3bOES: glTexCoord3bOES = @ptrCast(glTexCoord3bOES, gl.missingFunctionPanic),
    TexCoord3bvOES: glTexCoord3bvOES = @ptrCast(glTexCoord3bvOES, gl.missingFunctionPanic),
    TexCoord3hNV: glTexCoord3hNV = @ptrCast(glTexCoord3hNV, gl.missingFunctionPanic),
    TexCoord3hvNV: glTexCoord3hvNV = @ptrCast(glTexCoord3hvNV, gl.missingFunctionPanic),
    TexCoord3xOES: glTexCoord3xOES = @ptrCast(glTexCoord3xOES, gl.missingFunctionPanic),
    TexCoord3xvOES: glTexCoord3xvOES = @ptrCast(glTexCoord3xvOES, gl.missingFunctionPanic),
    TexCoord4bOES: glTexCoord4bOES = @ptrCast(glTexCoord4bOES, gl.missingFunctionPanic),
    TexCoord4bvOES: glTexCoord4bvOES = @ptrCast(glTexCoord4bvOES, gl.missingFunctionPanic),
    TexCoord4fColor4fNormal3fVertex4fSUN: glTexCoord4fColor4fNormal3fVertex4fSUN = @ptrCast(glTexCoord4fColor4fNormal3fVertex4fSUN, gl.missingFunctionPanic),
    TexCoord4fColor4fNormal3fVertex4fvSUN: glTexCoord4fColor4fNormal3fVertex4fvSUN = @ptrCast(glTexCoord4fColor4fNormal3fVertex4fvSUN, gl.missingFunctionPanic),
    TexCoord4fVertex4fSUN: glTexCoord4fVertex4fSUN = @ptrCast(glTexCoord4fVertex4fSUN, gl.missingFunctionPanic),
    TexCoord4fVertex4fvSUN: glTexCoord4fVertex4fvSUN = @ptrCast(glTexCoord4fVertex4fvSUN, gl.missingFunctionPanic),
    TexCoord4hNV: glTexCoord4hNV = @ptrCast(glTexCoord4hNV, gl.missingFunctionPanic),
    TexCoord4hvNV: glTexCoord4hvNV = @ptrCast(glTexCoord4hvNV, gl.missingFunctionPanic),
    TexCoord4xOES: glTexCoord4xOES = @ptrCast(glTexCoord4xOES, gl.missingFunctionPanic),
    TexCoord4xvOES: glTexCoord4xvOES = @ptrCast(glTexCoord4xvOES, gl.missingFunctionPanic),
    TexCoordFormatNV: glTexCoordFormatNV = @ptrCast(glTexCoordFormatNV, gl.missingFunctionPanic),
    TexCoordPointerEXT: glTexCoordPointerEXT = @ptrCast(glTexCoordPointerEXT, gl.missingFunctionPanic),
    TexCoordPointerListIBM: glTexCoordPointerListIBM = @ptrCast(glTexCoordPointerListIBM, gl.missingFunctionPanic),
    TexCoordPointervINTEL: glTexCoordPointervINTEL = @ptrCast(glTexCoordPointervINTEL, gl.missingFunctionPanic),
    TexEnvxOES: glTexEnvxOES = @ptrCast(glTexEnvxOES, gl.missingFunctionPanic),
    TexEnvxvOES: glTexEnvxvOES = @ptrCast(glTexEnvxvOES, gl.missingFunctionPanic),
    TexFilterFuncSGIS: glTexFilterFuncSGIS = @ptrCast(glTexFilterFuncSGIS, gl.missingFunctionPanic),
    TexGenxOES: glTexGenxOES = @ptrCast(glTexGenxOES, gl.missingFunctionPanic),
    TexGenxvOES: glTexGenxvOES = @ptrCast(glTexGenxvOES, gl.missingFunctionPanic),
    TexImage1D: glTexImage1D = @ptrCast(glTexImage1D, gl.missingFunctionPanic),
    TexImage2D: glTexImage2D = @ptrCast(glTexImage2D, gl.missingFunctionPanic),
    TexImage2DMultisample: glTexImage2DMultisample = @ptrCast(glTexImage2DMultisample, gl.missingFunctionPanic),
    TexImage2DMultisampleCoverageNV: glTexImage2DMultisampleCoverageNV = @ptrCast(glTexImage2DMultisampleCoverageNV, gl.missingFunctionPanic),
    TexImage3D: glTexImage3D = @ptrCast(glTexImage3D, gl.missingFunctionPanic),
    TexImage3DEXT: glTexImage3DEXT = @ptrCast(glTexImage3DEXT, gl.missingFunctionPanic),
    TexImage3DMultisample: glTexImage3DMultisample = @ptrCast(glTexImage3DMultisample, gl.missingFunctionPanic),
    TexImage3DMultisampleCoverageNV: glTexImage3DMultisampleCoverageNV = @ptrCast(glTexImage3DMultisampleCoverageNV, gl.missingFunctionPanic),
    TexImage4DSGIS: glTexImage4DSGIS = @ptrCast(glTexImage4DSGIS, gl.missingFunctionPanic),
    TexPageCommitmentARB: glTexPageCommitmentARB = @ptrCast(glTexPageCommitmentARB, gl.missingFunctionPanic),
    TexPageCommitmentMemNV: glTexPageCommitmentMemNV = @ptrCast(glTexPageCommitmentMemNV, gl.missingFunctionPanic),
    TexParameterIiv: glTexParameterIiv = @ptrCast(glTexParameterIiv, gl.missingFunctionPanic),
    TexParameterIivEXT: glTexParameterIivEXT = @ptrCast(glTexParameterIivEXT, gl.missingFunctionPanic),
    TexParameterIuiv: glTexParameterIuiv = @ptrCast(glTexParameterIuiv, gl.missingFunctionPanic),
    TexParameterIuivEXT: glTexParameterIuivEXT = @ptrCast(glTexParameterIuivEXT, gl.missingFunctionPanic),
    TexParameterf: glTexParameterf = @ptrCast(glTexParameterf, gl.missingFunctionPanic),
    TexParameterfv: glTexParameterfv = @ptrCast(glTexParameterfv, gl.missingFunctionPanic),
    TexParameteri: glTexParameteri = @ptrCast(glTexParameteri, gl.missingFunctionPanic),
    TexParameteriv: glTexParameteriv = @ptrCast(glTexParameteriv, gl.missingFunctionPanic),
    TexParameterxOES: glTexParameterxOES = @ptrCast(glTexParameterxOES, gl.missingFunctionPanic),
    TexParameterxvOES: glTexParameterxvOES = @ptrCast(glTexParameterxvOES, gl.missingFunctionPanic),
    TexRenderbufferNV: glTexRenderbufferNV = @ptrCast(glTexRenderbufferNV, gl.missingFunctionPanic),
    TexStorage1D: glTexStorage1D = @ptrCast(glTexStorage1D, gl.missingFunctionPanic),
    TexStorage2D: glTexStorage2D = @ptrCast(glTexStorage2D, gl.missingFunctionPanic),
    TexStorage2DMultisample: glTexStorage2DMultisample = @ptrCast(glTexStorage2DMultisample, gl.missingFunctionPanic),
    TexStorage3D: glTexStorage3D = @ptrCast(glTexStorage3D, gl.missingFunctionPanic),
    TexStorage3DMultisample: glTexStorage3DMultisample = @ptrCast(glTexStorage3DMultisample, gl.missingFunctionPanic),
    TexStorageMem1DEXT: glTexStorageMem1DEXT = @ptrCast(glTexStorageMem1DEXT, gl.missingFunctionPanic),
    TexStorageMem2DEXT: glTexStorageMem2DEXT = @ptrCast(glTexStorageMem2DEXT, gl.missingFunctionPanic),
    TexStorageMem2DMultisampleEXT: glTexStorageMem2DMultisampleEXT = @ptrCast(glTexStorageMem2DMultisampleEXT, gl.missingFunctionPanic),
    TexStorageMem3DEXT: glTexStorageMem3DEXT = @ptrCast(glTexStorageMem3DEXT, gl.missingFunctionPanic),
    TexStorageMem3DMultisampleEXT: glTexStorageMem3DMultisampleEXT = @ptrCast(glTexStorageMem3DMultisampleEXT, gl.missingFunctionPanic),
    TexStorageSparseAMD: glTexStorageSparseAMD = @ptrCast(glTexStorageSparseAMD, gl.missingFunctionPanic),
    TexSubImage1D: glTexSubImage1D = @ptrCast(glTexSubImage1D, gl.missingFunctionPanic),
    TexSubImage1DEXT: glTexSubImage1DEXT = @ptrCast(glTexSubImage1DEXT, gl.missingFunctionPanic),
    TexSubImage2D: glTexSubImage2D = @ptrCast(glTexSubImage2D, gl.missingFunctionPanic),
    TexSubImage2DEXT: glTexSubImage2DEXT = @ptrCast(glTexSubImage2DEXT, gl.missingFunctionPanic),
    TexSubImage3D: glTexSubImage3D = @ptrCast(glTexSubImage3D, gl.missingFunctionPanic),
    TexSubImage3DEXT: glTexSubImage3DEXT = @ptrCast(glTexSubImage3DEXT, gl.missingFunctionPanic),
    TexSubImage4DSGIS: glTexSubImage4DSGIS = @ptrCast(glTexSubImage4DSGIS, gl.missingFunctionPanic),
    TextureAttachMemoryNV: glTextureAttachMemoryNV = @ptrCast(glTextureAttachMemoryNV, gl.missingFunctionPanic),
    TextureBarrier: glTextureBarrier = @ptrCast(glTextureBarrier, gl.missingFunctionPanic),
    TextureBarrierNV: glTextureBarrierNV = @ptrCast(glTextureBarrierNV, gl.missingFunctionPanic),
    TextureBuffer: glTextureBuffer = @ptrCast(glTextureBuffer, gl.missingFunctionPanic),
    TextureBufferEXT: glTextureBufferEXT = @ptrCast(glTextureBufferEXT, gl.missingFunctionPanic),
    TextureBufferRange: glTextureBufferRange = @ptrCast(glTextureBufferRange, gl.missingFunctionPanic),
    TextureBufferRangeEXT: glTextureBufferRangeEXT = @ptrCast(glTextureBufferRangeEXT, gl.missingFunctionPanic),
    TextureColorMaskSGIS: glTextureColorMaskSGIS = @ptrCast(glTextureColorMaskSGIS, gl.missingFunctionPanic),
    TextureImage1DEXT: glTextureImage1DEXT = @ptrCast(glTextureImage1DEXT, gl.missingFunctionPanic),
    TextureImage2DEXT: glTextureImage2DEXT = @ptrCast(glTextureImage2DEXT, gl.missingFunctionPanic),
    TextureImage2DMultisampleCoverageNV: glTextureImage2DMultisampleCoverageNV = @ptrCast(glTextureImage2DMultisampleCoverageNV, gl.missingFunctionPanic),
    TextureImage2DMultisampleNV: glTextureImage2DMultisampleNV = @ptrCast(glTextureImage2DMultisampleNV, gl.missingFunctionPanic),
    TextureImage3DEXT: glTextureImage3DEXT = @ptrCast(glTextureImage3DEXT, gl.missingFunctionPanic),
    TextureImage3DMultisampleCoverageNV: glTextureImage3DMultisampleCoverageNV = @ptrCast(glTextureImage3DMultisampleCoverageNV, gl.missingFunctionPanic),
    TextureImage3DMultisampleNV: glTextureImage3DMultisampleNV = @ptrCast(glTextureImage3DMultisampleNV, gl.missingFunctionPanic),
    TextureLightEXT: glTextureLightEXT = @ptrCast(glTextureLightEXT, gl.missingFunctionPanic),
    TextureMaterialEXT: glTextureMaterialEXT = @ptrCast(glTextureMaterialEXT, gl.missingFunctionPanic),
    TextureNormalEXT: glTextureNormalEXT = @ptrCast(glTextureNormalEXT, gl.missingFunctionPanic),
    TexturePageCommitmentEXT: glTexturePageCommitmentEXT = @ptrCast(glTexturePageCommitmentEXT, gl.missingFunctionPanic),
    TexturePageCommitmentMemNV: glTexturePageCommitmentMemNV = @ptrCast(glTexturePageCommitmentMemNV, gl.missingFunctionPanic),
    TextureParameterIiv: glTextureParameterIiv = @ptrCast(glTextureParameterIiv, gl.missingFunctionPanic),
    TextureParameterIivEXT: glTextureParameterIivEXT = @ptrCast(glTextureParameterIivEXT, gl.missingFunctionPanic),
    TextureParameterIuiv: glTextureParameterIuiv = @ptrCast(glTextureParameterIuiv, gl.missingFunctionPanic),
    TextureParameterIuivEXT: glTextureParameterIuivEXT = @ptrCast(glTextureParameterIuivEXT, gl.missingFunctionPanic),
    TextureParameterf: glTextureParameterf = @ptrCast(glTextureParameterf, gl.missingFunctionPanic),
    TextureParameterfEXT: glTextureParameterfEXT = @ptrCast(glTextureParameterfEXT, gl.missingFunctionPanic),
    TextureParameterfv: glTextureParameterfv = @ptrCast(glTextureParameterfv, gl.missingFunctionPanic),
    TextureParameterfvEXT: glTextureParameterfvEXT = @ptrCast(glTextureParameterfvEXT, gl.missingFunctionPanic),
    TextureParameteri: glTextureParameteri = @ptrCast(glTextureParameteri, gl.missingFunctionPanic),
    TextureParameteriEXT: glTextureParameteriEXT = @ptrCast(glTextureParameteriEXT, gl.missingFunctionPanic),
    TextureParameteriv: glTextureParameteriv = @ptrCast(glTextureParameteriv, gl.missingFunctionPanic),
    TextureParameterivEXT: glTextureParameterivEXT = @ptrCast(glTextureParameterivEXT, gl.missingFunctionPanic),
    TextureRangeAPPLE: glTextureRangeAPPLE = @ptrCast(glTextureRangeAPPLE, gl.missingFunctionPanic),
    TextureRenderbufferEXT: glTextureRenderbufferEXT = @ptrCast(glTextureRenderbufferEXT, gl.missingFunctionPanic),
    TextureStorage1D: glTextureStorage1D = @ptrCast(glTextureStorage1D, gl.missingFunctionPanic),
    TextureStorage1DEXT: glTextureStorage1DEXT = @ptrCast(glTextureStorage1DEXT, gl.missingFunctionPanic),
    TextureStorage2D: glTextureStorage2D = @ptrCast(glTextureStorage2D, gl.missingFunctionPanic),
    TextureStorage2DEXT: glTextureStorage2DEXT = @ptrCast(glTextureStorage2DEXT, gl.missingFunctionPanic),
    TextureStorage2DMultisample: glTextureStorage2DMultisample = @ptrCast(glTextureStorage2DMultisample, gl.missingFunctionPanic),
    TextureStorage2DMultisampleEXT: glTextureStorage2DMultisampleEXT = @ptrCast(glTextureStorage2DMultisampleEXT, gl.missingFunctionPanic),
    TextureStorage3D: glTextureStorage3D = @ptrCast(glTextureStorage3D, gl.missingFunctionPanic),
    TextureStorage3DEXT: glTextureStorage3DEXT = @ptrCast(glTextureStorage3DEXT, gl.missingFunctionPanic),
    TextureStorage3DMultisample: glTextureStorage3DMultisample = @ptrCast(glTextureStorage3DMultisample, gl.missingFunctionPanic),
    TextureStorage3DMultisampleEXT: glTextureStorage3DMultisampleEXT = @ptrCast(glTextureStorage3DMultisampleEXT, gl.missingFunctionPanic),
    TextureStorageMem1DEXT: glTextureStorageMem1DEXT = @ptrCast(glTextureStorageMem1DEXT, gl.missingFunctionPanic),
    TextureStorageMem2DEXT: glTextureStorageMem2DEXT = @ptrCast(glTextureStorageMem2DEXT, gl.missingFunctionPanic),
    TextureStorageMem2DMultisampleEXT: glTextureStorageMem2DMultisampleEXT = @ptrCast(glTextureStorageMem2DMultisampleEXT, gl.missingFunctionPanic),
    TextureStorageMem3DEXT: glTextureStorageMem3DEXT = @ptrCast(glTextureStorageMem3DEXT, gl.missingFunctionPanic),
    TextureStorageMem3DMultisampleEXT: glTextureStorageMem3DMultisampleEXT = @ptrCast(glTextureStorageMem3DMultisampleEXT, gl.missingFunctionPanic),
    TextureStorageSparseAMD: glTextureStorageSparseAMD = @ptrCast(glTextureStorageSparseAMD, gl.missingFunctionPanic),
    TextureSubImage1D: glTextureSubImage1D = @ptrCast(glTextureSubImage1D, gl.missingFunctionPanic),
    TextureSubImage1DEXT: glTextureSubImage1DEXT = @ptrCast(glTextureSubImage1DEXT, gl.missingFunctionPanic),
    TextureSubImage2D: glTextureSubImage2D = @ptrCast(glTextureSubImage2D, gl.missingFunctionPanic),
    TextureSubImage2DEXT: glTextureSubImage2DEXT = @ptrCast(glTextureSubImage2DEXT, gl.missingFunctionPanic),
    TextureSubImage3D: glTextureSubImage3D = @ptrCast(glTextureSubImage3D, gl.missingFunctionPanic),
    TextureSubImage3DEXT: glTextureSubImage3DEXT = @ptrCast(glTextureSubImage3DEXT, gl.missingFunctionPanic),
    TextureView: glTextureView = @ptrCast(glTextureView, gl.missingFunctionPanic),
    TrackMatrixNV: glTrackMatrixNV = @ptrCast(glTrackMatrixNV, gl.missingFunctionPanic),
    TransformFeedbackAttribsNV: glTransformFeedbackAttribsNV = @ptrCast(glTransformFeedbackAttribsNV, gl.missingFunctionPanic),
    TransformFeedbackBufferBase: glTransformFeedbackBufferBase = @ptrCast(glTransformFeedbackBufferBase, gl.missingFunctionPanic),
    TransformFeedbackBufferRange: glTransformFeedbackBufferRange = @ptrCast(glTransformFeedbackBufferRange, gl.missingFunctionPanic),
    TransformFeedbackStreamAttribsNV: glTransformFeedbackStreamAttribsNV = @ptrCast(glTransformFeedbackStreamAttribsNV, gl.missingFunctionPanic),
    TransformFeedbackVaryings: glTransformFeedbackVaryings = @ptrCast(glTransformFeedbackVaryings, gl.missingFunctionPanic),
    TransformFeedbackVaryingsEXT: glTransformFeedbackVaryingsEXT = @ptrCast(glTransformFeedbackVaryingsEXT, gl.missingFunctionPanic),
    TransformFeedbackVaryingsNV: glTransformFeedbackVaryingsNV = @ptrCast(glTransformFeedbackVaryingsNV, gl.missingFunctionPanic),
    TransformPathNV: glTransformPathNV = @ptrCast(glTransformPathNV, gl.missingFunctionPanic),
    TranslatexOES: glTranslatexOES = @ptrCast(glTranslatexOES, gl.missingFunctionPanic),
    Uniform1d: glUniform1d = @ptrCast(glUniform1d, gl.missingFunctionPanic),
    Uniform1dv: glUniform1dv = @ptrCast(glUniform1dv, gl.missingFunctionPanic),
    Uniform1f: glUniform1f = @ptrCast(glUniform1f, gl.missingFunctionPanic),
    Uniform1fARB: glUniform1fARB = @ptrCast(glUniform1fARB, gl.missingFunctionPanic),
    Uniform1fv: glUniform1fv = @ptrCast(glUniform1fv, gl.missingFunctionPanic),
    Uniform1fvARB: glUniform1fvARB = @ptrCast(glUniform1fvARB, gl.missingFunctionPanic),
    Uniform1i: glUniform1i = @ptrCast(glUniform1i, gl.missingFunctionPanic),
    Uniform1i64ARB: glUniform1i64ARB = @ptrCast(glUniform1i64ARB, gl.missingFunctionPanic),
    Uniform1i64NV: glUniform1i64NV = @ptrCast(glUniform1i64NV, gl.missingFunctionPanic),
    Uniform1i64vARB: glUniform1i64vARB = @ptrCast(glUniform1i64vARB, gl.missingFunctionPanic),
    Uniform1i64vNV: glUniform1i64vNV = @ptrCast(glUniform1i64vNV, gl.missingFunctionPanic),
    Uniform1iARB: glUniform1iARB = @ptrCast(glUniform1iARB, gl.missingFunctionPanic),
    Uniform1iv: glUniform1iv = @ptrCast(glUniform1iv, gl.missingFunctionPanic),
    Uniform1ivARB: glUniform1ivARB = @ptrCast(glUniform1ivARB, gl.missingFunctionPanic),
    Uniform1ui: glUniform1ui = @ptrCast(glUniform1ui, gl.missingFunctionPanic),
    Uniform1ui64ARB: glUniform1ui64ARB = @ptrCast(glUniform1ui64ARB, gl.missingFunctionPanic),
    Uniform1ui64NV: glUniform1ui64NV = @ptrCast(glUniform1ui64NV, gl.missingFunctionPanic),
    Uniform1ui64vARB: glUniform1ui64vARB = @ptrCast(glUniform1ui64vARB, gl.missingFunctionPanic),
    Uniform1ui64vNV: glUniform1ui64vNV = @ptrCast(glUniform1ui64vNV, gl.missingFunctionPanic),
    Uniform1uiEXT: glUniform1uiEXT = @ptrCast(glUniform1uiEXT, gl.missingFunctionPanic),
    Uniform1uiv: glUniform1uiv = @ptrCast(glUniform1uiv, gl.missingFunctionPanic),
    Uniform1uivEXT: glUniform1uivEXT = @ptrCast(glUniform1uivEXT, gl.missingFunctionPanic),
    Uniform2d: glUniform2d = @ptrCast(glUniform2d, gl.missingFunctionPanic),
    Uniform2dv: glUniform2dv = @ptrCast(glUniform2dv, gl.missingFunctionPanic),
    Uniform2f: glUniform2f = @ptrCast(glUniform2f, gl.missingFunctionPanic),
    Uniform2fARB: glUniform2fARB = @ptrCast(glUniform2fARB, gl.missingFunctionPanic),
    Uniform2fv: glUniform2fv = @ptrCast(glUniform2fv, gl.missingFunctionPanic),
    Uniform2fvARB: glUniform2fvARB = @ptrCast(glUniform2fvARB, gl.missingFunctionPanic),
    Uniform2i: glUniform2i = @ptrCast(glUniform2i, gl.missingFunctionPanic),
    Uniform2i64ARB: glUniform2i64ARB = @ptrCast(glUniform2i64ARB, gl.missingFunctionPanic),
    Uniform2i64NV: glUniform2i64NV = @ptrCast(glUniform2i64NV, gl.missingFunctionPanic),
    Uniform2i64vARB: glUniform2i64vARB = @ptrCast(glUniform2i64vARB, gl.missingFunctionPanic),
    Uniform2i64vNV: glUniform2i64vNV = @ptrCast(glUniform2i64vNV, gl.missingFunctionPanic),
    Uniform2iARB: glUniform2iARB = @ptrCast(glUniform2iARB, gl.missingFunctionPanic),
    Uniform2iv: glUniform2iv = @ptrCast(glUniform2iv, gl.missingFunctionPanic),
    Uniform2ivARB: glUniform2ivARB = @ptrCast(glUniform2ivARB, gl.missingFunctionPanic),
    Uniform2ui: glUniform2ui = @ptrCast(glUniform2ui, gl.missingFunctionPanic),
    Uniform2ui64ARB: glUniform2ui64ARB = @ptrCast(glUniform2ui64ARB, gl.missingFunctionPanic),
    Uniform2ui64NV: glUniform2ui64NV = @ptrCast(glUniform2ui64NV, gl.missingFunctionPanic),
    Uniform2ui64vARB: glUniform2ui64vARB = @ptrCast(glUniform2ui64vARB, gl.missingFunctionPanic),
    Uniform2ui64vNV: glUniform2ui64vNV = @ptrCast(glUniform2ui64vNV, gl.missingFunctionPanic),
    Uniform2uiEXT: glUniform2uiEXT = @ptrCast(glUniform2uiEXT, gl.missingFunctionPanic),
    Uniform2uiv: glUniform2uiv = @ptrCast(glUniform2uiv, gl.missingFunctionPanic),
    Uniform2uivEXT: glUniform2uivEXT = @ptrCast(glUniform2uivEXT, gl.missingFunctionPanic),
    Uniform3d: glUniform3d = @ptrCast(glUniform3d, gl.missingFunctionPanic),
    Uniform3dv: glUniform3dv = @ptrCast(glUniform3dv, gl.missingFunctionPanic),
    Uniform3f: glUniform3f = @ptrCast(glUniform3f, gl.missingFunctionPanic),
    Uniform3fARB: glUniform3fARB = @ptrCast(glUniform3fARB, gl.missingFunctionPanic),
    Uniform3fv: glUniform3fv = @ptrCast(glUniform3fv, gl.missingFunctionPanic),
    Uniform3fvARB: glUniform3fvARB = @ptrCast(glUniform3fvARB, gl.missingFunctionPanic),
    Uniform3i: glUniform3i = @ptrCast(glUniform3i, gl.missingFunctionPanic),
    Uniform3i64ARB: glUniform3i64ARB = @ptrCast(glUniform3i64ARB, gl.missingFunctionPanic),
    Uniform3i64NV: glUniform3i64NV = @ptrCast(glUniform3i64NV, gl.missingFunctionPanic),
    Uniform3i64vARB: glUniform3i64vARB = @ptrCast(glUniform3i64vARB, gl.missingFunctionPanic),
    Uniform3i64vNV: glUniform3i64vNV = @ptrCast(glUniform3i64vNV, gl.missingFunctionPanic),
    Uniform3iARB: glUniform3iARB = @ptrCast(glUniform3iARB, gl.missingFunctionPanic),
    Uniform3iv: glUniform3iv = @ptrCast(glUniform3iv, gl.missingFunctionPanic),
    Uniform3ivARB: glUniform3ivARB = @ptrCast(glUniform3ivARB, gl.missingFunctionPanic),
    Uniform3ui: glUniform3ui = @ptrCast(glUniform3ui, gl.missingFunctionPanic),
    Uniform3ui64ARB: glUniform3ui64ARB = @ptrCast(glUniform3ui64ARB, gl.missingFunctionPanic),
    Uniform3ui64NV: glUniform3ui64NV = @ptrCast(glUniform3ui64NV, gl.missingFunctionPanic),
    Uniform3ui64vARB: glUniform3ui64vARB = @ptrCast(glUniform3ui64vARB, gl.missingFunctionPanic),
    Uniform3ui64vNV: glUniform3ui64vNV = @ptrCast(glUniform3ui64vNV, gl.missingFunctionPanic),
    Uniform3uiEXT: glUniform3uiEXT = @ptrCast(glUniform3uiEXT, gl.missingFunctionPanic),
    Uniform3uiv: glUniform3uiv = @ptrCast(glUniform3uiv, gl.missingFunctionPanic),
    Uniform3uivEXT: glUniform3uivEXT = @ptrCast(glUniform3uivEXT, gl.missingFunctionPanic),
    Uniform4d: glUniform4d = @ptrCast(glUniform4d, gl.missingFunctionPanic),
    Uniform4dv: glUniform4dv = @ptrCast(glUniform4dv, gl.missingFunctionPanic),
    Uniform4f: glUniform4f = @ptrCast(glUniform4f, gl.missingFunctionPanic),
    Uniform4fARB: glUniform4fARB = @ptrCast(glUniform4fARB, gl.missingFunctionPanic),
    Uniform4fv: glUniform4fv = @ptrCast(glUniform4fv, gl.missingFunctionPanic),
    Uniform4fvARB: glUniform4fvARB = @ptrCast(glUniform4fvARB, gl.missingFunctionPanic),
    Uniform4i: glUniform4i = @ptrCast(glUniform4i, gl.missingFunctionPanic),
    Uniform4i64ARB: glUniform4i64ARB = @ptrCast(glUniform4i64ARB, gl.missingFunctionPanic),
    Uniform4i64NV: glUniform4i64NV = @ptrCast(glUniform4i64NV, gl.missingFunctionPanic),
    Uniform4i64vARB: glUniform4i64vARB = @ptrCast(glUniform4i64vARB, gl.missingFunctionPanic),
    Uniform4i64vNV: glUniform4i64vNV = @ptrCast(glUniform4i64vNV, gl.missingFunctionPanic),
    Uniform4iARB: glUniform4iARB = @ptrCast(glUniform4iARB, gl.missingFunctionPanic),
    Uniform4iv: glUniform4iv = @ptrCast(glUniform4iv, gl.missingFunctionPanic),
    Uniform4ivARB: glUniform4ivARB = @ptrCast(glUniform4ivARB, gl.missingFunctionPanic),
    Uniform4ui: glUniform4ui = @ptrCast(glUniform4ui, gl.missingFunctionPanic),
    Uniform4ui64ARB: glUniform4ui64ARB = @ptrCast(glUniform4ui64ARB, gl.missingFunctionPanic),
    Uniform4ui64NV: glUniform4ui64NV = @ptrCast(glUniform4ui64NV, gl.missingFunctionPanic),
    Uniform4ui64vARB: glUniform4ui64vARB = @ptrCast(glUniform4ui64vARB, gl.missingFunctionPanic),
    Uniform4ui64vNV: glUniform4ui64vNV = @ptrCast(glUniform4ui64vNV, gl.missingFunctionPanic),
    Uniform4uiEXT: glUniform4uiEXT = @ptrCast(glUniform4uiEXT, gl.missingFunctionPanic),
    Uniform4uiv: glUniform4uiv = @ptrCast(glUniform4uiv, gl.missingFunctionPanic),
    Uniform4uivEXT: glUniform4uivEXT = @ptrCast(glUniform4uivEXT, gl.missingFunctionPanic),
    UniformBlockBinding: glUniformBlockBinding = @ptrCast(glUniformBlockBinding, gl.missingFunctionPanic),
    UniformBufferEXT: glUniformBufferEXT = @ptrCast(glUniformBufferEXT, gl.missingFunctionPanic),
    UniformHandleui64ARB: glUniformHandleui64ARB = @ptrCast(glUniformHandleui64ARB, gl.missingFunctionPanic),
    UniformHandleui64NV: glUniformHandleui64NV = @ptrCast(glUniformHandleui64NV, gl.missingFunctionPanic),
    UniformHandleui64vARB: glUniformHandleui64vARB = @ptrCast(glUniformHandleui64vARB, gl.missingFunctionPanic),
    UniformHandleui64vNV: glUniformHandleui64vNV = @ptrCast(glUniformHandleui64vNV, gl.missingFunctionPanic),
    UniformMatrix2dv: glUniformMatrix2dv = @ptrCast(glUniformMatrix2dv, gl.missingFunctionPanic),
    UniformMatrix2fv: glUniformMatrix2fv = @ptrCast(glUniformMatrix2fv, gl.missingFunctionPanic),
    UniformMatrix2fvARB: glUniformMatrix2fvARB = @ptrCast(glUniformMatrix2fvARB, gl.missingFunctionPanic),
    UniformMatrix2x3dv: glUniformMatrix2x3dv = @ptrCast(glUniformMatrix2x3dv, gl.missingFunctionPanic),
    UniformMatrix2x3fv: glUniformMatrix2x3fv = @ptrCast(glUniformMatrix2x3fv, gl.missingFunctionPanic),
    UniformMatrix2x4dv: glUniformMatrix2x4dv = @ptrCast(glUniformMatrix2x4dv, gl.missingFunctionPanic),
    UniformMatrix2x4fv: glUniformMatrix2x4fv = @ptrCast(glUniformMatrix2x4fv, gl.missingFunctionPanic),
    UniformMatrix3dv: glUniformMatrix3dv = @ptrCast(glUniformMatrix3dv, gl.missingFunctionPanic),
    UniformMatrix3fv: glUniformMatrix3fv = @ptrCast(glUniformMatrix3fv, gl.missingFunctionPanic),
    UniformMatrix3fvARB: glUniformMatrix3fvARB = @ptrCast(glUniformMatrix3fvARB, gl.missingFunctionPanic),
    UniformMatrix3x2dv: glUniformMatrix3x2dv = @ptrCast(glUniformMatrix3x2dv, gl.missingFunctionPanic),
    UniformMatrix3x2fv: glUniformMatrix3x2fv = @ptrCast(glUniformMatrix3x2fv, gl.missingFunctionPanic),
    UniformMatrix3x4dv: glUniformMatrix3x4dv = @ptrCast(glUniformMatrix3x4dv, gl.missingFunctionPanic),
    UniformMatrix3x4fv: glUniformMatrix3x4fv = @ptrCast(glUniformMatrix3x4fv, gl.missingFunctionPanic),
    UniformMatrix4dv: glUniformMatrix4dv = @ptrCast(glUniformMatrix4dv, gl.missingFunctionPanic),
    UniformMatrix4fv: glUniformMatrix4fv = @ptrCast(glUniformMatrix4fv, gl.missingFunctionPanic),
    UniformMatrix4fvARB: glUniformMatrix4fvARB = @ptrCast(glUniformMatrix4fvARB, gl.missingFunctionPanic),
    UniformMatrix4x2dv: glUniformMatrix4x2dv = @ptrCast(glUniformMatrix4x2dv, gl.missingFunctionPanic),
    UniformMatrix4x2fv: glUniformMatrix4x2fv = @ptrCast(glUniformMatrix4x2fv, gl.missingFunctionPanic),
    UniformMatrix4x3dv: glUniformMatrix4x3dv = @ptrCast(glUniformMatrix4x3dv, gl.missingFunctionPanic),
    UniformMatrix4x3fv: glUniformMatrix4x3fv = @ptrCast(glUniformMatrix4x3fv, gl.missingFunctionPanic),
    UniformSubroutinesuiv: glUniformSubroutinesuiv = @ptrCast(glUniformSubroutinesuiv, gl.missingFunctionPanic),
    Uniformui64NV: glUniformui64NV = @ptrCast(glUniformui64NV, gl.missingFunctionPanic),
    Uniformui64vNV: glUniformui64vNV = @ptrCast(glUniformui64vNV, gl.missingFunctionPanic),
    UnlockArraysEXT: glUnlockArraysEXT = @ptrCast(glUnlockArraysEXT, gl.missingFunctionPanic),
    UnmapBuffer: glUnmapBuffer = @ptrCast(glUnmapBuffer, gl.missingFunctionPanic),
    UnmapBufferARB: glUnmapBufferARB = @ptrCast(glUnmapBufferARB, gl.missingFunctionPanic),
    UnmapNamedBuffer: glUnmapNamedBuffer = @ptrCast(glUnmapNamedBuffer, gl.missingFunctionPanic),
    UnmapNamedBufferEXT: glUnmapNamedBufferEXT = @ptrCast(glUnmapNamedBufferEXT, gl.missingFunctionPanic),
    UnmapObjectBufferATI: glUnmapObjectBufferATI = @ptrCast(glUnmapObjectBufferATI, gl.missingFunctionPanic),
    UnmapTexture2DINTEL: glUnmapTexture2DINTEL = @ptrCast(glUnmapTexture2DINTEL, gl.missingFunctionPanic),
    UpdateObjectBufferATI: glUpdateObjectBufferATI = @ptrCast(glUpdateObjectBufferATI, gl.missingFunctionPanic),
    UploadGpuMaskNVX: glUploadGpuMaskNVX = @ptrCast(glUploadGpuMaskNVX, gl.missingFunctionPanic),
    UseProgram: glUseProgram = @ptrCast(glUseProgram, gl.missingFunctionPanic),
    UseProgramObjectARB: glUseProgramObjectARB = @ptrCast(glUseProgramObjectARB, gl.missingFunctionPanic),
    UseProgramStages: glUseProgramStages = @ptrCast(glUseProgramStages, gl.missingFunctionPanic),
    UseShaderProgramEXT: glUseShaderProgramEXT = @ptrCast(glUseShaderProgramEXT, gl.missingFunctionPanic),
    VDPAUFiniNV: glVDPAUFiniNV = @ptrCast(glVDPAUFiniNV, gl.missingFunctionPanic),
    VDPAUGetSurfaceivNV: glVDPAUGetSurfaceivNV = @ptrCast(glVDPAUGetSurfaceivNV, gl.missingFunctionPanic),
    VDPAUInitNV: glVDPAUInitNV = @ptrCast(glVDPAUInitNV, gl.missingFunctionPanic),
    VDPAUIsSurfaceNV: glVDPAUIsSurfaceNV = @ptrCast(glVDPAUIsSurfaceNV, gl.missingFunctionPanic),
    VDPAUMapSurfacesNV: glVDPAUMapSurfacesNV = @ptrCast(glVDPAUMapSurfacesNV, gl.missingFunctionPanic),
    VDPAURegisterOutputSurfaceNV: glVDPAURegisterOutputSurfaceNV = @ptrCast(glVDPAURegisterOutputSurfaceNV, gl.missingFunctionPanic),
    VDPAURegisterVideoSurfaceNV: glVDPAURegisterVideoSurfaceNV = @ptrCast(glVDPAURegisterVideoSurfaceNV, gl.missingFunctionPanic),
    VDPAURegisterVideoSurfaceWithPictureStructureNV: glVDPAURegisterVideoSurfaceWithPictureStructureNV = @ptrCast(glVDPAURegisterVideoSurfaceWithPictureStructureNV, gl.missingFunctionPanic),
    VDPAUSurfaceAccessNV: glVDPAUSurfaceAccessNV = @ptrCast(glVDPAUSurfaceAccessNV, gl.missingFunctionPanic),
    VDPAUUnmapSurfacesNV: glVDPAUUnmapSurfacesNV = @ptrCast(glVDPAUUnmapSurfacesNV, gl.missingFunctionPanic),
    VDPAUUnregisterSurfaceNV: glVDPAUUnregisterSurfaceNV = @ptrCast(glVDPAUUnregisterSurfaceNV, gl.missingFunctionPanic),
    ValidateProgram: glValidateProgram = @ptrCast(glValidateProgram, gl.missingFunctionPanic),
    ValidateProgramARB: glValidateProgramARB = @ptrCast(glValidateProgramARB, gl.missingFunctionPanic),
    ValidateProgramPipeline: glValidateProgramPipeline = @ptrCast(glValidateProgramPipeline, gl.missingFunctionPanic),
    VariantArrayObjectATI: glVariantArrayObjectATI = @ptrCast(glVariantArrayObjectATI, gl.missingFunctionPanic),
    VariantPointerEXT: glVariantPointerEXT = @ptrCast(glVariantPointerEXT, gl.missingFunctionPanic),
    VariantbvEXT: glVariantbvEXT = @ptrCast(glVariantbvEXT, gl.missingFunctionPanic),
    VariantdvEXT: glVariantdvEXT = @ptrCast(glVariantdvEXT, gl.missingFunctionPanic),
    VariantfvEXT: glVariantfvEXT = @ptrCast(glVariantfvEXT, gl.missingFunctionPanic),
    VariantivEXT: glVariantivEXT = @ptrCast(glVariantivEXT, gl.missingFunctionPanic),
    VariantsvEXT: glVariantsvEXT = @ptrCast(glVariantsvEXT, gl.missingFunctionPanic),
    VariantubvEXT: glVariantubvEXT = @ptrCast(glVariantubvEXT, gl.missingFunctionPanic),
    VariantuivEXT: glVariantuivEXT = @ptrCast(glVariantuivEXT, gl.missingFunctionPanic),
    VariantusvEXT: glVariantusvEXT = @ptrCast(glVariantusvEXT, gl.missingFunctionPanic),
    Vertex2bOES: glVertex2bOES = @ptrCast(glVertex2bOES, gl.missingFunctionPanic),
    Vertex2bvOES: glVertex2bvOES = @ptrCast(glVertex2bvOES, gl.missingFunctionPanic),
    Vertex2hNV: glVertex2hNV = @ptrCast(glVertex2hNV, gl.missingFunctionPanic),
    Vertex2hvNV: glVertex2hvNV = @ptrCast(glVertex2hvNV, gl.missingFunctionPanic),
    Vertex2xOES: glVertex2xOES = @ptrCast(glVertex2xOES, gl.missingFunctionPanic),
    Vertex2xvOES: glVertex2xvOES = @ptrCast(glVertex2xvOES, gl.missingFunctionPanic),
    Vertex3bOES: glVertex3bOES = @ptrCast(glVertex3bOES, gl.missingFunctionPanic),
    Vertex3bvOES: glVertex3bvOES = @ptrCast(glVertex3bvOES, gl.missingFunctionPanic),
    Vertex3hNV: glVertex3hNV = @ptrCast(glVertex3hNV, gl.missingFunctionPanic),
    Vertex3hvNV: glVertex3hvNV = @ptrCast(glVertex3hvNV, gl.missingFunctionPanic),
    Vertex3xOES: glVertex3xOES = @ptrCast(glVertex3xOES, gl.missingFunctionPanic),
    Vertex3xvOES: glVertex3xvOES = @ptrCast(glVertex3xvOES, gl.missingFunctionPanic),
    Vertex4bOES: glVertex4bOES = @ptrCast(glVertex4bOES, gl.missingFunctionPanic),
    Vertex4bvOES: glVertex4bvOES = @ptrCast(glVertex4bvOES, gl.missingFunctionPanic),
    Vertex4hNV: glVertex4hNV = @ptrCast(glVertex4hNV, gl.missingFunctionPanic),
    Vertex4hvNV: glVertex4hvNV = @ptrCast(glVertex4hvNV, gl.missingFunctionPanic),
    Vertex4xOES: glVertex4xOES = @ptrCast(glVertex4xOES, gl.missingFunctionPanic),
    Vertex4xvOES: glVertex4xvOES = @ptrCast(glVertex4xvOES, gl.missingFunctionPanic),
    VertexArrayAttribBinding: glVertexArrayAttribBinding = @ptrCast(glVertexArrayAttribBinding, gl.missingFunctionPanic),
    VertexArrayAttribFormat: glVertexArrayAttribFormat = @ptrCast(glVertexArrayAttribFormat, gl.missingFunctionPanic),
    VertexArrayAttribIFormat: glVertexArrayAttribIFormat = @ptrCast(glVertexArrayAttribIFormat, gl.missingFunctionPanic),
    VertexArrayAttribLFormat: glVertexArrayAttribLFormat = @ptrCast(glVertexArrayAttribLFormat, gl.missingFunctionPanic),
    VertexArrayBindVertexBufferEXT: glVertexArrayBindVertexBufferEXT = @ptrCast(glVertexArrayBindVertexBufferEXT, gl.missingFunctionPanic),
    VertexArrayBindingDivisor: glVertexArrayBindingDivisor = @ptrCast(glVertexArrayBindingDivisor, gl.missingFunctionPanic),
    VertexArrayColorOffsetEXT: glVertexArrayColorOffsetEXT = @ptrCast(glVertexArrayColorOffsetEXT, gl.missingFunctionPanic),
    VertexArrayEdgeFlagOffsetEXT: glVertexArrayEdgeFlagOffsetEXT = @ptrCast(glVertexArrayEdgeFlagOffsetEXT, gl.missingFunctionPanic),
    VertexArrayElementBuffer: glVertexArrayElementBuffer = @ptrCast(glVertexArrayElementBuffer, gl.missingFunctionPanic),
    VertexArrayFogCoordOffsetEXT: glVertexArrayFogCoordOffsetEXT = @ptrCast(glVertexArrayFogCoordOffsetEXT, gl.missingFunctionPanic),
    VertexArrayIndexOffsetEXT: glVertexArrayIndexOffsetEXT = @ptrCast(glVertexArrayIndexOffsetEXT, gl.missingFunctionPanic),
    VertexArrayMultiTexCoordOffsetEXT: glVertexArrayMultiTexCoordOffsetEXT = @ptrCast(glVertexArrayMultiTexCoordOffsetEXT, gl.missingFunctionPanic),
    VertexArrayNormalOffsetEXT: glVertexArrayNormalOffsetEXT = @ptrCast(glVertexArrayNormalOffsetEXT, gl.missingFunctionPanic),
    VertexArrayParameteriAPPLE: glVertexArrayParameteriAPPLE = @ptrCast(glVertexArrayParameteriAPPLE, gl.missingFunctionPanic),
    VertexArrayRangeAPPLE: glVertexArrayRangeAPPLE = @ptrCast(glVertexArrayRangeAPPLE, gl.missingFunctionPanic),
    VertexArrayRangeNV: glVertexArrayRangeNV = @ptrCast(glVertexArrayRangeNV, gl.missingFunctionPanic),
    VertexArraySecondaryColorOffsetEXT: glVertexArraySecondaryColorOffsetEXT = @ptrCast(glVertexArraySecondaryColorOffsetEXT, gl.missingFunctionPanic),
    VertexArrayTexCoordOffsetEXT: glVertexArrayTexCoordOffsetEXT = @ptrCast(glVertexArrayTexCoordOffsetEXT, gl.missingFunctionPanic),
    VertexArrayVertexAttribBindingEXT: glVertexArrayVertexAttribBindingEXT = @ptrCast(glVertexArrayVertexAttribBindingEXT, gl.missingFunctionPanic),
    VertexArrayVertexAttribDivisorEXT: glVertexArrayVertexAttribDivisorEXT = @ptrCast(glVertexArrayVertexAttribDivisorEXT, gl.missingFunctionPanic),
    VertexArrayVertexAttribFormatEXT: glVertexArrayVertexAttribFormatEXT = @ptrCast(glVertexArrayVertexAttribFormatEXT, gl.missingFunctionPanic),
    VertexArrayVertexAttribIFormatEXT: glVertexArrayVertexAttribIFormatEXT = @ptrCast(glVertexArrayVertexAttribIFormatEXT, gl.missingFunctionPanic),
    VertexArrayVertexAttribIOffsetEXT: glVertexArrayVertexAttribIOffsetEXT = @ptrCast(glVertexArrayVertexAttribIOffsetEXT, gl.missingFunctionPanic),
    VertexArrayVertexAttribLFormatEXT: glVertexArrayVertexAttribLFormatEXT = @ptrCast(glVertexArrayVertexAttribLFormatEXT, gl.missingFunctionPanic),
    VertexArrayVertexAttribLOffsetEXT: glVertexArrayVertexAttribLOffsetEXT = @ptrCast(glVertexArrayVertexAttribLOffsetEXT, gl.missingFunctionPanic),
    VertexArrayVertexAttribOffsetEXT: glVertexArrayVertexAttribOffsetEXT = @ptrCast(glVertexArrayVertexAttribOffsetEXT, gl.missingFunctionPanic),
    VertexArrayVertexBindingDivisorEXT: glVertexArrayVertexBindingDivisorEXT = @ptrCast(glVertexArrayVertexBindingDivisorEXT, gl.missingFunctionPanic),
    VertexArrayVertexBuffer: glVertexArrayVertexBuffer = @ptrCast(glVertexArrayVertexBuffer, gl.missingFunctionPanic),
    VertexArrayVertexBuffers: glVertexArrayVertexBuffers = @ptrCast(glVertexArrayVertexBuffers, gl.missingFunctionPanic),
    VertexArrayVertexOffsetEXT: glVertexArrayVertexOffsetEXT = @ptrCast(glVertexArrayVertexOffsetEXT, gl.missingFunctionPanic),
    VertexAttrib1d: glVertexAttrib1d = @ptrCast(glVertexAttrib1d, gl.missingFunctionPanic),
    VertexAttrib1dARB: glVertexAttrib1dARB = @ptrCast(glVertexAttrib1dARB, gl.missingFunctionPanic),
    VertexAttrib1dNV: glVertexAttrib1dNV = @ptrCast(glVertexAttrib1dNV, gl.missingFunctionPanic),
    VertexAttrib1dv: glVertexAttrib1dv = @ptrCast(glVertexAttrib1dv, gl.missingFunctionPanic),
    VertexAttrib1dvARB: glVertexAttrib1dvARB = @ptrCast(glVertexAttrib1dvARB, gl.missingFunctionPanic),
    VertexAttrib1dvNV: glVertexAttrib1dvNV = @ptrCast(glVertexAttrib1dvNV, gl.missingFunctionPanic),
    VertexAttrib1f: glVertexAttrib1f = @ptrCast(glVertexAttrib1f, gl.missingFunctionPanic),
    VertexAttrib1fARB: glVertexAttrib1fARB = @ptrCast(glVertexAttrib1fARB, gl.missingFunctionPanic),
    VertexAttrib1fNV: glVertexAttrib1fNV = @ptrCast(glVertexAttrib1fNV, gl.missingFunctionPanic),
    VertexAttrib1fv: glVertexAttrib1fv = @ptrCast(glVertexAttrib1fv, gl.missingFunctionPanic),
    VertexAttrib1fvARB: glVertexAttrib1fvARB = @ptrCast(glVertexAttrib1fvARB, gl.missingFunctionPanic),
    VertexAttrib1fvNV: glVertexAttrib1fvNV = @ptrCast(glVertexAttrib1fvNV, gl.missingFunctionPanic),
    VertexAttrib1hNV: glVertexAttrib1hNV = @ptrCast(glVertexAttrib1hNV, gl.missingFunctionPanic),
    VertexAttrib1hvNV: glVertexAttrib1hvNV = @ptrCast(glVertexAttrib1hvNV, gl.missingFunctionPanic),
    VertexAttrib1s: glVertexAttrib1s = @ptrCast(glVertexAttrib1s, gl.missingFunctionPanic),
    VertexAttrib1sARB: glVertexAttrib1sARB = @ptrCast(glVertexAttrib1sARB, gl.missingFunctionPanic),
    VertexAttrib1sNV: glVertexAttrib1sNV = @ptrCast(glVertexAttrib1sNV, gl.missingFunctionPanic),
    VertexAttrib1sv: glVertexAttrib1sv = @ptrCast(glVertexAttrib1sv, gl.missingFunctionPanic),
    VertexAttrib1svARB: glVertexAttrib1svARB = @ptrCast(glVertexAttrib1svARB, gl.missingFunctionPanic),
    VertexAttrib1svNV: glVertexAttrib1svNV = @ptrCast(glVertexAttrib1svNV, gl.missingFunctionPanic),
    VertexAttrib2d: glVertexAttrib2d = @ptrCast(glVertexAttrib2d, gl.missingFunctionPanic),
    VertexAttrib2dARB: glVertexAttrib2dARB = @ptrCast(glVertexAttrib2dARB, gl.missingFunctionPanic),
    VertexAttrib2dNV: glVertexAttrib2dNV = @ptrCast(glVertexAttrib2dNV, gl.missingFunctionPanic),
    VertexAttrib2dv: glVertexAttrib2dv = @ptrCast(glVertexAttrib2dv, gl.missingFunctionPanic),
    VertexAttrib2dvARB: glVertexAttrib2dvARB = @ptrCast(glVertexAttrib2dvARB, gl.missingFunctionPanic),
    VertexAttrib2dvNV: glVertexAttrib2dvNV = @ptrCast(glVertexAttrib2dvNV, gl.missingFunctionPanic),
    VertexAttrib2f: glVertexAttrib2f = @ptrCast(glVertexAttrib2f, gl.missingFunctionPanic),
    VertexAttrib2fARB: glVertexAttrib2fARB = @ptrCast(glVertexAttrib2fARB, gl.missingFunctionPanic),
    VertexAttrib2fNV: glVertexAttrib2fNV = @ptrCast(glVertexAttrib2fNV, gl.missingFunctionPanic),
    VertexAttrib2fv: glVertexAttrib2fv = @ptrCast(glVertexAttrib2fv, gl.missingFunctionPanic),
    VertexAttrib2fvARB: glVertexAttrib2fvARB = @ptrCast(glVertexAttrib2fvARB, gl.missingFunctionPanic),
    VertexAttrib2fvNV: glVertexAttrib2fvNV = @ptrCast(glVertexAttrib2fvNV, gl.missingFunctionPanic),
    VertexAttrib2hNV: glVertexAttrib2hNV = @ptrCast(glVertexAttrib2hNV, gl.missingFunctionPanic),
    VertexAttrib2hvNV: glVertexAttrib2hvNV = @ptrCast(glVertexAttrib2hvNV, gl.missingFunctionPanic),
    VertexAttrib2s: glVertexAttrib2s = @ptrCast(glVertexAttrib2s, gl.missingFunctionPanic),
    VertexAttrib2sARB: glVertexAttrib2sARB = @ptrCast(glVertexAttrib2sARB, gl.missingFunctionPanic),
    VertexAttrib2sNV: glVertexAttrib2sNV = @ptrCast(glVertexAttrib2sNV, gl.missingFunctionPanic),
    VertexAttrib2sv: glVertexAttrib2sv = @ptrCast(glVertexAttrib2sv, gl.missingFunctionPanic),
    VertexAttrib2svARB: glVertexAttrib2svARB = @ptrCast(glVertexAttrib2svARB, gl.missingFunctionPanic),
    VertexAttrib2svNV: glVertexAttrib2svNV = @ptrCast(glVertexAttrib2svNV, gl.missingFunctionPanic),
    VertexAttrib3d: glVertexAttrib3d = @ptrCast(glVertexAttrib3d, gl.missingFunctionPanic),
    VertexAttrib3dARB: glVertexAttrib3dARB = @ptrCast(glVertexAttrib3dARB, gl.missingFunctionPanic),
    VertexAttrib3dNV: glVertexAttrib3dNV = @ptrCast(glVertexAttrib3dNV, gl.missingFunctionPanic),
    VertexAttrib3dv: glVertexAttrib3dv = @ptrCast(glVertexAttrib3dv, gl.missingFunctionPanic),
    VertexAttrib3dvARB: glVertexAttrib3dvARB = @ptrCast(glVertexAttrib3dvARB, gl.missingFunctionPanic),
    VertexAttrib3dvNV: glVertexAttrib3dvNV = @ptrCast(glVertexAttrib3dvNV, gl.missingFunctionPanic),
    VertexAttrib3f: glVertexAttrib3f = @ptrCast(glVertexAttrib3f, gl.missingFunctionPanic),
    VertexAttrib3fARB: glVertexAttrib3fARB = @ptrCast(glVertexAttrib3fARB, gl.missingFunctionPanic),
    VertexAttrib3fNV: glVertexAttrib3fNV = @ptrCast(glVertexAttrib3fNV, gl.missingFunctionPanic),
    VertexAttrib3fv: glVertexAttrib3fv = @ptrCast(glVertexAttrib3fv, gl.missingFunctionPanic),
    VertexAttrib3fvARB: glVertexAttrib3fvARB = @ptrCast(glVertexAttrib3fvARB, gl.missingFunctionPanic),
    VertexAttrib3fvNV: glVertexAttrib3fvNV = @ptrCast(glVertexAttrib3fvNV, gl.missingFunctionPanic),
    VertexAttrib3hNV: glVertexAttrib3hNV = @ptrCast(glVertexAttrib3hNV, gl.missingFunctionPanic),
    VertexAttrib3hvNV: glVertexAttrib3hvNV = @ptrCast(glVertexAttrib3hvNV, gl.missingFunctionPanic),
    VertexAttrib3s: glVertexAttrib3s = @ptrCast(glVertexAttrib3s, gl.missingFunctionPanic),
    VertexAttrib3sARB: glVertexAttrib3sARB = @ptrCast(glVertexAttrib3sARB, gl.missingFunctionPanic),
    VertexAttrib3sNV: glVertexAttrib3sNV = @ptrCast(glVertexAttrib3sNV, gl.missingFunctionPanic),
    VertexAttrib3sv: glVertexAttrib3sv = @ptrCast(glVertexAttrib3sv, gl.missingFunctionPanic),
    VertexAttrib3svARB: glVertexAttrib3svARB = @ptrCast(glVertexAttrib3svARB, gl.missingFunctionPanic),
    VertexAttrib3svNV: glVertexAttrib3svNV = @ptrCast(glVertexAttrib3svNV, gl.missingFunctionPanic),
    VertexAttrib4Nbv: glVertexAttrib4Nbv = @ptrCast(glVertexAttrib4Nbv, gl.missingFunctionPanic),
    VertexAttrib4NbvARB: glVertexAttrib4NbvARB = @ptrCast(glVertexAttrib4NbvARB, gl.missingFunctionPanic),
    VertexAttrib4Niv: glVertexAttrib4Niv = @ptrCast(glVertexAttrib4Niv, gl.missingFunctionPanic),
    VertexAttrib4NivARB: glVertexAttrib4NivARB = @ptrCast(glVertexAttrib4NivARB, gl.missingFunctionPanic),
    VertexAttrib4Nsv: glVertexAttrib4Nsv = @ptrCast(glVertexAttrib4Nsv, gl.missingFunctionPanic),
    VertexAttrib4NsvARB: glVertexAttrib4NsvARB = @ptrCast(glVertexAttrib4NsvARB, gl.missingFunctionPanic),
    VertexAttrib4Nub: glVertexAttrib4Nub = @ptrCast(glVertexAttrib4Nub, gl.missingFunctionPanic),
    VertexAttrib4NubARB: glVertexAttrib4NubARB = @ptrCast(glVertexAttrib4NubARB, gl.missingFunctionPanic),
    VertexAttrib4Nubv: glVertexAttrib4Nubv = @ptrCast(glVertexAttrib4Nubv, gl.missingFunctionPanic),
    VertexAttrib4NubvARB: glVertexAttrib4NubvARB = @ptrCast(glVertexAttrib4NubvARB, gl.missingFunctionPanic),
    VertexAttrib4Nuiv: glVertexAttrib4Nuiv = @ptrCast(glVertexAttrib4Nuiv, gl.missingFunctionPanic),
    VertexAttrib4NuivARB: glVertexAttrib4NuivARB = @ptrCast(glVertexAttrib4NuivARB, gl.missingFunctionPanic),
    VertexAttrib4Nusv: glVertexAttrib4Nusv = @ptrCast(glVertexAttrib4Nusv, gl.missingFunctionPanic),
    VertexAttrib4NusvARB: glVertexAttrib4NusvARB = @ptrCast(glVertexAttrib4NusvARB, gl.missingFunctionPanic),
    VertexAttrib4bv: glVertexAttrib4bv = @ptrCast(glVertexAttrib4bv, gl.missingFunctionPanic),
    VertexAttrib4bvARB: glVertexAttrib4bvARB = @ptrCast(glVertexAttrib4bvARB, gl.missingFunctionPanic),
    VertexAttrib4d: glVertexAttrib4d = @ptrCast(glVertexAttrib4d, gl.missingFunctionPanic),
    VertexAttrib4dARB: glVertexAttrib4dARB = @ptrCast(glVertexAttrib4dARB, gl.missingFunctionPanic),
    VertexAttrib4dNV: glVertexAttrib4dNV = @ptrCast(glVertexAttrib4dNV, gl.missingFunctionPanic),
    VertexAttrib4dv: glVertexAttrib4dv = @ptrCast(glVertexAttrib4dv, gl.missingFunctionPanic),
    VertexAttrib4dvARB: glVertexAttrib4dvARB = @ptrCast(glVertexAttrib4dvARB, gl.missingFunctionPanic),
    VertexAttrib4dvNV: glVertexAttrib4dvNV = @ptrCast(glVertexAttrib4dvNV, gl.missingFunctionPanic),
    VertexAttrib4f: glVertexAttrib4f = @ptrCast(glVertexAttrib4f, gl.missingFunctionPanic),
    VertexAttrib4fARB: glVertexAttrib4fARB = @ptrCast(glVertexAttrib4fARB, gl.missingFunctionPanic),
    VertexAttrib4fNV: glVertexAttrib4fNV = @ptrCast(glVertexAttrib4fNV, gl.missingFunctionPanic),
    VertexAttrib4fv: glVertexAttrib4fv = @ptrCast(glVertexAttrib4fv, gl.missingFunctionPanic),
    VertexAttrib4fvARB: glVertexAttrib4fvARB = @ptrCast(glVertexAttrib4fvARB, gl.missingFunctionPanic),
    VertexAttrib4fvNV: glVertexAttrib4fvNV = @ptrCast(glVertexAttrib4fvNV, gl.missingFunctionPanic),
    VertexAttrib4hNV: glVertexAttrib4hNV = @ptrCast(glVertexAttrib4hNV, gl.missingFunctionPanic),
    VertexAttrib4hvNV: glVertexAttrib4hvNV = @ptrCast(glVertexAttrib4hvNV, gl.missingFunctionPanic),
    VertexAttrib4iv: glVertexAttrib4iv = @ptrCast(glVertexAttrib4iv, gl.missingFunctionPanic),
    VertexAttrib4ivARB: glVertexAttrib4ivARB = @ptrCast(glVertexAttrib4ivARB, gl.missingFunctionPanic),
    VertexAttrib4s: glVertexAttrib4s = @ptrCast(glVertexAttrib4s, gl.missingFunctionPanic),
    VertexAttrib4sARB: glVertexAttrib4sARB = @ptrCast(glVertexAttrib4sARB, gl.missingFunctionPanic),
    VertexAttrib4sNV: glVertexAttrib4sNV = @ptrCast(glVertexAttrib4sNV, gl.missingFunctionPanic),
    VertexAttrib4sv: glVertexAttrib4sv = @ptrCast(glVertexAttrib4sv, gl.missingFunctionPanic),
    VertexAttrib4svARB: glVertexAttrib4svARB = @ptrCast(glVertexAttrib4svARB, gl.missingFunctionPanic),
    VertexAttrib4svNV: glVertexAttrib4svNV = @ptrCast(glVertexAttrib4svNV, gl.missingFunctionPanic),
    VertexAttrib4ubNV: glVertexAttrib4ubNV = @ptrCast(glVertexAttrib4ubNV, gl.missingFunctionPanic),
    VertexAttrib4ubv: glVertexAttrib4ubv = @ptrCast(glVertexAttrib4ubv, gl.missingFunctionPanic),
    VertexAttrib4ubvARB: glVertexAttrib4ubvARB = @ptrCast(glVertexAttrib4ubvARB, gl.missingFunctionPanic),
    VertexAttrib4ubvNV: glVertexAttrib4ubvNV = @ptrCast(glVertexAttrib4ubvNV, gl.missingFunctionPanic),
    VertexAttrib4uiv: glVertexAttrib4uiv = @ptrCast(glVertexAttrib4uiv, gl.missingFunctionPanic),
    VertexAttrib4uivARB: glVertexAttrib4uivARB = @ptrCast(glVertexAttrib4uivARB, gl.missingFunctionPanic),
    VertexAttrib4usv: glVertexAttrib4usv = @ptrCast(glVertexAttrib4usv, gl.missingFunctionPanic),
    VertexAttrib4usvARB: glVertexAttrib4usvARB = @ptrCast(glVertexAttrib4usvARB, gl.missingFunctionPanic),
    VertexAttribArrayObjectATI: glVertexAttribArrayObjectATI = @ptrCast(glVertexAttribArrayObjectATI, gl.missingFunctionPanic),
    VertexAttribBinding: glVertexAttribBinding = @ptrCast(glVertexAttribBinding, gl.missingFunctionPanic),
    VertexAttribDivisor: glVertexAttribDivisor = @ptrCast(glVertexAttribDivisor, gl.missingFunctionPanic),
    VertexAttribDivisorARB: glVertexAttribDivisorARB = @ptrCast(glVertexAttribDivisorARB, gl.missingFunctionPanic),
    VertexAttribFormat: glVertexAttribFormat = @ptrCast(glVertexAttribFormat, gl.missingFunctionPanic),
    VertexAttribFormatNV: glVertexAttribFormatNV = @ptrCast(glVertexAttribFormatNV, gl.missingFunctionPanic),
    VertexAttribI1i: glVertexAttribI1i = @ptrCast(glVertexAttribI1i, gl.missingFunctionPanic),
    VertexAttribI1iEXT: glVertexAttribI1iEXT = @ptrCast(glVertexAttribI1iEXT, gl.missingFunctionPanic),
    VertexAttribI1iv: glVertexAttribI1iv = @ptrCast(glVertexAttribI1iv, gl.missingFunctionPanic),
    VertexAttribI1ivEXT: glVertexAttribI1ivEXT = @ptrCast(glVertexAttribI1ivEXT, gl.missingFunctionPanic),
    VertexAttribI1ui: glVertexAttribI1ui = @ptrCast(glVertexAttribI1ui, gl.missingFunctionPanic),
    VertexAttribI1uiEXT: glVertexAttribI1uiEXT = @ptrCast(glVertexAttribI1uiEXT, gl.missingFunctionPanic),
    VertexAttribI1uiv: glVertexAttribI1uiv = @ptrCast(glVertexAttribI1uiv, gl.missingFunctionPanic),
    VertexAttribI1uivEXT: glVertexAttribI1uivEXT = @ptrCast(glVertexAttribI1uivEXT, gl.missingFunctionPanic),
    VertexAttribI2i: glVertexAttribI2i = @ptrCast(glVertexAttribI2i, gl.missingFunctionPanic),
    VertexAttribI2iEXT: glVertexAttribI2iEXT = @ptrCast(glVertexAttribI2iEXT, gl.missingFunctionPanic),
    VertexAttribI2iv: glVertexAttribI2iv = @ptrCast(glVertexAttribI2iv, gl.missingFunctionPanic),
    VertexAttribI2ivEXT: glVertexAttribI2ivEXT = @ptrCast(glVertexAttribI2ivEXT, gl.missingFunctionPanic),
    VertexAttribI2ui: glVertexAttribI2ui = @ptrCast(glVertexAttribI2ui, gl.missingFunctionPanic),
    VertexAttribI2uiEXT: glVertexAttribI2uiEXT = @ptrCast(glVertexAttribI2uiEXT, gl.missingFunctionPanic),
    VertexAttribI2uiv: glVertexAttribI2uiv = @ptrCast(glVertexAttribI2uiv, gl.missingFunctionPanic),
    VertexAttribI2uivEXT: glVertexAttribI2uivEXT = @ptrCast(glVertexAttribI2uivEXT, gl.missingFunctionPanic),
    VertexAttribI3i: glVertexAttribI3i = @ptrCast(glVertexAttribI3i, gl.missingFunctionPanic),
    VertexAttribI3iEXT: glVertexAttribI3iEXT = @ptrCast(glVertexAttribI3iEXT, gl.missingFunctionPanic),
    VertexAttribI3iv: glVertexAttribI3iv = @ptrCast(glVertexAttribI3iv, gl.missingFunctionPanic),
    VertexAttribI3ivEXT: glVertexAttribI3ivEXT = @ptrCast(glVertexAttribI3ivEXT, gl.missingFunctionPanic),
    VertexAttribI3ui: glVertexAttribI3ui = @ptrCast(glVertexAttribI3ui, gl.missingFunctionPanic),
    VertexAttribI3uiEXT: glVertexAttribI3uiEXT = @ptrCast(glVertexAttribI3uiEXT, gl.missingFunctionPanic),
    VertexAttribI3uiv: glVertexAttribI3uiv = @ptrCast(glVertexAttribI3uiv, gl.missingFunctionPanic),
    VertexAttribI3uivEXT: glVertexAttribI3uivEXT = @ptrCast(glVertexAttribI3uivEXT, gl.missingFunctionPanic),
    VertexAttribI4bv: glVertexAttribI4bv = @ptrCast(glVertexAttribI4bv, gl.missingFunctionPanic),
    VertexAttribI4bvEXT: glVertexAttribI4bvEXT = @ptrCast(glVertexAttribI4bvEXT, gl.missingFunctionPanic),
    VertexAttribI4i: glVertexAttribI4i = @ptrCast(glVertexAttribI4i, gl.missingFunctionPanic),
    VertexAttribI4iEXT: glVertexAttribI4iEXT = @ptrCast(glVertexAttribI4iEXT, gl.missingFunctionPanic),
    VertexAttribI4iv: glVertexAttribI4iv = @ptrCast(glVertexAttribI4iv, gl.missingFunctionPanic),
    VertexAttribI4ivEXT: glVertexAttribI4ivEXT = @ptrCast(glVertexAttribI4ivEXT, gl.missingFunctionPanic),
    VertexAttribI4sv: glVertexAttribI4sv = @ptrCast(glVertexAttribI4sv, gl.missingFunctionPanic),
    VertexAttribI4svEXT: glVertexAttribI4svEXT = @ptrCast(glVertexAttribI4svEXT, gl.missingFunctionPanic),
    VertexAttribI4ubv: glVertexAttribI4ubv = @ptrCast(glVertexAttribI4ubv, gl.missingFunctionPanic),
    VertexAttribI4ubvEXT: glVertexAttribI4ubvEXT = @ptrCast(glVertexAttribI4ubvEXT, gl.missingFunctionPanic),
    VertexAttribI4ui: glVertexAttribI4ui = @ptrCast(glVertexAttribI4ui, gl.missingFunctionPanic),
    VertexAttribI4uiEXT: glVertexAttribI4uiEXT = @ptrCast(glVertexAttribI4uiEXT, gl.missingFunctionPanic),
    VertexAttribI4uiv: glVertexAttribI4uiv = @ptrCast(glVertexAttribI4uiv, gl.missingFunctionPanic),
    VertexAttribI4uivEXT: glVertexAttribI4uivEXT = @ptrCast(glVertexAttribI4uivEXT, gl.missingFunctionPanic),
    VertexAttribI4usv: glVertexAttribI4usv = @ptrCast(glVertexAttribI4usv, gl.missingFunctionPanic),
    VertexAttribI4usvEXT: glVertexAttribI4usvEXT = @ptrCast(glVertexAttribI4usvEXT, gl.missingFunctionPanic),
    VertexAttribIFormat: glVertexAttribIFormat = @ptrCast(glVertexAttribIFormat, gl.missingFunctionPanic),
    VertexAttribIFormatNV: glVertexAttribIFormatNV = @ptrCast(glVertexAttribIFormatNV, gl.missingFunctionPanic),
    VertexAttribIPointer: glVertexAttribIPointer = @ptrCast(glVertexAttribIPointer, gl.missingFunctionPanic),
    VertexAttribIPointerEXT: glVertexAttribIPointerEXT = @ptrCast(glVertexAttribIPointerEXT, gl.missingFunctionPanic),
    VertexAttribL1d: glVertexAttribL1d = @ptrCast(glVertexAttribL1d, gl.missingFunctionPanic),
    VertexAttribL1dEXT: glVertexAttribL1dEXT = @ptrCast(glVertexAttribL1dEXT, gl.missingFunctionPanic),
    VertexAttribL1dv: glVertexAttribL1dv = @ptrCast(glVertexAttribL1dv, gl.missingFunctionPanic),
    VertexAttribL1dvEXT: glVertexAttribL1dvEXT = @ptrCast(glVertexAttribL1dvEXT, gl.missingFunctionPanic),
    VertexAttribL1i64NV: glVertexAttribL1i64NV = @ptrCast(glVertexAttribL1i64NV, gl.missingFunctionPanic),
    VertexAttribL1i64vNV: glVertexAttribL1i64vNV = @ptrCast(glVertexAttribL1i64vNV, gl.missingFunctionPanic),
    VertexAttribL1ui64ARB: glVertexAttribL1ui64ARB = @ptrCast(glVertexAttribL1ui64ARB, gl.missingFunctionPanic),
    VertexAttribL1ui64NV: glVertexAttribL1ui64NV = @ptrCast(glVertexAttribL1ui64NV, gl.missingFunctionPanic),
    VertexAttribL1ui64vARB: glVertexAttribL1ui64vARB = @ptrCast(glVertexAttribL1ui64vARB, gl.missingFunctionPanic),
    VertexAttribL1ui64vNV: glVertexAttribL1ui64vNV = @ptrCast(glVertexAttribL1ui64vNV, gl.missingFunctionPanic),
    VertexAttribL2d: glVertexAttribL2d = @ptrCast(glVertexAttribL2d, gl.missingFunctionPanic),
    VertexAttribL2dEXT: glVertexAttribL2dEXT = @ptrCast(glVertexAttribL2dEXT, gl.missingFunctionPanic),
    VertexAttribL2dv: glVertexAttribL2dv = @ptrCast(glVertexAttribL2dv, gl.missingFunctionPanic),
    VertexAttribL2dvEXT: glVertexAttribL2dvEXT = @ptrCast(glVertexAttribL2dvEXT, gl.missingFunctionPanic),
    VertexAttribL2i64NV: glVertexAttribL2i64NV = @ptrCast(glVertexAttribL2i64NV, gl.missingFunctionPanic),
    VertexAttribL2i64vNV: glVertexAttribL2i64vNV = @ptrCast(glVertexAttribL2i64vNV, gl.missingFunctionPanic),
    VertexAttribL2ui64NV: glVertexAttribL2ui64NV = @ptrCast(glVertexAttribL2ui64NV, gl.missingFunctionPanic),
    VertexAttribL2ui64vNV: glVertexAttribL2ui64vNV = @ptrCast(glVertexAttribL2ui64vNV, gl.missingFunctionPanic),
    VertexAttribL3d: glVertexAttribL3d = @ptrCast(glVertexAttribL3d, gl.missingFunctionPanic),
    VertexAttribL3dEXT: glVertexAttribL3dEXT = @ptrCast(glVertexAttribL3dEXT, gl.missingFunctionPanic),
    VertexAttribL3dv: glVertexAttribL3dv = @ptrCast(glVertexAttribL3dv, gl.missingFunctionPanic),
    VertexAttribL3dvEXT: glVertexAttribL3dvEXT = @ptrCast(glVertexAttribL3dvEXT, gl.missingFunctionPanic),
    VertexAttribL3i64NV: glVertexAttribL3i64NV = @ptrCast(glVertexAttribL3i64NV, gl.missingFunctionPanic),
    VertexAttribL3i64vNV: glVertexAttribL3i64vNV = @ptrCast(glVertexAttribL3i64vNV, gl.missingFunctionPanic),
    VertexAttribL3ui64NV: glVertexAttribL3ui64NV = @ptrCast(glVertexAttribL3ui64NV, gl.missingFunctionPanic),
    VertexAttribL3ui64vNV: glVertexAttribL3ui64vNV = @ptrCast(glVertexAttribL3ui64vNV, gl.missingFunctionPanic),
    VertexAttribL4d: glVertexAttribL4d = @ptrCast(glVertexAttribL4d, gl.missingFunctionPanic),
    VertexAttribL4dEXT: glVertexAttribL4dEXT = @ptrCast(glVertexAttribL4dEXT, gl.missingFunctionPanic),
    VertexAttribL4dv: glVertexAttribL4dv = @ptrCast(glVertexAttribL4dv, gl.missingFunctionPanic),
    VertexAttribL4dvEXT: glVertexAttribL4dvEXT = @ptrCast(glVertexAttribL4dvEXT, gl.missingFunctionPanic),
    VertexAttribL4i64NV: glVertexAttribL4i64NV = @ptrCast(glVertexAttribL4i64NV, gl.missingFunctionPanic),
    VertexAttribL4i64vNV: glVertexAttribL4i64vNV = @ptrCast(glVertexAttribL4i64vNV, gl.missingFunctionPanic),
    VertexAttribL4ui64NV: glVertexAttribL4ui64NV = @ptrCast(glVertexAttribL4ui64NV, gl.missingFunctionPanic),
    VertexAttribL4ui64vNV: glVertexAttribL4ui64vNV = @ptrCast(glVertexAttribL4ui64vNV, gl.missingFunctionPanic),
    VertexAttribLFormat: glVertexAttribLFormat = @ptrCast(glVertexAttribLFormat, gl.missingFunctionPanic),
    VertexAttribLFormatNV: glVertexAttribLFormatNV = @ptrCast(glVertexAttribLFormatNV, gl.missingFunctionPanic),
    VertexAttribLPointer: glVertexAttribLPointer = @ptrCast(glVertexAttribLPointer, gl.missingFunctionPanic),
    VertexAttribLPointerEXT: glVertexAttribLPointerEXT = @ptrCast(glVertexAttribLPointerEXT, gl.missingFunctionPanic),
    VertexAttribP1ui: glVertexAttribP1ui = @ptrCast(glVertexAttribP1ui, gl.missingFunctionPanic),
    VertexAttribP1uiv: glVertexAttribP1uiv = @ptrCast(glVertexAttribP1uiv, gl.missingFunctionPanic),
    VertexAttribP2ui: glVertexAttribP2ui = @ptrCast(glVertexAttribP2ui, gl.missingFunctionPanic),
    VertexAttribP2uiv: glVertexAttribP2uiv = @ptrCast(glVertexAttribP2uiv, gl.missingFunctionPanic),
    VertexAttribP3ui: glVertexAttribP3ui = @ptrCast(glVertexAttribP3ui, gl.missingFunctionPanic),
    VertexAttribP3uiv: glVertexAttribP3uiv = @ptrCast(glVertexAttribP3uiv, gl.missingFunctionPanic),
    VertexAttribP4ui: glVertexAttribP4ui = @ptrCast(glVertexAttribP4ui, gl.missingFunctionPanic),
    VertexAttribP4uiv: glVertexAttribP4uiv = @ptrCast(glVertexAttribP4uiv, gl.missingFunctionPanic),
    VertexAttribParameteriAMD: glVertexAttribParameteriAMD = @ptrCast(glVertexAttribParameteriAMD, gl.missingFunctionPanic),
    VertexAttribPointer: glVertexAttribPointer = @ptrCast(glVertexAttribPointer, gl.missingFunctionPanic),
    VertexAttribPointerARB: glVertexAttribPointerARB = @ptrCast(glVertexAttribPointerARB, gl.missingFunctionPanic),
    VertexAttribPointerNV: glVertexAttribPointerNV = @ptrCast(glVertexAttribPointerNV, gl.missingFunctionPanic),
    VertexAttribs1dvNV: glVertexAttribs1dvNV = @ptrCast(glVertexAttribs1dvNV, gl.missingFunctionPanic),
    VertexAttribs1fvNV: glVertexAttribs1fvNV = @ptrCast(glVertexAttribs1fvNV, gl.missingFunctionPanic),
    VertexAttribs1hvNV: glVertexAttribs1hvNV = @ptrCast(glVertexAttribs1hvNV, gl.missingFunctionPanic),
    VertexAttribs1svNV: glVertexAttribs1svNV = @ptrCast(glVertexAttribs1svNV, gl.missingFunctionPanic),
    VertexAttribs2dvNV: glVertexAttribs2dvNV = @ptrCast(glVertexAttribs2dvNV, gl.missingFunctionPanic),
    VertexAttribs2fvNV: glVertexAttribs2fvNV = @ptrCast(glVertexAttribs2fvNV, gl.missingFunctionPanic),
    VertexAttribs2hvNV: glVertexAttribs2hvNV = @ptrCast(glVertexAttribs2hvNV, gl.missingFunctionPanic),
    VertexAttribs2svNV: glVertexAttribs2svNV = @ptrCast(glVertexAttribs2svNV, gl.missingFunctionPanic),
    VertexAttribs3dvNV: glVertexAttribs3dvNV = @ptrCast(glVertexAttribs3dvNV, gl.missingFunctionPanic),
    VertexAttribs3fvNV: glVertexAttribs3fvNV = @ptrCast(glVertexAttribs3fvNV, gl.missingFunctionPanic),
    VertexAttribs3hvNV: glVertexAttribs3hvNV = @ptrCast(glVertexAttribs3hvNV, gl.missingFunctionPanic),
    VertexAttribs3svNV: glVertexAttribs3svNV = @ptrCast(glVertexAttribs3svNV, gl.missingFunctionPanic),
    VertexAttribs4dvNV: glVertexAttribs4dvNV = @ptrCast(glVertexAttribs4dvNV, gl.missingFunctionPanic),
    VertexAttribs4fvNV: glVertexAttribs4fvNV = @ptrCast(glVertexAttribs4fvNV, gl.missingFunctionPanic),
    VertexAttribs4hvNV: glVertexAttribs4hvNV = @ptrCast(glVertexAttribs4hvNV, gl.missingFunctionPanic),
    VertexAttribs4svNV: glVertexAttribs4svNV = @ptrCast(glVertexAttribs4svNV, gl.missingFunctionPanic),
    VertexAttribs4ubvNV: glVertexAttribs4ubvNV = @ptrCast(glVertexAttribs4ubvNV, gl.missingFunctionPanic),
    VertexBindingDivisor: glVertexBindingDivisor = @ptrCast(glVertexBindingDivisor, gl.missingFunctionPanic),
    VertexBlendARB: glVertexBlendARB = @ptrCast(glVertexBlendARB, gl.missingFunctionPanic),
    VertexBlendEnvfATI: glVertexBlendEnvfATI = @ptrCast(glVertexBlendEnvfATI, gl.missingFunctionPanic),
    VertexBlendEnviATI: glVertexBlendEnviATI = @ptrCast(glVertexBlendEnviATI, gl.missingFunctionPanic),
    VertexFormatNV: glVertexFormatNV = @ptrCast(glVertexFormatNV, gl.missingFunctionPanic),
    VertexPointerEXT: glVertexPointerEXT = @ptrCast(glVertexPointerEXT, gl.missingFunctionPanic),
    VertexPointerListIBM: glVertexPointerListIBM = @ptrCast(glVertexPointerListIBM, gl.missingFunctionPanic),
    VertexPointervINTEL: glVertexPointervINTEL = @ptrCast(glVertexPointervINTEL, gl.missingFunctionPanic),
    VertexStream1dATI: glVertexStream1dATI = @ptrCast(glVertexStream1dATI, gl.missingFunctionPanic),
    VertexStream1dvATI: glVertexStream1dvATI = @ptrCast(glVertexStream1dvATI, gl.missingFunctionPanic),
    VertexStream1fATI: glVertexStream1fATI = @ptrCast(glVertexStream1fATI, gl.missingFunctionPanic),
    VertexStream1fvATI: glVertexStream1fvATI = @ptrCast(glVertexStream1fvATI, gl.missingFunctionPanic),
    VertexStream1iATI: glVertexStream1iATI = @ptrCast(glVertexStream1iATI, gl.missingFunctionPanic),
    VertexStream1ivATI: glVertexStream1ivATI = @ptrCast(glVertexStream1ivATI, gl.missingFunctionPanic),
    VertexStream1sATI: glVertexStream1sATI = @ptrCast(glVertexStream1sATI, gl.missingFunctionPanic),
    VertexStream1svATI: glVertexStream1svATI = @ptrCast(glVertexStream1svATI, gl.missingFunctionPanic),
    VertexStream2dATI: glVertexStream2dATI = @ptrCast(glVertexStream2dATI, gl.missingFunctionPanic),
    VertexStream2dvATI: glVertexStream2dvATI = @ptrCast(glVertexStream2dvATI, gl.missingFunctionPanic),
    VertexStream2fATI: glVertexStream2fATI = @ptrCast(glVertexStream2fATI, gl.missingFunctionPanic),
    VertexStream2fvATI: glVertexStream2fvATI = @ptrCast(glVertexStream2fvATI, gl.missingFunctionPanic),
    VertexStream2iATI: glVertexStream2iATI = @ptrCast(glVertexStream2iATI, gl.missingFunctionPanic),
    VertexStream2ivATI: glVertexStream2ivATI = @ptrCast(glVertexStream2ivATI, gl.missingFunctionPanic),
    VertexStream2sATI: glVertexStream2sATI = @ptrCast(glVertexStream2sATI, gl.missingFunctionPanic),
    VertexStream2svATI: glVertexStream2svATI = @ptrCast(glVertexStream2svATI, gl.missingFunctionPanic),
    VertexStream3dATI: glVertexStream3dATI = @ptrCast(glVertexStream3dATI, gl.missingFunctionPanic),
    VertexStream3dvATI: glVertexStream3dvATI = @ptrCast(glVertexStream3dvATI, gl.missingFunctionPanic),
    VertexStream3fATI: glVertexStream3fATI = @ptrCast(glVertexStream3fATI, gl.missingFunctionPanic),
    VertexStream3fvATI: glVertexStream3fvATI = @ptrCast(glVertexStream3fvATI, gl.missingFunctionPanic),
    VertexStream3iATI: glVertexStream3iATI = @ptrCast(glVertexStream3iATI, gl.missingFunctionPanic),
    VertexStream3ivATI: glVertexStream3ivATI = @ptrCast(glVertexStream3ivATI, gl.missingFunctionPanic),
    VertexStream3sATI: glVertexStream3sATI = @ptrCast(glVertexStream3sATI, gl.missingFunctionPanic),
    VertexStream3svATI: glVertexStream3svATI = @ptrCast(glVertexStream3svATI, gl.missingFunctionPanic),
    VertexStream4dATI: glVertexStream4dATI = @ptrCast(glVertexStream4dATI, gl.missingFunctionPanic),
    VertexStream4dvATI: glVertexStream4dvATI = @ptrCast(glVertexStream4dvATI, gl.missingFunctionPanic),
    VertexStream4fATI: glVertexStream4fATI = @ptrCast(glVertexStream4fATI, gl.missingFunctionPanic),
    VertexStream4fvATI: glVertexStream4fvATI = @ptrCast(glVertexStream4fvATI, gl.missingFunctionPanic),
    VertexStream4iATI: glVertexStream4iATI = @ptrCast(glVertexStream4iATI, gl.missingFunctionPanic),
    VertexStream4ivATI: glVertexStream4ivATI = @ptrCast(glVertexStream4ivATI, gl.missingFunctionPanic),
    VertexStream4sATI: glVertexStream4sATI = @ptrCast(glVertexStream4sATI, gl.missingFunctionPanic),
    VertexStream4svATI: glVertexStream4svATI = @ptrCast(glVertexStream4svATI, gl.missingFunctionPanic),
    VertexWeightPointerEXT: glVertexWeightPointerEXT = @ptrCast(glVertexWeightPointerEXT, gl.missingFunctionPanic),
    VertexWeightfEXT: glVertexWeightfEXT = @ptrCast(glVertexWeightfEXT, gl.missingFunctionPanic),
    VertexWeightfvEXT: glVertexWeightfvEXT = @ptrCast(glVertexWeightfvEXT, gl.missingFunctionPanic),
    VertexWeighthNV: glVertexWeighthNV = @ptrCast(glVertexWeighthNV, gl.missingFunctionPanic),
    VertexWeighthvNV: glVertexWeighthvNV = @ptrCast(glVertexWeighthvNV, gl.missingFunctionPanic),
    VideoCaptureNV: glVideoCaptureNV = @ptrCast(glVideoCaptureNV, gl.missingFunctionPanic),
    VideoCaptureStreamParameterdvNV: glVideoCaptureStreamParameterdvNV = @ptrCast(glVideoCaptureStreamParameterdvNV, gl.missingFunctionPanic),
    VideoCaptureStreamParameterfvNV: glVideoCaptureStreamParameterfvNV = @ptrCast(glVideoCaptureStreamParameterfvNV, gl.missingFunctionPanic),
    VideoCaptureStreamParameterivNV: glVideoCaptureStreamParameterivNV = @ptrCast(glVideoCaptureStreamParameterivNV, gl.missingFunctionPanic),
    Viewport: glViewport = @ptrCast(glViewport, gl.missingFunctionPanic),
    ViewportArrayv: glViewportArrayv = @ptrCast(glViewportArrayv, gl.missingFunctionPanic),
    ViewportIndexedf: glViewportIndexedf = @ptrCast(glViewportIndexedf, gl.missingFunctionPanic),
    ViewportIndexedfv: glViewportIndexedfv = @ptrCast(glViewportIndexedfv, gl.missingFunctionPanic),
    ViewportPositionWScaleNV: glViewportPositionWScaleNV = @ptrCast(glViewportPositionWScaleNV, gl.missingFunctionPanic),
    ViewportSwizzleNV: glViewportSwizzleNV = @ptrCast(glViewportSwizzleNV, gl.missingFunctionPanic),
    WaitSemaphoreEXT: glWaitSemaphoreEXT = @ptrCast(glWaitSemaphoreEXT, gl.missingFunctionPanic),
    WaitSemaphoreui64NVX: glWaitSemaphoreui64NVX = @ptrCast(glWaitSemaphoreui64NVX, gl.missingFunctionPanic),
    WaitSync: glWaitSync = @ptrCast(glWaitSync, gl.missingFunctionPanic),
    WaitVkSemaphoreNV: glWaitVkSemaphoreNV = @ptrCast(glWaitVkSemaphoreNV, gl.missingFunctionPanic),
    WeightPathsNV: glWeightPathsNV = @ptrCast(glWeightPathsNV, gl.missingFunctionPanic),
    WeightPointerARB: glWeightPointerARB = @ptrCast(glWeightPointerARB, gl.missingFunctionPanic),
    WeightbvARB: glWeightbvARB = @ptrCast(glWeightbvARB, gl.missingFunctionPanic),
    WeightdvARB: glWeightdvARB = @ptrCast(glWeightdvARB, gl.missingFunctionPanic),
    WeightfvARB: glWeightfvARB = @ptrCast(glWeightfvARB, gl.missingFunctionPanic),
    WeightivARB: glWeightivARB = @ptrCast(glWeightivARB, gl.missingFunctionPanic),
    WeightsvARB: glWeightsvARB = @ptrCast(glWeightsvARB, gl.missingFunctionPanic),
    WeightubvARB: glWeightubvARB = @ptrCast(glWeightubvARB, gl.missingFunctionPanic),
    WeightuivARB: glWeightuivARB = @ptrCast(glWeightuivARB, gl.missingFunctionPanic),
    WeightusvARB: glWeightusvARB = @ptrCast(glWeightusvARB, gl.missingFunctionPanic),
    WindowPos2dARB: glWindowPos2dARB = @ptrCast(glWindowPos2dARB, gl.missingFunctionPanic),
    WindowPos2dMESA: glWindowPos2dMESA = @ptrCast(glWindowPos2dMESA, gl.missingFunctionPanic),
    WindowPos2dvARB: glWindowPos2dvARB = @ptrCast(glWindowPos2dvARB, gl.missingFunctionPanic),
    WindowPos2dvMESA: glWindowPos2dvMESA = @ptrCast(glWindowPos2dvMESA, gl.missingFunctionPanic),
    WindowPos2fARB: glWindowPos2fARB = @ptrCast(glWindowPos2fARB, gl.missingFunctionPanic),
    WindowPos2fMESA: glWindowPos2fMESA = @ptrCast(glWindowPos2fMESA, gl.missingFunctionPanic),
    WindowPos2fvARB: glWindowPos2fvARB = @ptrCast(glWindowPos2fvARB, gl.missingFunctionPanic),
    WindowPos2fvMESA: glWindowPos2fvMESA = @ptrCast(glWindowPos2fvMESA, gl.missingFunctionPanic),
    WindowPos2iARB: glWindowPos2iARB = @ptrCast(glWindowPos2iARB, gl.missingFunctionPanic),
    WindowPos2iMESA: glWindowPos2iMESA = @ptrCast(glWindowPos2iMESA, gl.missingFunctionPanic),
    WindowPos2ivARB: glWindowPos2ivARB = @ptrCast(glWindowPos2ivARB, gl.missingFunctionPanic),
    WindowPos2ivMESA: glWindowPos2ivMESA = @ptrCast(glWindowPos2ivMESA, gl.missingFunctionPanic),
    WindowPos2sARB: glWindowPos2sARB = @ptrCast(glWindowPos2sARB, gl.missingFunctionPanic),
    WindowPos2sMESA: glWindowPos2sMESA = @ptrCast(glWindowPos2sMESA, gl.missingFunctionPanic),
    WindowPos2svARB: glWindowPos2svARB = @ptrCast(glWindowPos2svARB, gl.missingFunctionPanic),
    WindowPos2svMESA: glWindowPos2svMESA = @ptrCast(glWindowPos2svMESA, gl.missingFunctionPanic),
    WindowPos3dARB: glWindowPos3dARB = @ptrCast(glWindowPos3dARB, gl.missingFunctionPanic),
    WindowPos3dMESA: glWindowPos3dMESA = @ptrCast(glWindowPos3dMESA, gl.missingFunctionPanic),
    WindowPos3dvARB: glWindowPos3dvARB = @ptrCast(glWindowPos3dvARB, gl.missingFunctionPanic),
    WindowPos3dvMESA: glWindowPos3dvMESA = @ptrCast(glWindowPos3dvMESA, gl.missingFunctionPanic),
    WindowPos3fARB: glWindowPos3fARB = @ptrCast(glWindowPos3fARB, gl.missingFunctionPanic),
    WindowPos3fMESA: glWindowPos3fMESA = @ptrCast(glWindowPos3fMESA, gl.missingFunctionPanic),
    WindowPos3fvARB: glWindowPos3fvARB = @ptrCast(glWindowPos3fvARB, gl.missingFunctionPanic),
    WindowPos3fvMESA: glWindowPos3fvMESA = @ptrCast(glWindowPos3fvMESA, gl.missingFunctionPanic),
    WindowPos3iARB: glWindowPos3iARB = @ptrCast(glWindowPos3iARB, gl.missingFunctionPanic),
    WindowPos3iMESA: glWindowPos3iMESA = @ptrCast(glWindowPos3iMESA, gl.missingFunctionPanic),
    WindowPos3ivARB: glWindowPos3ivARB = @ptrCast(glWindowPos3ivARB, gl.missingFunctionPanic),
    WindowPos3ivMESA: glWindowPos3ivMESA = @ptrCast(glWindowPos3ivMESA, gl.missingFunctionPanic),
    WindowPos3sARB: glWindowPos3sARB = @ptrCast(glWindowPos3sARB, gl.missingFunctionPanic),
    WindowPos3sMESA: glWindowPos3sMESA = @ptrCast(glWindowPos3sMESA, gl.missingFunctionPanic),
    WindowPos3svARB: glWindowPos3svARB = @ptrCast(glWindowPos3svARB, gl.missingFunctionPanic),
    WindowPos3svMESA: glWindowPos3svMESA = @ptrCast(glWindowPos3svMESA, gl.missingFunctionPanic),
    WindowPos4dMESA: glWindowPos4dMESA = @ptrCast(glWindowPos4dMESA, gl.missingFunctionPanic),
    WindowPos4dvMESA: glWindowPos4dvMESA = @ptrCast(glWindowPos4dvMESA, gl.missingFunctionPanic),
    WindowPos4fMESA: glWindowPos4fMESA = @ptrCast(glWindowPos4fMESA, gl.missingFunctionPanic),
    WindowPos4fvMESA: glWindowPos4fvMESA = @ptrCast(glWindowPos4fvMESA, gl.missingFunctionPanic),
    WindowPos4iMESA: glWindowPos4iMESA = @ptrCast(glWindowPos4iMESA, gl.missingFunctionPanic),
    WindowPos4ivMESA: glWindowPos4ivMESA = @ptrCast(glWindowPos4ivMESA, gl.missingFunctionPanic),
    WindowPos4sMESA: glWindowPos4sMESA = @ptrCast(glWindowPos4sMESA, gl.missingFunctionPanic),
    WindowPos4svMESA: glWindowPos4svMESA = @ptrCast(glWindowPos4svMESA, gl.missingFunctionPanic),
    WindowRectanglesEXT: glWindowRectanglesEXT = @ptrCast(glWindowRectanglesEXT, gl.missingFunctionPanic),
    WriteMaskEXT: glWriteMaskEXT = @ptrCast(glWriteMaskEXT, gl.missingFunctionPanic),

    const Self = @This();

    pub fn init(comptime errors: type, loader: fn ([*:0]const u8) errors!GLproc) errors!Self {
        var self: Self = .{};
        try self.load(errors, loader);
        return self;
    }

    pub fn missingFunctionPanic() callconv(.C) noreturn {
        @panic("This function isn't supported by the GL drivers!");
    }

    pub fn load(self: *Self, comptime errors: type, loader: fn ([*:0]const u8) errors!GLproc) errors!void {
        if (@ptrCast(?glBlendFunc, try loader("glBlendFunc"))) |ptr| {
            self.BlendFunc = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glClear, try loader("glClear"))) |ptr| {
            self.Clear = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glClearColor, try loader("glClearColor"))) |ptr| {
            self.ClearColor = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glClearDepth, try loader("glClearDepth"))) |ptr| {
            self.ClearDepth = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glClearStencil, try loader("glClearStencil"))) |ptr| {
            self.ClearStencil = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glColorMask, try loader("glColorMask"))) |ptr| {
            self.ColorMask = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glCullFace, try loader("glCullFace"))) |ptr| {
            self.CullFace = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glDepthFunc, try loader("glDepthFunc"))) |ptr| {
            self.DepthFunc = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glDepthMask, try loader("glDepthMask"))) |ptr| {
            self.DepthMask = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glDepthRange, try loader("glDepthRange"))) |ptr| {
            self.DepthRange = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glDisable, try loader("glDisable"))) |ptr| {
            self.Disable = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glDrawBuffer, try loader("glDrawBuffer"))) |ptr| {
            self.DrawBuffer = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glEnable, try loader("glEnable"))) |ptr| {
            self.Enable = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glFinish, try loader("glFinish"))) |ptr| {
            self.Finish = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glFlush, try loader("glFlush"))) |ptr| {
            self.Flush = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glFrontFace, try loader("glFrontFace"))) |ptr| {
            self.FrontFace = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glGetBooleanv, try loader("glGetBooleanv"))) |ptr| {
            self.GetBooleanv = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glGetDoublev, try loader("glGetDoublev"))) |ptr| {
            self.GetDoublev = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glGetError, try loader("glGetError"))) |ptr| {
            self.GetError = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glGetFloatv, try loader("glGetFloatv"))) |ptr| {
            self.GetFloatv = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glGetIntegerv, try loader("glGetIntegerv"))) |ptr| {
            self.GetIntegerv = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glGetString, try loader("glGetString"))) |ptr| {
            self.GetString = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glGetTexImage, try loader("glGetTexImage"))) |ptr| {
            self.GetTexImage = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glGetTexLevelParameterfv, try loader("glGetTexLevelParameterfv"))) |ptr| {
            self.GetTexLevelParameterfv = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glGetTexLevelParameteriv, try loader("glGetTexLevelParameteriv"))) |ptr| {
            self.GetTexLevelParameteriv = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glGetTexParameterfv, try loader("glGetTexParameterfv"))) |ptr| {
            self.GetTexParameterfv = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glGetTexParameteriv, try loader("glGetTexParameteriv"))) |ptr| {
            self.GetTexParameteriv = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glHint, try loader("glHint"))) |ptr| {
            self.Hint = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glIsEnabled, try loader("glIsEnabled"))) |ptr| {
            self.IsEnabled = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glLineWidth, try loader("glLineWidth"))) |ptr| {
            self.LineWidth = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glLogicOp, try loader("glLogicOp"))) |ptr| {
            self.LogicOp = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glPixelStoref, try loader("glPixelStoref"))) |ptr| {
            self.PixelStoref = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glPixelStorei, try loader("glPixelStorei"))) |ptr| {
            self.PixelStorei = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glPointSize, try loader("glPointSize"))) |ptr| {
            self.PointSize = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glPolygonMode, try loader("glPolygonMode"))) |ptr| {
            self.PolygonMode = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glReadBuffer, try loader("glReadBuffer"))) |ptr| {
            self.ReadBuffer = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glReadPixels, try loader("glReadPixels"))) |ptr| {
            self.ReadPixels = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glScissor, try loader("glScissor"))) |ptr| {
            self.Scissor = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glStencilFunc, try loader("glStencilFunc"))) |ptr| {
            self.StencilFunc = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glStencilMask, try loader("glStencilMask"))) |ptr| {
            self.StencilMask = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glStencilOp, try loader("glStencilOp"))) |ptr| {
            self.StencilOp = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glTexImage1D, try loader("glTexImage1D"))) |ptr| {
            self.TexImage1D = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glTexImage2D, try loader("glTexImage2D"))) |ptr| {
            self.TexImage2D = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glTexParameterf, try loader("glTexParameterf"))) |ptr| {
            self.TexParameterf = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glTexParameterfv, try loader("glTexParameterfv"))) |ptr| {
            self.TexParameterfv = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glTexParameteri, try loader("glTexParameteri"))) |ptr| {
            self.TexParameteri = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glTexParameteriv, try loader("glTexParameteriv"))) |ptr| {
            self.TexParameteriv = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glViewport, try loader("glViewport"))) |ptr| {
            self.Viewport = ptr;
        } else {
            self.features.GL_VERSION_1_0 = false;
        }
        if (@ptrCast(?glBindTexture, try loader("glBindTexture"))) |ptr| {
            self.BindTexture = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glCopyTexImage1D, try loader("glCopyTexImage1D"))) |ptr| {
            self.CopyTexImage1D = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glCopyTexImage2D, try loader("glCopyTexImage2D"))) |ptr| {
            self.CopyTexImage2D = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glCopyTexSubImage1D, try loader("glCopyTexSubImage1D"))) |ptr| {
            self.CopyTexSubImage1D = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glCopyTexSubImage2D, try loader("glCopyTexSubImage2D"))) |ptr| {
            self.CopyTexSubImage2D = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glDeleteTextures, try loader("glDeleteTextures"))) |ptr| {
            self.DeleteTextures = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glDrawArrays, try loader("glDrawArrays"))) |ptr| {
            self.DrawArrays = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glDrawElements, try loader("glDrawElements"))) |ptr| {
            self.DrawElements = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glGenTextures, try loader("glGenTextures"))) |ptr| {
            self.GenTextures = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glGetPointerv, try loader("glGetPointerv"))) |ptr| {
            self.GetPointerv = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glIsTexture, try loader("glIsTexture"))) |ptr| {
            self.IsTexture = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glPolygonOffset, try loader("glPolygonOffset"))) |ptr| {
            self.PolygonOffset = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glTexSubImage1D, try loader("glTexSubImage1D"))) |ptr| {
            self.TexSubImage1D = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glTexSubImage2D, try loader("glTexSubImage2D"))) |ptr| {
            self.TexSubImage2D = ptr;
        } else {
            self.features.GL_VERSION_1_1 = false;
        }
        if (@ptrCast(?glCopyTexSubImage3D, try loader("glCopyTexSubImage3D"))) |ptr| {
            self.CopyTexSubImage3D = ptr;
        } else {
            self.features.GL_VERSION_1_2 = false;
        }
        if (@ptrCast(?glDrawRangeElements, try loader("glDrawRangeElements"))) |ptr| {
            self.DrawRangeElements = ptr;
        } else {
            self.features.GL_VERSION_1_2 = false;
        }
        if (@ptrCast(?glTexImage3D, try loader("glTexImage3D"))) |ptr| {
            self.TexImage3D = ptr;
        } else {
            self.features.GL_VERSION_1_2 = false;
        }
        if (@ptrCast(?glTexSubImage3D, try loader("glTexSubImage3D"))) |ptr| {
            self.TexSubImage3D = ptr;
        } else {
            self.features.GL_VERSION_1_2 = false;
        }
        if (@ptrCast(?glActiveTexture, try loader("glActiveTexture"))) |ptr| {
            self.ActiveTexture = ptr;
        } else {
            self.features.GL_VERSION_1_3 = false;
        }
        if (@ptrCast(?glCompressedTexImage1D, try loader("glCompressedTexImage1D"))) |ptr| {
            self.CompressedTexImage1D = ptr;
        } else {
            self.features.GL_VERSION_1_3 = false;
        }
        if (@ptrCast(?glCompressedTexImage2D, try loader("glCompressedTexImage2D"))) |ptr| {
            self.CompressedTexImage2D = ptr;
        } else {
            self.features.GL_VERSION_1_3 = false;
        }
        if (@ptrCast(?glCompressedTexImage3D, try loader("glCompressedTexImage3D"))) |ptr| {
            self.CompressedTexImage3D = ptr;
        } else {
            self.features.GL_VERSION_1_3 = false;
        }
        if (@ptrCast(?glCompressedTexSubImage1D, try loader("glCompressedTexSubImage1D"))) |ptr| {
            self.CompressedTexSubImage1D = ptr;
        } else {
            self.features.GL_VERSION_1_3 = false;
        }
        if (@ptrCast(?glCompressedTexSubImage2D, try loader("glCompressedTexSubImage2D"))) |ptr| {
            self.CompressedTexSubImage2D = ptr;
        } else {
            self.features.GL_VERSION_1_3 = false;
        }
        if (@ptrCast(?glCompressedTexSubImage3D, try loader("glCompressedTexSubImage3D"))) |ptr| {
            self.CompressedTexSubImage3D = ptr;
        } else {
            self.features.GL_VERSION_1_3 = false;
        }
        if (@ptrCast(?glGetCompressedTexImage, try loader("glGetCompressedTexImage"))) |ptr| {
            self.GetCompressedTexImage = ptr;
        } else {
            self.features.GL_VERSION_1_3 = false;
        }
        if (@ptrCast(?glSampleCoverage, try loader("glSampleCoverage"))) |ptr| {
            self.SampleCoverage = ptr;
        } else {
            self.features.GL_VERSION_1_3 = false;
        }
        if (@ptrCast(?glBlendColor, try loader("glBlendColor"))) |ptr| {
            self.BlendColor = ptr;
        } else {
            self.features.GL_VERSION_1_4 = false;
        }
        if (@ptrCast(?glBlendEquation, try loader("glBlendEquation"))) |ptr| {
            self.BlendEquation = ptr;
        } else {
            self.features.GL_VERSION_1_4 = false;
        }
        if (@ptrCast(?glBlendFuncSeparate, try loader("glBlendFuncSeparate"))) |ptr| {
            self.BlendFuncSeparate = ptr;
        } else {
            self.features.GL_VERSION_1_4 = false;
        }
        if (@ptrCast(?glMultiDrawArrays, try loader("glMultiDrawArrays"))) |ptr| {
            self.MultiDrawArrays = ptr;
        } else {
            self.features.GL_VERSION_1_4 = false;
        }
        if (@ptrCast(?glMultiDrawElements, try loader("glMultiDrawElements"))) |ptr| {
            self.MultiDrawElements = ptr;
        } else {
            self.features.GL_VERSION_1_4 = false;
        }
        if (@ptrCast(?glPointParameterf, try loader("glPointParameterf"))) |ptr| {
            self.PointParameterf = ptr;
        } else {
            self.features.GL_VERSION_1_4 = false;
        }
        if (@ptrCast(?glPointParameterfv, try loader("glPointParameterfv"))) |ptr| {
            self.PointParameterfv = ptr;
        } else {
            self.features.GL_VERSION_1_4 = false;
        }
        if (@ptrCast(?glPointParameteri, try loader("glPointParameteri"))) |ptr| {
            self.PointParameteri = ptr;
        } else {
            self.features.GL_VERSION_1_4 = false;
        }
        if (@ptrCast(?glPointParameteriv, try loader("glPointParameteriv"))) |ptr| {
            self.PointParameteriv = ptr;
        } else {
            self.features.GL_VERSION_1_4 = false;
        }
        if (@ptrCast(?glBeginQuery, try loader("glBeginQuery"))) |ptr| {
            self.BeginQuery = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glBindBuffer, try loader("glBindBuffer"))) |ptr| {
            self.BindBuffer = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glBufferData, try loader("glBufferData"))) |ptr| {
            self.BufferData = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glBufferSubData, try loader("glBufferSubData"))) |ptr| {
            self.BufferSubData = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glDeleteBuffers, try loader("glDeleteBuffers"))) |ptr| {
            self.DeleteBuffers = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glDeleteQueries, try loader("glDeleteQueries"))) |ptr| {
            self.DeleteQueries = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glEndQuery, try loader("glEndQuery"))) |ptr| {
            self.EndQuery = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glGenBuffers, try loader("glGenBuffers"))) |ptr| {
            self.GenBuffers = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glGenQueries, try loader("glGenQueries"))) |ptr| {
            self.GenQueries = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glGetBufferParameteriv, try loader("glGetBufferParameteriv"))) |ptr| {
            self.GetBufferParameteriv = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glGetBufferPointerv, try loader("glGetBufferPointerv"))) |ptr| {
            self.GetBufferPointerv = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glGetBufferSubData, try loader("glGetBufferSubData"))) |ptr| {
            self.GetBufferSubData = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glGetQueryObjectiv, try loader("glGetQueryObjectiv"))) |ptr| {
            self.GetQueryObjectiv = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glGetQueryObjectuiv, try loader("glGetQueryObjectuiv"))) |ptr| {
            self.GetQueryObjectuiv = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glGetQueryiv, try loader("glGetQueryiv"))) |ptr| {
            self.GetQueryiv = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glIsBuffer, try loader("glIsBuffer"))) |ptr| {
            self.IsBuffer = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glIsQuery, try loader("glIsQuery"))) |ptr| {
            self.IsQuery = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glMapBuffer, try loader("glMapBuffer"))) |ptr| {
            self.MapBuffer = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glUnmapBuffer, try loader("glUnmapBuffer"))) |ptr| {
            self.UnmapBuffer = ptr;
        } else {
            self.features.GL_VERSION_1_5 = false;
        }
        if (@ptrCast(?glAttachShader, try loader("glAttachShader"))) |ptr| {
            self.AttachShader = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glBindAttribLocation, try loader("glBindAttribLocation"))) |ptr| {
            self.BindAttribLocation = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glBlendEquationSeparate, try loader("glBlendEquationSeparate"))) |ptr| {
            self.BlendEquationSeparate = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glCompileShader, try loader("glCompileShader"))) |ptr| {
            self.CompileShader = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glCreateProgram, try loader("glCreateProgram"))) |ptr| {
            self.CreateProgram = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glCreateShader, try loader("glCreateShader"))) |ptr| {
            self.CreateShader = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glDeleteProgram, try loader("glDeleteProgram"))) |ptr| {
            self.DeleteProgram = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glDeleteShader, try loader("glDeleteShader"))) |ptr| {
            self.DeleteShader = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glDetachShader, try loader("glDetachShader"))) |ptr| {
            self.DetachShader = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glDisableVertexAttribArray, try loader("glDisableVertexAttribArray"))) |ptr| {
            self.DisableVertexAttribArray = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glDrawBuffers, try loader("glDrawBuffers"))) |ptr| {
            self.DrawBuffers = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glEnableVertexAttribArray, try loader("glEnableVertexAttribArray"))) |ptr| {
            self.EnableVertexAttribArray = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetActiveAttrib, try loader("glGetActiveAttrib"))) |ptr| {
            self.GetActiveAttrib = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetActiveUniform, try loader("glGetActiveUniform"))) |ptr| {
            self.GetActiveUniform = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetAttachedShaders, try loader("glGetAttachedShaders"))) |ptr| {
            self.GetAttachedShaders = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetAttribLocation, try loader("glGetAttribLocation"))) |ptr| {
            self.GetAttribLocation = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetProgramInfoLog, try loader("glGetProgramInfoLog"))) |ptr| {
            self.GetProgramInfoLog = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetProgramiv, try loader("glGetProgramiv"))) |ptr| {
            self.GetProgramiv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetShaderInfoLog, try loader("glGetShaderInfoLog"))) |ptr| {
            self.GetShaderInfoLog = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetShaderSource, try loader("glGetShaderSource"))) |ptr| {
            self.GetShaderSource = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetShaderiv, try loader("glGetShaderiv"))) |ptr| {
            self.GetShaderiv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetUniformLocation, try loader("glGetUniformLocation"))) |ptr| {
            self.GetUniformLocation = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetUniformfv, try loader("glGetUniformfv"))) |ptr| {
            self.GetUniformfv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetUniformiv, try loader("glGetUniformiv"))) |ptr| {
            self.GetUniformiv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetVertexAttribPointerv, try loader("glGetVertexAttribPointerv"))) |ptr| {
            self.GetVertexAttribPointerv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetVertexAttribdv, try loader("glGetVertexAttribdv"))) |ptr| {
            self.GetVertexAttribdv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetVertexAttribfv, try loader("glGetVertexAttribfv"))) |ptr| {
            self.GetVertexAttribfv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glGetVertexAttribiv, try loader("glGetVertexAttribiv"))) |ptr| {
            self.GetVertexAttribiv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glIsProgram, try loader("glIsProgram"))) |ptr| {
            self.IsProgram = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glIsShader, try loader("glIsShader"))) |ptr| {
            self.IsShader = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glLinkProgram, try loader("glLinkProgram"))) |ptr| {
            self.LinkProgram = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glShaderSource, try loader("glShaderSource"))) |ptr| {
            self.ShaderSource = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glStencilFuncSeparate, try loader("glStencilFuncSeparate"))) |ptr| {
            self.StencilFuncSeparate = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glStencilMaskSeparate, try loader("glStencilMaskSeparate"))) |ptr| {
            self.StencilMaskSeparate = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glStencilOpSeparate, try loader("glStencilOpSeparate"))) |ptr| {
            self.StencilOpSeparate = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform1f, try loader("glUniform1f"))) |ptr| {
            self.Uniform1f = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform1fv, try loader("glUniform1fv"))) |ptr| {
            self.Uniform1fv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform1i, try loader("glUniform1i"))) |ptr| {
            self.Uniform1i = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform1iv, try loader("glUniform1iv"))) |ptr| {
            self.Uniform1iv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform2f, try loader("glUniform2f"))) |ptr| {
            self.Uniform2f = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform2fv, try loader("glUniform2fv"))) |ptr| {
            self.Uniform2fv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform2i, try loader("glUniform2i"))) |ptr| {
            self.Uniform2i = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform2iv, try loader("glUniform2iv"))) |ptr| {
            self.Uniform2iv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform3f, try loader("glUniform3f"))) |ptr| {
            self.Uniform3f = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform3fv, try loader("glUniform3fv"))) |ptr| {
            self.Uniform3fv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform3i, try loader("glUniform3i"))) |ptr| {
            self.Uniform3i = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform3iv, try loader("glUniform3iv"))) |ptr| {
            self.Uniform3iv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform4f, try loader("glUniform4f"))) |ptr| {
            self.Uniform4f = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform4fv, try loader("glUniform4fv"))) |ptr| {
            self.Uniform4fv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform4i, try loader("glUniform4i"))) |ptr| {
            self.Uniform4i = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniform4iv, try loader("glUniform4iv"))) |ptr| {
            self.Uniform4iv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniformMatrix2fv, try loader("glUniformMatrix2fv"))) |ptr| {
            self.UniformMatrix2fv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniformMatrix3fv, try loader("glUniformMatrix3fv"))) |ptr| {
            self.UniformMatrix3fv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniformMatrix4fv, try loader("glUniformMatrix4fv"))) |ptr| {
            self.UniformMatrix4fv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUseProgram, try loader("glUseProgram"))) |ptr| {
            self.UseProgram = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glValidateProgram, try loader("glValidateProgram"))) |ptr| {
            self.ValidateProgram = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib1d, try loader("glVertexAttrib1d"))) |ptr| {
            self.VertexAttrib1d = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib1dv, try loader("glVertexAttrib1dv"))) |ptr| {
            self.VertexAttrib1dv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib1f, try loader("glVertexAttrib1f"))) |ptr| {
            self.VertexAttrib1f = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib1fv, try loader("glVertexAttrib1fv"))) |ptr| {
            self.VertexAttrib1fv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib1s, try loader("glVertexAttrib1s"))) |ptr| {
            self.VertexAttrib1s = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib1sv, try loader("glVertexAttrib1sv"))) |ptr| {
            self.VertexAttrib1sv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib2d, try loader("glVertexAttrib2d"))) |ptr| {
            self.VertexAttrib2d = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib2dv, try loader("glVertexAttrib2dv"))) |ptr| {
            self.VertexAttrib2dv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib2f, try loader("glVertexAttrib2f"))) |ptr| {
            self.VertexAttrib2f = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib2fv, try loader("glVertexAttrib2fv"))) |ptr| {
            self.VertexAttrib2fv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib2s, try loader("glVertexAttrib2s"))) |ptr| {
            self.VertexAttrib2s = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib2sv, try loader("glVertexAttrib2sv"))) |ptr| {
            self.VertexAttrib2sv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib3d, try loader("glVertexAttrib3d"))) |ptr| {
            self.VertexAttrib3d = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib3dv, try loader("glVertexAttrib3dv"))) |ptr| {
            self.VertexAttrib3dv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib3f, try loader("glVertexAttrib3f"))) |ptr| {
            self.VertexAttrib3f = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib3fv, try loader("glVertexAttrib3fv"))) |ptr| {
            self.VertexAttrib3fv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib3s, try loader("glVertexAttrib3s"))) |ptr| {
            self.VertexAttrib3s = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib3sv, try loader("glVertexAttrib3sv"))) |ptr| {
            self.VertexAttrib3sv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4Nbv, try loader("glVertexAttrib4Nbv"))) |ptr| {
            self.VertexAttrib4Nbv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4Niv, try loader("glVertexAttrib4Niv"))) |ptr| {
            self.VertexAttrib4Niv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4Nsv, try loader("glVertexAttrib4Nsv"))) |ptr| {
            self.VertexAttrib4Nsv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4Nub, try loader("glVertexAttrib4Nub"))) |ptr| {
            self.VertexAttrib4Nub = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4Nubv, try loader("glVertexAttrib4Nubv"))) |ptr| {
            self.VertexAttrib4Nubv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4Nuiv, try loader("glVertexAttrib4Nuiv"))) |ptr| {
            self.VertexAttrib4Nuiv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4Nusv, try loader("glVertexAttrib4Nusv"))) |ptr| {
            self.VertexAttrib4Nusv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4bv, try loader("glVertexAttrib4bv"))) |ptr| {
            self.VertexAttrib4bv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4d, try loader("glVertexAttrib4d"))) |ptr| {
            self.VertexAttrib4d = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4dv, try loader("glVertexAttrib4dv"))) |ptr| {
            self.VertexAttrib4dv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4f, try loader("glVertexAttrib4f"))) |ptr| {
            self.VertexAttrib4f = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4fv, try loader("glVertexAttrib4fv"))) |ptr| {
            self.VertexAttrib4fv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4iv, try loader("glVertexAttrib4iv"))) |ptr| {
            self.VertexAttrib4iv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4s, try loader("glVertexAttrib4s"))) |ptr| {
            self.VertexAttrib4s = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4sv, try loader("glVertexAttrib4sv"))) |ptr| {
            self.VertexAttrib4sv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4ubv, try loader("glVertexAttrib4ubv"))) |ptr| {
            self.VertexAttrib4ubv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4uiv, try loader("glVertexAttrib4uiv"))) |ptr| {
            self.VertexAttrib4uiv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttrib4usv, try loader("glVertexAttrib4usv"))) |ptr| {
            self.VertexAttrib4usv = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glVertexAttribPointer, try loader("glVertexAttribPointer"))) |ptr| {
            self.VertexAttribPointer = ptr;
        } else {
            self.features.GL_VERSION_2_0 = false;
        }
        if (@ptrCast(?glUniformMatrix2x3fv, try loader("glUniformMatrix2x3fv"))) |ptr| {
            self.UniformMatrix2x3fv = ptr;
        } else {
            self.features.GL_VERSION_2_1 = false;
        }
        if (@ptrCast(?glUniformMatrix2x4fv, try loader("glUniformMatrix2x4fv"))) |ptr| {
            self.UniformMatrix2x4fv = ptr;
        } else {
            self.features.GL_VERSION_2_1 = false;
        }
        if (@ptrCast(?glUniformMatrix3x2fv, try loader("glUniformMatrix3x2fv"))) |ptr| {
            self.UniformMatrix3x2fv = ptr;
        } else {
            self.features.GL_VERSION_2_1 = false;
        }
        if (@ptrCast(?glUniformMatrix3x4fv, try loader("glUniformMatrix3x4fv"))) |ptr| {
            self.UniformMatrix3x4fv = ptr;
        } else {
            self.features.GL_VERSION_2_1 = false;
        }
        if (@ptrCast(?glUniformMatrix4x2fv, try loader("glUniformMatrix4x2fv"))) |ptr| {
            self.UniformMatrix4x2fv = ptr;
        } else {
            self.features.GL_VERSION_2_1 = false;
        }
        if (@ptrCast(?glUniformMatrix4x3fv, try loader("glUniformMatrix4x3fv"))) |ptr| {
            self.UniformMatrix4x3fv = ptr;
        } else {
            self.features.GL_VERSION_2_1 = false;
        }
        if (@ptrCast(?glBeginConditionalRender, try loader("glBeginConditionalRender"))) |ptr| {
            self.BeginConditionalRender = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glBeginTransformFeedback, try loader("glBeginTransformFeedback"))) |ptr| {
            self.BeginTransformFeedback = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glBindBufferBase, try loader("glBindBufferBase"))) |ptr| {
            self.BindBufferBase = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glBindBufferRange, try loader("glBindBufferRange"))) |ptr| {
            self.BindBufferRange = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glBindFragDataLocation, try loader("glBindFragDataLocation"))) |ptr| {
            self.BindFragDataLocation = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glBindFramebuffer, try loader("glBindFramebuffer"))) |ptr| {
            self.BindFramebuffer = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glBindRenderbuffer, try loader("glBindRenderbuffer"))) |ptr| {
            self.BindRenderbuffer = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glBindVertexArray, try loader("glBindVertexArray"))) |ptr| {
            self.BindVertexArray = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glBlitFramebuffer, try loader("glBlitFramebuffer"))) |ptr| {
            self.BlitFramebuffer = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glCheckFramebufferStatus, try loader("glCheckFramebufferStatus"))) |ptr| {
            self.CheckFramebufferStatus = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glClampColor, try loader("glClampColor"))) |ptr| {
            self.ClampColor = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glClearBufferfi, try loader("glClearBufferfi"))) |ptr| {
            self.ClearBufferfi = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glClearBufferfv, try loader("glClearBufferfv"))) |ptr| {
            self.ClearBufferfv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glClearBufferiv, try loader("glClearBufferiv"))) |ptr| {
            self.ClearBufferiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glClearBufferuiv, try loader("glClearBufferuiv"))) |ptr| {
            self.ClearBufferuiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glColorMaski, try loader("glColorMaski"))) |ptr| {
            self.ColorMaski = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glDeleteFramebuffers, try loader("glDeleteFramebuffers"))) |ptr| {
            self.DeleteFramebuffers = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glDeleteRenderbuffers, try loader("glDeleteRenderbuffers"))) |ptr| {
            self.DeleteRenderbuffers = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glDeleteVertexArrays, try loader("glDeleteVertexArrays"))) |ptr| {
            self.DeleteVertexArrays = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glDisablei, try loader("glDisablei"))) |ptr| {
            self.Disablei = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glEnablei, try loader("glEnablei"))) |ptr| {
            self.Enablei = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glEndConditionalRender, try loader("glEndConditionalRender"))) |ptr| {
            self.EndConditionalRender = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glEndTransformFeedback, try loader("glEndTransformFeedback"))) |ptr| {
            self.EndTransformFeedback = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glFlushMappedBufferRange, try loader("glFlushMappedBufferRange"))) |ptr| {
            self.FlushMappedBufferRange = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glFramebufferRenderbuffer, try loader("glFramebufferRenderbuffer"))) |ptr| {
            self.FramebufferRenderbuffer = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glFramebufferTexture1D, try loader("glFramebufferTexture1D"))) |ptr| {
            self.FramebufferTexture1D = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glFramebufferTexture2D, try loader("glFramebufferTexture2D"))) |ptr| {
            self.FramebufferTexture2D = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glFramebufferTexture3D, try loader("glFramebufferTexture3D"))) |ptr| {
            self.FramebufferTexture3D = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glFramebufferTextureLayer, try loader("glFramebufferTextureLayer"))) |ptr| {
            self.FramebufferTextureLayer = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGenFramebuffers, try loader("glGenFramebuffers"))) |ptr| {
            self.GenFramebuffers = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGenRenderbuffers, try loader("glGenRenderbuffers"))) |ptr| {
            self.GenRenderbuffers = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGenVertexArrays, try loader("glGenVertexArrays"))) |ptr| {
            self.GenVertexArrays = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGenerateMipmap, try loader("glGenerateMipmap"))) |ptr| {
            self.GenerateMipmap = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGetBooleani_v, try loader("glGetBooleani_v"))) |ptr| {
            self.GetBooleani_v = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGetFragDataLocation, try loader("glGetFragDataLocation"))) |ptr| {
            self.GetFragDataLocation = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGetFramebufferAttachmentParameteriv, try loader("glGetFramebufferAttachmentParameteriv"))) |ptr| {
            self.GetFramebufferAttachmentParameteriv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGetIntegeri_v, try loader("glGetIntegeri_v"))) |ptr| {
            self.GetIntegeri_v = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGetRenderbufferParameteriv, try loader("glGetRenderbufferParameteriv"))) |ptr| {
            self.GetRenderbufferParameteriv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGetStringi, try loader("glGetStringi"))) |ptr| {
            self.GetStringi = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGetTexParameterIiv, try loader("glGetTexParameterIiv"))) |ptr| {
            self.GetTexParameterIiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGetTexParameterIuiv, try loader("glGetTexParameterIuiv"))) |ptr| {
            self.GetTexParameterIuiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGetTransformFeedbackVarying, try loader("glGetTransformFeedbackVarying"))) |ptr| {
            self.GetTransformFeedbackVarying = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGetUniformuiv, try loader("glGetUniformuiv"))) |ptr| {
            self.GetUniformuiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGetVertexAttribIiv, try loader("glGetVertexAttribIiv"))) |ptr| {
            self.GetVertexAttribIiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glGetVertexAttribIuiv, try loader("glGetVertexAttribIuiv"))) |ptr| {
            self.GetVertexAttribIuiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glIsEnabledi, try loader("glIsEnabledi"))) |ptr| {
            self.IsEnabledi = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glIsFramebuffer, try loader("glIsFramebuffer"))) |ptr| {
            self.IsFramebuffer = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glIsRenderbuffer, try loader("glIsRenderbuffer"))) |ptr| {
            self.IsRenderbuffer = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glIsVertexArray, try loader("glIsVertexArray"))) |ptr| {
            self.IsVertexArray = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glMapBufferRange, try loader("glMapBufferRange"))) |ptr| {
            self.MapBufferRange = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glRenderbufferStorage, try loader("glRenderbufferStorage"))) |ptr| {
            self.RenderbufferStorage = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glRenderbufferStorageMultisample, try loader("glRenderbufferStorageMultisample"))) |ptr| {
            self.RenderbufferStorageMultisample = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glTexParameterIiv, try loader("glTexParameterIiv"))) |ptr| {
            self.TexParameterIiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glTexParameterIuiv, try loader("glTexParameterIuiv"))) |ptr| {
            self.TexParameterIuiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glTransformFeedbackVaryings, try loader("glTransformFeedbackVaryings"))) |ptr| {
            self.TransformFeedbackVaryings = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glUniform1ui, try loader("glUniform1ui"))) |ptr| {
            self.Uniform1ui = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glUniform1uiv, try loader("glUniform1uiv"))) |ptr| {
            self.Uniform1uiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glUniform2ui, try loader("glUniform2ui"))) |ptr| {
            self.Uniform2ui = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glUniform2uiv, try loader("glUniform2uiv"))) |ptr| {
            self.Uniform2uiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glUniform3ui, try loader("glUniform3ui"))) |ptr| {
            self.Uniform3ui = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glUniform3uiv, try loader("glUniform3uiv"))) |ptr| {
            self.Uniform3uiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glUniform4ui, try loader("glUniform4ui"))) |ptr| {
            self.Uniform4ui = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glUniform4uiv, try loader("glUniform4uiv"))) |ptr| {
            self.Uniform4uiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI1i, try loader("glVertexAttribI1i"))) |ptr| {
            self.VertexAttribI1i = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI1iv, try loader("glVertexAttribI1iv"))) |ptr| {
            self.VertexAttribI1iv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI1ui, try loader("glVertexAttribI1ui"))) |ptr| {
            self.VertexAttribI1ui = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI1uiv, try loader("glVertexAttribI1uiv"))) |ptr| {
            self.VertexAttribI1uiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI2i, try loader("glVertexAttribI2i"))) |ptr| {
            self.VertexAttribI2i = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI2iv, try loader("glVertexAttribI2iv"))) |ptr| {
            self.VertexAttribI2iv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI2ui, try loader("glVertexAttribI2ui"))) |ptr| {
            self.VertexAttribI2ui = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI2uiv, try loader("glVertexAttribI2uiv"))) |ptr| {
            self.VertexAttribI2uiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI3i, try loader("glVertexAttribI3i"))) |ptr| {
            self.VertexAttribI3i = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI3iv, try loader("glVertexAttribI3iv"))) |ptr| {
            self.VertexAttribI3iv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI3ui, try loader("glVertexAttribI3ui"))) |ptr| {
            self.VertexAttribI3ui = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI3uiv, try loader("glVertexAttribI3uiv"))) |ptr| {
            self.VertexAttribI3uiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI4bv, try loader("glVertexAttribI4bv"))) |ptr| {
            self.VertexAttribI4bv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI4i, try loader("glVertexAttribI4i"))) |ptr| {
            self.VertexAttribI4i = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI4iv, try loader("glVertexAttribI4iv"))) |ptr| {
            self.VertexAttribI4iv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI4sv, try loader("glVertexAttribI4sv"))) |ptr| {
            self.VertexAttribI4sv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI4ubv, try loader("glVertexAttribI4ubv"))) |ptr| {
            self.VertexAttribI4ubv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI4ui, try loader("glVertexAttribI4ui"))) |ptr| {
            self.VertexAttribI4ui = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI4uiv, try loader("glVertexAttribI4uiv"))) |ptr| {
            self.VertexAttribI4uiv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribI4usv, try loader("glVertexAttribI4usv"))) |ptr| {
            self.VertexAttribI4usv = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glVertexAttribIPointer, try loader("glVertexAttribIPointer"))) |ptr| {
            self.VertexAttribIPointer = ptr;
        } else {
            self.features.GL_VERSION_3_0 = false;
        }
        if (@ptrCast(?glBindBufferBase, try loader("glBindBufferBase"))) |ptr| {
            self.BindBufferBase = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glBindBufferRange, try loader("glBindBufferRange"))) |ptr| {
            self.BindBufferRange = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glCopyBufferSubData, try loader("glCopyBufferSubData"))) |ptr| {
            self.CopyBufferSubData = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glDrawArraysInstanced, try loader("glDrawArraysInstanced"))) |ptr| {
            self.DrawArraysInstanced = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glDrawElementsInstanced, try loader("glDrawElementsInstanced"))) |ptr| {
            self.DrawElementsInstanced = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glGetActiveUniformBlockName, try loader("glGetActiveUniformBlockName"))) |ptr| {
            self.GetActiveUniformBlockName = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glGetActiveUniformBlockiv, try loader("glGetActiveUniformBlockiv"))) |ptr| {
            self.GetActiveUniformBlockiv = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glGetActiveUniformName, try loader("glGetActiveUniformName"))) |ptr| {
            self.GetActiveUniformName = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glGetActiveUniformsiv, try loader("glGetActiveUniformsiv"))) |ptr| {
            self.GetActiveUniformsiv = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glGetIntegeri_v, try loader("glGetIntegeri_v"))) |ptr| {
            self.GetIntegeri_v = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glGetUniformBlockIndex, try loader("glGetUniformBlockIndex"))) |ptr| {
            self.GetUniformBlockIndex = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glGetUniformIndices, try loader("glGetUniformIndices"))) |ptr| {
            self.GetUniformIndices = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glPrimitiveRestartIndex, try loader("glPrimitiveRestartIndex"))) |ptr| {
            self.PrimitiveRestartIndex = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glTexBuffer, try loader("glTexBuffer"))) |ptr| {
            self.TexBuffer = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glUniformBlockBinding, try loader("glUniformBlockBinding"))) |ptr| {
            self.UniformBlockBinding = ptr;
        } else {
            self.features.GL_VERSION_3_1 = false;
        }
        if (@ptrCast(?glClientWaitSync, try loader("glClientWaitSync"))) |ptr| {
            self.ClientWaitSync = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glDeleteSync, try loader("glDeleteSync"))) |ptr| {
            self.DeleteSync = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glDrawElementsBaseVertex, try loader("glDrawElementsBaseVertex"))) |ptr| {
            self.DrawElementsBaseVertex = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glDrawElementsInstancedBaseVertex, try loader("glDrawElementsInstancedBaseVertex"))) |ptr| {
            self.DrawElementsInstancedBaseVertex = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glDrawRangeElementsBaseVertex, try loader("glDrawRangeElementsBaseVertex"))) |ptr| {
            self.DrawRangeElementsBaseVertex = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glFenceSync, try loader("glFenceSync"))) |ptr| {
            self.FenceSync = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glFramebufferTexture, try loader("glFramebufferTexture"))) |ptr| {
            self.FramebufferTexture = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glGetBufferParameteri64v, try loader("glGetBufferParameteri64v"))) |ptr| {
            self.GetBufferParameteri64v = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glGetInteger64i_v, try loader("glGetInteger64i_v"))) |ptr| {
            self.GetInteger64i_v = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glGetInteger64v, try loader("glGetInteger64v"))) |ptr| {
            self.GetInteger64v = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glGetMultisamplefv, try loader("glGetMultisamplefv"))) |ptr| {
            self.GetMultisamplefv = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glGetSynciv, try loader("glGetSynciv"))) |ptr| {
            self.GetSynciv = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glIsSync, try loader("glIsSync"))) |ptr| {
            self.IsSync = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glMultiDrawElementsBaseVertex, try loader("glMultiDrawElementsBaseVertex"))) |ptr| {
            self.MultiDrawElementsBaseVertex = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glProvokingVertex, try loader("glProvokingVertex"))) |ptr| {
            self.ProvokingVertex = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glSampleMaski, try loader("glSampleMaski"))) |ptr| {
            self.SampleMaski = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glTexImage2DMultisample, try loader("glTexImage2DMultisample"))) |ptr| {
            self.TexImage2DMultisample = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glTexImage3DMultisample, try loader("glTexImage3DMultisample"))) |ptr| {
            self.TexImage3DMultisample = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glWaitSync, try loader("glWaitSync"))) |ptr| {
            self.WaitSync = ptr;
        } else {
            self.features.GL_VERSION_3_2 = false;
        }
        if (@ptrCast(?glBindFragDataLocationIndexed, try loader("glBindFragDataLocationIndexed"))) |ptr| {
            self.BindFragDataLocationIndexed = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glBindSampler, try loader("glBindSampler"))) |ptr| {
            self.BindSampler = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glDeleteSamplers, try loader("glDeleteSamplers"))) |ptr| {
            self.DeleteSamplers = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glGenSamplers, try loader("glGenSamplers"))) |ptr| {
            self.GenSamplers = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glGetFragDataIndex, try loader("glGetFragDataIndex"))) |ptr| {
            self.GetFragDataIndex = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glGetQueryObjecti64v, try loader("glGetQueryObjecti64v"))) |ptr| {
            self.GetQueryObjecti64v = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glGetQueryObjectui64v, try loader("glGetQueryObjectui64v"))) |ptr| {
            self.GetQueryObjectui64v = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glGetSamplerParameterIiv, try loader("glGetSamplerParameterIiv"))) |ptr| {
            self.GetSamplerParameterIiv = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glGetSamplerParameterIuiv, try loader("glGetSamplerParameterIuiv"))) |ptr| {
            self.GetSamplerParameterIuiv = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glGetSamplerParameterfv, try loader("glGetSamplerParameterfv"))) |ptr| {
            self.GetSamplerParameterfv = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glGetSamplerParameteriv, try loader("glGetSamplerParameteriv"))) |ptr| {
            self.GetSamplerParameteriv = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glIsSampler, try loader("glIsSampler"))) |ptr| {
            self.IsSampler = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glQueryCounter, try loader("glQueryCounter"))) |ptr| {
            self.QueryCounter = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glSamplerParameterIiv, try loader("glSamplerParameterIiv"))) |ptr| {
            self.SamplerParameterIiv = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glSamplerParameterIuiv, try loader("glSamplerParameterIuiv"))) |ptr| {
            self.SamplerParameterIuiv = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glSamplerParameterf, try loader("glSamplerParameterf"))) |ptr| {
            self.SamplerParameterf = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glSamplerParameterfv, try loader("glSamplerParameterfv"))) |ptr| {
            self.SamplerParameterfv = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glSamplerParameteri, try loader("glSamplerParameteri"))) |ptr| {
            self.SamplerParameteri = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glSamplerParameteriv, try loader("glSamplerParameteriv"))) |ptr| {
            self.SamplerParameteriv = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glVertexAttribDivisor, try loader("glVertexAttribDivisor"))) |ptr| {
            self.VertexAttribDivisor = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glVertexAttribP1ui, try loader("glVertexAttribP1ui"))) |ptr| {
            self.VertexAttribP1ui = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glVertexAttribP1uiv, try loader("glVertexAttribP1uiv"))) |ptr| {
            self.VertexAttribP1uiv = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glVertexAttribP2ui, try loader("glVertexAttribP2ui"))) |ptr| {
            self.VertexAttribP2ui = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glVertexAttribP2uiv, try loader("glVertexAttribP2uiv"))) |ptr| {
            self.VertexAttribP2uiv = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glVertexAttribP3ui, try loader("glVertexAttribP3ui"))) |ptr| {
            self.VertexAttribP3ui = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glVertexAttribP3uiv, try loader("glVertexAttribP3uiv"))) |ptr| {
            self.VertexAttribP3uiv = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glVertexAttribP4ui, try loader("glVertexAttribP4ui"))) |ptr| {
            self.VertexAttribP4ui = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glVertexAttribP4uiv, try loader("glVertexAttribP4uiv"))) |ptr| {
            self.VertexAttribP4uiv = ptr;
        } else {
            self.features.GL_VERSION_3_3 = false;
        }
        if (@ptrCast(?glTbufferMask3DFX, try loader("glTbufferMask3DFX"))) |ptr| {
            self.TbufferMask3DFX = ptr;
        } else {
            self.features.GL_3DFX_tbuffer = false;
        }
        if (@ptrCast(?glDebugMessageCallbackAMD, try loader("glDebugMessageCallbackAMD"))) |ptr| {
            self.DebugMessageCallbackAMD = ptr;
        } else {
            self.features.GL_AMD_debug_output = false;
        }
        if (@ptrCast(?glDebugMessageEnableAMD, try loader("glDebugMessageEnableAMD"))) |ptr| {
            self.DebugMessageEnableAMD = ptr;
        } else {
            self.features.GL_AMD_debug_output = false;
        }
        if (@ptrCast(?glDebugMessageInsertAMD, try loader("glDebugMessageInsertAMD"))) |ptr| {
            self.DebugMessageInsertAMD = ptr;
        } else {
            self.features.GL_AMD_debug_output = false;
        }
        if (@ptrCast(?glGetDebugMessageLogAMD, try loader("glGetDebugMessageLogAMD"))) |ptr| {
            self.GetDebugMessageLogAMD = ptr;
        } else {
            self.features.GL_AMD_debug_output = false;
        }
        if (@ptrCast(?glBlendEquationIndexedAMD, try loader("glBlendEquationIndexedAMD"))) |ptr| {
            self.BlendEquationIndexedAMD = ptr;
        } else {
            self.features.GL_AMD_draw_buffers_blend = false;
        }
        if (@ptrCast(?glBlendEquationSeparateIndexedAMD, try loader("glBlendEquationSeparateIndexedAMD"))) |ptr| {
            self.BlendEquationSeparateIndexedAMD = ptr;
        } else {
            self.features.GL_AMD_draw_buffers_blend = false;
        }
        if (@ptrCast(?glBlendFuncIndexedAMD, try loader("glBlendFuncIndexedAMD"))) |ptr| {
            self.BlendFuncIndexedAMD = ptr;
        } else {
            self.features.GL_AMD_draw_buffers_blend = false;
        }
        if (@ptrCast(?glBlendFuncSeparateIndexedAMD, try loader("glBlendFuncSeparateIndexedAMD"))) |ptr| {
            self.BlendFuncSeparateIndexedAMD = ptr;
        } else {
            self.features.GL_AMD_draw_buffers_blend = false;
        }
        if (@ptrCast(?glNamedRenderbufferStorageMultisampleAdvancedAMD, try loader("glNamedRenderbufferStorageMultisampleAdvancedAMD"))) |ptr| {
            self.NamedRenderbufferStorageMultisampleAdvancedAMD = ptr;
        } else {
            self.features.GL_AMD_framebuffer_multisample_advanced = false;
        }
        if (@ptrCast(?glRenderbufferStorageMultisampleAdvancedAMD, try loader("glRenderbufferStorageMultisampleAdvancedAMD"))) |ptr| {
            self.RenderbufferStorageMultisampleAdvancedAMD = ptr;
        } else {
            self.features.GL_AMD_framebuffer_multisample_advanced = false;
        }
        if (@ptrCast(?glFramebufferSamplePositionsfvAMD, try loader("glFramebufferSamplePositionsfvAMD"))) |ptr| {
            self.FramebufferSamplePositionsfvAMD = ptr;
        } else {
            self.features.GL_AMD_framebuffer_sample_positions = false;
        }
        if (@ptrCast(?glGetFramebufferParameterfvAMD, try loader("glGetFramebufferParameterfvAMD"))) |ptr| {
            self.GetFramebufferParameterfvAMD = ptr;
        } else {
            self.features.GL_AMD_framebuffer_sample_positions = false;
        }
        if (@ptrCast(?glGetNamedFramebufferParameterfvAMD, try loader("glGetNamedFramebufferParameterfvAMD"))) |ptr| {
            self.GetNamedFramebufferParameterfvAMD = ptr;
        } else {
            self.features.GL_AMD_framebuffer_sample_positions = false;
        }
        if (@ptrCast(?glNamedFramebufferSamplePositionsfvAMD, try loader("glNamedFramebufferSamplePositionsfvAMD"))) |ptr| {
            self.NamedFramebufferSamplePositionsfvAMD = ptr;
        } else {
            self.features.GL_AMD_framebuffer_sample_positions = false;
        }
        if (@ptrCast(?glGetUniformi64vNV, try loader("glGetUniformi64vNV"))) |ptr| {
            self.GetUniformi64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glGetUniformui64vNV, try loader("glGetUniformui64vNV"))) |ptr| {
            self.GetUniformui64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform1i64NV, try loader("glProgramUniform1i64NV"))) |ptr| {
            self.ProgramUniform1i64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform1i64vNV, try loader("glProgramUniform1i64vNV"))) |ptr| {
            self.ProgramUniform1i64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform1ui64NV, try loader("glProgramUniform1ui64NV"))) |ptr| {
            self.ProgramUniform1ui64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform1ui64vNV, try loader("glProgramUniform1ui64vNV"))) |ptr| {
            self.ProgramUniform1ui64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform2i64NV, try loader("glProgramUniform2i64NV"))) |ptr| {
            self.ProgramUniform2i64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform2i64vNV, try loader("glProgramUniform2i64vNV"))) |ptr| {
            self.ProgramUniform2i64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform2ui64NV, try loader("glProgramUniform2ui64NV"))) |ptr| {
            self.ProgramUniform2ui64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform2ui64vNV, try loader("glProgramUniform2ui64vNV"))) |ptr| {
            self.ProgramUniform2ui64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform3i64NV, try loader("glProgramUniform3i64NV"))) |ptr| {
            self.ProgramUniform3i64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform3i64vNV, try loader("glProgramUniform3i64vNV"))) |ptr| {
            self.ProgramUniform3i64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform3ui64NV, try loader("glProgramUniform3ui64NV"))) |ptr| {
            self.ProgramUniform3ui64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform3ui64vNV, try loader("glProgramUniform3ui64vNV"))) |ptr| {
            self.ProgramUniform3ui64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform4i64NV, try loader("glProgramUniform4i64NV"))) |ptr| {
            self.ProgramUniform4i64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform4i64vNV, try loader("glProgramUniform4i64vNV"))) |ptr| {
            self.ProgramUniform4i64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform4ui64NV, try loader("glProgramUniform4ui64NV"))) |ptr| {
            self.ProgramUniform4ui64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform4ui64vNV, try loader("glProgramUniform4ui64vNV"))) |ptr| {
            self.ProgramUniform4ui64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform1i64NV, try loader("glUniform1i64NV"))) |ptr| {
            self.Uniform1i64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform1i64vNV, try loader("glUniform1i64vNV"))) |ptr| {
            self.Uniform1i64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform1ui64NV, try loader("glUniform1ui64NV"))) |ptr| {
            self.Uniform1ui64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform1ui64vNV, try loader("glUniform1ui64vNV"))) |ptr| {
            self.Uniform1ui64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform2i64NV, try loader("glUniform2i64NV"))) |ptr| {
            self.Uniform2i64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform2i64vNV, try loader("glUniform2i64vNV"))) |ptr| {
            self.Uniform2i64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform2ui64NV, try loader("glUniform2ui64NV"))) |ptr| {
            self.Uniform2ui64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform2ui64vNV, try loader("glUniform2ui64vNV"))) |ptr| {
            self.Uniform2ui64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform3i64NV, try loader("glUniform3i64NV"))) |ptr| {
            self.Uniform3i64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform3i64vNV, try loader("glUniform3i64vNV"))) |ptr| {
            self.Uniform3i64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform3ui64NV, try loader("glUniform3ui64NV"))) |ptr| {
            self.Uniform3ui64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform3ui64vNV, try loader("glUniform3ui64vNV"))) |ptr| {
            self.Uniform3ui64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform4i64NV, try loader("glUniform4i64NV"))) |ptr| {
            self.Uniform4i64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform4i64vNV, try loader("glUniform4i64vNV"))) |ptr| {
            self.Uniform4i64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform4ui64NV, try loader("glUniform4ui64NV"))) |ptr| {
            self.Uniform4ui64NV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform4ui64vNV, try loader("glUniform4ui64vNV"))) |ptr| {
            self.Uniform4ui64vNV = ptr;
        } else {
            self.features.GL_AMD_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glVertexAttribParameteriAMD, try loader("glVertexAttribParameteriAMD"))) |ptr| {
            self.VertexAttribParameteriAMD = ptr;
        } else {
            self.features.GL_AMD_interleaved_elements = false;
        }
        if (@ptrCast(?glMultiDrawArraysIndirectAMD, try loader("glMultiDrawArraysIndirectAMD"))) |ptr| {
            self.MultiDrawArraysIndirectAMD = ptr;
        } else {
            self.features.GL_AMD_multi_draw_indirect = false;
        }
        if (@ptrCast(?glMultiDrawElementsIndirectAMD, try loader("glMultiDrawElementsIndirectAMD"))) |ptr| {
            self.MultiDrawElementsIndirectAMD = ptr;
        } else {
            self.features.GL_AMD_multi_draw_indirect = false;
        }
        if (@ptrCast(?glDeleteNamesAMD, try loader("glDeleteNamesAMD"))) |ptr| {
            self.DeleteNamesAMD = ptr;
        } else {
            self.features.GL_AMD_name_gen_delete = false;
        }
        if (@ptrCast(?glGenNamesAMD, try loader("glGenNamesAMD"))) |ptr| {
            self.GenNamesAMD = ptr;
        } else {
            self.features.GL_AMD_name_gen_delete = false;
        }
        if (@ptrCast(?glIsNameAMD, try loader("glIsNameAMD"))) |ptr| {
            self.IsNameAMD = ptr;
        } else {
            self.features.GL_AMD_name_gen_delete = false;
        }
        if (@ptrCast(?glQueryObjectParameteruiAMD, try loader("glQueryObjectParameteruiAMD"))) |ptr| {
            self.QueryObjectParameteruiAMD = ptr;
        } else {
            self.features.GL_AMD_occlusion_query_event = false;
        }
        if (@ptrCast(?glBeginPerfMonitorAMD, try loader("glBeginPerfMonitorAMD"))) |ptr| {
            self.BeginPerfMonitorAMD = ptr;
        } else {
            self.features.GL_AMD_performance_monitor = false;
        }
        if (@ptrCast(?glDeletePerfMonitorsAMD, try loader("glDeletePerfMonitorsAMD"))) |ptr| {
            self.DeletePerfMonitorsAMD = ptr;
        } else {
            self.features.GL_AMD_performance_monitor = false;
        }
        if (@ptrCast(?glEndPerfMonitorAMD, try loader("glEndPerfMonitorAMD"))) |ptr| {
            self.EndPerfMonitorAMD = ptr;
        } else {
            self.features.GL_AMD_performance_monitor = false;
        }
        if (@ptrCast(?glGenPerfMonitorsAMD, try loader("glGenPerfMonitorsAMD"))) |ptr| {
            self.GenPerfMonitorsAMD = ptr;
        } else {
            self.features.GL_AMD_performance_monitor = false;
        }
        if (@ptrCast(?glGetPerfMonitorCounterDataAMD, try loader("glGetPerfMonitorCounterDataAMD"))) |ptr| {
            self.GetPerfMonitorCounterDataAMD = ptr;
        } else {
            self.features.GL_AMD_performance_monitor = false;
        }
        if (@ptrCast(?glGetPerfMonitorCounterInfoAMD, try loader("glGetPerfMonitorCounterInfoAMD"))) |ptr| {
            self.GetPerfMonitorCounterInfoAMD = ptr;
        } else {
            self.features.GL_AMD_performance_monitor = false;
        }
        if (@ptrCast(?glGetPerfMonitorCounterStringAMD, try loader("glGetPerfMonitorCounterStringAMD"))) |ptr| {
            self.GetPerfMonitorCounterStringAMD = ptr;
        } else {
            self.features.GL_AMD_performance_monitor = false;
        }
        if (@ptrCast(?glGetPerfMonitorCountersAMD, try loader("glGetPerfMonitorCountersAMD"))) |ptr| {
            self.GetPerfMonitorCountersAMD = ptr;
        } else {
            self.features.GL_AMD_performance_monitor = false;
        }
        if (@ptrCast(?glGetPerfMonitorGroupStringAMD, try loader("glGetPerfMonitorGroupStringAMD"))) |ptr| {
            self.GetPerfMonitorGroupStringAMD = ptr;
        } else {
            self.features.GL_AMD_performance_monitor = false;
        }
        if (@ptrCast(?glGetPerfMonitorGroupsAMD, try loader("glGetPerfMonitorGroupsAMD"))) |ptr| {
            self.GetPerfMonitorGroupsAMD = ptr;
        } else {
            self.features.GL_AMD_performance_monitor = false;
        }
        if (@ptrCast(?glSelectPerfMonitorCountersAMD, try loader("glSelectPerfMonitorCountersAMD"))) |ptr| {
            self.SelectPerfMonitorCountersAMD = ptr;
        } else {
            self.features.GL_AMD_performance_monitor = false;
        }
        if (@ptrCast(?glSetMultisamplefvAMD, try loader("glSetMultisamplefvAMD"))) |ptr| {
            self.SetMultisamplefvAMD = ptr;
        } else {
            self.features.GL_AMD_sample_positions = false;
        }
        if (@ptrCast(?glTexStorageSparseAMD, try loader("glTexStorageSparseAMD"))) |ptr| {
            self.TexStorageSparseAMD = ptr;
        } else {
            self.features.GL_AMD_sparse_texture = false;
        }
        if (@ptrCast(?glTextureStorageSparseAMD, try loader("glTextureStorageSparseAMD"))) |ptr| {
            self.TextureStorageSparseAMD = ptr;
        } else {
            self.features.GL_AMD_sparse_texture = false;
        }
        if (@ptrCast(?glStencilOpValueAMD, try loader("glStencilOpValueAMD"))) |ptr| {
            self.StencilOpValueAMD = ptr;
        } else {
            self.features.GL_AMD_stencil_operation_extended = false;
        }
        if (@ptrCast(?glTessellationFactorAMD, try loader("glTessellationFactorAMD"))) |ptr| {
            self.TessellationFactorAMD = ptr;
        } else {
            self.features.GL_AMD_vertex_shader_tessellator = false;
        }
        if (@ptrCast(?glTessellationModeAMD, try loader("glTessellationModeAMD"))) |ptr| {
            self.TessellationModeAMD = ptr;
        } else {
            self.features.GL_AMD_vertex_shader_tessellator = false;
        }
        if (@ptrCast(?glDrawElementArrayAPPLE, try loader("glDrawElementArrayAPPLE"))) |ptr| {
            self.DrawElementArrayAPPLE = ptr;
        } else {
            self.features.GL_APPLE_element_array = false;
        }
        if (@ptrCast(?glDrawRangeElementArrayAPPLE, try loader("glDrawRangeElementArrayAPPLE"))) |ptr| {
            self.DrawRangeElementArrayAPPLE = ptr;
        } else {
            self.features.GL_APPLE_element_array = false;
        }
        if (@ptrCast(?glElementPointerAPPLE, try loader("glElementPointerAPPLE"))) |ptr| {
            self.ElementPointerAPPLE = ptr;
        } else {
            self.features.GL_APPLE_element_array = false;
        }
        if (@ptrCast(?glMultiDrawElementArrayAPPLE, try loader("glMultiDrawElementArrayAPPLE"))) |ptr| {
            self.MultiDrawElementArrayAPPLE = ptr;
        } else {
            self.features.GL_APPLE_element_array = false;
        }
        if (@ptrCast(?glMultiDrawRangeElementArrayAPPLE, try loader("glMultiDrawRangeElementArrayAPPLE"))) |ptr| {
            self.MultiDrawRangeElementArrayAPPLE = ptr;
        } else {
            self.features.GL_APPLE_element_array = false;
        }
        if (@ptrCast(?glDeleteFencesAPPLE, try loader("glDeleteFencesAPPLE"))) |ptr| {
            self.DeleteFencesAPPLE = ptr;
        } else {
            self.features.GL_APPLE_fence = false;
        }
        if (@ptrCast(?glFinishFenceAPPLE, try loader("glFinishFenceAPPLE"))) |ptr| {
            self.FinishFenceAPPLE = ptr;
        } else {
            self.features.GL_APPLE_fence = false;
        }
        if (@ptrCast(?glFinishObjectAPPLE, try loader("glFinishObjectAPPLE"))) |ptr| {
            self.FinishObjectAPPLE = ptr;
        } else {
            self.features.GL_APPLE_fence = false;
        }
        if (@ptrCast(?glGenFencesAPPLE, try loader("glGenFencesAPPLE"))) |ptr| {
            self.GenFencesAPPLE = ptr;
        } else {
            self.features.GL_APPLE_fence = false;
        }
        if (@ptrCast(?glIsFenceAPPLE, try loader("glIsFenceAPPLE"))) |ptr| {
            self.IsFenceAPPLE = ptr;
        } else {
            self.features.GL_APPLE_fence = false;
        }
        if (@ptrCast(?glSetFenceAPPLE, try loader("glSetFenceAPPLE"))) |ptr| {
            self.SetFenceAPPLE = ptr;
        } else {
            self.features.GL_APPLE_fence = false;
        }
        if (@ptrCast(?glTestFenceAPPLE, try loader("glTestFenceAPPLE"))) |ptr| {
            self.TestFenceAPPLE = ptr;
        } else {
            self.features.GL_APPLE_fence = false;
        }
        if (@ptrCast(?glTestObjectAPPLE, try loader("glTestObjectAPPLE"))) |ptr| {
            self.TestObjectAPPLE = ptr;
        } else {
            self.features.GL_APPLE_fence = false;
        }
        if (@ptrCast(?glBufferParameteriAPPLE, try loader("glBufferParameteriAPPLE"))) |ptr| {
            self.BufferParameteriAPPLE = ptr;
        } else {
            self.features.GL_APPLE_flush_buffer_range = false;
        }
        if (@ptrCast(?glFlushMappedBufferRangeAPPLE, try loader("glFlushMappedBufferRangeAPPLE"))) |ptr| {
            self.FlushMappedBufferRangeAPPLE = ptr;
        } else {
            self.features.GL_APPLE_flush_buffer_range = false;
        }
        if (@ptrCast(?glGetObjectParameterivAPPLE, try loader("glGetObjectParameterivAPPLE"))) |ptr| {
            self.GetObjectParameterivAPPLE = ptr;
        } else {
            self.features.GL_APPLE_object_purgeable = false;
        }
        if (@ptrCast(?glObjectPurgeableAPPLE, try loader("glObjectPurgeableAPPLE"))) |ptr| {
            self.ObjectPurgeableAPPLE = ptr;
        } else {
            self.features.GL_APPLE_object_purgeable = false;
        }
        if (@ptrCast(?glObjectUnpurgeableAPPLE, try loader("glObjectUnpurgeableAPPLE"))) |ptr| {
            self.ObjectUnpurgeableAPPLE = ptr;
        } else {
            self.features.GL_APPLE_object_purgeable = false;
        }
        if (@ptrCast(?glGetTexParameterPointervAPPLE, try loader("glGetTexParameterPointervAPPLE"))) |ptr| {
            self.GetTexParameterPointervAPPLE = ptr;
        } else {
            self.features.GL_APPLE_texture_range = false;
        }
        if (@ptrCast(?glTextureRangeAPPLE, try loader("glTextureRangeAPPLE"))) |ptr| {
            self.TextureRangeAPPLE = ptr;
        } else {
            self.features.GL_APPLE_texture_range = false;
        }
        if (@ptrCast(?glBindVertexArrayAPPLE, try loader("glBindVertexArrayAPPLE"))) |ptr| {
            self.BindVertexArrayAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_array_object = false;
        }
        if (@ptrCast(?glDeleteVertexArraysAPPLE, try loader("glDeleteVertexArraysAPPLE"))) |ptr| {
            self.DeleteVertexArraysAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_array_object = false;
        }
        if (@ptrCast(?glGenVertexArraysAPPLE, try loader("glGenVertexArraysAPPLE"))) |ptr| {
            self.GenVertexArraysAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_array_object = false;
        }
        if (@ptrCast(?glIsVertexArrayAPPLE, try loader("glIsVertexArrayAPPLE"))) |ptr| {
            self.IsVertexArrayAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_array_object = false;
        }
        if (@ptrCast(?glFlushVertexArrayRangeAPPLE, try loader("glFlushVertexArrayRangeAPPLE"))) |ptr| {
            self.FlushVertexArrayRangeAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_array_range = false;
        }
        if (@ptrCast(?glVertexArrayParameteriAPPLE, try loader("glVertexArrayParameteriAPPLE"))) |ptr| {
            self.VertexArrayParameteriAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_array_range = false;
        }
        if (@ptrCast(?glVertexArrayRangeAPPLE, try loader("glVertexArrayRangeAPPLE"))) |ptr| {
            self.VertexArrayRangeAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_array_range = false;
        }
        if (@ptrCast(?glDisableVertexAttribAPPLE, try loader("glDisableVertexAttribAPPLE"))) |ptr| {
            self.DisableVertexAttribAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_program_evaluators = false;
        }
        if (@ptrCast(?glEnableVertexAttribAPPLE, try loader("glEnableVertexAttribAPPLE"))) |ptr| {
            self.EnableVertexAttribAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_program_evaluators = false;
        }
        if (@ptrCast(?glIsVertexAttribEnabledAPPLE, try loader("glIsVertexAttribEnabledAPPLE"))) |ptr| {
            self.IsVertexAttribEnabledAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_program_evaluators = false;
        }
        if (@ptrCast(?glMapVertexAttrib1dAPPLE, try loader("glMapVertexAttrib1dAPPLE"))) |ptr| {
            self.MapVertexAttrib1dAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_program_evaluators = false;
        }
        if (@ptrCast(?glMapVertexAttrib1fAPPLE, try loader("glMapVertexAttrib1fAPPLE"))) |ptr| {
            self.MapVertexAttrib1fAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_program_evaluators = false;
        }
        if (@ptrCast(?glMapVertexAttrib2dAPPLE, try loader("glMapVertexAttrib2dAPPLE"))) |ptr| {
            self.MapVertexAttrib2dAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_program_evaluators = false;
        }
        if (@ptrCast(?glMapVertexAttrib2fAPPLE, try loader("glMapVertexAttrib2fAPPLE"))) |ptr| {
            self.MapVertexAttrib2fAPPLE = ptr;
        } else {
            self.features.GL_APPLE_vertex_program_evaluators = false;
        }
        if (@ptrCast(?glClearDepthf, try loader("glClearDepthf"))) |ptr| {
            self.ClearDepthf = ptr;
        } else {
            self.features.GL_ARB_ES2_compatibility = false;
        }
        if (@ptrCast(?glDepthRangef, try loader("glDepthRangef"))) |ptr| {
            self.DepthRangef = ptr;
        } else {
            self.features.GL_ARB_ES2_compatibility = false;
        }
        if (@ptrCast(?glGetShaderPrecisionFormat, try loader("glGetShaderPrecisionFormat"))) |ptr| {
            self.GetShaderPrecisionFormat = ptr;
        } else {
            self.features.GL_ARB_ES2_compatibility = false;
        }
        if (@ptrCast(?glReleaseShaderCompiler, try loader("glReleaseShaderCompiler"))) |ptr| {
            self.ReleaseShaderCompiler = ptr;
        } else {
            self.features.GL_ARB_ES2_compatibility = false;
        }
        if (@ptrCast(?glShaderBinary, try loader("glShaderBinary"))) |ptr| {
            self.ShaderBinary = ptr;
        } else {
            self.features.GL_ARB_ES2_compatibility = false;
        }
        if (@ptrCast(?glMemoryBarrierByRegion, try loader("glMemoryBarrierByRegion"))) |ptr| {
            self.MemoryBarrierByRegion = ptr;
        } else {
            self.features.GL_ARB_ES3_1_compatibility = false;
        }
        if (@ptrCast(?glPrimitiveBoundingBoxARB, try loader("glPrimitiveBoundingBoxARB"))) |ptr| {
            self.PrimitiveBoundingBoxARB = ptr;
        } else {
            self.features.GL_ARB_ES3_2_compatibility = false;
        }
        if (@ptrCast(?glDrawArraysInstancedBaseInstance, try loader("glDrawArraysInstancedBaseInstance"))) |ptr| {
            self.DrawArraysInstancedBaseInstance = ptr;
        } else {
            self.features.GL_ARB_base_instance = false;
        }
        if (@ptrCast(?glDrawElementsInstancedBaseInstance, try loader("glDrawElementsInstancedBaseInstance"))) |ptr| {
            self.DrawElementsInstancedBaseInstance = ptr;
        } else {
            self.features.GL_ARB_base_instance = false;
        }
        if (@ptrCast(?glDrawElementsInstancedBaseVertexBaseInstance, try loader("glDrawElementsInstancedBaseVertexBaseInstance"))) |ptr| {
            self.DrawElementsInstancedBaseVertexBaseInstance = ptr;
        } else {
            self.features.GL_ARB_base_instance = false;
        }
        if (@ptrCast(?glGetImageHandleARB, try loader("glGetImageHandleARB"))) |ptr| {
            self.GetImageHandleARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glGetTextureHandleARB, try loader("glGetTextureHandleARB"))) |ptr| {
            self.GetTextureHandleARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glGetTextureSamplerHandleARB, try loader("glGetTextureSamplerHandleARB"))) |ptr| {
            self.GetTextureSamplerHandleARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glGetVertexAttribLui64vARB, try loader("glGetVertexAttribLui64vARB"))) |ptr| {
            self.GetVertexAttribLui64vARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glIsImageHandleResidentARB, try loader("glIsImageHandleResidentARB"))) |ptr| {
            self.IsImageHandleResidentARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glIsTextureHandleResidentARB, try loader("glIsTextureHandleResidentARB"))) |ptr| {
            self.IsTextureHandleResidentARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glMakeImageHandleNonResidentARB, try loader("glMakeImageHandleNonResidentARB"))) |ptr| {
            self.MakeImageHandleNonResidentARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glMakeImageHandleResidentARB, try loader("glMakeImageHandleResidentARB"))) |ptr| {
            self.MakeImageHandleResidentARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glMakeTextureHandleNonResidentARB, try loader("glMakeTextureHandleNonResidentARB"))) |ptr| {
            self.MakeTextureHandleNonResidentARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glMakeTextureHandleResidentARB, try loader("glMakeTextureHandleResidentARB"))) |ptr| {
            self.MakeTextureHandleResidentARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glProgramUniformHandleui64ARB, try loader("glProgramUniformHandleui64ARB"))) |ptr| {
            self.ProgramUniformHandleui64ARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glProgramUniformHandleui64vARB, try loader("glProgramUniformHandleui64vARB"))) |ptr| {
            self.ProgramUniformHandleui64vARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glUniformHandleui64ARB, try loader("glUniformHandleui64ARB"))) |ptr| {
            self.UniformHandleui64ARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glUniformHandleui64vARB, try loader("glUniformHandleui64vARB"))) |ptr| {
            self.UniformHandleui64vARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glVertexAttribL1ui64ARB, try loader("glVertexAttribL1ui64ARB"))) |ptr| {
            self.VertexAttribL1ui64ARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glVertexAttribL1ui64vARB, try loader("glVertexAttribL1ui64vARB"))) |ptr| {
            self.VertexAttribL1ui64vARB = ptr;
        } else {
            self.features.GL_ARB_bindless_texture = false;
        }
        if (@ptrCast(?glBindFragDataLocationIndexed, try loader("glBindFragDataLocationIndexed"))) |ptr| {
            self.BindFragDataLocationIndexed = ptr;
        } else {
            self.features.GL_ARB_blend_func_extended = false;
        }
        if (@ptrCast(?glGetFragDataIndex, try loader("glGetFragDataIndex"))) |ptr| {
            self.GetFragDataIndex = ptr;
        } else {
            self.features.GL_ARB_blend_func_extended = false;
        }
        if (@ptrCast(?glBufferStorage, try loader("glBufferStorage"))) |ptr| {
            self.BufferStorage = ptr;
        } else {
            self.features.GL_ARB_buffer_storage = false;
        }
        if (@ptrCast(?glCreateSyncFromCLeventARB, try loader("glCreateSyncFromCLeventARB"))) |ptr| {
            self.CreateSyncFromCLeventARB = ptr;
        } else {
            self.features.GL_ARB_cl_event = false;
        }
        if (@ptrCast(?glClearBufferData, try loader("glClearBufferData"))) |ptr| {
            self.ClearBufferData = ptr;
        } else {
            self.features.GL_ARB_clear_buffer_object = false;
        }
        if (@ptrCast(?glClearBufferSubData, try loader("glClearBufferSubData"))) |ptr| {
            self.ClearBufferSubData = ptr;
        } else {
            self.features.GL_ARB_clear_buffer_object = false;
        }
        if (@ptrCast(?glClearTexImage, try loader("glClearTexImage"))) |ptr| {
            self.ClearTexImage = ptr;
        } else {
            self.features.GL_ARB_clear_texture = false;
        }
        if (@ptrCast(?glClearTexSubImage, try loader("glClearTexSubImage"))) |ptr| {
            self.ClearTexSubImage = ptr;
        } else {
            self.features.GL_ARB_clear_texture = false;
        }
        if (@ptrCast(?glClipControl, try loader("glClipControl"))) |ptr| {
            self.ClipControl = ptr;
        } else {
            self.features.GL_ARB_clip_control = false;
        }
        if (@ptrCast(?glClampColorARB, try loader("glClampColorARB"))) |ptr| {
            self.ClampColorARB = ptr;
        } else {
            self.features.GL_ARB_color_buffer_float = false;
        }
        if (@ptrCast(?glDispatchCompute, try loader("glDispatchCompute"))) |ptr| {
            self.DispatchCompute = ptr;
        } else {
            self.features.GL_ARB_compute_shader = false;
        }
        if (@ptrCast(?glDispatchComputeIndirect, try loader("glDispatchComputeIndirect"))) |ptr| {
            self.DispatchComputeIndirect = ptr;
        } else {
            self.features.GL_ARB_compute_shader = false;
        }
        if (@ptrCast(?glDispatchComputeGroupSizeARB, try loader("glDispatchComputeGroupSizeARB"))) |ptr| {
            self.DispatchComputeGroupSizeARB = ptr;
        } else {
            self.features.GL_ARB_compute_variable_group_size = false;
        }
        if (@ptrCast(?glCopyBufferSubData, try loader("glCopyBufferSubData"))) |ptr| {
            self.CopyBufferSubData = ptr;
        } else {
            self.features.GL_ARB_copy_buffer = false;
        }
        if (@ptrCast(?glCopyImageSubData, try loader("glCopyImageSubData"))) |ptr| {
            self.CopyImageSubData = ptr;
        } else {
            self.features.GL_ARB_copy_image = false;
        }
        if (@ptrCast(?glDebugMessageCallbackARB, try loader("glDebugMessageCallbackARB"))) |ptr| {
            self.DebugMessageCallbackARB = ptr;
        } else {
            self.features.GL_ARB_debug_output = false;
        }
        if (@ptrCast(?glDebugMessageControlARB, try loader("glDebugMessageControlARB"))) |ptr| {
            self.DebugMessageControlARB = ptr;
        } else {
            self.features.GL_ARB_debug_output = false;
        }
        if (@ptrCast(?glDebugMessageInsertARB, try loader("glDebugMessageInsertARB"))) |ptr| {
            self.DebugMessageInsertARB = ptr;
        } else {
            self.features.GL_ARB_debug_output = false;
        }
        if (@ptrCast(?glGetDebugMessageLogARB, try loader("glGetDebugMessageLogARB"))) |ptr| {
            self.GetDebugMessageLogARB = ptr;
        } else {
            self.features.GL_ARB_debug_output = false;
        }
        if (@ptrCast(?glBindTextureUnit, try loader("glBindTextureUnit"))) |ptr| {
            self.BindTextureUnit = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glBlitNamedFramebuffer, try loader("glBlitNamedFramebuffer"))) |ptr| {
            self.BlitNamedFramebuffer = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCheckNamedFramebufferStatus, try loader("glCheckNamedFramebufferStatus"))) |ptr| {
            self.CheckNamedFramebufferStatus = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glClearNamedBufferData, try loader("glClearNamedBufferData"))) |ptr| {
            self.ClearNamedBufferData = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glClearNamedBufferSubData, try loader("glClearNamedBufferSubData"))) |ptr| {
            self.ClearNamedBufferSubData = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glClearNamedFramebufferfi, try loader("glClearNamedFramebufferfi"))) |ptr| {
            self.ClearNamedFramebufferfi = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glClearNamedFramebufferfv, try loader("glClearNamedFramebufferfv"))) |ptr| {
            self.ClearNamedFramebufferfv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glClearNamedFramebufferiv, try loader("glClearNamedFramebufferiv"))) |ptr| {
            self.ClearNamedFramebufferiv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glClearNamedFramebufferuiv, try loader("glClearNamedFramebufferuiv"))) |ptr| {
            self.ClearNamedFramebufferuiv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedTextureSubImage1D, try loader("glCompressedTextureSubImage1D"))) |ptr| {
            self.CompressedTextureSubImage1D = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedTextureSubImage2D, try loader("glCompressedTextureSubImage2D"))) |ptr| {
            self.CompressedTextureSubImage2D = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedTextureSubImage3D, try loader("glCompressedTextureSubImage3D"))) |ptr| {
            self.CompressedTextureSubImage3D = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCopyNamedBufferSubData, try loader("glCopyNamedBufferSubData"))) |ptr| {
            self.CopyNamedBufferSubData = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCopyTextureSubImage1D, try loader("glCopyTextureSubImage1D"))) |ptr| {
            self.CopyTextureSubImage1D = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCopyTextureSubImage2D, try loader("glCopyTextureSubImage2D"))) |ptr| {
            self.CopyTextureSubImage2D = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCopyTextureSubImage3D, try loader("glCopyTextureSubImage3D"))) |ptr| {
            self.CopyTextureSubImage3D = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCreateBuffers, try loader("glCreateBuffers"))) |ptr| {
            self.CreateBuffers = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCreateFramebuffers, try loader("glCreateFramebuffers"))) |ptr| {
            self.CreateFramebuffers = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCreateProgramPipelines, try loader("glCreateProgramPipelines"))) |ptr| {
            self.CreateProgramPipelines = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCreateQueries, try loader("glCreateQueries"))) |ptr| {
            self.CreateQueries = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCreateRenderbuffers, try loader("glCreateRenderbuffers"))) |ptr| {
            self.CreateRenderbuffers = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCreateSamplers, try loader("glCreateSamplers"))) |ptr| {
            self.CreateSamplers = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCreateTextures, try loader("glCreateTextures"))) |ptr| {
            self.CreateTextures = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCreateTransformFeedbacks, try loader("glCreateTransformFeedbacks"))) |ptr| {
            self.CreateTransformFeedbacks = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glCreateVertexArrays, try loader("glCreateVertexArrays"))) |ptr| {
            self.CreateVertexArrays = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glDisableVertexArrayAttrib, try loader("glDisableVertexArrayAttrib"))) |ptr| {
            self.DisableVertexArrayAttrib = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glEnableVertexArrayAttrib, try loader("glEnableVertexArrayAttrib"))) |ptr| {
            self.EnableVertexArrayAttrib = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glFlushMappedNamedBufferRange, try loader("glFlushMappedNamedBufferRange"))) |ptr| {
            self.FlushMappedNamedBufferRange = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGenerateTextureMipmap, try loader("glGenerateTextureMipmap"))) |ptr| {
            self.GenerateTextureMipmap = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetCompressedTextureImage, try loader("glGetCompressedTextureImage"))) |ptr| {
            self.GetCompressedTextureImage = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedBufferParameteri64v, try loader("glGetNamedBufferParameteri64v"))) |ptr| {
            self.GetNamedBufferParameteri64v = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedBufferParameteriv, try loader("glGetNamedBufferParameteriv"))) |ptr| {
            self.GetNamedBufferParameteriv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedBufferPointerv, try loader("glGetNamedBufferPointerv"))) |ptr| {
            self.GetNamedBufferPointerv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedBufferSubData, try loader("glGetNamedBufferSubData"))) |ptr| {
            self.GetNamedBufferSubData = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedFramebufferAttachmentParameteriv, try loader("glGetNamedFramebufferAttachmentParameteriv"))) |ptr| {
            self.GetNamedFramebufferAttachmentParameteriv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedFramebufferParameteriv, try loader("glGetNamedFramebufferParameteriv"))) |ptr| {
            self.GetNamedFramebufferParameteriv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedRenderbufferParameteriv, try loader("glGetNamedRenderbufferParameteriv"))) |ptr| {
            self.GetNamedRenderbufferParameteriv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetQueryBufferObjecti64v, try loader("glGetQueryBufferObjecti64v"))) |ptr| {
            self.GetQueryBufferObjecti64v = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetQueryBufferObjectiv, try loader("glGetQueryBufferObjectiv"))) |ptr| {
            self.GetQueryBufferObjectiv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetQueryBufferObjectui64v, try loader("glGetQueryBufferObjectui64v"))) |ptr| {
            self.GetQueryBufferObjectui64v = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetQueryBufferObjectuiv, try loader("glGetQueryBufferObjectuiv"))) |ptr| {
            self.GetQueryBufferObjectuiv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureImage, try loader("glGetTextureImage"))) |ptr| {
            self.GetTextureImage = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureLevelParameterfv, try loader("glGetTextureLevelParameterfv"))) |ptr| {
            self.GetTextureLevelParameterfv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureLevelParameteriv, try loader("glGetTextureLevelParameteriv"))) |ptr| {
            self.GetTextureLevelParameteriv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureParameterIiv, try loader("glGetTextureParameterIiv"))) |ptr| {
            self.GetTextureParameterIiv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureParameterIuiv, try loader("glGetTextureParameterIuiv"))) |ptr| {
            self.GetTextureParameterIuiv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureParameterfv, try loader("glGetTextureParameterfv"))) |ptr| {
            self.GetTextureParameterfv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureParameteriv, try loader("glGetTextureParameteriv"))) |ptr| {
            self.GetTextureParameteriv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetTransformFeedbacki64_v, try loader("glGetTransformFeedbacki64_v"))) |ptr| {
            self.GetTransformFeedbacki64_v = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetTransformFeedbacki_v, try loader("glGetTransformFeedbacki_v"))) |ptr| {
            self.GetTransformFeedbacki_v = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetTransformFeedbackiv, try loader("glGetTransformFeedbackiv"))) |ptr| {
            self.GetTransformFeedbackiv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetVertexArrayIndexed64iv, try loader("glGetVertexArrayIndexed64iv"))) |ptr| {
            self.GetVertexArrayIndexed64iv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetVertexArrayIndexediv, try loader("glGetVertexArrayIndexediv"))) |ptr| {
            self.GetVertexArrayIndexediv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glGetVertexArrayiv, try loader("glGetVertexArrayiv"))) |ptr| {
            self.GetVertexArrayiv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glInvalidateNamedFramebufferData, try loader("glInvalidateNamedFramebufferData"))) |ptr| {
            self.InvalidateNamedFramebufferData = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glInvalidateNamedFramebufferSubData, try loader("glInvalidateNamedFramebufferSubData"))) |ptr| {
            self.InvalidateNamedFramebufferSubData = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glMapNamedBuffer, try loader("glMapNamedBuffer"))) |ptr| {
            self.MapNamedBuffer = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glMapNamedBufferRange, try loader("glMapNamedBufferRange"))) |ptr| {
            self.MapNamedBufferRange = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glNamedBufferData, try loader("glNamedBufferData"))) |ptr| {
            self.NamedBufferData = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glNamedBufferStorage, try loader("glNamedBufferStorage"))) |ptr| {
            self.NamedBufferStorage = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glNamedBufferSubData, try loader("glNamedBufferSubData"))) |ptr| {
            self.NamedBufferSubData = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferDrawBuffer, try loader("glNamedFramebufferDrawBuffer"))) |ptr| {
            self.NamedFramebufferDrawBuffer = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferDrawBuffers, try loader("glNamedFramebufferDrawBuffers"))) |ptr| {
            self.NamedFramebufferDrawBuffers = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferParameteri, try loader("glNamedFramebufferParameteri"))) |ptr| {
            self.NamedFramebufferParameteri = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferReadBuffer, try loader("glNamedFramebufferReadBuffer"))) |ptr| {
            self.NamedFramebufferReadBuffer = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferRenderbuffer, try loader("glNamedFramebufferRenderbuffer"))) |ptr| {
            self.NamedFramebufferRenderbuffer = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferTexture, try loader("glNamedFramebufferTexture"))) |ptr| {
            self.NamedFramebufferTexture = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferTextureLayer, try loader("glNamedFramebufferTextureLayer"))) |ptr| {
            self.NamedFramebufferTextureLayer = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glNamedRenderbufferStorage, try loader("glNamedRenderbufferStorage"))) |ptr| {
            self.NamedRenderbufferStorage = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glNamedRenderbufferStorageMultisample, try loader("glNamedRenderbufferStorageMultisample"))) |ptr| {
            self.NamedRenderbufferStorageMultisample = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureBuffer, try loader("glTextureBuffer"))) |ptr| {
            self.TextureBuffer = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureBufferRange, try loader("glTextureBufferRange"))) |ptr| {
            self.TextureBufferRange = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureParameterIiv, try loader("glTextureParameterIiv"))) |ptr| {
            self.TextureParameterIiv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureParameterIuiv, try loader("glTextureParameterIuiv"))) |ptr| {
            self.TextureParameterIuiv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureParameterf, try loader("glTextureParameterf"))) |ptr| {
            self.TextureParameterf = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureParameterfv, try loader("glTextureParameterfv"))) |ptr| {
            self.TextureParameterfv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureParameteri, try loader("glTextureParameteri"))) |ptr| {
            self.TextureParameteri = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureParameteriv, try loader("glTextureParameteriv"))) |ptr| {
            self.TextureParameteriv = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureStorage1D, try loader("glTextureStorage1D"))) |ptr| {
            self.TextureStorage1D = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureStorage2D, try loader("glTextureStorage2D"))) |ptr| {
            self.TextureStorage2D = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureStorage2DMultisample, try loader("glTextureStorage2DMultisample"))) |ptr| {
            self.TextureStorage2DMultisample = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureStorage3D, try loader("glTextureStorage3D"))) |ptr| {
            self.TextureStorage3D = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureStorage3DMultisample, try loader("glTextureStorage3DMultisample"))) |ptr| {
            self.TextureStorage3DMultisample = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureSubImage1D, try loader("glTextureSubImage1D"))) |ptr| {
            self.TextureSubImage1D = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureSubImage2D, try loader("glTextureSubImage2D"))) |ptr| {
            self.TextureSubImage2D = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTextureSubImage3D, try loader("glTextureSubImage3D"))) |ptr| {
            self.TextureSubImage3D = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTransformFeedbackBufferBase, try loader("glTransformFeedbackBufferBase"))) |ptr| {
            self.TransformFeedbackBufferBase = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glTransformFeedbackBufferRange, try loader("glTransformFeedbackBufferRange"))) |ptr| {
            self.TransformFeedbackBufferRange = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glUnmapNamedBuffer, try loader("glUnmapNamedBuffer"))) |ptr| {
            self.UnmapNamedBuffer = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayAttribBinding, try loader("glVertexArrayAttribBinding"))) |ptr| {
            self.VertexArrayAttribBinding = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayAttribFormat, try loader("glVertexArrayAttribFormat"))) |ptr| {
            self.VertexArrayAttribFormat = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayAttribIFormat, try loader("glVertexArrayAttribIFormat"))) |ptr| {
            self.VertexArrayAttribIFormat = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayAttribLFormat, try loader("glVertexArrayAttribLFormat"))) |ptr| {
            self.VertexArrayAttribLFormat = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayBindingDivisor, try loader("glVertexArrayBindingDivisor"))) |ptr| {
            self.VertexArrayBindingDivisor = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayElementBuffer, try loader("glVertexArrayElementBuffer"))) |ptr| {
            self.VertexArrayElementBuffer = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayVertexBuffer, try loader("glVertexArrayVertexBuffer"))) |ptr| {
            self.VertexArrayVertexBuffer = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayVertexBuffers, try loader("glVertexArrayVertexBuffers"))) |ptr| {
            self.VertexArrayVertexBuffers = ptr;
        } else {
            self.features.GL_ARB_direct_state_access = false;
        }
        if (@ptrCast(?glDrawBuffersARB, try loader("glDrawBuffersARB"))) |ptr| {
            self.DrawBuffersARB = ptr;
        } else {
            self.features.GL_ARB_draw_buffers = false;
        }
        if (@ptrCast(?glBlendEquationSeparateiARB, try loader("glBlendEquationSeparateiARB"))) |ptr| {
            self.BlendEquationSeparateiARB = ptr;
        } else {
            self.features.GL_ARB_draw_buffers_blend = false;
        }
        if (@ptrCast(?glBlendEquationiARB, try loader("glBlendEquationiARB"))) |ptr| {
            self.BlendEquationiARB = ptr;
        } else {
            self.features.GL_ARB_draw_buffers_blend = false;
        }
        if (@ptrCast(?glBlendFuncSeparateiARB, try loader("glBlendFuncSeparateiARB"))) |ptr| {
            self.BlendFuncSeparateiARB = ptr;
        } else {
            self.features.GL_ARB_draw_buffers_blend = false;
        }
        if (@ptrCast(?glBlendFunciARB, try loader("glBlendFunciARB"))) |ptr| {
            self.BlendFunciARB = ptr;
        } else {
            self.features.GL_ARB_draw_buffers_blend = false;
        }
        if (@ptrCast(?glDrawElementsBaseVertex, try loader("glDrawElementsBaseVertex"))) |ptr| {
            self.DrawElementsBaseVertex = ptr;
        } else {
            self.features.GL_ARB_draw_elements_base_vertex = false;
        }
        if (@ptrCast(?glDrawElementsInstancedBaseVertex, try loader("glDrawElementsInstancedBaseVertex"))) |ptr| {
            self.DrawElementsInstancedBaseVertex = ptr;
        } else {
            self.features.GL_ARB_draw_elements_base_vertex = false;
        }
        if (@ptrCast(?glDrawRangeElementsBaseVertex, try loader("glDrawRangeElementsBaseVertex"))) |ptr| {
            self.DrawRangeElementsBaseVertex = ptr;
        } else {
            self.features.GL_ARB_draw_elements_base_vertex = false;
        }
        if (@ptrCast(?glMultiDrawElementsBaseVertex, try loader("glMultiDrawElementsBaseVertex"))) |ptr| {
            self.MultiDrawElementsBaseVertex = ptr;
        } else {
            self.features.GL_ARB_draw_elements_base_vertex = false;
        }
        if (@ptrCast(?glDrawArraysIndirect, try loader("glDrawArraysIndirect"))) |ptr| {
            self.DrawArraysIndirect = ptr;
        } else {
            self.features.GL_ARB_draw_indirect = false;
        }
        if (@ptrCast(?glDrawElementsIndirect, try loader("glDrawElementsIndirect"))) |ptr| {
            self.DrawElementsIndirect = ptr;
        } else {
            self.features.GL_ARB_draw_indirect = false;
        }
        if (@ptrCast(?glDrawArraysInstancedARB, try loader("glDrawArraysInstancedARB"))) |ptr| {
            self.DrawArraysInstancedARB = ptr;
        } else {
            self.features.GL_ARB_draw_instanced = false;
        }
        if (@ptrCast(?glDrawElementsInstancedARB, try loader("glDrawElementsInstancedARB"))) |ptr| {
            self.DrawElementsInstancedARB = ptr;
        } else {
            self.features.GL_ARB_draw_instanced = false;
        }
        if (@ptrCast(?glBindProgramARB, try loader("glBindProgramARB"))) |ptr| {
            self.BindProgramARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glDeleteProgramsARB, try loader("glDeleteProgramsARB"))) |ptr| {
            self.DeleteProgramsARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glGenProgramsARB, try loader("glGenProgramsARB"))) |ptr| {
            self.GenProgramsARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glGetProgramEnvParameterdvARB, try loader("glGetProgramEnvParameterdvARB"))) |ptr| {
            self.GetProgramEnvParameterdvARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glGetProgramEnvParameterfvARB, try loader("glGetProgramEnvParameterfvARB"))) |ptr| {
            self.GetProgramEnvParameterfvARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glGetProgramLocalParameterdvARB, try loader("glGetProgramLocalParameterdvARB"))) |ptr| {
            self.GetProgramLocalParameterdvARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glGetProgramLocalParameterfvARB, try loader("glGetProgramLocalParameterfvARB"))) |ptr| {
            self.GetProgramLocalParameterfvARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glGetProgramStringARB, try loader("glGetProgramStringARB"))) |ptr| {
            self.GetProgramStringARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glGetProgramivARB, try loader("glGetProgramivARB"))) |ptr| {
            self.GetProgramivARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glIsProgramARB, try loader("glIsProgramARB"))) |ptr| {
            self.IsProgramARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glProgramEnvParameter4dARB, try loader("glProgramEnvParameter4dARB"))) |ptr| {
            self.ProgramEnvParameter4dARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glProgramEnvParameter4dvARB, try loader("glProgramEnvParameter4dvARB"))) |ptr| {
            self.ProgramEnvParameter4dvARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glProgramEnvParameter4fARB, try loader("glProgramEnvParameter4fARB"))) |ptr| {
            self.ProgramEnvParameter4fARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glProgramEnvParameter4fvARB, try loader("glProgramEnvParameter4fvARB"))) |ptr| {
            self.ProgramEnvParameter4fvARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glProgramLocalParameter4dARB, try loader("glProgramLocalParameter4dARB"))) |ptr| {
            self.ProgramLocalParameter4dARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glProgramLocalParameter4dvARB, try loader("glProgramLocalParameter4dvARB"))) |ptr| {
            self.ProgramLocalParameter4dvARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glProgramLocalParameter4fARB, try loader("glProgramLocalParameter4fARB"))) |ptr| {
            self.ProgramLocalParameter4fARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glProgramLocalParameter4fvARB, try loader("glProgramLocalParameter4fvARB"))) |ptr| {
            self.ProgramLocalParameter4fvARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glProgramStringARB, try loader("glProgramStringARB"))) |ptr| {
            self.ProgramStringARB = ptr;
        } else {
            self.features.GL_ARB_fragment_program = false;
        }
        if (@ptrCast(?glFramebufferParameteri, try loader("glFramebufferParameteri"))) |ptr| {
            self.FramebufferParameteri = ptr;
        } else {
            self.features.GL_ARB_framebuffer_no_attachments = false;
        }
        if (@ptrCast(?glGetFramebufferParameteriv, try loader("glGetFramebufferParameteriv"))) |ptr| {
            self.GetFramebufferParameteriv = ptr;
        } else {
            self.features.GL_ARB_framebuffer_no_attachments = false;
        }
        if (@ptrCast(?glBindFramebuffer, try loader("glBindFramebuffer"))) |ptr| {
            self.BindFramebuffer = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glBindRenderbuffer, try loader("glBindRenderbuffer"))) |ptr| {
            self.BindRenderbuffer = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glBlitFramebuffer, try loader("glBlitFramebuffer"))) |ptr| {
            self.BlitFramebuffer = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glCheckFramebufferStatus, try loader("glCheckFramebufferStatus"))) |ptr| {
            self.CheckFramebufferStatus = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glDeleteFramebuffers, try loader("glDeleteFramebuffers"))) |ptr| {
            self.DeleteFramebuffers = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glDeleteRenderbuffers, try loader("glDeleteRenderbuffers"))) |ptr| {
            self.DeleteRenderbuffers = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glFramebufferRenderbuffer, try loader("glFramebufferRenderbuffer"))) |ptr| {
            self.FramebufferRenderbuffer = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glFramebufferTexture1D, try loader("glFramebufferTexture1D"))) |ptr| {
            self.FramebufferTexture1D = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glFramebufferTexture2D, try loader("glFramebufferTexture2D"))) |ptr| {
            self.FramebufferTexture2D = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glFramebufferTexture3D, try loader("glFramebufferTexture3D"))) |ptr| {
            self.FramebufferTexture3D = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glFramebufferTextureLayer, try loader("glFramebufferTextureLayer"))) |ptr| {
            self.FramebufferTextureLayer = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glGenFramebuffers, try loader("glGenFramebuffers"))) |ptr| {
            self.GenFramebuffers = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glGenRenderbuffers, try loader("glGenRenderbuffers"))) |ptr| {
            self.GenRenderbuffers = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glGenerateMipmap, try loader("glGenerateMipmap"))) |ptr| {
            self.GenerateMipmap = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glGetFramebufferAttachmentParameteriv, try loader("glGetFramebufferAttachmentParameteriv"))) |ptr| {
            self.GetFramebufferAttachmentParameteriv = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glGetRenderbufferParameteriv, try loader("glGetRenderbufferParameteriv"))) |ptr| {
            self.GetRenderbufferParameteriv = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glIsFramebuffer, try loader("glIsFramebuffer"))) |ptr| {
            self.IsFramebuffer = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glIsRenderbuffer, try loader("glIsRenderbuffer"))) |ptr| {
            self.IsRenderbuffer = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glRenderbufferStorage, try loader("glRenderbufferStorage"))) |ptr| {
            self.RenderbufferStorage = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glRenderbufferStorageMultisample, try loader("glRenderbufferStorageMultisample"))) |ptr| {
            self.RenderbufferStorageMultisample = ptr;
        } else {
            self.features.GL_ARB_framebuffer_object = false;
        }
        if (@ptrCast(?glFramebufferTextureARB, try loader("glFramebufferTextureARB"))) |ptr| {
            self.FramebufferTextureARB = ptr;
        } else {
            self.features.GL_ARB_geometry_shader4 = false;
        }
        if (@ptrCast(?glFramebufferTextureFaceARB, try loader("glFramebufferTextureFaceARB"))) |ptr| {
            self.FramebufferTextureFaceARB = ptr;
        } else {
            self.features.GL_ARB_geometry_shader4 = false;
        }
        if (@ptrCast(?glFramebufferTextureLayerARB, try loader("glFramebufferTextureLayerARB"))) |ptr| {
            self.FramebufferTextureLayerARB = ptr;
        } else {
            self.features.GL_ARB_geometry_shader4 = false;
        }
        if (@ptrCast(?glProgramParameteriARB, try loader("glProgramParameteriARB"))) |ptr| {
            self.ProgramParameteriARB = ptr;
        } else {
            self.features.GL_ARB_geometry_shader4 = false;
        }
        if (@ptrCast(?glGetProgramBinary, try loader("glGetProgramBinary"))) |ptr| {
            self.GetProgramBinary = ptr;
        } else {
            self.features.GL_ARB_get_program_binary = false;
        }
        if (@ptrCast(?glProgramBinary, try loader("glProgramBinary"))) |ptr| {
            self.ProgramBinary = ptr;
        } else {
            self.features.GL_ARB_get_program_binary = false;
        }
        if (@ptrCast(?glProgramParameteri, try loader("glProgramParameteri"))) |ptr| {
            self.ProgramParameteri = ptr;
        } else {
            self.features.GL_ARB_get_program_binary = false;
        }
        if (@ptrCast(?glGetCompressedTextureSubImage, try loader("glGetCompressedTextureSubImage"))) |ptr| {
            self.GetCompressedTextureSubImage = ptr;
        } else {
            self.features.GL_ARB_get_texture_sub_image = false;
        }
        if (@ptrCast(?glGetTextureSubImage, try loader("glGetTextureSubImage"))) |ptr| {
            self.GetTextureSubImage = ptr;
        } else {
            self.features.GL_ARB_get_texture_sub_image = false;
        }
        if (@ptrCast(?glSpecializeShaderARB, try loader("glSpecializeShaderARB"))) |ptr| {
            self.SpecializeShaderARB = ptr;
        } else {
            self.features.GL_ARB_gl_spirv = false;
        }
        if (@ptrCast(?glGetUniformdv, try loader("glGetUniformdv"))) |ptr| {
            self.GetUniformdv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniform1d, try loader("glUniform1d"))) |ptr| {
            self.Uniform1d = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniform1dv, try loader("glUniform1dv"))) |ptr| {
            self.Uniform1dv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniform2d, try loader("glUniform2d"))) |ptr| {
            self.Uniform2d = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniform2dv, try loader("glUniform2dv"))) |ptr| {
            self.Uniform2dv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniform3d, try loader("glUniform3d"))) |ptr| {
            self.Uniform3d = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniform3dv, try loader("glUniform3dv"))) |ptr| {
            self.Uniform3dv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniform4d, try loader("glUniform4d"))) |ptr| {
            self.Uniform4d = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniform4dv, try loader("glUniform4dv"))) |ptr| {
            self.Uniform4dv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniformMatrix2dv, try loader("glUniformMatrix2dv"))) |ptr| {
            self.UniformMatrix2dv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniformMatrix2x3dv, try loader("glUniformMatrix2x3dv"))) |ptr| {
            self.UniformMatrix2x3dv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniformMatrix2x4dv, try loader("glUniformMatrix2x4dv"))) |ptr| {
            self.UniformMatrix2x4dv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniformMatrix3dv, try loader("glUniformMatrix3dv"))) |ptr| {
            self.UniformMatrix3dv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniformMatrix3x2dv, try loader("glUniformMatrix3x2dv"))) |ptr| {
            self.UniformMatrix3x2dv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniformMatrix3x4dv, try loader("glUniformMatrix3x4dv"))) |ptr| {
            self.UniformMatrix3x4dv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniformMatrix4dv, try loader("glUniformMatrix4dv"))) |ptr| {
            self.UniformMatrix4dv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniformMatrix4x2dv, try loader("glUniformMatrix4x2dv"))) |ptr| {
            self.UniformMatrix4x2dv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glUniformMatrix4x3dv, try loader("glUniformMatrix4x3dv"))) |ptr| {
            self.UniformMatrix4x3dv = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_fp64 = false;
        }
        if (@ptrCast(?glGetUniformi64vARB, try loader("glGetUniformi64vARB"))) |ptr| {
            self.GetUniformi64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glGetUniformui64vARB, try loader("glGetUniformui64vARB"))) |ptr| {
            self.GetUniformui64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glGetnUniformi64vARB, try loader("glGetnUniformi64vARB"))) |ptr| {
            self.GetnUniformi64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glGetnUniformui64vARB, try loader("glGetnUniformui64vARB"))) |ptr| {
            self.GetnUniformui64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform1i64ARB, try loader("glProgramUniform1i64ARB"))) |ptr| {
            self.ProgramUniform1i64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform1i64vARB, try loader("glProgramUniform1i64vARB"))) |ptr| {
            self.ProgramUniform1i64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform1ui64ARB, try loader("glProgramUniform1ui64ARB"))) |ptr| {
            self.ProgramUniform1ui64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform1ui64vARB, try loader("glProgramUniform1ui64vARB"))) |ptr| {
            self.ProgramUniform1ui64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform2i64ARB, try loader("glProgramUniform2i64ARB"))) |ptr| {
            self.ProgramUniform2i64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform2i64vARB, try loader("glProgramUniform2i64vARB"))) |ptr| {
            self.ProgramUniform2i64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform2ui64ARB, try loader("glProgramUniform2ui64ARB"))) |ptr| {
            self.ProgramUniform2ui64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform2ui64vARB, try loader("glProgramUniform2ui64vARB"))) |ptr| {
            self.ProgramUniform2ui64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform3i64ARB, try loader("glProgramUniform3i64ARB"))) |ptr| {
            self.ProgramUniform3i64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform3i64vARB, try loader("glProgramUniform3i64vARB"))) |ptr| {
            self.ProgramUniform3i64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform3ui64ARB, try loader("glProgramUniform3ui64ARB"))) |ptr| {
            self.ProgramUniform3ui64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform3ui64vARB, try loader("glProgramUniform3ui64vARB"))) |ptr| {
            self.ProgramUniform3ui64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform4i64ARB, try loader("glProgramUniform4i64ARB"))) |ptr| {
            self.ProgramUniform4i64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform4i64vARB, try loader("glProgramUniform4i64vARB"))) |ptr| {
            self.ProgramUniform4i64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform4ui64ARB, try loader("glProgramUniform4ui64ARB"))) |ptr| {
            self.ProgramUniform4ui64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glProgramUniform4ui64vARB, try loader("glProgramUniform4ui64vARB"))) |ptr| {
            self.ProgramUniform4ui64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform1i64ARB, try loader("glUniform1i64ARB"))) |ptr| {
            self.Uniform1i64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform1i64vARB, try loader("glUniform1i64vARB"))) |ptr| {
            self.Uniform1i64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform1ui64ARB, try loader("glUniform1ui64ARB"))) |ptr| {
            self.Uniform1ui64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform1ui64vARB, try loader("glUniform1ui64vARB"))) |ptr| {
            self.Uniform1ui64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform2i64ARB, try loader("glUniform2i64ARB"))) |ptr| {
            self.Uniform2i64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform2i64vARB, try loader("glUniform2i64vARB"))) |ptr| {
            self.Uniform2i64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform2ui64ARB, try loader("glUniform2ui64ARB"))) |ptr| {
            self.Uniform2ui64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform2ui64vARB, try loader("glUniform2ui64vARB"))) |ptr| {
            self.Uniform2ui64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform3i64ARB, try loader("glUniform3i64ARB"))) |ptr| {
            self.Uniform3i64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform3i64vARB, try loader("glUniform3i64vARB"))) |ptr| {
            self.Uniform3i64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform3ui64ARB, try loader("glUniform3ui64ARB"))) |ptr| {
            self.Uniform3ui64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform3ui64vARB, try loader("glUniform3ui64vARB"))) |ptr| {
            self.Uniform3ui64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform4i64ARB, try loader("glUniform4i64ARB"))) |ptr| {
            self.Uniform4i64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform4i64vARB, try loader("glUniform4i64vARB"))) |ptr| {
            self.Uniform4i64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform4ui64ARB, try loader("glUniform4ui64ARB"))) |ptr| {
            self.Uniform4ui64ARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glUniform4ui64vARB, try loader("glUniform4ui64vARB"))) |ptr| {
            self.Uniform4ui64vARB = ptr;
        } else {
            self.features.GL_ARB_gpu_shader_int64 = false;
        }
        if (@ptrCast(?glBlendColor, try loader("glBlendColor"))) |ptr| {
            self.BlendColor = ptr;
        } else {
            self.features.GL_ARB_imaging = false;
        }
        if (@ptrCast(?glBlendEquation, try loader("glBlendEquation"))) |ptr| {
            self.BlendEquation = ptr;
        } else {
            self.features.GL_ARB_imaging = false;
        }
        if (@ptrCast(?glMultiDrawArraysIndirectCountARB, try loader("glMultiDrawArraysIndirectCountARB"))) |ptr| {
            self.MultiDrawArraysIndirectCountARB = ptr;
        } else {
            self.features.GL_ARB_indirect_parameters = false;
        }
        if (@ptrCast(?glMultiDrawElementsIndirectCountARB, try loader("glMultiDrawElementsIndirectCountARB"))) |ptr| {
            self.MultiDrawElementsIndirectCountARB = ptr;
        } else {
            self.features.GL_ARB_indirect_parameters = false;
        }
        if (@ptrCast(?glVertexAttribDivisorARB, try loader("glVertexAttribDivisorARB"))) |ptr| {
            self.VertexAttribDivisorARB = ptr;
        } else {
            self.features.GL_ARB_instanced_arrays = false;
        }
        if (@ptrCast(?glGetInternalformativ, try loader("glGetInternalformativ"))) |ptr| {
            self.GetInternalformativ = ptr;
        } else {
            self.features.GL_ARB_internalformat_query = false;
        }
        if (@ptrCast(?glGetInternalformati64v, try loader("glGetInternalformati64v"))) |ptr| {
            self.GetInternalformati64v = ptr;
        } else {
            self.features.GL_ARB_internalformat_query2 = false;
        }
        if (@ptrCast(?glInvalidateBufferData, try loader("glInvalidateBufferData"))) |ptr| {
            self.InvalidateBufferData = ptr;
        } else {
            self.features.GL_ARB_invalidate_subdata = false;
        }
        if (@ptrCast(?glInvalidateBufferSubData, try loader("glInvalidateBufferSubData"))) |ptr| {
            self.InvalidateBufferSubData = ptr;
        } else {
            self.features.GL_ARB_invalidate_subdata = false;
        }
        if (@ptrCast(?glInvalidateFramebuffer, try loader("glInvalidateFramebuffer"))) |ptr| {
            self.InvalidateFramebuffer = ptr;
        } else {
            self.features.GL_ARB_invalidate_subdata = false;
        }
        if (@ptrCast(?glInvalidateSubFramebuffer, try loader("glInvalidateSubFramebuffer"))) |ptr| {
            self.InvalidateSubFramebuffer = ptr;
        } else {
            self.features.GL_ARB_invalidate_subdata = false;
        }
        if (@ptrCast(?glInvalidateTexImage, try loader("glInvalidateTexImage"))) |ptr| {
            self.InvalidateTexImage = ptr;
        } else {
            self.features.GL_ARB_invalidate_subdata = false;
        }
        if (@ptrCast(?glInvalidateTexSubImage, try loader("glInvalidateTexSubImage"))) |ptr| {
            self.InvalidateTexSubImage = ptr;
        } else {
            self.features.GL_ARB_invalidate_subdata = false;
        }
        if (@ptrCast(?glFlushMappedBufferRange, try loader("glFlushMappedBufferRange"))) |ptr| {
            self.FlushMappedBufferRange = ptr;
        } else {
            self.features.GL_ARB_map_buffer_range = false;
        }
        if (@ptrCast(?glMapBufferRange, try loader("glMapBufferRange"))) |ptr| {
            self.MapBufferRange = ptr;
        } else {
            self.features.GL_ARB_map_buffer_range = false;
        }
        if (@ptrCast(?glCurrentPaletteMatrixARB, try loader("glCurrentPaletteMatrixARB"))) |ptr| {
            self.CurrentPaletteMatrixARB = ptr;
        } else {
            self.features.GL_ARB_matrix_palette = false;
        }
        if (@ptrCast(?glMatrixIndexPointerARB, try loader("glMatrixIndexPointerARB"))) |ptr| {
            self.MatrixIndexPointerARB = ptr;
        } else {
            self.features.GL_ARB_matrix_palette = false;
        }
        if (@ptrCast(?glMatrixIndexubvARB, try loader("glMatrixIndexubvARB"))) |ptr| {
            self.MatrixIndexubvARB = ptr;
        } else {
            self.features.GL_ARB_matrix_palette = false;
        }
        if (@ptrCast(?glMatrixIndexuivARB, try loader("glMatrixIndexuivARB"))) |ptr| {
            self.MatrixIndexuivARB = ptr;
        } else {
            self.features.GL_ARB_matrix_palette = false;
        }
        if (@ptrCast(?glMatrixIndexusvARB, try loader("glMatrixIndexusvARB"))) |ptr| {
            self.MatrixIndexusvARB = ptr;
        } else {
            self.features.GL_ARB_matrix_palette = false;
        }
        if (@ptrCast(?glBindBuffersBase, try loader("glBindBuffersBase"))) |ptr| {
            self.BindBuffersBase = ptr;
        } else {
            self.features.GL_ARB_multi_bind = false;
        }
        if (@ptrCast(?glBindBuffersRange, try loader("glBindBuffersRange"))) |ptr| {
            self.BindBuffersRange = ptr;
        } else {
            self.features.GL_ARB_multi_bind = false;
        }
        if (@ptrCast(?glBindImageTextures, try loader("glBindImageTextures"))) |ptr| {
            self.BindImageTextures = ptr;
        } else {
            self.features.GL_ARB_multi_bind = false;
        }
        if (@ptrCast(?glBindSamplers, try loader("glBindSamplers"))) |ptr| {
            self.BindSamplers = ptr;
        } else {
            self.features.GL_ARB_multi_bind = false;
        }
        if (@ptrCast(?glBindTextures, try loader("glBindTextures"))) |ptr| {
            self.BindTextures = ptr;
        } else {
            self.features.GL_ARB_multi_bind = false;
        }
        if (@ptrCast(?glBindVertexBuffers, try loader("glBindVertexBuffers"))) |ptr| {
            self.BindVertexBuffers = ptr;
        } else {
            self.features.GL_ARB_multi_bind = false;
        }
        if (@ptrCast(?glMultiDrawArraysIndirect, try loader("glMultiDrawArraysIndirect"))) |ptr| {
            self.MultiDrawArraysIndirect = ptr;
        } else {
            self.features.GL_ARB_multi_draw_indirect = false;
        }
        if (@ptrCast(?glMultiDrawElementsIndirect, try loader("glMultiDrawElementsIndirect"))) |ptr| {
            self.MultiDrawElementsIndirect = ptr;
        } else {
            self.features.GL_ARB_multi_draw_indirect = false;
        }
        if (@ptrCast(?glSampleCoverageARB, try loader("glSampleCoverageARB"))) |ptr| {
            self.SampleCoverageARB = ptr;
        } else {
            self.features.GL_ARB_multisample = false;
        }
        if (@ptrCast(?glActiveTextureARB, try loader("glActiveTextureARB"))) |ptr| {
            self.ActiveTextureARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glClientActiveTextureARB, try loader("glClientActiveTextureARB"))) |ptr| {
            self.ClientActiveTextureARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord1dARB, try loader("glMultiTexCoord1dARB"))) |ptr| {
            self.MultiTexCoord1dARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord1dvARB, try loader("glMultiTexCoord1dvARB"))) |ptr| {
            self.MultiTexCoord1dvARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord1fARB, try loader("glMultiTexCoord1fARB"))) |ptr| {
            self.MultiTexCoord1fARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord1fvARB, try loader("glMultiTexCoord1fvARB"))) |ptr| {
            self.MultiTexCoord1fvARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord1iARB, try loader("glMultiTexCoord1iARB"))) |ptr| {
            self.MultiTexCoord1iARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord1ivARB, try loader("glMultiTexCoord1ivARB"))) |ptr| {
            self.MultiTexCoord1ivARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord1sARB, try loader("glMultiTexCoord1sARB"))) |ptr| {
            self.MultiTexCoord1sARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord1svARB, try loader("glMultiTexCoord1svARB"))) |ptr| {
            self.MultiTexCoord1svARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord2dARB, try loader("glMultiTexCoord2dARB"))) |ptr| {
            self.MultiTexCoord2dARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord2dvARB, try loader("glMultiTexCoord2dvARB"))) |ptr| {
            self.MultiTexCoord2dvARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord2fARB, try loader("glMultiTexCoord2fARB"))) |ptr| {
            self.MultiTexCoord2fARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord2fvARB, try loader("glMultiTexCoord2fvARB"))) |ptr| {
            self.MultiTexCoord2fvARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord2iARB, try loader("glMultiTexCoord2iARB"))) |ptr| {
            self.MultiTexCoord2iARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord2ivARB, try loader("glMultiTexCoord2ivARB"))) |ptr| {
            self.MultiTexCoord2ivARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord2sARB, try loader("glMultiTexCoord2sARB"))) |ptr| {
            self.MultiTexCoord2sARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord2svARB, try loader("glMultiTexCoord2svARB"))) |ptr| {
            self.MultiTexCoord2svARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord3dARB, try loader("glMultiTexCoord3dARB"))) |ptr| {
            self.MultiTexCoord3dARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord3dvARB, try loader("glMultiTexCoord3dvARB"))) |ptr| {
            self.MultiTexCoord3dvARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord3fARB, try loader("glMultiTexCoord3fARB"))) |ptr| {
            self.MultiTexCoord3fARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord3fvARB, try loader("glMultiTexCoord3fvARB"))) |ptr| {
            self.MultiTexCoord3fvARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord3iARB, try loader("glMultiTexCoord3iARB"))) |ptr| {
            self.MultiTexCoord3iARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord3ivARB, try loader("glMultiTexCoord3ivARB"))) |ptr| {
            self.MultiTexCoord3ivARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord3sARB, try loader("glMultiTexCoord3sARB"))) |ptr| {
            self.MultiTexCoord3sARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord3svARB, try loader("glMultiTexCoord3svARB"))) |ptr| {
            self.MultiTexCoord3svARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord4dARB, try loader("glMultiTexCoord4dARB"))) |ptr| {
            self.MultiTexCoord4dARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord4dvARB, try loader("glMultiTexCoord4dvARB"))) |ptr| {
            self.MultiTexCoord4dvARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord4fARB, try loader("glMultiTexCoord4fARB"))) |ptr| {
            self.MultiTexCoord4fARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord4fvARB, try loader("glMultiTexCoord4fvARB"))) |ptr| {
            self.MultiTexCoord4fvARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord4iARB, try loader("glMultiTexCoord4iARB"))) |ptr| {
            self.MultiTexCoord4iARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord4ivARB, try loader("glMultiTexCoord4ivARB"))) |ptr| {
            self.MultiTexCoord4ivARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord4sARB, try loader("glMultiTexCoord4sARB"))) |ptr| {
            self.MultiTexCoord4sARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glMultiTexCoord4svARB, try loader("glMultiTexCoord4svARB"))) |ptr| {
            self.MultiTexCoord4svARB = ptr;
        } else {
            self.features.GL_ARB_multitexture = false;
        }
        if (@ptrCast(?glBeginQueryARB, try loader("glBeginQueryARB"))) |ptr| {
            self.BeginQueryARB = ptr;
        } else {
            self.features.GL_ARB_occlusion_query = false;
        }
        if (@ptrCast(?glDeleteQueriesARB, try loader("glDeleteQueriesARB"))) |ptr| {
            self.DeleteQueriesARB = ptr;
        } else {
            self.features.GL_ARB_occlusion_query = false;
        }
        if (@ptrCast(?glEndQueryARB, try loader("glEndQueryARB"))) |ptr| {
            self.EndQueryARB = ptr;
        } else {
            self.features.GL_ARB_occlusion_query = false;
        }
        if (@ptrCast(?glGenQueriesARB, try loader("glGenQueriesARB"))) |ptr| {
            self.GenQueriesARB = ptr;
        } else {
            self.features.GL_ARB_occlusion_query = false;
        }
        if (@ptrCast(?glGetQueryObjectivARB, try loader("glGetQueryObjectivARB"))) |ptr| {
            self.GetQueryObjectivARB = ptr;
        } else {
            self.features.GL_ARB_occlusion_query = false;
        }
        if (@ptrCast(?glGetQueryObjectuivARB, try loader("glGetQueryObjectuivARB"))) |ptr| {
            self.GetQueryObjectuivARB = ptr;
        } else {
            self.features.GL_ARB_occlusion_query = false;
        }
        if (@ptrCast(?glGetQueryivARB, try loader("glGetQueryivARB"))) |ptr| {
            self.GetQueryivARB = ptr;
        } else {
            self.features.GL_ARB_occlusion_query = false;
        }
        if (@ptrCast(?glIsQueryARB, try loader("glIsQueryARB"))) |ptr| {
            self.IsQueryARB = ptr;
        } else {
            self.features.GL_ARB_occlusion_query = false;
        }
        if (@ptrCast(?glMaxShaderCompilerThreadsARB, try loader("glMaxShaderCompilerThreadsARB"))) |ptr| {
            self.MaxShaderCompilerThreadsARB = ptr;
        } else {
            self.features.GL_ARB_parallel_shader_compile = false;
        }
        if (@ptrCast(?glPointParameterfARB, try loader("glPointParameterfARB"))) |ptr| {
            self.PointParameterfARB = ptr;
        } else {
            self.features.GL_ARB_point_parameters = false;
        }
        if (@ptrCast(?glPointParameterfvARB, try loader("glPointParameterfvARB"))) |ptr| {
            self.PointParameterfvARB = ptr;
        } else {
            self.features.GL_ARB_point_parameters = false;
        }
        if (@ptrCast(?glPolygonOffsetClamp, try loader("glPolygonOffsetClamp"))) |ptr| {
            self.PolygonOffsetClamp = ptr;
        } else {
            self.features.GL_ARB_polygon_offset_clamp = false;
        }
        if (@ptrCast(?glGetProgramInterfaceiv, try loader("glGetProgramInterfaceiv"))) |ptr| {
            self.GetProgramInterfaceiv = ptr;
        } else {
            self.features.GL_ARB_program_interface_query = false;
        }
        if (@ptrCast(?glGetProgramResourceIndex, try loader("glGetProgramResourceIndex"))) |ptr| {
            self.GetProgramResourceIndex = ptr;
        } else {
            self.features.GL_ARB_program_interface_query = false;
        }
        if (@ptrCast(?glGetProgramResourceLocation, try loader("glGetProgramResourceLocation"))) |ptr| {
            self.GetProgramResourceLocation = ptr;
        } else {
            self.features.GL_ARB_program_interface_query = false;
        }
        if (@ptrCast(?glGetProgramResourceLocationIndex, try loader("glGetProgramResourceLocationIndex"))) |ptr| {
            self.GetProgramResourceLocationIndex = ptr;
        } else {
            self.features.GL_ARB_program_interface_query = false;
        }
        if (@ptrCast(?glGetProgramResourceName, try loader("glGetProgramResourceName"))) |ptr| {
            self.GetProgramResourceName = ptr;
        } else {
            self.features.GL_ARB_program_interface_query = false;
        }
        if (@ptrCast(?glGetProgramResourceiv, try loader("glGetProgramResourceiv"))) |ptr| {
            self.GetProgramResourceiv = ptr;
        } else {
            self.features.GL_ARB_program_interface_query = false;
        }
        if (@ptrCast(?glProvokingVertex, try loader("glProvokingVertex"))) |ptr| {
            self.ProvokingVertex = ptr;
        } else {
            self.features.GL_ARB_provoking_vertex = false;
        }
        if (@ptrCast(?glGetGraphicsResetStatusARB, try loader("glGetGraphicsResetStatusARB"))) |ptr| {
            self.GetGraphicsResetStatusARB = ptr;
        } else {
            self.features.GL_ARB_robustness = false;
        }
        if (@ptrCast(?glGetnCompressedTexImageARB, try loader("glGetnCompressedTexImageARB"))) |ptr| {
            self.GetnCompressedTexImageARB = ptr;
        } else {
            self.features.GL_ARB_robustness = false;
        }
        if (@ptrCast(?glGetnTexImageARB, try loader("glGetnTexImageARB"))) |ptr| {
            self.GetnTexImageARB = ptr;
        } else {
            self.features.GL_ARB_robustness = false;
        }
        if (@ptrCast(?glGetnUniformdvARB, try loader("glGetnUniformdvARB"))) |ptr| {
            self.GetnUniformdvARB = ptr;
        } else {
            self.features.GL_ARB_robustness = false;
        }
        if (@ptrCast(?glGetnUniformfvARB, try loader("glGetnUniformfvARB"))) |ptr| {
            self.GetnUniformfvARB = ptr;
        } else {
            self.features.GL_ARB_robustness = false;
        }
        if (@ptrCast(?glGetnUniformivARB, try loader("glGetnUniformivARB"))) |ptr| {
            self.GetnUniformivARB = ptr;
        } else {
            self.features.GL_ARB_robustness = false;
        }
        if (@ptrCast(?glGetnUniformuivARB, try loader("glGetnUniformuivARB"))) |ptr| {
            self.GetnUniformuivARB = ptr;
        } else {
            self.features.GL_ARB_robustness = false;
        }
        if (@ptrCast(?glReadnPixelsARB, try loader("glReadnPixelsARB"))) |ptr| {
            self.ReadnPixelsARB = ptr;
        } else {
            self.features.GL_ARB_robustness = false;
        }
        if (@ptrCast(?glEvaluateDepthValuesARB, try loader("glEvaluateDepthValuesARB"))) |ptr| {
            self.EvaluateDepthValuesARB = ptr;
        } else {
            self.features.GL_ARB_sample_locations = false;
        }
        if (@ptrCast(?glFramebufferSampleLocationsfvARB, try loader("glFramebufferSampleLocationsfvARB"))) |ptr| {
            self.FramebufferSampleLocationsfvARB = ptr;
        } else {
            self.features.GL_ARB_sample_locations = false;
        }
        if (@ptrCast(?glNamedFramebufferSampleLocationsfvARB, try loader("glNamedFramebufferSampleLocationsfvARB"))) |ptr| {
            self.NamedFramebufferSampleLocationsfvARB = ptr;
        } else {
            self.features.GL_ARB_sample_locations = false;
        }
        if (@ptrCast(?glMinSampleShadingARB, try loader("glMinSampleShadingARB"))) |ptr| {
            self.MinSampleShadingARB = ptr;
        } else {
            self.features.GL_ARB_sample_shading = false;
        }
        if (@ptrCast(?glBindSampler, try loader("glBindSampler"))) |ptr| {
            self.BindSampler = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glDeleteSamplers, try loader("glDeleteSamplers"))) |ptr| {
            self.DeleteSamplers = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glGenSamplers, try loader("glGenSamplers"))) |ptr| {
            self.GenSamplers = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glGetSamplerParameterIiv, try loader("glGetSamplerParameterIiv"))) |ptr| {
            self.GetSamplerParameterIiv = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glGetSamplerParameterIuiv, try loader("glGetSamplerParameterIuiv"))) |ptr| {
            self.GetSamplerParameterIuiv = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glGetSamplerParameterfv, try loader("glGetSamplerParameterfv"))) |ptr| {
            self.GetSamplerParameterfv = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glGetSamplerParameteriv, try loader("glGetSamplerParameteriv"))) |ptr| {
            self.GetSamplerParameteriv = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glIsSampler, try loader("glIsSampler"))) |ptr| {
            self.IsSampler = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glSamplerParameterIiv, try loader("glSamplerParameterIiv"))) |ptr| {
            self.SamplerParameterIiv = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glSamplerParameterIuiv, try loader("glSamplerParameterIuiv"))) |ptr| {
            self.SamplerParameterIuiv = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glSamplerParameterf, try loader("glSamplerParameterf"))) |ptr| {
            self.SamplerParameterf = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glSamplerParameterfv, try loader("glSamplerParameterfv"))) |ptr| {
            self.SamplerParameterfv = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glSamplerParameteri, try loader("glSamplerParameteri"))) |ptr| {
            self.SamplerParameteri = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glSamplerParameteriv, try loader("glSamplerParameteriv"))) |ptr| {
            self.SamplerParameteriv = ptr;
        } else {
            self.features.GL_ARB_sampler_objects = false;
        }
        if (@ptrCast(?glActiveShaderProgram, try loader("glActiveShaderProgram"))) |ptr| {
            self.ActiveShaderProgram = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glBindProgramPipeline, try loader("glBindProgramPipeline"))) |ptr| {
            self.BindProgramPipeline = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glCreateShaderProgramv, try loader("glCreateShaderProgramv"))) |ptr| {
            self.CreateShaderProgramv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glDeleteProgramPipelines, try loader("glDeleteProgramPipelines"))) |ptr| {
            self.DeleteProgramPipelines = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glGenProgramPipelines, try loader("glGenProgramPipelines"))) |ptr| {
            self.GenProgramPipelines = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glGetProgramPipelineInfoLog, try loader("glGetProgramPipelineInfoLog"))) |ptr| {
            self.GetProgramPipelineInfoLog = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glGetProgramPipelineiv, try loader("glGetProgramPipelineiv"))) |ptr| {
            self.GetProgramPipelineiv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glIsProgramPipeline, try loader("glIsProgramPipeline"))) |ptr| {
            self.IsProgramPipeline = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramParameteri, try loader("glProgramParameteri"))) |ptr| {
            self.ProgramParameteri = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform1d, try loader("glProgramUniform1d"))) |ptr| {
            self.ProgramUniform1d = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform1dv, try loader("glProgramUniform1dv"))) |ptr| {
            self.ProgramUniform1dv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform1f, try loader("glProgramUniform1f"))) |ptr| {
            self.ProgramUniform1f = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform1fv, try loader("glProgramUniform1fv"))) |ptr| {
            self.ProgramUniform1fv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform1i, try loader("glProgramUniform1i"))) |ptr| {
            self.ProgramUniform1i = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform1iv, try loader("glProgramUniform1iv"))) |ptr| {
            self.ProgramUniform1iv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform1ui, try loader("glProgramUniform1ui"))) |ptr| {
            self.ProgramUniform1ui = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform1uiv, try loader("glProgramUniform1uiv"))) |ptr| {
            self.ProgramUniform1uiv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform2d, try loader("glProgramUniform2d"))) |ptr| {
            self.ProgramUniform2d = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform2dv, try loader("glProgramUniform2dv"))) |ptr| {
            self.ProgramUniform2dv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform2f, try loader("glProgramUniform2f"))) |ptr| {
            self.ProgramUniform2f = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform2fv, try loader("glProgramUniform2fv"))) |ptr| {
            self.ProgramUniform2fv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform2i, try loader("glProgramUniform2i"))) |ptr| {
            self.ProgramUniform2i = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform2iv, try loader("glProgramUniform2iv"))) |ptr| {
            self.ProgramUniform2iv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform2ui, try loader("glProgramUniform2ui"))) |ptr| {
            self.ProgramUniform2ui = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform2uiv, try loader("glProgramUniform2uiv"))) |ptr| {
            self.ProgramUniform2uiv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform3d, try loader("glProgramUniform3d"))) |ptr| {
            self.ProgramUniform3d = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform3dv, try loader("glProgramUniform3dv"))) |ptr| {
            self.ProgramUniform3dv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform3f, try loader("glProgramUniform3f"))) |ptr| {
            self.ProgramUniform3f = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform3fv, try loader("glProgramUniform3fv"))) |ptr| {
            self.ProgramUniform3fv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform3i, try loader("glProgramUniform3i"))) |ptr| {
            self.ProgramUniform3i = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform3iv, try loader("glProgramUniform3iv"))) |ptr| {
            self.ProgramUniform3iv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform3ui, try loader("glProgramUniform3ui"))) |ptr| {
            self.ProgramUniform3ui = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform3uiv, try loader("glProgramUniform3uiv"))) |ptr| {
            self.ProgramUniform3uiv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform4d, try loader("glProgramUniform4d"))) |ptr| {
            self.ProgramUniform4d = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform4dv, try loader("glProgramUniform4dv"))) |ptr| {
            self.ProgramUniform4dv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform4f, try loader("glProgramUniform4f"))) |ptr| {
            self.ProgramUniform4f = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform4fv, try loader("glProgramUniform4fv"))) |ptr| {
            self.ProgramUniform4fv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform4i, try loader("glProgramUniform4i"))) |ptr| {
            self.ProgramUniform4i = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform4iv, try loader("glProgramUniform4iv"))) |ptr| {
            self.ProgramUniform4iv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform4ui, try loader("glProgramUniform4ui"))) |ptr| {
            self.ProgramUniform4ui = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniform4uiv, try loader("glProgramUniform4uiv"))) |ptr| {
            self.ProgramUniform4uiv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix2dv, try loader("glProgramUniformMatrix2dv"))) |ptr| {
            self.ProgramUniformMatrix2dv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix2fv, try loader("glProgramUniformMatrix2fv"))) |ptr| {
            self.ProgramUniformMatrix2fv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix2x3dv, try loader("glProgramUniformMatrix2x3dv"))) |ptr| {
            self.ProgramUniformMatrix2x3dv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix2x3fv, try loader("glProgramUniformMatrix2x3fv"))) |ptr| {
            self.ProgramUniformMatrix2x3fv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix2x4dv, try loader("glProgramUniformMatrix2x4dv"))) |ptr| {
            self.ProgramUniformMatrix2x4dv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix2x4fv, try loader("glProgramUniformMatrix2x4fv"))) |ptr| {
            self.ProgramUniformMatrix2x4fv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix3dv, try loader("glProgramUniformMatrix3dv"))) |ptr| {
            self.ProgramUniformMatrix3dv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix3fv, try loader("glProgramUniformMatrix3fv"))) |ptr| {
            self.ProgramUniformMatrix3fv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix3x2dv, try loader("glProgramUniformMatrix3x2dv"))) |ptr| {
            self.ProgramUniformMatrix3x2dv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix3x2fv, try loader("glProgramUniformMatrix3x2fv"))) |ptr| {
            self.ProgramUniformMatrix3x2fv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix3x4dv, try loader("glProgramUniformMatrix3x4dv"))) |ptr| {
            self.ProgramUniformMatrix3x4dv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix3x4fv, try loader("glProgramUniformMatrix3x4fv"))) |ptr| {
            self.ProgramUniformMatrix3x4fv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix4dv, try loader("glProgramUniformMatrix4dv"))) |ptr| {
            self.ProgramUniformMatrix4dv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix4fv, try loader("glProgramUniformMatrix4fv"))) |ptr| {
            self.ProgramUniformMatrix4fv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix4x2dv, try loader("glProgramUniformMatrix4x2dv"))) |ptr| {
            self.ProgramUniformMatrix4x2dv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix4x2fv, try loader("glProgramUniformMatrix4x2fv"))) |ptr| {
            self.ProgramUniformMatrix4x2fv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix4x3dv, try loader("glProgramUniformMatrix4x3dv"))) |ptr| {
            self.ProgramUniformMatrix4x3dv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glProgramUniformMatrix4x3fv, try loader("glProgramUniformMatrix4x3fv"))) |ptr| {
            self.ProgramUniformMatrix4x3fv = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glUseProgramStages, try loader("glUseProgramStages"))) |ptr| {
            self.UseProgramStages = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glValidateProgramPipeline, try loader("glValidateProgramPipeline"))) |ptr| {
            self.ValidateProgramPipeline = ptr;
        } else {
            self.features.GL_ARB_separate_shader_objects = false;
        }
        if (@ptrCast(?glGetActiveAtomicCounterBufferiv, try loader("glGetActiveAtomicCounterBufferiv"))) |ptr| {
            self.GetActiveAtomicCounterBufferiv = ptr;
        } else {
            self.features.GL_ARB_shader_atomic_counters = false;
        }
        if (@ptrCast(?glBindImageTexture, try loader("glBindImageTexture"))) |ptr| {
            self.BindImageTexture = ptr;
        } else {
            self.features.GL_ARB_shader_image_load_store = false;
        }
        if (@ptrCast(?glMemoryBarrier, try loader("glMemoryBarrier"))) |ptr| {
            self.MemoryBarrier = ptr;
        } else {
            self.features.GL_ARB_shader_image_load_store = false;
        }
        if (@ptrCast(?glAttachObjectARB, try loader("glAttachObjectARB"))) |ptr| {
            self.AttachObjectARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glCompileShaderARB, try loader("glCompileShaderARB"))) |ptr| {
            self.CompileShaderARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glCreateProgramObjectARB, try loader("glCreateProgramObjectARB"))) |ptr| {
            self.CreateProgramObjectARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glCreateShaderObjectARB, try loader("glCreateShaderObjectARB"))) |ptr| {
            self.CreateShaderObjectARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glDeleteObjectARB, try loader("glDeleteObjectARB"))) |ptr| {
            self.DeleteObjectARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glDetachObjectARB, try loader("glDetachObjectARB"))) |ptr| {
            self.DetachObjectARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glGetActiveUniformARB, try loader("glGetActiveUniformARB"))) |ptr| {
            self.GetActiveUniformARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glGetAttachedObjectsARB, try loader("glGetAttachedObjectsARB"))) |ptr| {
            self.GetAttachedObjectsARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glGetHandleARB, try loader("glGetHandleARB"))) |ptr| {
            self.GetHandleARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glGetInfoLogARB, try loader("glGetInfoLogARB"))) |ptr| {
            self.GetInfoLogARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glGetObjectParameterfvARB, try loader("glGetObjectParameterfvARB"))) |ptr| {
            self.GetObjectParameterfvARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glGetObjectParameterivARB, try loader("glGetObjectParameterivARB"))) |ptr| {
            self.GetObjectParameterivARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glGetShaderSourceARB, try loader("glGetShaderSourceARB"))) |ptr| {
            self.GetShaderSourceARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glGetUniformLocationARB, try loader("glGetUniformLocationARB"))) |ptr| {
            self.GetUniformLocationARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glGetUniformfvARB, try loader("glGetUniformfvARB"))) |ptr| {
            self.GetUniformfvARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glGetUniformivARB, try loader("glGetUniformivARB"))) |ptr| {
            self.GetUniformivARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glLinkProgramARB, try loader("glLinkProgramARB"))) |ptr| {
            self.LinkProgramARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glShaderSourceARB, try loader("glShaderSourceARB"))) |ptr| {
            self.ShaderSourceARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform1fARB, try loader("glUniform1fARB"))) |ptr| {
            self.Uniform1fARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform1fvARB, try loader("glUniform1fvARB"))) |ptr| {
            self.Uniform1fvARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform1iARB, try loader("glUniform1iARB"))) |ptr| {
            self.Uniform1iARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform1ivARB, try loader("glUniform1ivARB"))) |ptr| {
            self.Uniform1ivARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform2fARB, try loader("glUniform2fARB"))) |ptr| {
            self.Uniform2fARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform2fvARB, try loader("glUniform2fvARB"))) |ptr| {
            self.Uniform2fvARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform2iARB, try loader("glUniform2iARB"))) |ptr| {
            self.Uniform2iARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform2ivARB, try loader("glUniform2ivARB"))) |ptr| {
            self.Uniform2ivARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform3fARB, try loader("glUniform3fARB"))) |ptr| {
            self.Uniform3fARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform3fvARB, try loader("glUniform3fvARB"))) |ptr| {
            self.Uniform3fvARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform3iARB, try loader("glUniform3iARB"))) |ptr| {
            self.Uniform3iARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform3ivARB, try loader("glUniform3ivARB"))) |ptr| {
            self.Uniform3ivARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform4fARB, try loader("glUniform4fARB"))) |ptr| {
            self.Uniform4fARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform4fvARB, try loader("glUniform4fvARB"))) |ptr| {
            self.Uniform4fvARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform4iARB, try loader("glUniform4iARB"))) |ptr| {
            self.Uniform4iARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniform4ivARB, try loader("glUniform4ivARB"))) |ptr| {
            self.Uniform4ivARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniformMatrix2fvARB, try loader("glUniformMatrix2fvARB"))) |ptr| {
            self.UniformMatrix2fvARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniformMatrix3fvARB, try loader("glUniformMatrix3fvARB"))) |ptr| {
            self.UniformMatrix3fvARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUniformMatrix4fvARB, try loader("glUniformMatrix4fvARB"))) |ptr| {
            self.UniformMatrix4fvARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glUseProgramObjectARB, try loader("glUseProgramObjectARB"))) |ptr| {
            self.UseProgramObjectARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glValidateProgramARB, try loader("glValidateProgramARB"))) |ptr| {
            self.ValidateProgramARB = ptr;
        } else {
            self.features.GL_ARB_shader_objects = false;
        }
        if (@ptrCast(?glShaderStorageBlockBinding, try loader("glShaderStorageBlockBinding"))) |ptr| {
            self.ShaderStorageBlockBinding = ptr;
        } else {
            self.features.GL_ARB_shader_storage_buffer_object = false;
        }
        if (@ptrCast(?glGetActiveSubroutineName, try loader("glGetActiveSubroutineName"))) |ptr| {
            self.GetActiveSubroutineName = ptr;
        } else {
            self.features.GL_ARB_shader_subroutine = false;
        }
        if (@ptrCast(?glGetActiveSubroutineUniformName, try loader("glGetActiveSubroutineUniformName"))) |ptr| {
            self.GetActiveSubroutineUniformName = ptr;
        } else {
            self.features.GL_ARB_shader_subroutine = false;
        }
        if (@ptrCast(?glGetActiveSubroutineUniformiv, try loader("glGetActiveSubroutineUniformiv"))) |ptr| {
            self.GetActiveSubroutineUniformiv = ptr;
        } else {
            self.features.GL_ARB_shader_subroutine = false;
        }
        if (@ptrCast(?glGetProgramStageiv, try loader("glGetProgramStageiv"))) |ptr| {
            self.GetProgramStageiv = ptr;
        } else {
            self.features.GL_ARB_shader_subroutine = false;
        }
        if (@ptrCast(?glGetSubroutineIndex, try loader("glGetSubroutineIndex"))) |ptr| {
            self.GetSubroutineIndex = ptr;
        } else {
            self.features.GL_ARB_shader_subroutine = false;
        }
        if (@ptrCast(?glGetSubroutineUniformLocation, try loader("glGetSubroutineUniformLocation"))) |ptr| {
            self.GetSubroutineUniformLocation = ptr;
        } else {
            self.features.GL_ARB_shader_subroutine = false;
        }
        if (@ptrCast(?glGetUniformSubroutineuiv, try loader("glGetUniformSubroutineuiv"))) |ptr| {
            self.GetUniformSubroutineuiv = ptr;
        } else {
            self.features.GL_ARB_shader_subroutine = false;
        }
        if (@ptrCast(?glUniformSubroutinesuiv, try loader("glUniformSubroutinesuiv"))) |ptr| {
            self.UniformSubroutinesuiv = ptr;
        } else {
            self.features.GL_ARB_shader_subroutine = false;
        }
        if (@ptrCast(?glCompileShaderIncludeARB, try loader("glCompileShaderIncludeARB"))) |ptr| {
            self.CompileShaderIncludeARB = ptr;
        } else {
            self.features.GL_ARB_shading_language_include = false;
        }
        if (@ptrCast(?glDeleteNamedStringARB, try loader("glDeleteNamedStringARB"))) |ptr| {
            self.DeleteNamedStringARB = ptr;
        } else {
            self.features.GL_ARB_shading_language_include = false;
        }
        if (@ptrCast(?glGetNamedStringARB, try loader("glGetNamedStringARB"))) |ptr| {
            self.GetNamedStringARB = ptr;
        } else {
            self.features.GL_ARB_shading_language_include = false;
        }
        if (@ptrCast(?glGetNamedStringivARB, try loader("glGetNamedStringivARB"))) |ptr| {
            self.GetNamedStringivARB = ptr;
        } else {
            self.features.GL_ARB_shading_language_include = false;
        }
        if (@ptrCast(?glIsNamedStringARB, try loader("glIsNamedStringARB"))) |ptr| {
            self.IsNamedStringARB = ptr;
        } else {
            self.features.GL_ARB_shading_language_include = false;
        }
        if (@ptrCast(?glNamedStringARB, try loader("glNamedStringARB"))) |ptr| {
            self.NamedStringARB = ptr;
        } else {
            self.features.GL_ARB_shading_language_include = false;
        }
        if (@ptrCast(?glBufferPageCommitmentARB, try loader("glBufferPageCommitmentARB"))) |ptr| {
            self.BufferPageCommitmentARB = ptr;
        } else {
            self.features.GL_ARB_sparse_buffer = false;
        }
        if (@ptrCast(?glNamedBufferPageCommitmentARB, try loader("glNamedBufferPageCommitmentARB"))) |ptr| {
            self.NamedBufferPageCommitmentARB = ptr;
        } else {
            self.features.GL_ARB_sparse_buffer = false;
        }
        if (@ptrCast(?glNamedBufferPageCommitmentEXT, try loader("glNamedBufferPageCommitmentEXT"))) |ptr| {
            self.NamedBufferPageCommitmentEXT = ptr;
        } else {
            self.features.GL_ARB_sparse_buffer = false;
        }
        if (@ptrCast(?glTexPageCommitmentARB, try loader("glTexPageCommitmentARB"))) |ptr| {
            self.TexPageCommitmentARB = ptr;
        } else {
            self.features.GL_ARB_sparse_texture = false;
        }
        if (@ptrCast(?glClientWaitSync, try loader("glClientWaitSync"))) |ptr| {
            self.ClientWaitSync = ptr;
        } else {
            self.features.GL_ARB_sync = false;
        }
        if (@ptrCast(?glDeleteSync, try loader("glDeleteSync"))) |ptr| {
            self.DeleteSync = ptr;
        } else {
            self.features.GL_ARB_sync = false;
        }
        if (@ptrCast(?glFenceSync, try loader("glFenceSync"))) |ptr| {
            self.FenceSync = ptr;
        } else {
            self.features.GL_ARB_sync = false;
        }
        if (@ptrCast(?glGetInteger64v, try loader("glGetInteger64v"))) |ptr| {
            self.GetInteger64v = ptr;
        } else {
            self.features.GL_ARB_sync = false;
        }
        if (@ptrCast(?glGetSynciv, try loader("glGetSynciv"))) |ptr| {
            self.GetSynciv = ptr;
        } else {
            self.features.GL_ARB_sync = false;
        }
        if (@ptrCast(?glIsSync, try loader("glIsSync"))) |ptr| {
            self.IsSync = ptr;
        } else {
            self.features.GL_ARB_sync = false;
        }
        if (@ptrCast(?glWaitSync, try loader("glWaitSync"))) |ptr| {
            self.WaitSync = ptr;
        } else {
            self.features.GL_ARB_sync = false;
        }
        if (@ptrCast(?glPatchParameterfv, try loader("glPatchParameterfv"))) |ptr| {
            self.PatchParameterfv = ptr;
        } else {
            self.features.GL_ARB_tessellation_shader = false;
        }
        if (@ptrCast(?glPatchParameteri, try loader("glPatchParameteri"))) |ptr| {
            self.PatchParameteri = ptr;
        } else {
            self.features.GL_ARB_tessellation_shader = false;
        }
        if (@ptrCast(?glTextureBarrier, try loader("glTextureBarrier"))) |ptr| {
            self.TextureBarrier = ptr;
        } else {
            self.features.GL_ARB_texture_barrier = false;
        }
        if (@ptrCast(?glTexBufferARB, try loader("glTexBufferARB"))) |ptr| {
            self.TexBufferARB = ptr;
        } else {
            self.features.GL_ARB_texture_buffer_object = false;
        }
        if (@ptrCast(?glTexBufferRange, try loader("glTexBufferRange"))) |ptr| {
            self.TexBufferRange = ptr;
        } else {
            self.features.GL_ARB_texture_buffer_range = false;
        }
        if (@ptrCast(?glCompressedTexImage1DARB, try loader("glCompressedTexImage1DARB"))) |ptr| {
            self.CompressedTexImage1DARB = ptr;
        } else {
            self.features.GL_ARB_texture_compression = false;
        }
        if (@ptrCast(?glCompressedTexImage2DARB, try loader("glCompressedTexImage2DARB"))) |ptr| {
            self.CompressedTexImage2DARB = ptr;
        } else {
            self.features.GL_ARB_texture_compression = false;
        }
        if (@ptrCast(?glCompressedTexImage3DARB, try loader("glCompressedTexImage3DARB"))) |ptr| {
            self.CompressedTexImage3DARB = ptr;
        } else {
            self.features.GL_ARB_texture_compression = false;
        }
        if (@ptrCast(?glCompressedTexSubImage1DARB, try loader("glCompressedTexSubImage1DARB"))) |ptr| {
            self.CompressedTexSubImage1DARB = ptr;
        } else {
            self.features.GL_ARB_texture_compression = false;
        }
        if (@ptrCast(?glCompressedTexSubImage2DARB, try loader("glCompressedTexSubImage2DARB"))) |ptr| {
            self.CompressedTexSubImage2DARB = ptr;
        } else {
            self.features.GL_ARB_texture_compression = false;
        }
        if (@ptrCast(?glCompressedTexSubImage3DARB, try loader("glCompressedTexSubImage3DARB"))) |ptr| {
            self.CompressedTexSubImage3DARB = ptr;
        } else {
            self.features.GL_ARB_texture_compression = false;
        }
        if (@ptrCast(?glGetCompressedTexImageARB, try loader("glGetCompressedTexImageARB"))) |ptr| {
            self.GetCompressedTexImageARB = ptr;
        } else {
            self.features.GL_ARB_texture_compression = false;
        }
        if (@ptrCast(?glGetMultisamplefv, try loader("glGetMultisamplefv"))) |ptr| {
            self.GetMultisamplefv = ptr;
        } else {
            self.features.GL_ARB_texture_multisample = false;
        }
        if (@ptrCast(?glSampleMaski, try loader("glSampleMaski"))) |ptr| {
            self.SampleMaski = ptr;
        } else {
            self.features.GL_ARB_texture_multisample = false;
        }
        if (@ptrCast(?glTexImage2DMultisample, try loader("glTexImage2DMultisample"))) |ptr| {
            self.TexImage2DMultisample = ptr;
        } else {
            self.features.GL_ARB_texture_multisample = false;
        }
        if (@ptrCast(?glTexImage3DMultisample, try loader("glTexImage3DMultisample"))) |ptr| {
            self.TexImage3DMultisample = ptr;
        } else {
            self.features.GL_ARB_texture_multisample = false;
        }
        if (@ptrCast(?glTexStorage1D, try loader("glTexStorage1D"))) |ptr| {
            self.TexStorage1D = ptr;
        } else {
            self.features.GL_ARB_texture_storage = false;
        }
        if (@ptrCast(?glTexStorage2D, try loader("glTexStorage2D"))) |ptr| {
            self.TexStorage2D = ptr;
        } else {
            self.features.GL_ARB_texture_storage = false;
        }
        if (@ptrCast(?glTexStorage3D, try loader("glTexStorage3D"))) |ptr| {
            self.TexStorage3D = ptr;
        } else {
            self.features.GL_ARB_texture_storage = false;
        }
        if (@ptrCast(?glTexStorage2DMultisample, try loader("glTexStorage2DMultisample"))) |ptr| {
            self.TexStorage2DMultisample = ptr;
        } else {
            self.features.GL_ARB_texture_storage_multisample = false;
        }
        if (@ptrCast(?glTexStorage3DMultisample, try loader("glTexStorage3DMultisample"))) |ptr| {
            self.TexStorage3DMultisample = ptr;
        } else {
            self.features.GL_ARB_texture_storage_multisample = false;
        }
        if (@ptrCast(?glTextureView, try loader("glTextureView"))) |ptr| {
            self.TextureView = ptr;
        } else {
            self.features.GL_ARB_texture_view = false;
        }
        if (@ptrCast(?glGetQueryObjecti64v, try loader("glGetQueryObjecti64v"))) |ptr| {
            self.GetQueryObjecti64v = ptr;
        } else {
            self.features.GL_ARB_timer_query = false;
        }
        if (@ptrCast(?glGetQueryObjectui64v, try loader("glGetQueryObjectui64v"))) |ptr| {
            self.GetQueryObjectui64v = ptr;
        } else {
            self.features.GL_ARB_timer_query = false;
        }
        if (@ptrCast(?glQueryCounter, try loader("glQueryCounter"))) |ptr| {
            self.QueryCounter = ptr;
        } else {
            self.features.GL_ARB_timer_query = false;
        }
        if (@ptrCast(?glBindTransformFeedback, try loader("glBindTransformFeedback"))) |ptr| {
            self.BindTransformFeedback = ptr;
        } else {
            self.features.GL_ARB_transform_feedback2 = false;
        }
        if (@ptrCast(?glDeleteTransformFeedbacks, try loader("glDeleteTransformFeedbacks"))) |ptr| {
            self.DeleteTransformFeedbacks = ptr;
        } else {
            self.features.GL_ARB_transform_feedback2 = false;
        }
        if (@ptrCast(?glDrawTransformFeedback, try loader("glDrawTransformFeedback"))) |ptr| {
            self.DrawTransformFeedback = ptr;
        } else {
            self.features.GL_ARB_transform_feedback2 = false;
        }
        if (@ptrCast(?glGenTransformFeedbacks, try loader("glGenTransformFeedbacks"))) |ptr| {
            self.GenTransformFeedbacks = ptr;
        } else {
            self.features.GL_ARB_transform_feedback2 = false;
        }
        if (@ptrCast(?glIsTransformFeedback, try loader("glIsTransformFeedback"))) |ptr| {
            self.IsTransformFeedback = ptr;
        } else {
            self.features.GL_ARB_transform_feedback2 = false;
        }
        if (@ptrCast(?glPauseTransformFeedback, try loader("glPauseTransformFeedback"))) |ptr| {
            self.PauseTransformFeedback = ptr;
        } else {
            self.features.GL_ARB_transform_feedback2 = false;
        }
        if (@ptrCast(?glResumeTransformFeedback, try loader("glResumeTransformFeedback"))) |ptr| {
            self.ResumeTransformFeedback = ptr;
        } else {
            self.features.GL_ARB_transform_feedback2 = false;
        }
        if (@ptrCast(?glBeginQueryIndexed, try loader("glBeginQueryIndexed"))) |ptr| {
            self.BeginQueryIndexed = ptr;
        } else {
            self.features.GL_ARB_transform_feedback3 = false;
        }
        if (@ptrCast(?glDrawTransformFeedbackStream, try loader("glDrawTransformFeedbackStream"))) |ptr| {
            self.DrawTransformFeedbackStream = ptr;
        } else {
            self.features.GL_ARB_transform_feedback3 = false;
        }
        if (@ptrCast(?glEndQueryIndexed, try loader("glEndQueryIndexed"))) |ptr| {
            self.EndQueryIndexed = ptr;
        } else {
            self.features.GL_ARB_transform_feedback3 = false;
        }
        if (@ptrCast(?glGetQueryIndexediv, try loader("glGetQueryIndexediv"))) |ptr| {
            self.GetQueryIndexediv = ptr;
        } else {
            self.features.GL_ARB_transform_feedback3 = false;
        }
        if (@ptrCast(?glDrawTransformFeedbackInstanced, try loader("glDrawTransformFeedbackInstanced"))) |ptr| {
            self.DrawTransformFeedbackInstanced = ptr;
        } else {
            self.features.GL_ARB_transform_feedback_instanced = false;
        }
        if (@ptrCast(?glDrawTransformFeedbackStreamInstanced, try loader("glDrawTransformFeedbackStreamInstanced"))) |ptr| {
            self.DrawTransformFeedbackStreamInstanced = ptr;
        } else {
            self.features.GL_ARB_transform_feedback_instanced = false;
        }
        if (@ptrCast(?glLoadTransposeMatrixdARB, try loader("glLoadTransposeMatrixdARB"))) |ptr| {
            self.LoadTransposeMatrixdARB = ptr;
        } else {
            self.features.GL_ARB_transpose_matrix = false;
        }
        if (@ptrCast(?glLoadTransposeMatrixfARB, try loader("glLoadTransposeMatrixfARB"))) |ptr| {
            self.LoadTransposeMatrixfARB = ptr;
        } else {
            self.features.GL_ARB_transpose_matrix = false;
        }
        if (@ptrCast(?glMultTransposeMatrixdARB, try loader("glMultTransposeMatrixdARB"))) |ptr| {
            self.MultTransposeMatrixdARB = ptr;
        } else {
            self.features.GL_ARB_transpose_matrix = false;
        }
        if (@ptrCast(?glMultTransposeMatrixfARB, try loader("glMultTransposeMatrixfARB"))) |ptr| {
            self.MultTransposeMatrixfARB = ptr;
        } else {
            self.features.GL_ARB_transpose_matrix = false;
        }
        if (@ptrCast(?glBindBufferBase, try loader("glBindBufferBase"))) |ptr| {
            self.BindBufferBase = ptr;
        } else {
            self.features.GL_ARB_uniform_buffer_object = false;
        }
        if (@ptrCast(?glBindBufferRange, try loader("glBindBufferRange"))) |ptr| {
            self.BindBufferRange = ptr;
        } else {
            self.features.GL_ARB_uniform_buffer_object = false;
        }
        if (@ptrCast(?glGetActiveUniformBlockName, try loader("glGetActiveUniformBlockName"))) |ptr| {
            self.GetActiveUniformBlockName = ptr;
        } else {
            self.features.GL_ARB_uniform_buffer_object = false;
        }
        if (@ptrCast(?glGetActiveUniformBlockiv, try loader("glGetActiveUniformBlockiv"))) |ptr| {
            self.GetActiveUniformBlockiv = ptr;
        } else {
            self.features.GL_ARB_uniform_buffer_object = false;
        }
        if (@ptrCast(?glGetActiveUniformName, try loader("glGetActiveUniformName"))) |ptr| {
            self.GetActiveUniformName = ptr;
        } else {
            self.features.GL_ARB_uniform_buffer_object = false;
        }
        if (@ptrCast(?glGetActiveUniformsiv, try loader("glGetActiveUniformsiv"))) |ptr| {
            self.GetActiveUniformsiv = ptr;
        } else {
            self.features.GL_ARB_uniform_buffer_object = false;
        }
        if (@ptrCast(?glGetIntegeri_v, try loader("glGetIntegeri_v"))) |ptr| {
            self.GetIntegeri_v = ptr;
        } else {
            self.features.GL_ARB_uniform_buffer_object = false;
        }
        if (@ptrCast(?glGetUniformBlockIndex, try loader("glGetUniformBlockIndex"))) |ptr| {
            self.GetUniformBlockIndex = ptr;
        } else {
            self.features.GL_ARB_uniform_buffer_object = false;
        }
        if (@ptrCast(?glGetUniformIndices, try loader("glGetUniformIndices"))) |ptr| {
            self.GetUniformIndices = ptr;
        } else {
            self.features.GL_ARB_uniform_buffer_object = false;
        }
        if (@ptrCast(?glUniformBlockBinding, try loader("glUniformBlockBinding"))) |ptr| {
            self.UniformBlockBinding = ptr;
        } else {
            self.features.GL_ARB_uniform_buffer_object = false;
        }
        if (@ptrCast(?glBindVertexArray, try loader("glBindVertexArray"))) |ptr| {
            self.BindVertexArray = ptr;
        } else {
            self.features.GL_ARB_vertex_array_object = false;
        }
        if (@ptrCast(?glDeleteVertexArrays, try loader("glDeleteVertexArrays"))) |ptr| {
            self.DeleteVertexArrays = ptr;
        } else {
            self.features.GL_ARB_vertex_array_object = false;
        }
        if (@ptrCast(?glGenVertexArrays, try loader("glGenVertexArrays"))) |ptr| {
            self.GenVertexArrays = ptr;
        } else {
            self.features.GL_ARB_vertex_array_object = false;
        }
        if (@ptrCast(?glIsVertexArray, try loader("glIsVertexArray"))) |ptr| {
            self.IsVertexArray = ptr;
        } else {
            self.features.GL_ARB_vertex_array_object = false;
        }
        if (@ptrCast(?glGetVertexAttribLdv, try loader("glGetVertexAttribLdv"))) |ptr| {
            self.GetVertexAttribLdv = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL1d, try loader("glVertexAttribL1d"))) |ptr| {
            self.VertexAttribL1d = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL1dv, try loader("glVertexAttribL1dv"))) |ptr| {
            self.VertexAttribL1dv = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL2d, try loader("glVertexAttribL2d"))) |ptr| {
            self.VertexAttribL2d = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL2dv, try loader("glVertexAttribL2dv"))) |ptr| {
            self.VertexAttribL2dv = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL3d, try loader("glVertexAttribL3d"))) |ptr| {
            self.VertexAttribL3d = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL3dv, try loader("glVertexAttribL3dv"))) |ptr| {
            self.VertexAttribL3dv = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL4d, try loader("glVertexAttribL4d"))) |ptr| {
            self.VertexAttribL4d = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL4dv, try loader("glVertexAttribL4dv"))) |ptr| {
            self.VertexAttribL4dv = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribLPointer, try loader("glVertexAttribLPointer"))) |ptr| {
            self.VertexAttribLPointer = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glBindVertexBuffer, try loader("glBindVertexBuffer"))) |ptr| {
            self.BindVertexBuffer = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_binding = false;
        }
        if (@ptrCast(?glVertexAttribBinding, try loader("glVertexAttribBinding"))) |ptr| {
            self.VertexAttribBinding = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_binding = false;
        }
        if (@ptrCast(?glVertexAttribFormat, try loader("glVertexAttribFormat"))) |ptr| {
            self.VertexAttribFormat = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_binding = false;
        }
        if (@ptrCast(?glVertexAttribIFormat, try loader("glVertexAttribIFormat"))) |ptr| {
            self.VertexAttribIFormat = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_binding = false;
        }
        if (@ptrCast(?glVertexAttribLFormat, try loader("glVertexAttribLFormat"))) |ptr| {
            self.VertexAttribLFormat = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_binding = false;
        }
        if (@ptrCast(?glVertexBindingDivisor, try loader("glVertexBindingDivisor"))) |ptr| {
            self.VertexBindingDivisor = ptr;
        } else {
            self.features.GL_ARB_vertex_attrib_binding = false;
        }
        if (@ptrCast(?glVertexBlendARB, try loader("glVertexBlendARB"))) |ptr| {
            self.VertexBlendARB = ptr;
        } else {
            self.features.GL_ARB_vertex_blend = false;
        }
        if (@ptrCast(?glWeightPointerARB, try loader("glWeightPointerARB"))) |ptr| {
            self.WeightPointerARB = ptr;
        } else {
            self.features.GL_ARB_vertex_blend = false;
        }
        if (@ptrCast(?glWeightbvARB, try loader("glWeightbvARB"))) |ptr| {
            self.WeightbvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_blend = false;
        }
        if (@ptrCast(?glWeightdvARB, try loader("glWeightdvARB"))) |ptr| {
            self.WeightdvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_blend = false;
        }
        if (@ptrCast(?glWeightfvARB, try loader("glWeightfvARB"))) |ptr| {
            self.WeightfvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_blend = false;
        }
        if (@ptrCast(?glWeightivARB, try loader("glWeightivARB"))) |ptr| {
            self.WeightivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_blend = false;
        }
        if (@ptrCast(?glWeightsvARB, try loader("glWeightsvARB"))) |ptr| {
            self.WeightsvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_blend = false;
        }
        if (@ptrCast(?glWeightubvARB, try loader("glWeightubvARB"))) |ptr| {
            self.WeightubvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_blend = false;
        }
        if (@ptrCast(?glWeightuivARB, try loader("glWeightuivARB"))) |ptr| {
            self.WeightuivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_blend = false;
        }
        if (@ptrCast(?glWeightusvARB, try loader("glWeightusvARB"))) |ptr| {
            self.WeightusvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_blend = false;
        }
        if (@ptrCast(?glBindBufferARB, try loader("glBindBufferARB"))) |ptr| {
            self.BindBufferARB = ptr;
        } else {
            self.features.GL_ARB_vertex_buffer_object = false;
        }
        if (@ptrCast(?glBufferDataARB, try loader("glBufferDataARB"))) |ptr| {
            self.BufferDataARB = ptr;
        } else {
            self.features.GL_ARB_vertex_buffer_object = false;
        }
        if (@ptrCast(?glBufferSubDataARB, try loader("glBufferSubDataARB"))) |ptr| {
            self.BufferSubDataARB = ptr;
        } else {
            self.features.GL_ARB_vertex_buffer_object = false;
        }
        if (@ptrCast(?glDeleteBuffersARB, try loader("glDeleteBuffersARB"))) |ptr| {
            self.DeleteBuffersARB = ptr;
        } else {
            self.features.GL_ARB_vertex_buffer_object = false;
        }
        if (@ptrCast(?glGenBuffersARB, try loader("glGenBuffersARB"))) |ptr| {
            self.GenBuffersARB = ptr;
        } else {
            self.features.GL_ARB_vertex_buffer_object = false;
        }
        if (@ptrCast(?glGetBufferParameterivARB, try loader("glGetBufferParameterivARB"))) |ptr| {
            self.GetBufferParameterivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_buffer_object = false;
        }
        if (@ptrCast(?glGetBufferPointervARB, try loader("glGetBufferPointervARB"))) |ptr| {
            self.GetBufferPointervARB = ptr;
        } else {
            self.features.GL_ARB_vertex_buffer_object = false;
        }
        if (@ptrCast(?glGetBufferSubDataARB, try loader("glGetBufferSubDataARB"))) |ptr| {
            self.GetBufferSubDataARB = ptr;
        } else {
            self.features.GL_ARB_vertex_buffer_object = false;
        }
        if (@ptrCast(?glIsBufferARB, try loader("glIsBufferARB"))) |ptr| {
            self.IsBufferARB = ptr;
        } else {
            self.features.GL_ARB_vertex_buffer_object = false;
        }
        if (@ptrCast(?glMapBufferARB, try loader("glMapBufferARB"))) |ptr| {
            self.MapBufferARB = ptr;
        } else {
            self.features.GL_ARB_vertex_buffer_object = false;
        }
        if (@ptrCast(?glUnmapBufferARB, try loader("glUnmapBufferARB"))) |ptr| {
            self.UnmapBufferARB = ptr;
        } else {
            self.features.GL_ARB_vertex_buffer_object = false;
        }
        if (@ptrCast(?glBindProgramARB, try loader("glBindProgramARB"))) |ptr| {
            self.BindProgramARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glDeleteProgramsARB, try loader("glDeleteProgramsARB"))) |ptr| {
            self.DeleteProgramsARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glDisableVertexAttribArrayARB, try loader("glDisableVertexAttribArrayARB"))) |ptr| {
            self.DisableVertexAttribArrayARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glEnableVertexAttribArrayARB, try loader("glEnableVertexAttribArrayARB"))) |ptr| {
            self.EnableVertexAttribArrayARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glGenProgramsARB, try loader("glGenProgramsARB"))) |ptr| {
            self.GenProgramsARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glGetProgramEnvParameterdvARB, try loader("glGetProgramEnvParameterdvARB"))) |ptr| {
            self.GetProgramEnvParameterdvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glGetProgramEnvParameterfvARB, try loader("glGetProgramEnvParameterfvARB"))) |ptr| {
            self.GetProgramEnvParameterfvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glGetProgramLocalParameterdvARB, try loader("glGetProgramLocalParameterdvARB"))) |ptr| {
            self.GetProgramLocalParameterdvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glGetProgramLocalParameterfvARB, try loader("glGetProgramLocalParameterfvARB"))) |ptr| {
            self.GetProgramLocalParameterfvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glGetProgramStringARB, try loader("glGetProgramStringARB"))) |ptr| {
            self.GetProgramStringARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glGetProgramivARB, try loader("glGetProgramivARB"))) |ptr| {
            self.GetProgramivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glGetVertexAttribPointervARB, try loader("glGetVertexAttribPointervARB"))) |ptr| {
            self.GetVertexAttribPointervARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glGetVertexAttribdvARB, try loader("glGetVertexAttribdvARB"))) |ptr| {
            self.GetVertexAttribdvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glGetVertexAttribfvARB, try loader("glGetVertexAttribfvARB"))) |ptr| {
            self.GetVertexAttribfvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glGetVertexAttribivARB, try loader("glGetVertexAttribivARB"))) |ptr| {
            self.GetVertexAttribivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glIsProgramARB, try loader("glIsProgramARB"))) |ptr| {
            self.IsProgramARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glProgramEnvParameter4dARB, try loader("glProgramEnvParameter4dARB"))) |ptr| {
            self.ProgramEnvParameter4dARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glProgramEnvParameter4dvARB, try loader("glProgramEnvParameter4dvARB"))) |ptr| {
            self.ProgramEnvParameter4dvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glProgramEnvParameter4fARB, try loader("glProgramEnvParameter4fARB"))) |ptr| {
            self.ProgramEnvParameter4fARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glProgramEnvParameter4fvARB, try loader("glProgramEnvParameter4fvARB"))) |ptr| {
            self.ProgramEnvParameter4fvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glProgramLocalParameter4dARB, try loader("glProgramLocalParameter4dARB"))) |ptr| {
            self.ProgramLocalParameter4dARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glProgramLocalParameter4dvARB, try loader("glProgramLocalParameter4dvARB"))) |ptr| {
            self.ProgramLocalParameter4dvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glProgramLocalParameter4fARB, try loader("glProgramLocalParameter4fARB"))) |ptr| {
            self.ProgramLocalParameter4fARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glProgramLocalParameter4fvARB, try loader("glProgramLocalParameter4fvARB"))) |ptr| {
            self.ProgramLocalParameter4fvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glProgramStringARB, try loader("glProgramStringARB"))) |ptr| {
            self.ProgramStringARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib1dARB, try loader("glVertexAttrib1dARB"))) |ptr| {
            self.VertexAttrib1dARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib1dvARB, try loader("glVertexAttrib1dvARB"))) |ptr| {
            self.VertexAttrib1dvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib1fARB, try loader("glVertexAttrib1fARB"))) |ptr| {
            self.VertexAttrib1fARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib1fvARB, try loader("glVertexAttrib1fvARB"))) |ptr| {
            self.VertexAttrib1fvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib1sARB, try loader("glVertexAttrib1sARB"))) |ptr| {
            self.VertexAttrib1sARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib1svARB, try loader("glVertexAttrib1svARB"))) |ptr| {
            self.VertexAttrib1svARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib2dARB, try loader("glVertexAttrib2dARB"))) |ptr| {
            self.VertexAttrib2dARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib2dvARB, try loader("glVertexAttrib2dvARB"))) |ptr| {
            self.VertexAttrib2dvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib2fARB, try loader("glVertexAttrib2fARB"))) |ptr| {
            self.VertexAttrib2fARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib2fvARB, try loader("glVertexAttrib2fvARB"))) |ptr| {
            self.VertexAttrib2fvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib2sARB, try loader("glVertexAttrib2sARB"))) |ptr| {
            self.VertexAttrib2sARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib2svARB, try loader("glVertexAttrib2svARB"))) |ptr| {
            self.VertexAttrib2svARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib3dARB, try loader("glVertexAttrib3dARB"))) |ptr| {
            self.VertexAttrib3dARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib3dvARB, try loader("glVertexAttrib3dvARB"))) |ptr| {
            self.VertexAttrib3dvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib3fARB, try loader("glVertexAttrib3fARB"))) |ptr| {
            self.VertexAttrib3fARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib3fvARB, try loader("glVertexAttrib3fvARB"))) |ptr| {
            self.VertexAttrib3fvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib3sARB, try loader("glVertexAttrib3sARB"))) |ptr| {
            self.VertexAttrib3sARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib3svARB, try loader("glVertexAttrib3svARB"))) |ptr| {
            self.VertexAttrib3svARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4NbvARB, try loader("glVertexAttrib4NbvARB"))) |ptr| {
            self.VertexAttrib4NbvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4NivARB, try loader("glVertexAttrib4NivARB"))) |ptr| {
            self.VertexAttrib4NivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4NsvARB, try loader("glVertexAttrib4NsvARB"))) |ptr| {
            self.VertexAttrib4NsvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4NubARB, try loader("glVertexAttrib4NubARB"))) |ptr| {
            self.VertexAttrib4NubARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4NubvARB, try loader("glVertexAttrib4NubvARB"))) |ptr| {
            self.VertexAttrib4NubvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4NuivARB, try loader("glVertexAttrib4NuivARB"))) |ptr| {
            self.VertexAttrib4NuivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4NusvARB, try loader("glVertexAttrib4NusvARB"))) |ptr| {
            self.VertexAttrib4NusvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4bvARB, try loader("glVertexAttrib4bvARB"))) |ptr| {
            self.VertexAttrib4bvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4dARB, try loader("glVertexAttrib4dARB"))) |ptr| {
            self.VertexAttrib4dARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4dvARB, try loader("glVertexAttrib4dvARB"))) |ptr| {
            self.VertexAttrib4dvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4fARB, try loader("glVertexAttrib4fARB"))) |ptr| {
            self.VertexAttrib4fARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4fvARB, try loader("glVertexAttrib4fvARB"))) |ptr| {
            self.VertexAttrib4fvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4ivARB, try loader("glVertexAttrib4ivARB"))) |ptr| {
            self.VertexAttrib4ivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4sARB, try loader("glVertexAttrib4sARB"))) |ptr| {
            self.VertexAttrib4sARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4svARB, try loader("glVertexAttrib4svARB"))) |ptr| {
            self.VertexAttrib4svARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4ubvARB, try loader("glVertexAttrib4ubvARB"))) |ptr| {
            self.VertexAttrib4ubvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4uivARB, try loader("glVertexAttrib4uivARB"))) |ptr| {
            self.VertexAttrib4uivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4usvARB, try loader("glVertexAttrib4usvARB"))) |ptr| {
            self.VertexAttrib4usvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribPointerARB, try loader("glVertexAttribPointerARB"))) |ptr| {
            self.VertexAttribPointerARB = ptr;
        } else {
            self.features.GL_ARB_vertex_program = false;
        }
        if (@ptrCast(?glBindAttribLocationARB, try loader("glBindAttribLocationARB"))) |ptr| {
            self.BindAttribLocationARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glDisableVertexAttribArrayARB, try loader("glDisableVertexAttribArrayARB"))) |ptr| {
            self.DisableVertexAttribArrayARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glEnableVertexAttribArrayARB, try loader("glEnableVertexAttribArrayARB"))) |ptr| {
            self.EnableVertexAttribArrayARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glGetActiveAttribARB, try loader("glGetActiveAttribARB"))) |ptr| {
            self.GetActiveAttribARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glGetAttribLocationARB, try loader("glGetAttribLocationARB"))) |ptr| {
            self.GetAttribLocationARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glGetVertexAttribPointervARB, try loader("glGetVertexAttribPointervARB"))) |ptr| {
            self.GetVertexAttribPointervARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glGetVertexAttribdvARB, try loader("glGetVertexAttribdvARB"))) |ptr| {
            self.GetVertexAttribdvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glGetVertexAttribfvARB, try loader("glGetVertexAttribfvARB"))) |ptr| {
            self.GetVertexAttribfvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glGetVertexAttribivARB, try loader("glGetVertexAttribivARB"))) |ptr| {
            self.GetVertexAttribivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib1dARB, try loader("glVertexAttrib1dARB"))) |ptr| {
            self.VertexAttrib1dARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib1dvARB, try loader("glVertexAttrib1dvARB"))) |ptr| {
            self.VertexAttrib1dvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib1fARB, try loader("glVertexAttrib1fARB"))) |ptr| {
            self.VertexAttrib1fARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib1fvARB, try loader("glVertexAttrib1fvARB"))) |ptr| {
            self.VertexAttrib1fvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib1sARB, try loader("glVertexAttrib1sARB"))) |ptr| {
            self.VertexAttrib1sARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib1svARB, try loader("glVertexAttrib1svARB"))) |ptr| {
            self.VertexAttrib1svARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib2dARB, try loader("glVertexAttrib2dARB"))) |ptr| {
            self.VertexAttrib2dARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib2dvARB, try loader("glVertexAttrib2dvARB"))) |ptr| {
            self.VertexAttrib2dvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib2fARB, try loader("glVertexAttrib2fARB"))) |ptr| {
            self.VertexAttrib2fARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib2fvARB, try loader("glVertexAttrib2fvARB"))) |ptr| {
            self.VertexAttrib2fvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib2sARB, try loader("glVertexAttrib2sARB"))) |ptr| {
            self.VertexAttrib2sARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib2svARB, try loader("glVertexAttrib2svARB"))) |ptr| {
            self.VertexAttrib2svARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib3dARB, try loader("glVertexAttrib3dARB"))) |ptr| {
            self.VertexAttrib3dARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib3dvARB, try loader("glVertexAttrib3dvARB"))) |ptr| {
            self.VertexAttrib3dvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib3fARB, try loader("glVertexAttrib3fARB"))) |ptr| {
            self.VertexAttrib3fARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib3fvARB, try loader("glVertexAttrib3fvARB"))) |ptr| {
            self.VertexAttrib3fvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib3sARB, try loader("glVertexAttrib3sARB"))) |ptr| {
            self.VertexAttrib3sARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib3svARB, try loader("glVertexAttrib3svARB"))) |ptr| {
            self.VertexAttrib3svARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4NbvARB, try loader("glVertexAttrib4NbvARB"))) |ptr| {
            self.VertexAttrib4NbvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4NivARB, try loader("glVertexAttrib4NivARB"))) |ptr| {
            self.VertexAttrib4NivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4NsvARB, try loader("glVertexAttrib4NsvARB"))) |ptr| {
            self.VertexAttrib4NsvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4NubARB, try loader("glVertexAttrib4NubARB"))) |ptr| {
            self.VertexAttrib4NubARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4NubvARB, try loader("glVertexAttrib4NubvARB"))) |ptr| {
            self.VertexAttrib4NubvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4NuivARB, try loader("glVertexAttrib4NuivARB"))) |ptr| {
            self.VertexAttrib4NuivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4NusvARB, try loader("glVertexAttrib4NusvARB"))) |ptr| {
            self.VertexAttrib4NusvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4bvARB, try loader("glVertexAttrib4bvARB"))) |ptr| {
            self.VertexAttrib4bvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4dARB, try loader("glVertexAttrib4dARB"))) |ptr| {
            self.VertexAttrib4dARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4dvARB, try loader("glVertexAttrib4dvARB"))) |ptr| {
            self.VertexAttrib4dvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4fARB, try loader("glVertexAttrib4fARB"))) |ptr| {
            self.VertexAttrib4fARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4fvARB, try loader("glVertexAttrib4fvARB"))) |ptr| {
            self.VertexAttrib4fvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4ivARB, try loader("glVertexAttrib4ivARB"))) |ptr| {
            self.VertexAttrib4ivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4sARB, try loader("glVertexAttrib4sARB"))) |ptr| {
            self.VertexAttrib4sARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4svARB, try loader("glVertexAttrib4svARB"))) |ptr| {
            self.VertexAttrib4svARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4ubvARB, try loader("glVertexAttrib4ubvARB"))) |ptr| {
            self.VertexAttrib4ubvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4uivARB, try loader("glVertexAttrib4uivARB"))) |ptr| {
            self.VertexAttrib4uivARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttrib4usvARB, try loader("glVertexAttrib4usvARB"))) |ptr| {
            self.VertexAttrib4usvARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttribPointerARB, try loader("glVertexAttribPointerARB"))) |ptr| {
            self.VertexAttribPointerARB = ptr;
        } else {
            self.features.GL_ARB_vertex_shader = false;
        }
        if (@ptrCast(?glVertexAttribP1ui, try loader("glVertexAttribP1ui"))) |ptr| {
            self.VertexAttribP1ui = ptr;
        } else {
            self.features.GL_ARB_vertex_type_2_10_10_10_rev = false;
        }
        if (@ptrCast(?glVertexAttribP1uiv, try loader("glVertexAttribP1uiv"))) |ptr| {
            self.VertexAttribP1uiv = ptr;
        } else {
            self.features.GL_ARB_vertex_type_2_10_10_10_rev = false;
        }
        if (@ptrCast(?glVertexAttribP2ui, try loader("glVertexAttribP2ui"))) |ptr| {
            self.VertexAttribP2ui = ptr;
        } else {
            self.features.GL_ARB_vertex_type_2_10_10_10_rev = false;
        }
        if (@ptrCast(?glVertexAttribP2uiv, try loader("glVertexAttribP2uiv"))) |ptr| {
            self.VertexAttribP2uiv = ptr;
        } else {
            self.features.GL_ARB_vertex_type_2_10_10_10_rev = false;
        }
        if (@ptrCast(?glVertexAttribP3ui, try loader("glVertexAttribP3ui"))) |ptr| {
            self.VertexAttribP3ui = ptr;
        } else {
            self.features.GL_ARB_vertex_type_2_10_10_10_rev = false;
        }
        if (@ptrCast(?glVertexAttribP3uiv, try loader("glVertexAttribP3uiv"))) |ptr| {
            self.VertexAttribP3uiv = ptr;
        } else {
            self.features.GL_ARB_vertex_type_2_10_10_10_rev = false;
        }
        if (@ptrCast(?glVertexAttribP4ui, try loader("glVertexAttribP4ui"))) |ptr| {
            self.VertexAttribP4ui = ptr;
        } else {
            self.features.GL_ARB_vertex_type_2_10_10_10_rev = false;
        }
        if (@ptrCast(?glVertexAttribP4uiv, try loader("glVertexAttribP4uiv"))) |ptr| {
            self.VertexAttribP4uiv = ptr;
        } else {
            self.features.GL_ARB_vertex_type_2_10_10_10_rev = false;
        }
        if (@ptrCast(?glDepthRangeArraydvNV, try loader("glDepthRangeArraydvNV"))) |ptr| {
            self.DepthRangeArraydvNV = ptr;
        } else {
            self.features.GL_ARB_viewport_array = false;
        }
        if (@ptrCast(?glDepthRangeArrayv, try loader("glDepthRangeArrayv"))) |ptr| {
            self.DepthRangeArrayv = ptr;
        } else {
            self.features.GL_ARB_viewport_array = false;
        }
        if (@ptrCast(?glDepthRangeIndexed, try loader("glDepthRangeIndexed"))) |ptr| {
            self.DepthRangeIndexed = ptr;
        } else {
            self.features.GL_ARB_viewport_array = false;
        }
        if (@ptrCast(?glDepthRangeIndexeddNV, try loader("glDepthRangeIndexeddNV"))) |ptr| {
            self.DepthRangeIndexeddNV = ptr;
        } else {
            self.features.GL_ARB_viewport_array = false;
        }
        if (@ptrCast(?glGetDoublei_v, try loader("glGetDoublei_v"))) |ptr| {
            self.GetDoublei_v = ptr;
        } else {
            self.features.GL_ARB_viewport_array = false;
        }
        if (@ptrCast(?glGetFloati_v, try loader("glGetFloati_v"))) |ptr| {
            self.GetFloati_v = ptr;
        } else {
            self.features.GL_ARB_viewport_array = false;
        }
        if (@ptrCast(?glScissorArrayv, try loader("glScissorArrayv"))) |ptr| {
            self.ScissorArrayv = ptr;
        } else {
            self.features.GL_ARB_viewport_array = false;
        }
        if (@ptrCast(?glScissorIndexed, try loader("glScissorIndexed"))) |ptr| {
            self.ScissorIndexed = ptr;
        } else {
            self.features.GL_ARB_viewport_array = false;
        }
        if (@ptrCast(?glScissorIndexedv, try loader("glScissorIndexedv"))) |ptr| {
            self.ScissorIndexedv = ptr;
        } else {
            self.features.GL_ARB_viewport_array = false;
        }
        if (@ptrCast(?glViewportArrayv, try loader("glViewportArrayv"))) |ptr| {
            self.ViewportArrayv = ptr;
        } else {
            self.features.GL_ARB_viewport_array = false;
        }
        if (@ptrCast(?glViewportIndexedf, try loader("glViewportIndexedf"))) |ptr| {
            self.ViewportIndexedf = ptr;
        } else {
            self.features.GL_ARB_viewport_array = false;
        }
        if (@ptrCast(?glViewportIndexedfv, try loader("glViewportIndexedfv"))) |ptr| {
            self.ViewportIndexedfv = ptr;
        } else {
            self.features.GL_ARB_viewport_array = false;
        }
        if (@ptrCast(?glWindowPos2dARB, try loader("glWindowPos2dARB"))) |ptr| {
            self.WindowPos2dARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2dvARB, try loader("glWindowPos2dvARB"))) |ptr| {
            self.WindowPos2dvARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2fARB, try loader("glWindowPos2fARB"))) |ptr| {
            self.WindowPos2fARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2fvARB, try loader("glWindowPos2fvARB"))) |ptr| {
            self.WindowPos2fvARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2iARB, try loader("glWindowPos2iARB"))) |ptr| {
            self.WindowPos2iARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2ivARB, try loader("glWindowPos2ivARB"))) |ptr| {
            self.WindowPos2ivARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2sARB, try loader("glWindowPos2sARB"))) |ptr| {
            self.WindowPos2sARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2svARB, try loader("glWindowPos2svARB"))) |ptr| {
            self.WindowPos2svARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3dARB, try loader("glWindowPos3dARB"))) |ptr| {
            self.WindowPos3dARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3dvARB, try loader("glWindowPos3dvARB"))) |ptr| {
            self.WindowPos3dvARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3fARB, try loader("glWindowPos3fARB"))) |ptr| {
            self.WindowPos3fARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3fvARB, try loader("glWindowPos3fvARB"))) |ptr| {
            self.WindowPos3fvARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3iARB, try loader("glWindowPos3iARB"))) |ptr| {
            self.WindowPos3iARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3ivARB, try loader("glWindowPos3ivARB"))) |ptr| {
            self.WindowPos3ivARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3sARB, try loader("glWindowPos3sARB"))) |ptr| {
            self.WindowPos3sARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3svARB, try loader("glWindowPos3svARB"))) |ptr| {
            self.WindowPos3svARB = ptr;
        } else {
            self.features.GL_ARB_window_pos = false;
        }
        if (@ptrCast(?glDrawBuffersATI, try loader("glDrawBuffersATI"))) |ptr| {
            self.DrawBuffersATI = ptr;
        } else {
            self.features.GL_ATI_draw_buffers = false;
        }
        if (@ptrCast(?glDrawElementArrayATI, try loader("glDrawElementArrayATI"))) |ptr| {
            self.DrawElementArrayATI = ptr;
        } else {
            self.features.GL_ATI_element_array = false;
        }
        if (@ptrCast(?glDrawRangeElementArrayATI, try loader("glDrawRangeElementArrayATI"))) |ptr| {
            self.DrawRangeElementArrayATI = ptr;
        } else {
            self.features.GL_ATI_element_array = false;
        }
        if (@ptrCast(?glElementPointerATI, try loader("glElementPointerATI"))) |ptr| {
            self.ElementPointerATI = ptr;
        } else {
            self.features.GL_ATI_element_array = false;
        }
        if (@ptrCast(?glGetTexBumpParameterfvATI, try loader("glGetTexBumpParameterfvATI"))) |ptr| {
            self.GetTexBumpParameterfvATI = ptr;
        } else {
            self.features.GL_ATI_envmap_bumpmap = false;
        }
        if (@ptrCast(?glGetTexBumpParameterivATI, try loader("glGetTexBumpParameterivATI"))) |ptr| {
            self.GetTexBumpParameterivATI = ptr;
        } else {
            self.features.GL_ATI_envmap_bumpmap = false;
        }
        if (@ptrCast(?glTexBumpParameterfvATI, try loader("glTexBumpParameterfvATI"))) |ptr| {
            self.TexBumpParameterfvATI = ptr;
        } else {
            self.features.GL_ATI_envmap_bumpmap = false;
        }
        if (@ptrCast(?glTexBumpParameterivATI, try loader("glTexBumpParameterivATI"))) |ptr| {
            self.TexBumpParameterivATI = ptr;
        } else {
            self.features.GL_ATI_envmap_bumpmap = false;
        }
        if (@ptrCast(?glAlphaFragmentOp1ATI, try loader("glAlphaFragmentOp1ATI"))) |ptr| {
            self.AlphaFragmentOp1ATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glAlphaFragmentOp2ATI, try loader("glAlphaFragmentOp2ATI"))) |ptr| {
            self.AlphaFragmentOp2ATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glAlphaFragmentOp3ATI, try loader("glAlphaFragmentOp3ATI"))) |ptr| {
            self.AlphaFragmentOp3ATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glBeginFragmentShaderATI, try loader("glBeginFragmentShaderATI"))) |ptr| {
            self.BeginFragmentShaderATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glBindFragmentShaderATI, try loader("glBindFragmentShaderATI"))) |ptr| {
            self.BindFragmentShaderATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glColorFragmentOp1ATI, try loader("glColorFragmentOp1ATI"))) |ptr| {
            self.ColorFragmentOp1ATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glColorFragmentOp2ATI, try loader("glColorFragmentOp2ATI"))) |ptr| {
            self.ColorFragmentOp2ATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glColorFragmentOp3ATI, try loader("glColorFragmentOp3ATI"))) |ptr| {
            self.ColorFragmentOp3ATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glDeleteFragmentShaderATI, try loader("glDeleteFragmentShaderATI"))) |ptr| {
            self.DeleteFragmentShaderATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glEndFragmentShaderATI, try loader("glEndFragmentShaderATI"))) |ptr| {
            self.EndFragmentShaderATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glGenFragmentShadersATI, try loader("glGenFragmentShadersATI"))) |ptr| {
            self.GenFragmentShadersATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glPassTexCoordATI, try loader("glPassTexCoordATI"))) |ptr| {
            self.PassTexCoordATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glSampleMapATI, try loader("glSampleMapATI"))) |ptr| {
            self.SampleMapATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glSetFragmentShaderConstantATI, try loader("glSetFragmentShaderConstantATI"))) |ptr| {
            self.SetFragmentShaderConstantATI = ptr;
        } else {
            self.features.GL_ATI_fragment_shader = false;
        }
        if (@ptrCast(?glMapObjectBufferATI, try loader("glMapObjectBufferATI"))) |ptr| {
            self.MapObjectBufferATI = ptr;
        } else {
            self.features.GL_ATI_map_object_buffer = false;
        }
        if (@ptrCast(?glUnmapObjectBufferATI, try loader("glUnmapObjectBufferATI"))) |ptr| {
            self.UnmapObjectBufferATI = ptr;
        } else {
            self.features.GL_ATI_map_object_buffer = false;
        }
        if (@ptrCast(?glPNTrianglesfATI, try loader("glPNTrianglesfATI"))) |ptr| {
            self.PNTrianglesfATI = ptr;
        } else {
            self.features.GL_ATI_pn_triangles = false;
        }
        if (@ptrCast(?glPNTrianglesiATI, try loader("glPNTrianglesiATI"))) |ptr| {
            self.PNTrianglesiATI = ptr;
        } else {
            self.features.GL_ATI_pn_triangles = false;
        }
        if (@ptrCast(?glStencilFuncSeparateATI, try loader("glStencilFuncSeparateATI"))) |ptr| {
            self.StencilFuncSeparateATI = ptr;
        } else {
            self.features.GL_ATI_separate_stencil = false;
        }
        if (@ptrCast(?glStencilOpSeparateATI, try loader("glStencilOpSeparateATI"))) |ptr| {
            self.StencilOpSeparateATI = ptr;
        } else {
            self.features.GL_ATI_separate_stencil = false;
        }
        if (@ptrCast(?glArrayObjectATI, try loader("glArrayObjectATI"))) |ptr| {
            self.ArrayObjectATI = ptr;
        } else {
            self.features.GL_ATI_vertex_array_object = false;
        }
        if (@ptrCast(?glFreeObjectBufferATI, try loader("glFreeObjectBufferATI"))) |ptr| {
            self.FreeObjectBufferATI = ptr;
        } else {
            self.features.GL_ATI_vertex_array_object = false;
        }
        if (@ptrCast(?glGetArrayObjectfvATI, try loader("glGetArrayObjectfvATI"))) |ptr| {
            self.GetArrayObjectfvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_array_object = false;
        }
        if (@ptrCast(?glGetArrayObjectivATI, try loader("glGetArrayObjectivATI"))) |ptr| {
            self.GetArrayObjectivATI = ptr;
        } else {
            self.features.GL_ATI_vertex_array_object = false;
        }
        if (@ptrCast(?glGetObjectBufferfvATI, try loader("glGetObjectBufferfvATI"))) |ptr| {
            self.GetObjectBufferfvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_array_object = false;
        }
        if (@ptrCast(?glGetObjectBufferivATI, try loader("glGetObjectBufferivATI"))) |ptr| {
            self.GetObjectBufferivATI = ptr;
        } else {
            self.features.GL_ATI_vertex_array_object = false;
        }
        if (@ptrCast(?glGetVariantArrayObjectfvATI, try loader("glGetVariantArrayObjectfvATI"))) |ptr| {
            self.GetVariantArrayObjectfvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_array_object = false;
        }
        if (@ptrCast(?glGetVariantArrayObjectivATI, try loader("glGetVariantArrayObjectivATI"))) |ptr| {
            self.GetVariantArrayObjectivATI = ptr;
        } else {
            self.features.GL_ATI_vertex_array_object = false;
        }
        if (@ptrCast(?glIsObjectBufferATI, try loader("glIsObjectBufferATI"))) |ptr| {
            self.IsObjectBufferATI = ptr;
        } else {
            self.features.GL_ATI_vertex_array_object = false;
        }
        if (@ptrCast(?glNewObjectBufferATI, try loader("glNewObjectBufferATI"))) |ptr| {
            self.NewObjectBufferATI = ptr;
        } else {
            self.features.GL_ATI_vertex_array_object = false;
        }
        if (@ptrCast(?glUpdateObjectBufferATI, try loader("glUpdateObjectBufferATI"))) |ptr| {
            self.UpdateObjectBufferATI = ptr;
        } else {
            self.features.GL_ATI_vertex_array_object = false;
        }
        if (@ptrCast(?glVariantArrayObjectATI, try loader("glVariantArrayObjectATI"))) |ptr| {
            self.VariantArrayObjectATI = ptr;
        } else {
            self.features.GL_ATI_vertex_array_object = false;
        }
        if (@ptrCast(?glGetVertexAttribArrayObjectfvATI, try loader("glGetVertexAttribArrayObjectfvATI"))) |ptr| {
            self.GetVertexAttribArrayObjectfvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_attrib_array_object = false;
        }
        if (@ptrCast(?glGetVertexAttribArrayObjectivATI, try loader("glGetVertexAttribArrayObjectivATI"))) |ptr| {
            self.GetVertexAttribArrayObjectivATI = ptr;
        } else {
            self.features.GL_ATI_vertex_attrib_array_object = false;
        }
        if (@ptrCast(?glVertexAttribArrayObjectATI, try loader("glVertexAttribArrayObjectATI"))) |ptr| {
            self.VertexAttribArrayObjectATI = ptr;
        } else {
            self.features.GL_ATI_vertex_attrib_array_object = false;
        }
        if (@ptrCast(?glClientActiveVertexStreamATI, try loader("glClientActiveVertexStreamATI"))) |ptr| {
            self.ClientActiveVertexStreamATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glNormalStream3bATI, try loader("glNormalStream3bATI"))) |ptr| {
            self.NormalStream3bATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glNormalStream3bvATI, try loader("glNormalStream3bvATI"))) |ptr| {
            self.NormalStream3bvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glNormalStream3dATI, try loader("glNormalStream3dATI"))) |ptr| {
            self.NormalStream3dATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glNormalStream3dvATI, try loader("glNormalStream3dvATI"))) |ptr| {
            self.NormalStream3dvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glNormalStream3fATI, try loader("glNormalStream3fATI"))) |ptr| {
            self.NormalStream3fATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glNormalStream3fvATI, try loader("glNormalStream3fvATI"))) |ptr| {
            self.NormalStream3fvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glNormalStream3iATI, try loader("glNormalStream3iATI"))) |ptr| {
            self.NormalStream3iATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glNormalStream3ivATI, try loader("glNormalStream3ivATI"))) |ptr| {
            self.NormalStream3ivATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glNormalStream3sATI, try loader("glNormalStream3sATI"))) |ptr| {
            self.NormalStream3sATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glNormalStream3svATI, try loader("glNormalStream3svATI"))) |ptr| {
            self.NormalStream3svATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexBlendEnvfATI, try loader("glVertexBlendEnvfATI"))) |ptr| {
            self.VertexBlendEnvfATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexBlendEnviATI, try loader("glVertexBlendEnviATI"))) |ptr| {
            self.VertexBlendEnviATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream1dATI, try loader("glVertexStream1dATI"))) |ptr| {
            self.VertexStream1dATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream1dvATI, try loader("glVertexStream1dvATI"))) |ptr| {
            self.VertexStream1dvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream1fATI, try loader("glVertexStream1fATI"))) |ptr| {
            self.VertexStream1fATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream1fvATI, try loader("glVertexStream1fvATI"))) |ptr| {
            self.VertexStream1fvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream1iATI, try loader("glVertexStream1iATI"))) |ptr| {
            self.VertexStream1iATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream1ivATI, try loader("glVertexStream1ivATI"))) |ptr| {
            self.VertexStream1ivATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream1sATI, try loader("glVertexStream1sATI"))) |ptr| {
            self.VertexStream1sATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream1svATI, try loader("glVertexStream1svATI"))) |ptr| {
            self.VertexStream1svATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream2dATI, try loader("glVertexStream2dATI"))) |ptr| {
            self.VertexStream2dATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream2dvATI, try loader("glVertexStream2dvATI"))) |ptr| {
            self.VertexStream2dvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream2fATI, try loader("glVertexStream2fATI"))) |ptr| {
            self.VertexStream2fATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream2fvATI, try loader("glVertexStream2fvATI"))) |ptr| {
            self.VertexStream2fvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream2iATI, try loader("glVertexStream2iATI"))) |ptr| {
            self.VertexStream2iATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream2ivATI, try loader("glVertexStream2ivATI"))) |ptr| {
            self.VertexStream2ivATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream2sATI, try loader("glVertexStream2sATI"))) |ptr| {
            self.VertexStream2sATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream2svATI, try loader("glVertexStream2svATI"))) |ptr| {
            self.VertexStream2svATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream3dATI, try loader("glVertexStream3dATI"))) |ptr| {
            self.VertexStream3dATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream3dvATI, try loader("glVertexStream3dvATI"))) |ptr| {
            self.VertexStream3dvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream3fATI, try loader("glVertexStream3fATI"))) |ptr| {
            self.VertexStream3fATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream3fvATI, try loader("glVertexStream3fvATI"))) |ptr| {
            self.VertexStream3fvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream3iATI, try loader("glVertexStream3iATI"))) |ptr| {
            self.VertexStream3iATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream3ivATI, try loader("glVertexStream3ivATI"))) |ptr| {
            self.VertexStream3ivATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream3sATI, try loader("glVertexStream3sATI"))) |ptr| {
            self.VertexStream3sATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream3svATI, try loader("glVertexStream3svATI"))) |ptr| {
            self.VertexStream3svATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream4dATI, try loader("glVertexStream4dATI"))) |ptr| {
            self.VertexStream4dATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream4dvATI, try loader("glVertexStream4dvATI"))) |ptr| {
            self.VertexStream4dvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream4fATI, try loader("glVertexStream4fATI"))) |ptr| {
            self.VertexStream4fATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream4fvATI, try loader("glVertexStream4fvATI"))) |ptr| {
            self.VertexStream4fvATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream4iATI, try loader("glVertexStream4iATI"))) |ptr| {
            self.VertexStream4iATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream4ivATI, try loader("glVertexStream4ivATI"))) |ptr| {
            self.VertexStream4ivATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream4sATI, try loader("glVertexStream4sATI"))) |ptr| {
            self.VertexStream4sATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glVertexStream4svATI, try loader("glVertexStream4svATI"))) |ptr| {
            self.VertexStream4svATI = ptr;
        } else {
            self.features.GL_ATI_vertex_streams = false;
        }
        if (@ptrCast(?glEGLImageTargetTexStorageEXT, try loader("glEGLImageTargetTexStorageEXT"))) |ptr| {
            self.EGLImageTargetTexStorageEXT = ptr;
        } else {
            self.features.GL_EXT_EGL_image_storage = false;
        }
        if (@ptrCast(?glEGLImageTargetTextureStorageEXT, try loader("glEGLImageTargetTextureStorageEXT"))) |ptr| {
            self.EGLImageTargetTextureStorageEXT = ptr;
        } else {
            self.features.GL_EXT_EGL_image_storage = false;
        }
        if (@ptrCast(?glGetUniformBufferSizeEXT, try loader("glGetUniformBufferSizeEXT"))) |ptr| {
            self.GetUniformBufferSizeEXT = ptr;
        } else {
            self.features.GL_EXT_bindable_uniform = false;
        }
        if (@ptrCast(?glGetUniformOffsetEXT, try loader("glGetUniformOffsetEXT"))) |ptr| {
            self.GetUniformOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_bindable_uniform = false;
        }
        if (@ptrCast(?glUniformBufferEXT, try loader("glUniformBufferEXT"))) |ptr| {
            self.UniformBufferEXT = ptr;
        } else {
            self.features.GL_EXT_bindable_uniform = false;
        }
        if (@ptrCast(?glBlendColorEXT, try loader("glBlendColorEXT"))) |ptr| {
            self.BlendColorEXT = ptr;
        } else {
            self.features.GL_EXT_blend_color = false;
        }
        if (@ptrCast(?glBlendEquationSeparateEXT, try loader("glBlendEquationSeparateEXT"))) |ptr| {
            self.BlendEquationSeparateEXT = ptr;
        } else {
            self.features.GL_EXT_blend_equation_separate = false;
        }
        if (@ptrCast(?glBlendFuncSeparateEXT, try loader("glBlendFuncSeparateEXT"))) |ptr| {
            self.BlendFuncSeparateEXT = ptr;
        } else {
            self.features.GL_EXT_blend_func_separate = false;
        }
        if (@ptrCast(?glBlendEquationEXT, try loader("glBlendEquationEXT"))) |ptr| {
            self.BlendEquationEXT = ptr;
        } else {
            self.features.GL_EXT_blend_minmax = false;
        }
        if (@ptrCast(?glColorSubTableEXT, try loader("glColorSubTableEXT"))) |ptr| {
            self.ColorSubTableEXT = ptr;
        } else {
            self.features.GL_EXT_color_subtable = false;
        }
        if (@ptrCast(?glCopyColorSubTableEXT, try loader("glCopyColorSubTableEXT"))) |ptr| {
            self.CopyColorSubTableEXT = ptr;
        } else {
            self.features.GL_EXT_color_subtable = false;
        }
        if (@ptrCast(?glLockArraysEXT, try loader("glLockArraysEXT"))) |ptr| {
            self.LockArraysEXT = ptr;
        } else {
            self.features.GL_EXT_compiled_vertex_array = false;
        }
        if (@ptrCast(?glUnlockArraysEXT, try loader("glUnlockArraysEXT"))) |ptr| {
            self.UnlockArraysEXT = ptr;
        } else {
            self.features.GL_EXT_compiled_vertex_array = false;
        }
        if (@ptrCast(?glConvolutionFilter1DEXT, try loader("glConvolutionFilter1DEXT"))) |ptr| {
            self.ConvolutionFilter1DEXT = ptr;
        } else {
            self.features.GL_EXT_convolution = false;
        }
        if (@ptrCast(?glConvolutionFilter2DEXT, try loader("glConvolutionFilter2DEXT"))) |ptr| {
            self.ConvolutionFilter2DEXT = ptr;
        } else {
            self.features.GL_EXT_convolution = false;
        }
        if (@ptrCast(?glConvolutionParameterfEXT, try loader("glConvolutionParameterfEXT"))) |ptr| {
            self.ConvolutionParameterfEXT = ptr;
        } else {
            self.features.GL_EXT_convolution = false;
        }
        if (@ptrCast(?glConvolutionParameterfvEXT, try loader("glConvolutionParameterfvEXT"))) |ptr| {
            self.ConvolutionParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_convolution = false;
        }
        if (@ptrCast(?glConvolutionParameteriEXT, try loader("glConvolutionParameteriEXT"))) |ptr| {
            self.ConvolutionParameteriEXT = ptr;
        } else {
            self.features.GL_EXT_convolution = false;
        }
        if (@ptrCast(?glConvolutionParameterivEXT, try loader("glConvolutionParameterivEXT"))) |ptr| {
            self.ConvolutionParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_convolution = false;
        }
        if (@ptrCast(?glCopyConvolutionFilter1DEXT, try loader("glCopyConvolutionFilter1DEXT"))) |ptr| {
            self.CopyConvolutionFilter1DEXT = ptr;
        } else {
            self.features.GL_EXT_convolution = false;
        }
        if (@ptrCast(?glCopyConvolutionFilter2DEXT, try loader("glCopyConvolutionFilter2DEXT"))) |ptr| {
            self.CopyConvolutionFilter2DEXT = ptr;
        } else {
            self.features.GL_EXT_convolution = false;
        }
        if (@ptrCast(?glGetConvolutionFilterEXT, try loader("glGetConvolutionFilterEXT"))) |ptr| {
            self.GetConvolutionFilterEXT = ptr;
        } else {
            self.features.GL_EXT_convolution = false;
        }
        if (@ptrCast(?glGetConvolutionParameterfvEXT, try loader("glGetConvolutionParameterfvEXT"))) |ptr| {
            self.GetConvolutionParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_convolution = false;
        }
        if (@ptrCast(?glGetConvolutionParameterivEXT, try loader("glGetConvolutionParameterivEXT"))) |ptr| {
            self.GetConvolutionParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_convolution = false;
        }
        if (@ptrCast(?glGetSeparableFilterEXT, try loader("glGetSeparableFilterEXT"))) |ptr| {
            self.GetSeparableFilterEXT = ptr;
        } else {
            self.features.GL_EXT_convolution = false;
        }
        if (@ptrCast(?glSeparableFilter2DEXT, try loader("glSeparableFilter2DEXT"))) |ptr| {
            self.SeparableFilter2DEXT = ptr;
        } else {
            self.features.GL_EXT_convolution = false;
        }
        if (@ptrCast(?glBinormal3bEXT, try loader("glBinormal3bEXT"))) |ptr| {
            self.Binormal3bEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glBinormal3bvEXT, try loader("glBinormal3bvEXT"))) |ptr| {
            self.Binormal3bvEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glBinormal3dEXT, try loader("glBinormal3dEXT"))) |ptr| {
            self.Binormal3dEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glBinormal3dvEXT, try loader("glBinormal3dvEXT"))) |ptr| {
            self.Binormal3dvEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glBinormal3fEXT, try loader("glBinormal3fEXT"))) |ptr| {
            self.Binormal3fEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glBinormal3fvEXT, try loader("glBinormal3fvEXT"))) |ptr| {
            self.Binormal3fvEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glBinormal3iEXT, try loader("glBinormal3iEXT"))) |ptr| {
            self.Binormal3iEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glBinormal3ivEXT, try loader("glBinormal3ivEXT"))) |ptr| {
            self.Binormal3ivEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glBinormal3sEXT, try loader("glBinormal3sEXT"))) |ptr| {
            self.Binormal3sEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glBinormal3svEXT, try loader("glBinormal3svEXT"))) |ptr| {
            self.Binormal3svEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glBinormalPointerEXT, try loader("glBinormalPointerEXT"))) |ptr| {
            self.BinormalPointerEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glTangent3bEXT, try loader("glTangent3bEXT"))) |ptr| {
            self.Tangent3bEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glTangent3bvEXT, try loader("glTangent3bvEXT"))) |ptr| {
            self.Tangent3bvEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glTangent3dEXT, try loader("glTangent3dEXT"))) |ptr| {
            self.Tangent3dEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glTangent3dvEXT, try loader("glTangent3dvEXT"))) |ptr| {
            self.Tangent3dvEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glTangent3fEXT, try loader("glTangent3fEXT"))) |ptr| {
            self.Tangent3fEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glTangent3fvEXT, try loader("glTangent3fvEXT"))) |ptr| {
            self.Tangent3fvEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glTangent3iEXT, try loader("glTangent3iEXT"))) |ptr| {
            self.Tangent3iEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glTangent3ivEXT, try loader("glTangent3ivEXT"))) |ptr| {
            self.Tangent3ivEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glTangent3sEXT, try loader("glTangent3sEXT"))) |ptr| {
            self.Tangent3sEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glTangent3svEXT, try loader("glTangent3svEXT"))) |ptr| {
            self.Tangent3svEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glTangentPointerEXT, try loader("glTangentPointerEXT"))) |ptr| {
            self.TangentPointerEXT = ptr;
        } else {
            self.features.GL_EXT_coordinate_frame = false;
        }
        if (@ptrCast(?glCopyTexImage1DEXT, try loader("glCopyTexImage1DEXT"))) |ptr| {
            self.CopyTexImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_copy_texture = false;
        }
        if (@ptrCast(?glCopyTexImage2DEXT, try loader("glCopyTexImage2DEXT"))) |ptr| {
            self.CopyTexImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_copy_texture = false;
        }
        if (@ptrCast(?glCopyTexSubImage1DEXT, try loader("glCopyTexSubImage1DEXT"))) |ptr| {
            self.CopyTexSubImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_copy_texture = false;
        }
        if (@ptrCast(?glCopyTexSubImage2DEXT, try loader("glCopyTexSubImage2DEXT"))) |ptr| {
            self.CopyTexSubImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_copy_texture = false;
        }
        if (@ptrCast(?glCopyTexSubImage3DEXT, try loader("glCopyTexSubImage3DEXT"))) |ptr| {
            self.CopyTexSubImage3DEXT = ptr;
        } else {
            self.features.GL_EXT_copy_texture = false;
        }
        if (@ptrCast(?glCullParameterdvEXT, try loader("glCullParameterdvEXT"))) |ptr| {
            self.CullParameterdvEXT = ptr;
        } else {
            self.features.GL_EXT_cull_vertex = false;
        }
        if (@ptrCast(?glCullParameterfvEXT, try loader("glCullParameterfvEXT"))) |ptr| {
            self.CullParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_cull_vertex = false;
        }
        if (@ptrCast(?glGetObjectLabelEXT, try loader("glGetObjectLabelEXT"))) |ptr| {
            self.GetObjectLabelEXT = ptr;
        } else {
            self.features.GL_EXT_debug_label = false;
        }
        if (@ptrCast(?glLabelObjectEXT, try loader("glLabelObjectEXT"))) |ptr| {
            self.LabelObjectEXT = ptr;
        } else {
            self.features.GL_EXT_debug_label = false;
        }
        if (@ptrCast(?glInsertEventMarkerEXT, try loader("glInsertEventMarkerEXT"))) |ptr| {
            self.InsertEventMarkerEXT = ptr;
        } else {
            self.features.GL_EXT_debug_marker = false;
        }
        if (@ptrCast(?glPopGroupMarkerEXT, try loader("glPopGroupMarkerEXT"))) |ptr| {
            self.PopGroupMarkerEXT = ptr;
        } else {
            self.features.GL_EXT_debug_marker = false;
        }
        if (@ptrCast(?glPushGroupMarkerEXT, try loader("glPushGroupMarkerEXT"))) |ptr| {
            self.PushGroupMarkerEXT = ptr;
        } else {
            self.features.GL_EXT_debug_marker = false;
        }
        if (@ptrCast(?glDepthBoundsEXT, try loader("glDepthBoundsEXT"))) |ptr| {
            self.DepthBoundsEXT = ptr;
        } else {
            self.features.GL_EXT_depth_bounds_test = false;
        }
        if (@ptrCast(?glBindMultiTextureEXT, try loader("glBindMultiTextureEXT"))) |ptr| {
            self.BindMultiTextureEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCheckNamedFramebufferStatusEXT, try loader("glCheckNamedFramebufferStatusEXT"))) |ptr| {
            self.CheckNamedFramebufferStatusEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glClearNamedBufferDataEXT, try loader("glClearNamedBufferDataEXT"))) |ptr| {
            self.ClearNamedBufferDataEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glClearNamedBufferSubDataEXT, try loader("glClearNamedBufferSubDataEXT"))) |ptr| {
            self.ClearNamedBufferSubDataEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glClientAttribDefaultEXT, try loader("glClientAttribDefaultEXT"))) |ptr| {
            self.ClientAttribDefaultEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedMultiTexImage1DEXT, try loader("glCompressedMultiTexImage1DEXT"))) |ptr| {
            self.CompressedMultiTexImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedMultiTexImage2DEXT, try loader("glCompressedMultiTexImage2DEXT"))) |ptr| {
            self.CompressedMultiTexImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedMultiTexImage3DEXT, try loader("glCompressedMultiTexImage3DEXT"))) |ptr| {
            self.CompressedMultiTexImage3DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedMultiTexSubImage1DEXT, try loader("glCompressedMultiTexSubImage1DEXT"))) |ptr| {
            self.CompressedMultiTexSubImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedMultiTexSubImage2DEXT, try loader("glCompressedMultiTexSubImage2DEXT"))) |ptr| {
            self.CompressedMultiTexSubImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedMultiTexSubImage3DEXT, try loader("glCompressedMultiTexSubImage3DEXT"))) |ptr| {
            self.CompressedMultiTexSubImage3DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedTextureImage1DEXT, try loader("glCompressedTextureImage1DEXT"))) |ptr| {
            self.CompressedTextureImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedTextureImage2DEXT, try loader("glCompressedTextureImage2DEXT"))) |ptr| {
            self.CompressedTextureImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedTextureImage3DEXT, try loader("glCompressedTextureImage3DEXT"))) |ptr| {
            self.CompressedTextureImage3DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedTextureSubImage1DEXT, try loader("glCompressedTextureSubImage1DEXT"))) |ptr| {
            self.CompressedTextureSubImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedTextureSubImage2DEXT, try loader("glCompressedTextureSubImage2DEXT"))) |ptr| {
            self.CompressedTextureSubImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCompressedTextureSubImage3DEXT, try loader("glCompressedTextureSubImage3DEXT"))) |ptr| {
            self.CompressedTextureSubImage3DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCopyMultiTexImage1DEXT, try loader("glCopyMultiTexImage1DEXT"))) |ptr| {
            self.CopyMultiTexImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCopyMultiTexImage2DEXT, try loader("glCopyMultiTexImage2DEXT"))) |ptr| {
            self.CopyMultiTexImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCopyMultiTexSubImage1DEXT, try loader("glCopyMultiTexSubImage1DEXT"))) |ptr| {
            self.CopyMultiTexSubImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCopyMultiTexSubImage2DEXT, try loader("glCopyMultiTexSubImage2DEXT"))) |ptr| {
            self.CopyMultiTexSubImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCopyMultiTexSubImage3DEXT, try loader("glCopyMultiTexSubImage3DEXT"))) |ptr| {
            self.CopyMultiTexSubImage3DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCopyTextureImage1DEXT, try loader("glCopyTextureImage1DEXT"))) |ptr| {
            self.CopyTextureImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCopyTextureImage2DEXT, try loader("glCopyTextureImage2DEXT"))) |ptr| {
            self.CopyTextureImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCopyTextureSubImage1DEXT, try loader("glCopyTextureSubImage1DEXT"))) |ptr| {
            self.CopyTextureSubImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCopyTextureSubImage2DEXT, try loader("glCopyTextureSubImage2DEXT"))) |ptr| {
            self.CopyTextureSubImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glCopyTextureSubImage3DEXT, try loader("glCopyTextureSubImage3DEXT"))) |ptr| {
            self.CopyTextureSubImage3DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glDisableClientStateIndexedEXT, try loader("glDisableClientStateIndexedEXT"))) |ptr| {
            self.DisableClientStateIndexedEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glDisableClientStateiEXT, try loader("glDisableClientStateiEXT"))) |ptr| {
            self.DisableClientStateiEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glDisableIndexedEXT, try loader("glDisableIndexedEXT"))) |ptr| {
            self.DisableIndexedEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glDisableVertexArrayAttribEXT, try loader("glDisableVertexArrayAttribEXT"))) |ptr| {
            self.DisableVertexArrayAttribEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glDisableVertexArrayEXT, try loader("glDisableVertexArrayEXT"))) |ptr| {
            self.DisableVertexArrayEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glEnableClientStateIndexedEXT, try loader("glEnableClientStateIndexedEXT"))) |ptr| {
            self.EnableClientStateIndexedEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glEnableClientStateiEXT, try loader("glEnableClientStateiEXT"))) |ptr| {
            self.EnableClientStateiEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glEnableIndexedEXT, try loader("glEnableIndexedEXT"))) |ptr| {
            self.EnableIndexedEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glEnableVertexArrayAttribEXT, try loader("glEnableVertexArrayAttribEXT"))) |ptr| {
            self.EnableVertexArrayAttribEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glEnableVertexArrayEXT, try loader("glEnableVertexArrayEXT"))) |ptr| {
            self.EnableVertexArrayEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glFlushMappedNamedBufferRangeEXT, try loader("glFlushMappedNamedBufferRangeEXT"))) |ptr| {
            self.FlushMappedNamedBufferRangeEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glFramebufferDrawBufferEXT, try loader("glFramebufferDrawBufferEXT"))) |ptr| {
            self.FramebufferDrawBufferEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glFramebufferDrawBuffersEXT, try loader("glFramebufferDrawBuffersEXT"))) |ptr| {
            self.FramebufferDrawBuffersEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glFramebufferReadBufferEXT, try loader("glFramebufferReadBufferEXT"))) |ptr| {
            self.FramebufferReadBufferEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGenerateMultiTexMipmapEXT, try loader("glGenerateMultiTexMipmapEXT"))) |ptr| {
            self.GenerateMultiTexMipmapEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGenerateTextureMipmapEXT, try loader("glGenerateTextureMipmapEXT"))) |ptr| {
            self.GenerateTextureMipmapEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetBooleanIndexedvEXT, try loader("glGetBooleanIndexedvEXT"))) |ptr| {
            self.GetBooleanIndexedvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetCompressedMultiTexImageEXT, try loader("glGetCompressedMultiTexImageEXT"))) |ptr| {
            self.GetCompressedMultiTexImageEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetCompressedTextureImageEXT, try loader("glGetCompressedTextureImageEXT"))) |ptr| {
            self.GetCompressedTextureImageEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetDoubleIndexedvEXT, try loader("glGetDoubleIndexedvEXT"))) |ptr| {
            self.GetDoubleIndexedvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetDoublei_vEXT, try loader("glGetDoublei_vEXT"))) |ptr| {
            self.GetDoublei_vEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetFloatIndexedvEXT, try loader("glGetFloatIndexedvEXT"))) |ptr| {
            self.GetFloatIndexedvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetFloati_vEXT, try loader("glGetFloati_vEXT"))) |ptr| {
            self.GetFloati_vEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetFramebufferParameterivEXT, try loader("glGetFramebufferParameterivEXT"))) |ptr| {
            self.GetFramebufferParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetIntegerIndexedvEXT, try loader("glGetIntegerIndexedvEXT"))) |ptr| {
            self.GetIntegerIndexedvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetMultiTexEnvfvEXT, try loader("glGetMultiTexEnvfvEXT"))) |ptr| {
            self.GetMultiTexEnvfvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetMultiTexEnvivEXT, try loader("glGetMultiTexEnvivEXT"))) |ptr| {
            self.GetMultiTexEnvivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetMultiTexGendvEXT, try loader("glGetMultiTexGendvEXT"))) |ptr| {
            self.GetMultiTexGendvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetMultiTexGenfvEXT, try loader("glGetMultiTexGenfvEXT"))) |ptr| {
            self.GetMultiTexGenfvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetMultiTexGenivEXT, try loader("glGetMultiTexGenivEXT"))) |ptr| {
            self.GetMultiTexGenivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetMultiTexImageEXT, try loader("glGetMultiTexImageEXT"))) |ptr| {
            self.GetMultiTexImageEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetMultiTexLevelParameterfvEXT, try loader("glGetMultiTexLevelParameterfvEXT"))) |ptr| {
            self.GetMultiTexLevelParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetMultiTexLevelParameterivEXT, try loader("glGetMultiTexLevelParameterivEXT"))) |ptr| {
            self.GetMultiTexLevelParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetMultiTexParameterIivEXT, try loader("glGetMultiTexParameterIivEXT"))) |ptr| {
            self.GetMultiTexParameterIivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetMultiTexParameterIuivEXT, try loader("glGetMultiTexParameterIuivEXT"))) |ptr| {
            self.GetMultiTexParameterIuivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetMultiTexParameterfvEXT, try loader("glGetMultiTexParameterfvEXT"))) |ptr| {
            self.GetMultiTexParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetMultiTexParameterivEXT, try loader("glGetMultiTexParameterivEXT"))) |ptr| {
            self.GetMultiTexParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedBufferParameterivEXT, try loader("glGetNamedBufferParameterivEXT"))) |ptr| {
            self.GetNamedBufferParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedBufferPointervEXT, try loader("glGetNamedBufferPointervEXT"))) |ptr| {
            self.GetNamedBufferPointervEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedBufferSubDataEXT, try loader("glGetNamedBufferSubDataEXT"))) |ptr| {
            self.GetNamedBufferSubDataEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedFramebufferAttachmentParameterivEXT, try loader("glGetNamedFramebufferAttachmentParameterivEXT"))) |ptr| {
            self.GetNamedFramebufferAttachmentParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedFramebufferParameterivEXT, try loader("glGetNamedFramebufferParameterivEXT"))) |ptr| {
            self.GetNamedFramebufferParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedProgramLocalParameterIivEXT, try loader("glGetNamedProgramLocalParameterIivEXT"))) |ptr| {
            self.GetNamedProgramLocalParameterIivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedProgramLocalParameterIuivEXT, try loader("glGetNamedProgramLocalParameterIuivEXT"))) |ptr| {
            self.GetNamedProgramLocalParameterIuivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedProgramLocalParameterdvEXT, try loader("glGetNamedProgramLocalParameterdvEXT"))) |ptr| {
            self.GetNamedProgramLocalParameterdvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedProgramLocalParameterfvEXT, try loader("glGetNamedProgramLocalParameterfvEXT"))) |ptr| {
            self.GetNamedProgramLocalParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedProgramStringEXT, try loader("glGetNamedProgramStringEXT"))) |ptr| {
            self.GetNamedProgramStringEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedProgramivEXT, try loader("glGetNamedProgramivEXT"))) |ptr| {
            self.GetNamedProgramivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetNamedRenderbufferParameterivEXT, try loader("glGetNamedRenderbufferParameterivEXT"))) |ptr| {
            self.GetNamedRenderbufferParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetPointerIndexedvEXT, try loader("glGetPointerIndexedvEXT"))) |ptr| {
            self.GetPointerIndexedvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetPointeri_vEXT, try loader("glGetPointeri_vEXT"))) |ptr| {
            self.GetPointeri_vEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureImageEXT, try loader("glGetTextureImageEXT"))) |ptr| {
            self.GetTextureImageEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureLevelParameterfvEXT, try loader("glGetTextureLevelParameterfvEXT"))) |ptr| {
            self.GetTextureLevelParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureLevelParameterivEXT, try loader("glGetTextureLevelParameterivEXT"))) |ptr| {
            self.GetTextureLevelParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureParameterIivEXT, try loader("glGetTextureParameterIivEXT"))) |ptr| {
            self.GetTextureParameterIivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureParameterIuivEXT, try loader("glGetTextureParameterIuivEXT"))) |ptr| {
            self.GetTextureParameterIuivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureParameterfvEXT, try loader("glGetTextureParameterfvEXT"))) |ptr| {
            self.GetTextureParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetTextureParameterivEXT, try loader("glGetTextureParameterivEXT"))) |ptr| {
            self.GetTextureParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetVertexArrayIntegeri_vEXT, try loader("glGetVertexArrayIntegeri_vEXT"))) |ptr| {
            self.GetVertexArrayIntegeri_vEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetVertexArrayIntegervEXT, try loader("glGetVertexArrayIntegervEXT"))) |ptr| {
            self.GetVertexArrayIntegervEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetVertexArrayPointeri_vEXT, try loader("glGetVertexArrayPointeri_vEXT"))) |ptr| {
            self.GetVertexArrayPointeri_vEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glGetVertexArrayPointervEXT, try loader("glGetVertexArrayPointervEXT"))) |ptr| {
            self.GetVertexArrayPointervEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glIsEnabledIndexedEXT, try loader("glIsEnabledIndexedEXT"))) |ptr| {
            self.IsEnabledIndexedEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMapNamedBufferEXT, try loader("glMapNamedBufferEXT"))) |ptr| {
            self.MapNamedBufferEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMapNamedBufferRangeEXT, try loader("glMapNamedBufferRangeEXT"))) |ptr| {
            self.MapNamedBufferRangeEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixFrustumEXT, try loader("glMatrixFrustumEXT"))) |ptr| {
            self.MatrixFrustumEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixLoadIdentityEXT, try loader("glMatrixLoadIdentityEXT"))) |ptr| {
            self.MatrixLoadIdentityEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixLoadTransposedEXT, try loader("glMatrixLoadTransposedEXT"))) |ptr| {
            self.MatrixLoadTransposedEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixLoadTransposefEXT, try loader("glMatrixLoadTransposefEXT"))) |ptr| {
            self.MatrixLoadTransposefEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixLoaddEXT, try loader("glMatrixLoaddEXT"))) |ptr| {
            self.MatrixLoaddEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixLoadfEXT, try loader("glMatrixLoadfEXT"))) |ptr| {
            self.MatrixLoadfEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixMultTransposedEXT, try loader("glMatrixMultTransposedEXT"))) |ptr| {
            self.MatrixMultTransposedEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixMultTransposefEXT, try loader("glMatrixMultTransposefEXT"))) |ptr| {
            self.MatrixMultTransposefEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixMultdEXT, try loader("glMatrixMultdEXT"))) |ptr| {
            self.MatrixMultdEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixMultfEXT, try loader("glMatrixMultfEXT"))) |ptr| {
            self.MatrixMultfEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixOrthoEXT, try loader("glMatrixOrthoEXT"))) |ptr| {
            self.MatrixOrthoEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixPopEXT, try loader("glMatrixPopEXT"))) |ptr| {
            self.MatrixPopEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixPushEXT, try loader("glMatrixPushEXT"))) |ptr| {
            self.MatrixPushEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixRotatedEXT, try loader("glMatrixRotatedEXT"))) |ptr| {
            self.MatrixRotatedEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixRotatefEXT, try loader("glMatrixRotatefEXT"))) |ptr| {
            self.MatrixRotatefEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixScaledEXT, try loader("glMatrixScaledEXT"))) |ptr| {
            self.MatrixScaledEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixScalefEXT, try loader("glMatrixScalefEXT"))) |ptr| {
            self.MatrixScalefEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixTranslatedEXT, try loader("glMatrixTranslatedEXT"))) |ptr| {
            self.MatrixTranslatedEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMatrixTranslatefEXT, try loader("glMatrixTranslatefEXT"))) |ptr| {
            self.MatrixTranslatefEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexBufferEXT, try loader("glMultiTexBufferEXT"))) |ptr| {
            self.MultiTexBufferEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexCoordPointerEXT, try loader("glMultiTexCoordPointerEXT"))) |ptr| {
            self.MultiTexCoordPointerEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexEnvfEXT, try loader("glMultiTexEnvfEXT"))) |ptr| {
            self.MultiTexEnvfEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexEnvfvEXT, try loader("glMultiTexEnvfvEXT"))) |ptr| {
            self.MultiTexEnvfvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexEnviEXT, try loader("glMultiTexEnviEXT"))) |ptr| {
            self.MultiTexEnviEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexEnvivEXT, try loader("glMultiTexEnvivEXT"))) |ptr| {
            self.MultiTexEnvivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexGendEXT, try loader("glMultiTexGendEXT"))) |ptr| {
            self.MultiTexGendEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexGendvEXT, try loader("glMultiTexGendvEXT"))) |ptr| {
            self.MultiTexGendvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexGenfEXT, try loader("glMultiTexGenfEXT"))) |ptr| {
            self.MultiTexGenfEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexGenfvEXT, try loader("glMultiTexGenfvEXT"))) |ptr| {
            self.MultiTexGenfvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexGeniEXT, try loader("glMultiTexGeniEXT"))) |ptr| {
            self.MultiTexGeniEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexGenivEXT, try loader("glMultiTexGenivEXT"))) |ptr| {
            self.MultiTexGenivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexImage1DEXT, try loader("glMultiTexImage1DEXT"))) |ptr| {
            self.MultiTexImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexImage2DEXT, try loader("glMultiTexImage2DEXT"))) |ptr| {
            self.MultiTexImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexImage3DEXT, try loader("glMultiTexImage3DEXT"))) |ptr| {
            self.MultiTexImage3DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexParameterIivEXT, try loader("glMultiTexParameterIivEXT"))) |ptr| {
            self.MultiTexParameterIivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexParameterIuivEXT, try loader("glMultiTexParameterIuivEXT"))) |ptr| {
            self.MultiTexParameterIuivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexParameterfEXT, try loader("glMultiTexParameterfEXT"))) |ptr| {
            self.MultiTexParameterfEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexParameterfvEXT, try loader("glMultiTexParameterfvEXT"))) |ptr| {
            self.MultiTexParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexParameteriEXT, try loader("glMultiTexParameteriEXT"))) |ptr| {
            self.MultiTexParameteriEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexParameterivEXT, try loader("glMultiTexParameterivEXT"))) |ptr| {
            self.MultiTexParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexRenderbufferEXT, try loader("glMultiTexRenderbufferEXT"))) |ptr| {
            self.MultiTexRenderbufferEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexSubImage1DEXT, try loader("glMultiTexSubImage1DEXT"))) |ptr| {
            self.MultiTexSubImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexSubImage2DEXT, try loader("glMultiTexSubImage2DEXT"))) |ptr| {
            self.MultiTexSubImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glMultiTexSubImage3DEXT, try loader("glMultiTexSubImage3DEXT"))) |ptr| {
            self.MultiTexSubImage3DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedBufferDataEXT, try loader("glNamedBufferDataEXT"))) |ptr| {
            self.NamedBufferDataEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedBufferStorageEXT, try loader("glNamedBufferStorageEXT"))) |ptr| {
            self.NamedBufferStorageEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedBufferSubDataEXT, try loader("glNamedBufferSubDataEXT"))) |ptr| {
            self.NamedBufferSubDataEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedCopyBufferSubDataEXT, try loader("glNamedCopyBufferSubDataEXT"))) |ptr| {
            self.NamedCopyBufferSubDataEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferParameteriEXT, try loader("glNamedFramebufferParameteriEXT"))) |ptr| {
            self.NamedFramebufferParameteriEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferRenderbufferEXT, try loader("glNamedFramebufferRenderbufferEXT"))) |ptr| {
            self.NamedFramebufferRenderbufferEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferTexture1DEXT, try loader("glNamedFramebufferTexture1DEXT"))) |ptr| {
            self.NamedFramebufferTexture1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferTexture2DEXT, try loader("glNamedFramebufferTexture2DEXT"))) |ptr| {
            self.NamedFramebufferTexture2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferTexture3DEXT, try loader("glNamedFramebufferTexture3DEXT"))) |ptr| {
            self.NamedFramebufferTexture3DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferTextureEXT, try loader("glNamedFramebufferTextureEXT"))) |ptr| {
            self.NamedFramebufferTextureEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferTextureFaceEXT, try loader("glNamedFramebufferTextureFaceEXT"))) |ptr| {
            self.NamedFramebufferTextureFaceEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedFramebufferTextureLayerEXT, try loader("glNamedFramebufferTextureLayerEXT"))) |ptr| {
            self.NamedFramebufferTextureLayerEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedProgramLocalParameter4dEXT, try loader("glNamedProgramLocalParameter4dEXT"))) |ptr| {
            self.NamedProgramLocalParameter4dEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedProgramLocalParameter4dvEXT, try loader("glNamedProgramLocalParameter4dvEXT"))) |ptr| {
            self.NamedProgramLocalParameter4dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedProgramLocalParameter4fEXT, try loader("glNamedProgramLocalParameter4fEXT"))) |ptr| {
            self.NamedProgramLocalParameter4fEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedProgramLocalParameter4fvEXT, try loader("glNamedProgramLocalParameter4fvEXT"))) |ptr| {
            self.NamedProgramLocalParameter4fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedProgramLocalParameterI4iEXT, try loader("glNamedProgramLocalParameterI4iEXT"))) |ptr| {
            self.NamedProgramLocalParameterI4iEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedProgramLocalParameterI4ivEXT, try loader("glNamedProgramLocalParameterI4ivEXT"))) |ptr| {
            self.NamedProgramLocalParameterI4ivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedProgramLocalParameterI4uiEXT, try loader("glNamedProgramLocalParameterI4uiEXT"))) |ptr| {
            self.NamedProgramLocalParameterI4uiEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedProgramLocalParameterI4uivEXT, try loader("glNamedProgramLocalParameterI4uivEXT"))) |ptr| {
            self.NamedProgramLocalParameterI4uivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedProgramLocalParameters4fvEXT, try loader("glNamedProgramLocalParameters4fvEXT"))) |ptr| {
            self.NamedProgramLocalParameters4fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedProgramLocalParametersI4ivEXT, try loader("glNamedProgramLocalParametersI4ivEXT"))) |ptr| {
            self.NamedProgramLocalParametersI4ivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedProgramLocalParametersI4uivEXT, try loader("glNamedProgramLocalParametersI4uivEXT"))) |ptr| {
            self.NamedProgramLocalParametersI4uivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedProgramStringEXT, try loader("glNamedProgramStringEXT"))) |ptr| {
            self.NamedProgramStringEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedRenderbufferStorageEXT, try loader("glNamedRenderbufferStorageEXT"))) |ptr| {
            self.NamedRenderbufferStorageEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedRenderbufferStorageMultisampleCoverageEXT, try loader("glNamedRenderbufferStorageMultisampleCoverageEXT"))) |ptr| {
            self.NamedRenderbufferStorageMultisampleCoverageEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glNamedRenderbufferStorageMultisampleEXT, try loader("glNamedRenderbufferStorageMultisampleEXT"))) |ptr| {
            self.NamedRenderbufferStorageMultisampleEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform1dEXT, try loader("glProgramUniform1dEXT"))) |ptr| {
            self.ProgramUniform1dEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform1dvEXT, try loader("glProgramUniform1dvEXT"))) |ptr| {
            self.ProgramUniform1dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform1fEXT, try loader("glProgramUniform1fEXT"))) |ptr| {
            self.ProgramUniform1fEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform1fvEXT, try loader("glProgramUniform1fvEXT"))) |ptr| {
            self.ProgramUniform1fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform1iEXT, try loader("glProgramUniform1iEXT"))) |ptr| {
            self.ProgramUniform1iEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform1ivEXT, try loader("glProgramUniform1ivEXT"))) |ptr| {
            self.ProgramUniform1ivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform1uiEXT, try loader("glProgramUniform1uiEXT"))) |ptr| {
            self.ProgramUniform1uiEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform1uivEXT, try loader("glProgramUniform1uivEXT"))) |ptr| {
            self.ProgramUniform1uivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform2dEXT, try loader("glProgramUniform2dEXT"))) |ptr| {
            self.ProgramUniform2dEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform2dvEXT, try loader("glProgramUniform2dvEXT"))) |ptr| {
            self.ProgramUniform2dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform2fEXT, try loader("glProgramUniform2fEXT"))) |ptr| {
            self.ProgramUniform2fEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform2fvEXT, try loader("glProgramUniform2fvEXT"))) |ptr| {
            self.ProgramUniform2fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform2iEXT, try loader("glProgramUniform2iEXT"))) |ptr| {
            self.ProgramUniform2iEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform2ivEXT, try loader("glProgramUniform2ivEXT"))) |ptr| {
            self.ProgramUniform2ivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform2uiEXT, try loader("glProgramUniform2uiEXT"))) |ptr| {
            self.ProgramUniform2uiEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform2uivEXT, try loader("glProgramUniform2uivEXT"))) |ptr| {
            self.ProgramUniform2uivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform3dEXT, try loader("glProgramUniform3dEXT"))) |ptr| {
            self.ProgramUniform3dEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform3dvEXT, try loader("glProgramUniform3dvEXT"))) |ptr| {
            self.ProgramUniform3dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform3fEXT, try loader("glProgramUniform3fEXT"))) |ptr| {
            self.ProgramUniform3fEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform3fvEXT, try loader("glProgramUniform3fvEXT"))) |ptr| {
            self.ProgramUniform3fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform3iEXT, try loader("glProgramUniform3iEXT"))) |ptr| {
            self.ProgramUniform3iEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform3ivEXT, try loader("glProgramUniform3ivEXT"))) |ptr| {
            self.ProgramUniform3ivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform3uiEXT, try loader("glProgramUniform3uiEXT"))) |ptr| {
            self.ProgramUniform3uiEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform3uivEXT, try loader("glProgramUniform3uivEXT"))) |ptr| {
            self.ProgramUniform3uivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform4dEXT, try loader("glProgramUniform4dEXT"))) |ptr| {
            self.ProgramUniform4dEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform4dvEXT, try loader("glProgramUniform4dvEXT"))) |ptr| {
            self.ProgramUniform4dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform4fEXT, try loader("glProgramUniform4fEXT"))) |ptr| {
            self.ProgramUniform4fEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform4fvEXT, try loader("glProgramUniform4fvEXT"))) |ptr| {
            self.ProgramUniform4fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform4iEXT, try loader("glProgramUniform4iEXT"))) |ptr| {
            self.ProgramUniform4iEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform4ivEXT, try loader("glProgramUniform4ivEXT"))) |ptr| {
            self.ProgramUniform4ivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform4uiEXT, try loader("glProgramUniform4uiEXT"))) |ptr| {
            self.ProgramUniform4uiEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniform4uivEXT, try loader("glProgramUniform4uivEXT"))) |ptr| {
            self.ProgramUniform4uivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix2dvEXT, try loader("glProgramUniformMatrix2dvEXT"))) |ptr| {
            self.ProgramUniformMatrix2dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix2fvEXT, try loader("glProgramUniformMatrix2fvEXT"))) |ptr| {
            self.ProgramUniformMatrix2fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix2x3dvEXT, try loader("glProgramUniformMatrix2x3dvEXT"))) |ptr| {
            self.ProgramUniformMatrix2x3dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix2x3fvEXT, try loader("glProgramUniformMatrix2x3fvEXT"))) |ptr| {
            self.ProgramUniformMatrix2x3fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix2x4dvEXT, try loader("glProgramUniformMatrix2x4dvEXT"))) |ptr| {
            self.ProgramUniformMatrix2x4dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix2x4fvEXT, try loader("glProgramUniformMatrix2x4fvEXT"))) |ptr| {
            self.ProgramUniformMatrix2x4fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix3dvEXT, try loader("glProgramUniformMatrix3dvEXT"))) |ptr| {
            self.ProgramUniformMatrix3dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix3fvEXT, try loader("glProgramUniformMatrix3fvEXT"))) |ptr| {
            self.ProgramUniformMatrix3fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix3x2dvEXT, try loader("glProgramUniformMatrix3x2dvEXT"))) |ptr| {
            self.ProgramUniformMatrix3x2dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix3x2fvEXT, try loader("glProgramUniformMatrix3x2fvEXT"))) |ptr| {
            self.ProgramUniformMatrix3x2fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix3x4dvEXT, try loader("glProgramUniformMatrix3x4dvEXT"))) |ptr| {
            self.ProgramUniformMatrix3x4dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix3x4fvEXT, try loader("glProgramUniformMatrix3x4fvEXT"))) |ptr| {
            self.ProgramUniformMatrix3x4fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix4dvEXT, try loader("glProgramUniformMatrix4dvEXT"))) |ptr| {
            self.ProgramUniformMatrix4dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix4fvEXT, try loader("glProgramUniformMatrix4fvEXT"))) |ptr| {
            self.ProgramUniformMatrix4fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix4x2dvEXT, try loader("glProgramUniformMatrix4x2dvEXT"))) |ptr| {
            self.ProgramUniformMatrix4x2dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix4x2fvEXT, try loader("glProgramUniformMatrix4x2fvEXT"))) |ptr| {
            self.ProgramUniformMatrix4x2fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix4x3dvEXT, try loader("glProgramUniformMatrix4x3dvEXT"))) |ptr| {
            self.ProgramUniformMatrix4x3dvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glProgramUniformMatrix4x3fvEXT, try loader("glProgramUniformMatrix4x3fvEXT"))) |ptr| {
            self.ProgramUniformMatrix4x3fvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glPushClientAttribDefaultEXT, try loader("glPushClientAttribDefaultEXT"))) |ptr| {
            self.PushClientAttribDefaultEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureBufferEXT, try loader("glTextureBufferEXT"))) |ptr| {
            self.TextureBufferEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureBufferRangeEXT, try loader("glTextureBufferRangeEXT"))) |ptr| {
            self.TextureBufferRangeEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureImage1DEXT, try loader("glTextureImage1DEXT"))) |ptr| {
            self.TextureImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureImage2DEXT, try loader("glTextureImage2DEXT"))) |ptr| {
            self.TextureImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureImage3DEXT, try loader("glTextureImage3DEXT"))) |ptr| {
            self.TextureImage3DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTexturePageCommitmentEXT, try loader("glTexturePageCommitmentEXT"))) |ptr| {
            self.TexturePageCommitmentEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureParameterIivEXT, try loader("glTextureParameterIivEXT"))) |ptr| {
            self.TextureParameterIivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureParameterIuivEXT, try loader("glTextureParameterIuivEXT"))) |ptr| {
            self.TextureParameterIuivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureParameterfEXT, try loader("glTextureParameterfEXT"))) |ptr| {
            self.TextureParameterfEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureParameterfvEXT, try loader("glTextureParameterfvEXT"))) |ptr| {
            self.TextureParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureParameteriEXT, try loader("glTextureParameteriEXT"))) |ptr| {
            self.TextureParameteriEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureParameterivEXT, try loader("glTextureParameterivEXT"))) |ptr| {
            self.TextureParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureRenderbufferEXT, try loader("glTextureRenderbufferEXT"))) |ptr| {
            self.TextureRenderbufferEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureStorage1DEXT, try loader("glTextureStorage1DEXT"))) |ptr| {
            self.TextureStorage1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureStorage2DEXT, try loader("glTextureStorage2DEXT"))) |ptr| {
            self.TextureStorage2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureStorage2DMultisampleEXT, try loader("glTextureStorage2DMultisampleEXT"))) |ptr| {
            self.TextureStorage2DMultisampleEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureStorage3DEXT, try loader("glTextureStorage3DEXT"))) |ptr| {
            self.TextureStorage3DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureStorage3DMultisampleEXT, try loader("glTextureStorage3DMultisampleEXT"))) |ptr| {
            self.TextureStorage3DMultisampleEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureSubImage1DEXT, try loader("glTextureSubImage1DEXT"))) |ptr| {
            self.TextureSubImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureSubImage2DEXT, try loader("glTextureSubImage2DEXT"))) |ptr| {
            self.TextureSubImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glTextureSubImage3DEXT, try loader("glTextureSubImage3DEXT"))) |ptr| {
            self.TextureSubImage3DEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glUnmapNamedBufferEXT, try loader("glUnmapNamedBufferEXT"))) |ptr| {
            self.UnmapNamedBufferEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayBindVertexBufferEXT, try loader("glVertexArrayBindVertexBufferEXT"))) |ptr| {
            self.VertexArrayBindVertexBufferEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayColorOffsetEXT, try loader("glVertexArrayColorOffsetEXT"))) |ptr| {
            self.VertexArrayColorOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayEdgeFlagOffsetEXT, try loader("glVertexArrayEdgeFlagOffsetEXT"))) |ptr| {
            self.VertexArrayEdgeFlagOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayFogCoordOffsetEXT, try loader("glVertexArrayFogCoordOffsetEXT"))) |ptr| {
            self.VertexArrayFogCoordOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayIndexOffsetEXT, try loader("glVertexArrayIndexOffsetEXT"))) |ptr| {
            self.VertexArrayIndexOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayMultiTexCoordOffsetEXT, try loader("glVertexArrayMultiTexCoordOffsetEXT"))) |ptr| {
            self.VertexArrayMultiTexCoordOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayNormalOffsetEXT, try loader("glVertexArrayNormalOffsetEXT"))) |ptr| {
            self.VertexArrayNormalOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArraySecondaryColorOffsetEXT, try loader("glVertexArraySecondaryColorOffsetEXT"))) |ptr| {
            self.VertexArraySecondaryColorOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayTexCoordOffsetEXT, try loader("glVertexArrayTexCoordOffsetEXT"))) |ptr| {
            self.VertexArrayTexCoordOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayVertexAttribBindingEXT, try loader("glVertexArrayVertexAttribBindingEXT"))) |ptr| {
            self.VertexArrayVertexAttribBindingEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayVertexAttribDivisorEXT, try loader("glVertexArrayVertexAttribDivisorEXT"))) |ptr| {
            self.VertexArrayVertexAttribDivisorEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayVertexAttribFormatEXT, try loader("glVertexArrayVertexAttribFormatEXT"))) |ptr| {
            self.VertexArrayVertexAttribFormatEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayVertexAttribIFormatEXT, try loader("glVertexArrayVertexAttribIFormatEXT"))) |ptr| {
            self.VertexArrayVertexAttribIFormatEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayVertexAttribIOffsetEXT, try loader("glVertexArrayVertexAttribIOffsetEXT"))) |ptr| {
            self.VertexArrayVertexAttribIOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayVertexAttribLFormatEXT, try loader("glVertexArrayVertexAttribLFormatEXT"))) |ptr| {
            self.VertexArrayVertexAttribLFormatEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayVertexAttribLOffsetEXT, try loader("glVertexArrayVertexAttribLOffsetEXT"))) |ptr| {
            self.VertexArrayVertexAttribLOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayVertexAttribOffsetEXT, try loader("glVertexArrayVertexAttribOffsetEXT"))) |ptr| {
            self.VertexArrayVertexAttribOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayVertexBindingDivisorEXT, try loader("glVertexArrayVertexBindingDivisorEXT"))) |ptr| {
            self.VertexArrayVertexBindingDivisorEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glVertexArrayVertexOffsetEXT, try loader("glVertexArrayVertexOffsetEXT"))) |ptr| {
            self.VertexArrayVertexOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_direct_state_access = false;
        }
        if (@ptrCast(?glColorMaskIndexedEXT, try loader("glColorMaskIndexedEXT"))) |ptr| {
            self.ColorMaskIndexedEXT = ptr;
        } else {
            self.features.GL_EXT_draw_buffers2 = false;
        }
        if (@ptrCast(?glDisableIndexedEXT, try loader("glDisableIndexedEXT"))) |ptr| {
            self.DisableIndexedEXT = ptr;
        } else {
            self.features.GL_EXT_draw_buffers2 = false;
        }
        if (@ptrCast(?glEnableIndexedEXT, try loader("glEnableIndexedEXT"))) |ptr| {
            self.EnableIndexedEXT = ptr;
        } else {
            self.features.GL_EXT_draw_buffers2 = false;
        }
        if (@ptrCast(?glGetBooleanIndexedvEXT, try loader("glGetBooleanIndexedvEXT"))) |ptr| {
            self.GetBooleanIndexedvEXT = ptr;
        } else {
            self.features.GL_EXT_draw_buffers2 = false;
        }
        if (@ptrCast(?glGetIntegerIndexedvEXT, try loader("glGetIntegerIndexedvEXT"))) |ptr| {
            self.GetIntegerIndexedvEXT = ptr;
        } else {
            self.features.GL_EXT_draw_buffers2 = false;
        }
        if (@ptrCast(?glIsEnabledIndexedEXT, try loader("glIsEnabledIndexedEXT"))) |ptr| {
            self.IsEnabledIndexedEXT = ptr;
        } else {
            self.features.GL_EXT_draw_buffers2 = false;
        }
        if (@ptrCast(?glDrawArraysInstancedEXT, try loader("glDrawArraysInstancedEXT"))) |ptr| {
            self.DrawArraysInstancedEXT = ptr;
        } else {
            self.features.GL_EXT_draw_instanced = false;
        }
        if (@ptrCast(?glDrawElementsInstancedEXT, try loader("glDrawElementsInstancedEXT"))) |ptr| {
            self.DrawElementsInstancedEXT = ptr;
        } else {
            self.features.GL_EXT_draw_instanced = false;
        }
        if (@ptrCast(?glDrawRangeElementsEXT, try loader("glDrawRangeElementsEXT"))) |ptr| {
            self.DrawRangeElementsEXT = ptr;
        } else {
            self.features.GL_EXT_draw_range_elements = false;
        }
        if (@ptrCast(?glBufferStorageExternalEXT, try loader("glBufferStorageExternalEXT"))) |ptr| {
            self.BufferStorageExternalEXT = ptr;
        } else {
            self.features.GL_EXT_external_buffer = false;
        }
        if (@ptrCast(?glNamedBufferStorageExternalEXT, try loader("glNamedBufferStorageExternalEXT"))) |ptr| {
            self.NamedBufferStorageExternalEXT = ptr;
        } else {
            self.features.GL_EXT_external_buffer = false;
        }
        if (@ptrCast(?glFogCoordPointerEXT, try loader("glFogCoordPointerEXT"))) |ptr| {
            self.FogCoordPointerEXT = ptr;
        } else {
            self.features.GL_EXT_fog_coord = false;
        }
        if (@ptrCast(?glFogCoorddEXT, try loader("glFogCoorddEXT"))) |ptr| {
            self.FogCoorddEXT = ptr;
        } else {
            self.features.GL_EXT_fog_coord = false;
        }
        if (@ptrCast(?glFogCoorddvEXT, try loader("glFogCoorddvEXT"))) |ptr| {
            self.FogCoorddvEXT = ptr;
        } else {
            self.features.GL_EXT_fog_coord = false;
        }
        if (@ptrCast(?glFogCoordfEXT, try loader("glFogCoordfEXT"))) |ptr| {
            self.FogCoordfEXT = ptr;
        } else {
            self.features.GL_EXT_fog_coord = false;
        }
        if (@ptrCast(?glFogCoordfvEXT, try loader("glFogCoordfvEXT"))) |ptr| {
            self.FogCoordfvEXT = ptr;
        } else {
            self.features.GL_EXT_fog_coord = false;
        }
        if (@ptrCast(?glBlitFramebufferEXT, try loader("glBlitFramebufferEXT"))) |ptr| {
            self.BlitFramebufferEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_blit = false;
        }
        if (@ptrCast(?glRenderbufferStorageMultisampleEXT, try loader("glRenderbufferStorageMultisampleEXT"))) |ptr| {
            self.RenderbufferStorageMultisampleEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_multisample = false;
        }
        if (@ptrCast(?glBindFramebufferEXT, try loader("glBindFramebufferEXT"))) |ptr| {
            self.BindFramebufferEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glBindRenderbufferEXT, try loader("glBindRenderbufferEXT"))) |ptr| {
            self.BindRenderbufferEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glCheckFramebufferStatusEXT, try loader("glCheckFramebufferStatusEXT"))) |ptr| {
            self.CheckFramebufferStatusEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glDeleteFramebuffersEXT, try loader("glDeleteFramebuffersEXT"))) |ptr| {
            self.DeleteFramebuffersEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glDeleteRenderbuffersEXT, try loader("glDeleteRenderbuffersEXT"))) |ptr| {
            self.DeleteRenderbuffersEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glFramebufferRenderbufferEXT, try loader("glFramebufferRenderbufferEXT"))) |ptr| {
            self.FramebufferRenderbufferEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glFramebufferTexture1DEXT, try loader("glFramebufferTexture1DEXT"))) |ptr| {
            self.FramebufferTexture1DEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glFramebufferTexture2DEXT, try loader("glFramebufferTexture2DEXT"))) |ptr| {
            self.FramebufferTexture2DEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glFramebufferTexture3DEXT, try loader("glFramebufferTexture3DEXT"))) |ptr| {
            self.FramebufferTexture3DEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glGenFramebuffersEXT, try loader("glGenFramebuffersEXT"))) |ptr| {
            self.GenFramebuffersEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glGenRenderbuffersEXT, try loader("glGenRenderbuffersEXT"))) |ptr| {
            self.GenRenderbuffersEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glGenerateMipmapEXT, try loader("glGenerateMipmapEXT"))) |ptr| {
            self.GenerateMipmapEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glGetFramebufferAttachmentParameterivEXT, try loader("glGetFramebufferAttachmentParameterivEXT"))) |ptr| {
            self.GetFramebufferAttachmentParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glGetRenderbufferParameterivEXT, try loader("glGetRenderbufferParameterivEXT"))) |ptr| {
            self.GetRenderbufferParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glIsFramebufferEXT, try loader("glIsFramebufferEXT"))) |ptr| {
            self.IsFramebufferEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glIsRenderbufferEXT, try loader("glIsRenderbufferEXT"))) |ptr| {
            self.IsRenderbufferEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glRenderbufferStorageEXT, try loader("glRenderbufferStorageEXT"))) |ptr| {
            self.RenderbufferStorageEXT = ptr;
        } else {
            self.features.GL_EXT_framebuffer_object = false;
        }
        if (@ptrCast(?glProgramParameteriEXT, try loader("glProgramParameteriEXT"))) |ptr| {
            self.ProgramParameteriEXT = ptr;
        } else {
            self.features.GL_EXT_geometry_shader4 = false;
        }
        if (@ptrCast(?glProgramEnvParameters4fvEXT, try loader("glProgramEnvParameters4fvEXT"))) |ptr| {
            self.ProgramEnvParameters4fvEXT = ptr;
        } else {
            self.features.GL_EXT_gpu_program_parameters = false;
        }
        if (@ptrCast(?glProgramLocalParameters4fvEXT, try loader("glProgramLocalParameters4fvEXT"))) |ptr| {
            self.ProgramLocalParameters4fvEXT = ptr;
        } else {
            self.features.GL_EXT_gpu_program_parameters = false;
        }
        if (@ptrCast(?glBindFragDataLocationEXT, try loader("glBindFragDataLocationEXT"))) |ptr| {
            self.BindFragDataLocationEXT = ptr;
        } else {
            self.features.GL_EXT_gpu_shader4 = false;
        }
        if (@ptrCast(?glGetFragDataLocationEXT, try loader("glGetFragDataLocationEXT"))) |ptr| {
            self.GetFragDataLocationEXT = ptr;
        } else {
            self.features.GL_EXT_gpu_shader4 = false;
        }
        if (@ptrCast(?glGetUniformuivEXT, try loader("glGetUniformuivEXT"))) |ptr| {
            self.GetUniformuivEXT = ptr;
        } else {
            self.features.GL_EXT_gpu_shader4 = false;
        }
        if (@ptrCast(?glUniform1uiEXT, try loader("glUniform1uiEXT"))) |ptr| {
            self.Uniform1uiEXT = ptr;
        } else {
            self.features.GL_EXT_gpu_shader4 = false;
        }
        if (@ptrCast(?glUniform1uivEXT, try loader("glUniform1uivEXT"))) |ptr| {
            self.Uniform1uivEXT = ptr;
        } else {
            self.features.GL_EXT_gpu_shader4 = false;
        }
        if (@ptrCast(?glUniform2uiEXT, try loader("glUniform2uiEXT"))) |ptr| {
            self.Uniform2uiEXT = ptr;
        } else {
            self.features.GL_EXT_gpu_shader4 = false;
        }
        if (@ptrCast(?glUniform2uivEXT, try loader("glUniform2uivEXT"))) |ptr| {
            self.Uniform2uivEXT = ptr;
        } else {
            self.features.GL_EXT_gpu_shader4 = false;
        }
        if (@ptrCast(?glUniform3uiEXT, try loader("glUniform3uiEXT"))) |ptr| {
            self.Uniform3uiEXT = ptr;
        } else {
            self.features.GL_EXT_gpu_shader4 = false;
        }
        if (@ptrCast(?glUniform3uivEXT, try loader("glUniform3uivEXT"))) |ptr| {
            self.Uniform3uivEXT = ptr;
        } else {
            self.features.GL_EXT_gpu_shader4 = false;
        }
        if (@ptrCast(?glUniform4uiEXT, try loader("glUniform4uiEXT"))) |ptr| {
            self.Uniform4uiEXT = ptr;
        } else {
            self.features.GL_EXT_gpu_shader4 = false;
        }
        if (@ptrCast(?glUniform4uivEXT, try loader("glUniform4uivEXT"))) |ptr| {
            self.Uniform4uivEXT = ptr;
        } else {
            self.features.GL_EXT_gpu_shader4 = false;
        }
        if (@ptrCast(?glGetHistogramEXT, try loader("glGetHistogramEXT"))) |ptr| {
            self.GetHistogramEXT = ptr;
        } else {
            self.features.GL_EXT_histogram = false;
        }
        if (@ptrCast(?glGetHistogramParameterfvEXT, try loader("glGetHistogramParameterfvEXT"))) |ptr| {
            self.GetHistogramParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_histogram = false;
        }
        if (@ptrCast(?glGetHistogramParameterivEXT, try loader("glGetHistogramParameterivEXT"))) |ptr| {
            self.GetHistogramParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_histogram = false;
        }
        if (@ptrCast(?glGetMinmaxEXT, try loader("glGetMinmaxEXT"))) |ptr| {
            self.GetMinmaxEXT = ptr;
        } else {
            self.features.GL_EXT_histogram = false;
        }
        if (@ptrCast(?glGetMinmaxParameterfvEXT, try loader("glGetMinmaxParameterfvEXT"))) |ptr| {
            self.GetMinmaxParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_histogram = false;
        }
        if (@ptrCast(?glGetMinmaxParameterivEXT, try loader("glGetMinmaxParameterivEXT"))) |ptr| {
            self.GetMinmaxParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_histogram = false;
        }
        if (@ptrCast(?glHistogramEXT, try loader("glHistogramEXT"))) |ptr| {
            self.HistogramEXT = ptr;
        } else {
            self.features.GL_EXT_histogram = false;
        }
        if (@ptrCast(?glMinmaxEXT, try loader("glMinmaxEXT"))) |ptr| {
            self.MinmaxEXT = ptr;
        } else {
            self.features.GL_EXT_histogram = false;
        }
        if (@ptrCast(?glResetHistogramEXT, try loader("glResetHistogramEXT"))) |ptr| {
            self.ResetHistogramEXT = ptr;
        } else {
            self.features.GL_EXT_histogram = false;
        }
        if (@ptrCast(?glResetMinmaxEXT, try loader("glResetMinmaxEXT"))) |ptr| {
            self.ResetMinmaxEXT = ptr;
        } else {
            self.features.GL_EXT_histogram = false;
        }
        if (@ptrCast(?glIndexFuncEXT, try loader("glIndexFuncEXT"))) |ptr| {
            self.IndexFuncEXT = ptr;
        } else {
            self.features.GL_EXT_index_func = false;
        }
        if (@ptrCast(?glIndexMaterialEXT, try loader("glIndexMaterialEXT"))) |ptr| {
            self.IndexMaterialEXT = ptr;
        } else {
            self.features.GL_EXT_index_material = false;
        }
        if (@ptrCast(?glApplyTextureEXT, try loader("glApplyTextureEXT"))) |ptr| {
            self.ApplyTextureEXT = ptr;
        } else {
            self.features.GL_EXT_light_texture = false;
        }
        if (@ptrCast(?glTextureLightEXT, try loader("glTextureLightEXT"))) |ptr| {
            self.TextureLightEXT = ptr;
        } else {
            self.features.GL_EXT_light_texture = false;
        }
        if (@ptrCast(?glTextureMaterialEXT, try loader("glTextureMaterialEXT"))) |ptr| {
            self.TextureMaterialEXT = ptr;
        } else {
            self.features.GL_EXT_light_texture = false;
        }
        if (@ptrCast(?glBufferStorageMemEXT, try loader("glBufferStorageMemEXT"))) |ptr| {
            self.BufferStorageMemEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glCreateMemoryObjectsEXT, try loader("glCreateMemoryObjectsEXT"))) |ptr| {
            self.CreateMemoryObjectsEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glDeleteMemoryObjectsEXT, try loader("glDeleteMemoryObjectsEXT"))) |ptr| {
            self.DeleteMemoryObjectsEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glGetMemoryObjectParameterivEXT, try loader("glGetMemoryObjectParameterivEXT"))) |ptr| {
            self.GetMemoryObjectParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glGetUnsignedBytei_vEXT, try loader("glGetUnsignedBytei_vEXT"))) |ptr| {
            self.GetUnsignedBytei_vEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glGetUnsignedBytevEXT, try loader("glGetUnsignedBytevEXT"))) |ptr| {
            self.GetUnsignedBytevEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glIsMemoryObjectEXT, try loader("glIsMemoryObjectEXT"))) |ptr| {
            self.IsMemoryObjectEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glMemoryObjectParameterivEXT, try loader("glMemoryObjectParameterivEXT"))) |ptr| {
            self.MemoryObjectParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glNamedBufferStorageMemEXT, try loader("glNamedBufferStorageMemEXT"))) |ptr| {
            self.NamedBufferStorageMemEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glTexStorageMem1DEXT, try loader("glTexStorageMem1DEXT"))) |ptr| {
            self.TexStorageMem1DEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glTexStorageMem2DEXT, try loader("glTexStorageMem2DEXT"))) |ptr| {
            self.TexStorageMem2DEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glTexStorageMem2DMultisampleEXT, try loader("glTexStorageMem2DMultisampleEXT"))) |ptr| {
            self.TexStorageMem2DMultisampleEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glTexStorageMem3DEXT, try loader("glTexStorageMem3DEXT"))) |ptr| {
            self.TexStorageMem3DEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glTexStorageMem3DMultisampleEXT, try loader("glTexStorageMem3DMultisampleEXT"))) |ptr| {
            self.TexStorageMem3DMultisampleEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glTextureStorageMem1DEXT, try loader("glTextureStorageMem1DEXT"))) |ptr| {
            self.TextureStorageMem1DEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glTextureStorageMem2DEXT, try loader("glTextureStorageMem2DEXT"))) |ptr| {
            self.TextureStorageMem2DEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glTextureStorageMem2DMultisampleEXT, try loader("glTextureStorageMem2DMultisampleEXT"))) |ptr| {
            self.TextureStorageMem2DMultisampleEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glTextureStorageMem3DEXT, try loader("glTextureStorageMem3DEXT"))) |ptr| {
            self.TextureStorageMem3DEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glTextureStorageMem3DMultisampleEXT, try loader("glTextureStorageMem3DMultisampleEXT"))) |ptr| {
            self.TextureStorageMem3DMultisampleEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object = false;
        }
        if (@ptrCast(?glImportMemoryFdEXT, try loader("glImportMemoryFdEXT"))) |ptr| {
            self.ImportMemoryFdEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object_fd = false;
        }
        if (@ptrCast(?glImportMemoryWin32HandleEXT, try loader("glImportMemoryWin32HandleEXT"))) |ptr| {
            self.ImportMemoryWin32HandleEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object_win32 = false;
        }
        if (@ptrCast(?glImportMemoryWin32NameEXT, try loader("glImportMemoryWin32NameEXT"))) |ptr| {
            self.ImportMemoryWin32NameEXT = ptr;
        } else {
            self.features.GL_EXT_memory_object_win32 = false;
        }
        if (@ptrCast(?glMultiDrawArraysEXT, try loader("glMultiDrawArraysEXT"))) |ptr| {
            self.MultiDrawArraysEXT = ptr;
        } else {
            self.features.GL_EXT_multi_draw_arrays = false;
        }
        if (@ptrCast(?glMultiDrawElementsEXT, try loader("glMultiDrawElementsEXT"))) |ptr| {
            self.MultiDrawElementsEXT = ptr;
        } else {
            self.features.GL_EXT_multi_draw_arrays = false;
        }
        if (@ptrCast(?glSampleMaskEXT, try loader("glSampleMaskEXT"))) |ptr| {
            self.SampleMaskEXT = ptr;
        } else {
            self.features.GL_EXT_multisample = false;
        }
        if (@ptrCast(?glSamplePatternEXT, try loader("glSamplePatternEXT"))) |ptr| {
            self.SamplePatternEXT = ptr;
        } else {
            self.features.GL_EXT_multisample = false;
        }
        if (@ptrCast(?glColorTableEXT, try loader("glColorTableEXT"))) |ptr| {
            self.ColorTableEXT = ptr;
        } else {
            self.features.GL_EXT_paletted_texture = false;
        }
        if (@ptrCast(?glGetColorTableEXT, try loader("glGetColorTableEXT"))) |ptr| {
            self.GetColorTableEXT = ptr;
        } else {
            self.features.GL_EXT_paletted_texture = false;
        }
        if (@ptrCast(?glGetColorTableParameterfvEXT, try loader("glGetColorTableParameterfvEXT"))) |ptr| {
            self.GetColorTableParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_paletted_texture = false;
        }
        if (@ptrCast(?glGetColorTableParameterivEXT, try loader("glGetColorTableParameterivEXT"))) |ptr| {
            self.GetColorTableParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_paletted_texture = false;
        }
        if (@ptrCast(?glGetPixelTransformParameterfvEXT, try loader("glGetPixelTransformParameterfvEXT"))) |ptr| {
            self.GetPixelTransformParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_pixel_transform = false;
        }
        if (@ptrCast(?glGetPixelTransformParameterivEXT, try loader("glGetPixelTransformParameterivEXT"))) |ptr| {
            self.GetPixelTransformParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_pixel_transform = false;
        }
        if (@ptrCast(?glPixelTransformParameterfEXT, try loader("glPixelTransformParameterfEXT"))) |ptr| {
            self.PixelTransformParameterfEXT = ptr;
        } else {
            self.features.GL_EXT_pixel_transform = false;
        }
        if (@ptrCast(?glPixelTransformParameterfvEXT, try loader("glPixelTransformParameterfvEXT"))) |ptr| {
            self.PixelTransformParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_pixel_transform = false;
        }
        if (@ptrCast(?glPixelTransformParameteriEXT, try loader("glPixelTransformParameteriEXT"))) |ptr| {
            self.PixelTransformParameteriEXT = ptr;
        } else {
            self.features.GL_EXT_pixel_transform = false;
        }
        if (@ptrCast(?glPixelTransformParameterivEXT, try loader("glPixelTransformParameterivEXT"))) |ptr| {
            self.PixelTransformParameterivEXT = ptr;
        } else {
            self.features.GL_EXT_pixel_transform = false;
        }
        if (@ptrCast(?glPointParameterfEXT, try loader("glPointParameterfEXT"))) |ptr| {
            self.PointParameterfEXT = ptr;
        } else {
            self.features.GL_EXT_point_parameters = false;
        }
        if (@ptrCast(?glPointParameterfvEXT, try loader("glPointParameterfvEXT"))) |ptr| {
            self.PointParameterfvEXT = ptr;
        } else {
            self.features.GL_EXT_point_parameters = false;
        }
        if (@ptrCast(?glPolygonOffsetEXT, try loader("glPolygonOffsetEXT"))) |ptr| {
            self.PolygonOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_polygon_offset = false;
        }
        if (@ptrCast(?glPolygonOffsetClampEXT, try loader("glPolygonOffsetClampEXT"))) |ptr| {
            self.PolygonOffsetClampEXT = ptr;
        } else {
            self.features.GL_EXT_polygon_offset_clamp = false;
        }
        if (@ptrCast(?glProvokingVertexEXT, try loader("glProvokingVertexEXT"))) |ptr| {
            self.ProvokingVertexEXT = ptr;
        } else {
            self.features.GL_EXT_provoking_vertex = false;
        }
        if (@ptrCast(?glRasterSamplesEXT, try loader("glRasterSamplesEXT"))) |ptr| {
            self.RasterSamplesEXT = ptr;
        } else {
            self.features.GL_EXT_raster_multisample = false;
        }
        if (@ptrCast(?glSecondaryColor3bEXT, try loader("glSecondaryColor3bEXT"))) |ptr| {
            self.SecondaryColor3bEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3bvEXT, try loader("glSecondaryColor3bvEXT"))) |ptr| {
            self.SecondaryColor3bvEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3dEXT, try loader("glSecondaryColor3dEXT"))) |ptr| {
            self.SecondaryColor3dEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3dvEXT, try loader("glSecondaryColor3dvEXT"))) |ptr| {
            self.SecondaryColor3dvEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3fEXT, try loader("glSecondaryColor3fEXT"))) |ptr| {
            self.SecondaryColor3fEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3fvEXT, try loader("glSecondaryColor3fvEXT"))) |ptr| {
            self.SecondaryColor3fvEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3iEXT, try loader("glSecondaryColor3iEXT"))) |ptr| {
            self.SecondaryColor3iEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3ivEXT, try loader("glSecondaryColor3ivEXT"))) |ptr| {
            self.SecondaryColor3ivEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3sEXT, try loader("glSecondaryColor3sEXT"))) |ptr| {
            self.SecondaryColor3sEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3svEXT, try loader("glSecondaryColor3svEXT"))) |ptr| {
            self.SecondaryColor3svEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3ubEXT, try loader("glSecondaryColor3ubEXT"))) |ptr| {
            self.SecondaryColor3ubEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3ubvEXT, try loader("glSecondaryColor3ubvEXT"))) |ptr| {
            self.SecondaryColor3ubvEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3uiEXT, try loader("glSecondaryColor3uiEXT"))) |ptr| {
            self.SecondaryColor3uiEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3uivEXT, try loader("glSecondaryColor3uivEXT"))) |ptr| {
            self.SecondaryColor3uivEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3usEXT, try loader("glSecondaryColor3usEXT"))) |ptr| {
            self.SecondaryColor3usEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColor3usvEXT, try loader("glSecondaryColor3usvEXT"))) |ptr| {
            self.SecondaryColor3usvEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glSecondaryColorPointerEXT, try loader("glSecondaryColorPointerEXT"))) |ptr| {
            self.SecondaryColorPointerEXT = ptr;
        } else {
            self.features.GL_EXT_secondary_color = false;
        }
        if (@ptrCast(?glDeleteSemaphoresEXT, try loader("glDeleteSemaphoresEXT"))) |ptr| {
            self.DeleteSemaphoresEXT = ptr;
        } else {
            self.features.GL_EXT_semaphore = false;
        }
        if (@ptrCast(?glGenSemaphoresEXT, try loader("glGenSemaphoresEXT"))) |ptr| {
            self.GenSemaphoresEXT = ptr;
        } else {
            self.features.GL_EXT_semaphore = false;
        }
        if (@ptrCast(?glGetSemaphoreParameterui64vEXT, try loader("glGetSemaphoreParameterui64vEXT"))) |ptr| {
            self.GetSemaphoreParameterui64vEXT = ptr;
        } else {
            self.features.GL_EXT_semaphore = false;
        }
        if (@ptrCast(?glGetUnsignedBytei_vEXT, try loader("glGetUnsignedBytei_vEXT"))) |ptr| {
            self.GetUnsignedBytei_vEXT = ptr;
        } else {
            self.features.GL_EXT_semaphore = false;
        }
        if (@ptrCast(?glGetUnsignedBytevEXT, try loader("glGetUnsignedBytevEXT"))) |ptr| {
            self.GetUnsignedBytevEXT = ptr;
        } else {
            self.features.GL_EXT_semaphore = false;
        }
        if (@ptrCast(?glIsSemaphoreEXT, try loader("glIsSemaphoreEXT"))) |ptr| {
            self.IsSemaphoreEXT = ptr;
        } else {
            self.features.GL_EXT_semaphore = false;
        }
        if (@ptrCast(?glSemaphoreParameterui64vEXT, try loader("glSemaphoreParameterui64vEXT"))) |ptr| {
            self.SemaphoreParameterui64vEXT = ptr;
        } else {
            self.features.GL_EXT_semaphore = false;
        }
        if (@ptrCast(?glSignalSemaphoreEXT, try loader("glSignalSemaphoreEXT"))) |ptr| {
            self.SignalSemaphoreEXT = ptr;
        } else {
            self.features.GL_EXT_semaphore = false;
        }
        if (@ptrCast(?glWaitSemaphoreEXT, try loader("glWaitSemaphoreEXT"))) |ptr| {
            self.WaitSemaphoreEXT = ptr;
        } else {
            self.features.GL_EXT_semaphore = false;
        }
        if (@ptrCast(?glImportSemaphoreFdEXT, try loader("glImportSemaphoreFdEXT"))) |ptr| {
            self.ImportSemaphoreFdEXT = ptr;
        } else {
            self.features.GL_EXT_semaphore_fd = false;
        }
        if (@ptrCast(?glImportSemaphoreWin32HandleEXT, try loader("glImportSemaphoreWin32HandleEXT"))) |ptr| {
            self.ImportSemaphoreWin32HandleEXT = ptr;
        } else {
            self.features.GL_EXT_semaphore_win32 = false;
        }
        if (@ptrCast(?glImportSemaphoreWin32NameEXT, try loader("glImportSemaphoreWin32NameEXT"))) |ptr| {
            self.ImportSemaphoreWin32NameEXT = ptr;
        } else {
            self.features.GL_EXT_semaphore_win32 = false;
        }
        if (@ptrCast(?glActiveProgramEXT, try loader("glActiveProgramEXT"))) |ptr| {
            self.ActiveProgramEXT = ptr;
        } else {
            self.features.GL_EXT_separate_shader_objects = false;
        }
        if (@ptrCast(?glCreateShaderProgramEXT, try loader("glCreateShaderProgramEXT"))) |ptr| {
            self.CreateShaderProgramEXT = ptr;
        } else {
            self.features.GL_EXT_separate_shader_objects = false;
        }
        if (@ptrCast(?glUseShaderProgramEXT, try loader("glUseShaderProgramEXT"))) |ptr| {
            self.UseShaderProgramEXT = ptr;
        } else {
            self.features.GL_EXT_separate_shader_objects = false;
        }
        if (@ptrCast(?glFramebufferFetchBarrierEXT, try loader("glFramebufferFetchBarrierEXT"))) |ptr| {
            self.FramebufferFetchBarrierEXT = ptr;
        } else {
            self.features.GL_EXT_shader_framebuffer_fetch_non_coherent = false;
        }
        if (@ptrCast(?glBindImageTextureEXT, try loader("glBindImageTextureEXT"))) |ptr| {
            self.BindImageTextureEXT = ptr;
        } else {
            self.features.GL_EXT_shader_image_load_store = false;
        }
        if (@ptrCast(?glMemoryBarrierEXT, try loader("glMemoryBarrierEXT"))) |ptr| {
            self.MemoryBarrierEXT = ptr;
        } else {
            self.features.GL_EXT_shader_image_load_store = false;
        }
        if (@ptrCast(?glStencilClearTagEXT, try loader("glStencilClearTagEXT"))) |ptr| {
            self.StencilClearTagEXT = ptr;
        } else {
            self.features.GL_EXT_stencil_clear_tag = false;
        }
        if (@ptrCast(?glActiveStencilFaceEXT, try loader("glActiveStencilFaceEXT"))) |ptr| {
            self.ActiveStencilFaceEXT = ptr;
        } else {
            self.features.GL_EXT_stencil_two_side = false;
        }
        if (@ptrCast(?glTexSubImage1DEXT, try loader("glTexSubImage1DEXT"))) |ptr| {
            self.TexSubImage1DEXT = ptr;
        } else {
            self.features.GL_EXT_subtexture = false;
        }
        if (@ptrCast(?glTexSubImage2DEXT, try loader("glTexSubImage2DEXT"))) |ptr| {
            self.TexSubImage2DEXT = ptr;
        } else {
            self.features.GL_EXT_subtexture = false;
        }
        if (@ptrCast(?glTexImage3DEXT, try loader("glTexImage3DEXT"))) |ptr| {
            self.TexImage3DEXT = ptr;
        } else {
            self.features.GL_EXT_texture3D = false;
        }
        if (@ptrCast(?glTexSubImage3DEXT, try loader("glTexSubImage3DEXT"))) |ptr| {
            self.TexSubImage3DEXT = ptr;
        } else {
            self.features.GL_EXT_texture3D = false;
        }
        if (@ptrCast(?glFramebufferTextureLayerEXT, try loader("glFramebufferTextureLayerEXT"))) |ptr| {
            self.FramebufferTextureLayerEXT = ptr;
        } else {
            self.features.GL_EXT_texture_array = false;
        }
        if (@ptrCast(?glTexBufferEXT, try loader("glTexBufferEXT"))) |ptr| {
            self.TexBufferEXT = ptr;
        } else {
            self.features.GL_EXT_texture_buffer_object = false;
        }
        if (@ptrCast(?glClearColorIiEXT, try loader("glClearColorIiEXT"))) |ptr| {
            self.ClearColorIiEXT = ptr;
        } else {
            self.features.GL_EXT_texture_integer = false;
        }
        if (@ptrCast(?glClearColorIuiEXT, try loader("glClearColorIuiEXT"))) |ptr| {
            self.ClearColorIuiEXT = ptr;
        } else {
            self.features.GL_EXT_texture_integer = false;
        }
        if (@ptrCast(?glGetTexParameterIivEXT, try loader("glGetTexParameterIivEXT"))) |ptr| {
            self.GetTexParameterIivEXT = ptr;
        } else {
            self.features.GL_EXT_texture_integer = false;
        }
        if (@ptrCast(?glGetTexParameterIuivEXT, try loader("glGetTexParameterIuivEXT"))) |ptr| {
            self.GetTexParameterIuivEXT = ptr;
        } else {
            self.features.GL_EXT_texture_integer = false;
        }
        if (@ptrCast(?glTexParameterIivEXT, try loader("glTexParameterIivEXT"))) |ptr| {
            self.TexParameterIivEXT = ptr;
        } else {
            self.features.GL_EXT_texture_integer = false;
        }
        if (@ptrCast(?glTexParameterIuivEXT, try loader("glTexParameterIuivEXT"))) |ptr| {
            self.TexParameterIuivEXT = ptr;
        } else {
            self.features.GL_EXT_texture_integer = false;
        }
        if (@ptrCast(?glAreTexturesResidentEXT, try loader("glAreTexturesResidentEXT"))) |ptr| {
            self.AreTexturesResidentEXT = ptr;
        } else {
            self.features.GL_EXT_texture_object = false;
        }
        if (@ptrCast(?glBindTextureEXT, try loader("glBindTextureEXT"))) |ptr| {
            self.BindTextureEXT = ptr;
        } else {
            self.features.GL_EXT_texture_object = false;
        }
        if (@ptrCast(?glDeleteTexturesEXT, try loader("glDeleteTexturesEXT"))) |ptr| {
            self.DeleteTexturesEXT = ptr;
        } else {
            self.features.GL_EXT_texture_object = false;
        }
        if (@ptrCast(?glGenTexturesEXT, try loader("glGenTexturesEXT"))) |ptr| {
            self.GenTexturesEXT = ptr;
        } else {
            self.features.GL_EXT_texture_object = false;
        }
        if (@ptrCast(?glIsTextureEXT, try loader("glIsTextureEXT"))) |ptr| {
            self.IsTextureEXT = ptr;
        } else {
            self.features.GL_EXT_texture_object = false;
        }
        if (@ptrCast(?glPrioritizeTexturesEXT, try loader("glPrioritizeTexturesEXT"))) |ptr| {
            self.PrioritizeTexturesEXT = ptr;
        } else {
            self.features.GL_EXT_texture_object = false;
        }
        if (@ptrCast(?glTextureNormalEXT, try loader("glTextureNormalEXT"))) |ptr| {
            self.TextureNormalEXT = ptr;
        } else {
            self.features.GL_EXT_texture_perturb_normal = false;
        }
        if (@ptrCast(?glGetQueryObjecti64vEXT, try loader("glGetQueryObjecti64vEXT"))) |ptr| {
            self.GetQueryObjecti64vEXT = ptr;
        } else {
            self.features.GL_EXT_timer_query = false;
        }
        if (@ptrCast(?glGetQueryObjectui64vEXT, try loader("glGetQueryObjectui64vEXT"))) |ptr| {
            self.GetQueryObjectui64vEXT = ptr;
        } else {
            self.features.GL_EXT_timer_query = false;
        }
        if (@ptrCast(?glBeginTransformFeedbackEXT, try loader("glBeginTransformFeedbackEXT"))) |ptr| {
            self.BeginTransformFeedbackEXT = ptr;
        } else {
            self.features.GL_EXT_transform_feedback = false;
        }
        if (@ptrCast(?glBindBufferBaseEXT, try loader("glBindBufferBaseEXT"))) |ptr| {
            self.BindBufferBaseEXT = ptr;
        } else {
            self.features.GL_EXT_transform_feedback = false;
        }
        if (@ptrCast(?glBindBufferOffsetEXT, try loader("glBindBufferOffsetEXT"))) |ptr| {
            self.BindBufferOffsetEXT = ptr;
        } else {
            self.features.GL_EXT_transform_feedback = false;
        }
        if (@ptrCast(?glBindBufferRangeEXT, try loader("glBindBufferRangeEXT"))) |ptr| {
            self.BindBufferRangeEXT = ptr;
        } else {
            self.features.GL_EXT_transform_feedback = false;
        }
        if (@ptrCast(?glEndTransformFeedbackEXT, try loader("glEndTransformFeedbackEXT"))) |ptr| {
            self.EndTransformFeedbackEXT = ptr;
        } else {
            self.features.GL_EXT_transform_feedback = false;
        }
        if (@ptrCast(?glGetTransformFeedbackVaryingEXT, try loader("glGetTransformFeedbackVaryingEXT"))) |ptr| {
            self.GetTransformFeedbackVaryingEXT = ptr;
        } else {
            self.features.GL_EXT_transform_feedback = false;
        }
        if (@ptrCast(?glTransformFeedbackVaryingsEXT, try loader("glTransformFeedbackVaryingsEXT"))) |ptr| {
            self.TransformFeedbackVaryingsEXT = ptr;
        } else {
            self.features.GL_EXT_transform_feedback = false;
        }
        if (@ptrCast(?glArrayElementEXT, try loader("glArrayElementEXT"))) |ptr| {
            self.ArrayElementEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_array = false;
        }
        if (@ptrCast(?glColorPointerEXT, try loader("glColorPointerEXT"))) |ptr| {
            self.ColorPointerEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_array = false;
        }
        if (@ptrCast(?glDrawArraysEXT, try loader("glDrawArraysEXT"))) |ptr| {
            self.DrawArraysEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_array = false;
        }
        if (@ptrCast(?glEdgeFlagPointerEXT, try loader("glEdgeFlagPointerEXT"))) |ptr| {
            self.EdgeFlagPointerEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_array = false;
        }
        if (@ptrCast(?glGetPointervEXT, try loader("glGetPointervEXT"))) |ptr| {
            self.GetPointervEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_array = false;
        }
        if (@ptrCast(?glIndexPointerEXT, try loader("glIndexPointerEXT"))) |ptr| {
            self.IndexPointerEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_array = false;
        }
        if (@ptrCast(?glNormalPointerEXT, try loader("glNormalPointerEXT"))) |ptr| {
            self.NormalPointerEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_array = false;
        }
        if (@ptrCast(?glTexCoordPointerEXT, try loader("glTexCoordPointerEXT"))) |ptr| {
            self.TexCoordPointerEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_array = false;
        }
        if (@ptrCast(?glVertexPointerEXT, try loader("glVertexPointerEXT"))) |ptr| {
            self.VertexPointerEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_array = false;
        }
        if (@ptrCast(?glGetVertexAttribLdvEXT, try loader("glGetVertexAttribLdvEXT"))) |ptr| {
            self.GetVertexAttribLdvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL1dEXT, try loader("glVertexAttribL1dEXT"))) |ptr| {
            self.VertexAttribL1dEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL1dvEXT, try loader("glVertexAttribL1dvEXT"))) |ptr| {
            self.VertexAttribL1dvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL2dEXT, try loader("glVertexAttribL2dEXT"))) |ptr| {
            self.VertexAttribL2dEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL2dvEXT, try loader("glVertexAttribL2dvEXT"))) |ptr| {
            self.VertexAttribL2dvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL3dEXT, try loader("glVertexAttribL3dEXT"))) |ptr| {
            self.VertexAttribL3dEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL3dvEXT, try loader("glVertexAttribL3dvEXT"))) |ptr| {
            self.VertexAttribL3dvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL4dEXT, try loader("glVertexAttribL4dEXT"))) |ptr| {
            self.VertexAttribL4dEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL4dvEXT, try loader("glVertexAttribL4dvEXT"))) |ptr| {
            self.VertexAttribL4dvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glVertexAttribLPointerEXT, try loader("glVertexAttribLPointerEXT"))) |ptr| {
            self.VertexAttribLPointerEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_attrib_64bit = false;
        }
        if (@ptrCast(?glBeginVertexShaderEXT, try loader("glBeginVertexShaderEXT"))) |ptr| {
            self.BeginVertexShaderEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glBindLightParameterEXT, try loader("glBindLightParameterEXT"))) |ptr| {
            self.BindLightParameterEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glBindMaterialParameterEXT, try loader("glBindMaterialParameterEXT"))) |ptr| {
            self.BindMaterialParameterEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glBindParameterEXT, try loader("glBindParameterEXT"))) |ptr| {
            self.BindParameterEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glBindTexGenParameterEXT, try loader("glBindTexGenParameterEXT"))) |ptr| {
            self.BindTexGenParameterEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glBindTextureUnitParameterEXT, try loader("glBindTextureUnitParameterEXT"))) |ptr| {
            self.BindTextureUnitParameterEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glBindVertexShaderEXT, try loader("glBindVertexShaderEXT"))) |ptr| {
            self.BindVertexShaderEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glDeleteVertexShaderEXT, try loader("glDeleteVertexShaderEXT"))) |ptr| {
            self.DeleteVertexShaderEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glDisableVariantClientStateEXT, try loader("glDisableVariantClientStateEXT"))) |ptr| {
            self.DisableVariantClientStateEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glEnableVariantClientStateEXT, try loader("glEnableVariantClientStateEXT"))) |ptr| {
            self.EnableVariantClientStateEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glEndVertexShaderEXT, try loader("glEndVertexShaderEXT"))) |ptr| {
            self.EndVertexShaderEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glExtractComponentEXT, try loader("glExtractComponentEXT"))) |ptr| {
            self.ExtractComponentEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glGenSymbolsEXT, try loader("glGenSymbolsEXT"))) |ptr| {
            self.GenSymbolsEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glGenVertexShadersEXT, try loader("glGenVertexShadersEXT"))) |ptr| {
            self.GenVertexShadersEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glGetInvariantBooleanvEXT, try loader("glGetInvariantBooleanvEXT"))) |ptr| {
            self.GetInvariantBooleanvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glGetInvariantFloatvEXT, try loader("glGetInvariantFloatvEXT"))) |ptr| {
            self.GetInvariantFloatvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glGetInvariantIntegervEXT, try loader("glGetInvariantIntegervEXT"))) |ptr| {
            self.GetInvariantIntegervEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glGetLocalConstantBooleanvEXT, try loader("glGetLocalConstantBooleanvEXT"))) |ptr| {
            self.GetLocalConstantBooleanvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glGetLocalConstantFloatvEXT, try loader("glGetLocalConstantFloatvEXT"))) |ptr| {
            self.GetLocalConstantFloatvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glGetLocalConstantIntegervEXT, try loader("glGetLocalConstantIntegervEXT"))) |ptr| {
            self.GetLocalConstantIntegervEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glGetVariantBooleanvEXT, try loader("glGetVariantBooleanvEXT"))) |ptr| {
            self.GetVariantBooleanvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glGetVariantFloatvEXT, try loader("glGetVariantFloatvEXT"))) |ptr| {
            self.GetVariantFloatvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glGetVariantIntegervEXT, try loader("glGetVariantIntegervEXT"))) |ptr| {
            self.GetVariantIntegervEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glGetVariantPointervEXT, try loader("glGetVariantPointervEXT"))) |ptr| {
            self.GetVariantPointervEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glInsertComponentEXT, try loader("glInsertComponentEXT"))) |ptr| {
            self.InsertComponentEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glIsVariantEnabledEXT, try loader("glIsVariantEnabledEXT"))) |ptr| {
            self.IsVariantEnabledEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glSetInvariantEXT, try loader("glSetInvariantEXT"))) |ptr| {
            self.SetInvariantEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glSetLocalConstantEXT, try loader("glSetLocalConstantEXT"))) |ptr| {
            self.SetLocalConstantEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glShaderOp1EXT, try loader("glShaderOp1EXT"))) |ptr| {
            self.ShaderOp1EXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glShaderOp2EXT, try loader("glShaderOp2EXT"))) |ptr| {
            self.ShaderOp2EXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glShaderOp3EXT, try loader("glShaderOp3EXT"))) |ptr| {
            self.ShaderOp3EXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glSwizzleEXT, try loader("glSwizzleEXT"))) |ptr| {
            self.SwizzleEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glVariantPointerEXT, try loader("glVariantPointerEXT"))) |ptr| {
            self.VariantPointerEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glVariantbvEXT, try loader("glVariantbvEXT"))) |ptr| {
            self.VariantbvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glVariantdvEXT, try loader("glVariantdvEXT"))) |ptr| {
            self.VariantdvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glVariantfvEXT, try loader("glVariantfvEXT"))) |ptr| {
            self.VariantfvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glVariantivEXT, try loader("glVariantivEXT"))) |ptr| {
            self.VariantivEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glVariantsvEXT, try loader("glVariantsvEXT"))) |ptr| {
            self.VariantsvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glVariantubvEXT, try loader("glVariantubvEXT"))) |ptr| {
            self.VariantubvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glVariantuivEXT, try loader("glVariantuivEXT"))) |ptr| {
            self.VariantuivEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glVariantusvEXT, try loader("glVariantusvEXT"))) |ptr| {
            self.VariantusvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glWriteMaskEXT, try loader("glWriteMaskEXT"))) |ptr| {
            self.WriteMaskEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_shader = false;
        }
        if (@ptrCast(?glVertexWeightPointerEXT, try loader("glVertexWeightPointerEXT"))) |ptr| {
            self.VertexWeightPointerEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_weighting = false;
        }
        if (@ptrCast(?glVertexWeightfEXT, try loader("glVertexWeightfEXT"))) |ptr| {
            self.VertexWeightfEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_weighting = false;
        }
        if (@ptrCast(?glVertexWeightfvEXT, try loader("glVertexWeightfvEXT"))) |ptr| {
            self.VertexWeightfvEXT = ptr;
        } else {
            self.features.GL_EXT_vertex_weighting = false;
        }
        if (@ptrCast(?glAcquireKeyedMutexWin32EXT, try loader("glAcquireKeyedMutexWin32EXT"))) |ptr| {
            self.AcquireKeyedMutexWin32EXT = ptr;
        } else {
            self.features.GL_EXT_win32_keyed_mutex = false;
        }
        if (@ptrCast(?glReleaseKeyedMutexWin32EXT, try loader("glReleaseKeyedMutexWin32EXT"))) |ptr| {
            self.ReleaseKeyedMutexWin32EXT = ptr;
        } else {
            self.features.GL_EXT_win32_keyed_mutex = false;
        }
        if (@ptrCast(?glWindowRectanglesEXT, try loader("glWindowRectanglesEXT"))) |ptr| {
            self.WindowRectanglesEXT = ptr;
        } else {
            self.features.GL_EXT_window_rectangles = false;
        }
        if (@ptrCast(?glImportSyncEXT, try loader("glImportSyncEXT"))) |ptr| {
            self.ImportSyncEXT = ptr;
        } else {
            self.features.GL_EXT_x11_sync_object = false;
        }
        if (@ptrCast(?glFrameTerminatorGREMEDY, try loader("glFrameTerminatorGREMEDY"))) |ptr| {
            self.FrameTerminatorGREMEDY = ptr;
        } else {
            self.features.GL_GREMEDY_frame_terminator = false;
        }
        if (@ptrCast(?glStringMarkerGREMEDY, try loader("glStringMarkerGREMEDY"))) |ptr| {
            self.StringMarkerGREMEDY = ptr;
        } else {
            self.features.GL_GREMEDY_string_marker = false;
        }
        if (@ptrCast(?glGetImageTransformParameterfvHP, try loader("glGetImageTransformParameterfvHP"))) |ptr| {
            self.GetImageTransformParameterfvHP = ptr;
        } else {
            self.features.GL_HP_image_transform = false;
        }
        if (@ptrCast(?glGetImageTransformParameterivHP, try loader("glGetImageTransformParameterivHP"))) |ptr| {
            self.GetImageTransformParameterivHP = ptr;
        } else {
            self.features.GL_HP_image_transform = false;
        }
        if (@ptrCast(?glImageTransformParameterfHP, try loader("glImageTransformParameterfHP"))) |ptr| {
            self.ImageTransformParameterfHP = ptr;
        } else {
            self.features.GL_HP_image_transform = false;
        }
        if (@ptrCast(?glImageTransformParameterfvHP, try loader("glImageTransformParameterfvHP"))) |ptr| {
            self.ImageTransformParameterfvHP = ptr;
        } else {
            self.features.GL_HP_image_transform = false;
        }
        if (@ptrCast(?glImageTransformParameteriHP, try loader("glImageTransformParameteriHP"))) |ptr| {
            self.ImageTransformParameteriHP = ptr;
        } else {
            self.features.GL_HP_image_transform = false;
        }
        if (@ptrCast(?glImageTransformParameterivHP, try loader("glImageTransformParameterivHP"))) |ptr| {
            self.ImageTransformParameterivHP = ptr;
        } else {
            self.features.GL_HP_image_transform = false;
        }
        if (@ptrCast(?glMultiModeDrawArraysIBM, try loader("glMultiModeDrawArraysIBM"))) |ptr| {
            self.MultiModeDrawArraysIBM = ptr;
        } else {
            self.features.GL_IBM_multimode_draw_arrays = false;
        }
        if (@ptrCast(?glMultiModeDrawElementsIBM, try loader("glMultiModeDrawElementsIBM"))) |ptr| {
            self.MultiModeDrawElementsIBM = ptr;
        } else {
            self.features.GL_IBM_multimode_draw_arrays = false;
        }
        if (@ptrCast(?glFlushStaticDataIBM, try loader("glFlushStaticDataIBM"))) |ptr| {
            self.FlushStaticDataIBM = ptr;
        } else {
            self.features.GL_IBM_static_data = false;
        }
        if (@ptrCast(?glColorPointerListIBM, try loader("glColorPointerListIBM"))) |ptr| {
            self.ColorPointerListIBM = ptr;
        } else {
            self.features.GL_IBM_vertex_array_lists = false;
        }
        if (@ptrCast(?glEdgeFlagPointerListIBM, try loader("glEdgeFlagPointerListIBM"))) |ptr| {
            self.EdgeFlagPointerListIBM = ptr;
        } else {
            self.features.GL_IBM_vertex_array_lists = false;
        }
        if (@ptrCast(?glFogCoordPointerListIBM, try loader("glFogCoordPointerListIBM"))) |ptr| {
            self.FogCoordPointerListIBM = ptr;
        } else {
            self.features.GL_IBM_vertex_array_lists = false;
        }
        if (@ptrCast(?glIndexPointerListIBM, try loader("glIndexPointerListIBM"))) |ptr| {
            self.IndexPointerListIBM = ptr;
        } else {
            self.features.GL_IBM_vertex_array_lists = false;
        }
        if (@ptrCast(?glNormalPointerListIBM, try loader("glNormalPointerListIBM"))) |ptr| {
            self.NormalPointerListIBM = ptr;
        } else {
            self.features.GL_IBM_vertex_array_lists = false;
        }
        if (@ptrCast(?glSecondaryColorPointerListIBM, try loader("glSecondaryColorPointerListIBM"))) |ptr| {
            self.SecondaryColorPointerListIBM = ptr;
        } else {
            self.features.GL_IBM_vertex_array_lists = false;
        }
        if (@ptrCast(?glTexCoordPointerListIBM, try loader("glTexCoordPointerListIBM"))) |ptr| {
            self.TexCoordPointerListIBM = ptr;
        } else {
            self.features.GL_IBM_vertex_array_lists = false;
        }
        if (@ptrCast(?glVertexPointerListIBM, try loader("glVertexPointerListIBM"))) |ptr| {
            self.VertexPointerListIBM = ptr;
        } else {
            self.features.GL_IBM_vertex_array_lists = false;
        }
        if (@ptrCast(?glBlendFuncSeparateINGR, try loader("glBlendFuncSeparateINGR"))) |ptr| {
            self.BlendFuncSeparateINGR = ptr;
        } else {
            self.features.GL_INGR_blend_func_separate = false;
        }
        if (@ptrCast(?glApplyFramebufferAttachmentCMAAINTEL, try loader("glApplyFramebufferAttachmentCMAAINTEL"))) |ptr| {
            self.ApplyFramebufferAttachmentCMAAINTEL = ptr;
        } else {
            self.features.GL_INTEL_framebuffer_CMAA = false;
        }
        if (@ptrCast(?glMapTexture2DINTEL, try loader("glMapTexture2DINTEL"))) |ptr| {
            self.MapTexture2DINTEL = ptr;
        } else {
            self.features.GL_INTEL_map_texture = false;
        }
        if (@ptrCast(?glSyncTextureINTEL, try loader("glSyncTextureINTEL"))) |ptr| {
            self.SyncTextureINTEL = ptr;
        } else {
            self.features.GL_INTEL_map_texture = false;
        }
        if (@ptrCast(?glUnmapTexture2DINTEL, try loader("glUnmapTexture2DINTEL"))) |ptr| {
            self.UnmapTexture2DINTEL = ptr;
        } else {
            self.features.GL_INTEL_map_texture = false;
        }
        if (@ptrCast(?glColorPointervINTEL, try loader("glColorPointervINTEL"))) |ptr| {
            self.ColorPointervINTEL = ptr;
        } else {
            self.features.GL_INTEL_parallel_arrays = false;
        }
        if (@ptrCast(?glNormalPointervINTEL, try loader("glNormalPointervINTEL"))) |ptr| {
            self.NormalPointervINTEL = ptr;
        } else {
            self.features.GL_INTEL_parallel_arrays = false;
        }
        if (@ptrCast(?glTexCoordPointervINTEL, try loader("glTexCoordPointervINTEL"))) |ptr| {
            self.TexCoordPointervINTEL = ptr;
        } else {
            self.features.GL_INTEL_parallel_arrays = false;
        }
        if (@ptrCast(?glVertexPointervINTEL, try loader("glVertexPointervINTEL"))) |ptr| {
            self.VertexPointervINTEL = ptr;
        } else {
            self.features.GL_INTEL_parallel_arrays = false;
        }
        if (@ptrCast(?glBeginPerfQueryINTEL, try loader("glBeginPerfQueryINTEL"))) |ptr| {
            self.BeginPerfQueryINTEL = ptr;
        } else {
            self.features.GL_INTEL_performance_query = false;
        }
        if (@ptrCast(?glCreatePerfQueryINTEL, try loader("glCreatePerfQueryINTEL"))) |ptr| {
            self.CreatePerfQueryINTEL = ptr;
        } else {
            self.features.GL_INTEL_performance_query = false;
        }
        if (@ptrCast(?glDeletePerfQueryINTEL, try loader("glDeletePerfQueryINTEL"))) |ptr| {
            self.DeletePerfQueryINTEL = ptr;
        } else {
            self.features.GL_INTEL_performance_query = false;
        }
        if (@ptrCast(?glEndPerfQueryINTEL, try loader("glEndPerfQueryINTEL"))) |ptr| {
            self.EndPerfQueryINTEL = ptr;
        } else {
            self.features.GL_INTEL_performance_query = false;
        }
        if (@ptrCast(?glGetFirstPerfQueryIdINTEL, try loader("glGetFirstPerfQueryIdINTEL"))) |ptr| {
            self.GetFirstPerfQueryIdINTEL = ptr;
        } else {
            self.features.GL_INTEL_performance_query = false;
        }
        if (@ptrCast(?glGetNextPerfQueryIdINTEL, try loader("glGetNextPerfQueryIdINTEL"))) |ptr| {
            self.GetNextPerfQueryIdINTEL = ptr;
        } else {
            self.features.GL_INTEL_performance_query = false;
        }
        if (@ptrCast(?glGetPerfCounterInfoINTEL, try loader("glGetPerfCounterInfoINTEL"))) |ptr| {
            self.GetPerfCounterInfoINTEL = ptr;
        } else {
            self.features.GL_INTEL_performance_query = false;
        }
        if (@ptrCast(?glGetPerfQueryDataINTEL, try loader("glGetPerfQueryDataINTEL"))) |ptr| {
            self.GetPerfQueryDataINTEL = ptr;
        } else {
            self.features.GL_INTEL_performance_query = false;
        }
        if (@ptrCast(?glGetPerfQueryIdByNameINTEL, try loader("glGetPerfQueryIdByNameINTEL"))) |ptr| {
            self.GetPerfQueryIdByNameINTEL = ptr;
        } else {
            self.features.GL_INTEL_performance_query = false;
        }
        if (@ptrCast(?glGetPerfQueryInfoINTEL, try loader("glGetPerfQueryInfoINTEL"))) |ptr| {
            self.GetPerfQueryInfoINTEL = ptr;
        } else {
            self.features.GL_INTEL_performance_query = false;
        }
        if (@ptrCast(?glBlendBarrierKHR, try loader("glBlendBarrierKHR"))) |ptr| {
            self.BlendBarrierKHR = ptr;
        } else {
            self.features.GL_KHR_blend_equation_advanced = false;
        }
        if (@ptrCast(?glDebugMessageCallback, try loader("glDebugMessageCallback"))) |ptr| {
            self.DebugMessageCallback = ptr;
        } else {
            self.features.GL_KHR_debug = false;
        }
        if (@ptrCast(?glDebugMessageControl, try loader("glDebugMessageControl"))) |ptr| {
            self.DebugMessageControl = ptr;
        } else {
            self.features.GL_KHR_debug = false;
        }
        if (@ptrCast(?glDebugMessageInsert, try loader("glDebugMessageInsert"))) |ptr| {
            self.DebugMessageInsert = ptr;
        } else {
            self.features.GL_KHR_debug = false;
        }
        if (@ptrCast(?glGetDebugMessageLog, try loader("glGetDebugMessageLog"))) |ptr| {
            self.GetDebugMessageLog = ptr;
        } else {
            self.features.GL_KHR_debug = false;
        }
        if (@ptrCast(?glGetObjectLabel, try loader("glGetObjectLabel"))) |ptr| {
            self.GetObjectLabel = ptr;
        } else {
            self.features.GL_KHR_debug = false;
        }
        if (@ptrCast(?glGetObjectPtrLabel, try loader("glGetObjectPtrLabel"))) |ptr| {
            self.GetObjectPtrLabel = ptr;
        } else {
            self.features.GL_KHR_debug = false;
        }
        if (@ptrCast(?glGetPointerv, try loader("glGetPointerv"))) |ptr| {
            self.GetPointerv = ptr;
        } else {
            self.features.GL_KHR_debug = false;
        }
        if (@ptrCast(?glObjectLabel, try loader("glObjectLabel"))) |ptr| {
            self.ObjectLabel = ptr;
        } else {
            self.features.GL_KHR_debug = false;
        }
        if (@ptrCast(?glObjectPtrLabel, try loader("glObjectPtrLabel"))) |ptr| {
            self.ObjectPtrLabel = ptr;
        } else {
            self.features.GL_KHR_debug = false;
        }
        if (@ptrCast(?glPopDebugGroup, try loader("glPopDebugGroup"))) |ptr| {
            self.PopDebugGroup = ptr;
        } else {
            self.features.GL_KHR_debug = false;
        }
        if (@ptrCast(?glPushDebugGroup, try loader("glPushDebugGroup"))) |ptr| {
            self.PushDebugGroup = ptr;
        } else {
            self.features.GL_KHR_debug = false;
        }
        if (@ptrCast(?glMaxShaderCompilerThreadsKHR, try loader("glMaxShaderCompilerThreadsKHR"))) |ptr| {
            self.MaxShaderCompilerThreadsKHR = ptr;
        } else {
            self.features.GL_KHR_parallel_shader_compile = false;
        }
        if (@ptrCast(?glGetGraphicsResetStatus, try loader("glGetGraphicsResetStatus"))) |ptr| {
            self.GetGraphicsResetStatus = ptr;
        } else {
            self.features.GL_KHR_robustness = false;
        }
        if (@ptrCast(?glGetnUniformfv, try loader("glGetnUniformfv"))) |ptr| {
            self.GetnUniformfv = ptr;
        } else {
            self.features.GL_KHR_robustness = false;
        }
        if (@ptrCast(?glGetnUniformiv, try loader("glGetnUniformiv"))) |ptr| {
            self.GetnUniformiv = ptr;
        } else {
            self.features.GL_KHR_robustness = false;
        }
        if (@ptrCast(?glGetnUniformuiv, try loader("glGetnUniformuiv"))) |ptr| {
            self.GetnUniformuiv = ptr;
        } else {
            self.features.GL_KHR_robustness = false;
        }
        if (@ptrCast(?glReadnPixels, try loader("glReadnPixels"))) |ptr| {
            self.ReadnPixels = ptr;
        } else {
            self.features.GL_KHR_robustness = false;
        }
        if (@ptrCast(?glFramebufferParameteriMESA, try loader("glFramebufferParameteriMESA"))) |ptr| {
            self.FramebufferParameteriMESA = ptr;
        } else {
            self.features.GL_MESA_framebuffer_flip_y = false;
        }
        if (@ptrCast(?glGetFramebufferParameterivMESA, try loader("glGetFramebufferParameterivMESA"))) |ptr| {
            self.GetFramebufferParameterivMESA = ptr;
        } else {
            self.features.GL_MESA_framebuffer_flip_y = false;
        }
        if (@ptrCast(?glResizeBuffersMESA, try loader("glResizeBuffersMESA"))) |ptr| {
            self.ResizeBuffersMESA = ptr;
        } else {
            self.features.GL_MESA_resize_buffers = false;
        }
        if (@ptrCast(?glWindowPos2dMESA, try loader("glWindowPos2dMESA"))) |ptr| {
            self.WindowPos2dMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2dvMESA, try loader("glWindowPos2dvMESA"))) |ptr| {
            self.WindowPos2dvMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2fMESA, try loader("glWindowPos2fMESA"))) |ptr| {
            self.WindowPos2fMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2fvMESA, try loader("glWindowPos2fvMESA"))) |ptr| {
            self.WindowPos2fvMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2iMESA, try loader("glWindowPos2iMESA"))) |ptr| {
            self.WindowPos2iMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2ivMESA, try loader("glWindowPos2ivMESA"))) |ptr| {
            self.WindowPos2ivMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2sMESA, try loader("glWindowPos2sMESA"))) |ptr| {
            self.WindowPos2sMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos2svMESA, try loader("glWindowPos2svMESA"))) |ptr| {
            self.WindowPos2svMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3dMESA, try loader("glWindowPos3dMESA"))) |ptr| {
            self.WindowPos3dMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3dvMESA, try loader("glWindowPos3dvMESA"))) |ptr| {
            self.WindowPos3dvMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3fMESA, try loader("glWindowPos3fMESA"))) |ptr| {
            self.WindowPos3fMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3fvMESA, try loader("glWindowPos3fvMESA"))) |ptr| {
            self.WindowPos3fvMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3iMESA, try loader("glWindowPos3iMESA"))) |ptr| {
            self.WindowPos3iMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3ivMESA, try loader("glWindowPos3ivMESA"))) |ptr| {
            self.WindowPos3ivMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3sMESA, try loader("glWindowPos3sMESA"))) |ptr| {
            self.WindowPos3sMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos3svMESA, try loader("glWindowPos3svMESA"))) |ptr| {
            self.WindowPos3svMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos4dMESA, try loader("glWindowPos4dMESA"))) |ptr| {
            self.WindowPos4dMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos4dvMESA, try loader("glWindowPos4dvMESA"))) |ptr| {
            self.WindowPos4dvMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos4fMESA, try loader("glWindowPos4fMESA"))) |ptr| {
            self.WindowPos4fMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos4fvMESA, try loader("glWindowPos4fvMESA"))) |ptr| {
            self.WindowPos4fvMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos4iMESA, try loader("glWindowPos4iMESA"))) |ptr| {
            self.WindowPos4iMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos4ivMESA, try loader("glWindowPos4ivMESA"))) |ptr| {
            self.WindowPos4ivMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos4sMESA, try loader("glWindowPos4sMESA"))) |ptr| {
            self.WindowPos4sMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glWindowPos4svMESA, try loader("glWindowPos4svMESA"))) |ptr| {
            self.WindowPos4svMESA = ptr;
        } else {
            self.features.GL_MESA_window_pos = false;
        }
        if (@ptrCast(?glBeginConditionalRenderNVX, try loader("glBeginConditionalRenderNVX"))) |ptr| {
            self.BeginConditionalRenderNVX = ptr;
        } else {
            self.features.GL_NVX_conditional_render = false;
        }
        if (@ptrCast(?glEndConditionalRenderNVX, try loader("glEndConditionalRenderNVX"))) |ptr| {
            self.EndConditionalRenderNVX = ptr;
        } else {
            self.features.GL_NVX_conditional_render = false;
        }
        if (@ptrCast(?glAsyncCopyBufferSubDataNVX, try loader("glAsyncCopyBufferSubDataNVX"))) |ptr| {
            self.AsyncCopyBufferSubDataNVX = ptr;
        } else {
            self.features.GL_NVX_gpu_multicast2 = false;
        }
        if (@ptrCast(?glAsyncCopyImageSubDataNVX, try loader("glAsyncCopyImageSubDataNVX"))) |ptr| {
            self.AsyncCopyImageSubDataNVX = ptr;
        } else {
            self.features.GL_NVX_gpu_multicast2 = false;
        }
        if (@ptrCast(?glMulticastScissorArrayvNVX, try loader("glMulticastScissorArrayvNVX"))) |ptr| {
            self.MulticastScissorArrayvNVX = ptr;
        } else {
            self.features.GL_NVX_gpu_multicast2 = false;
        }
        if (@ptrCast(?glMulticastViewportArrayvNVX, try loader("glMulticastViewportArrayvNVX"))) |ptr| {
            self.MulticastViewportArrayvNVX = ptr;
        } else {
            self.features.GL_NVX_gpu_multicast2 = false;
        }
        if (@ptrCast(?glMulticastViewportPositionWScaleNVX, try loader("glMulticastViewportPositionWScaleNVX"))) |ptr| {
            self.MulticastViewportPositionWScaleNVX = ptr;
        } else {
            self.features.GL_NVX_gpu_multicast2 = false;
        }
        if (@ptrCast(?glUploadGpuMaskNVX, try loader("glUploadGpuMaskNVX"))) |ptr| {
            self.UploadGpuMaskNVX = ptr;
        } else {
            self.features.GL_NVX_gpu_multicast2 = false;
        }
        if (@ptrCast(?glLGPUCopyImageSubDataNVX, try loader("glLGPUCopyImageSubDataNVX"))) |ptr| {
            self.LGPUCopyImageSubDataNVX = ptr;
        } else {
            self.features.GL_NVX_linked_gpu_multicast = false;
        }
        if (@ptrCast(?glLGPUInterlockNVX, try loader("glLGPUInterlockNVX"))) |ptr| {
            self.LGPUInterlockNVX = ptr;
        } else {
            self.features.GL_NVX_linked_gpu_multicast = false;
        }
        if (@ptrCast(?glLGPUNamedBufferSubDataNVX, try loader("glLGPUNamedBufferSubDataNVX"))) |ptr| {
            self.LGPUNamedBufferSubDataNVX = ptr;
        } else {
            self.features.GL_NVX_linked_gpu_multicast = false;
        }
        if (@ptrCast(?glClientWaitSemaphoreui64NVX, try loader("glClientWaitSemaphoreui64NVX"))) |ptr| {
            self.ClientWaitSemaphoreui64NVX = ptr;
        } else {
            self.features.GL_NVX_progress_fence = false;
        }
        if (@ptrCast(?glCreateProgressFenceNVX, try loader("glCreateProgressFenceNVX"))) |ptr| {
            self.CreateProgressFenceNVX = ptr;
        } else {
            self.features.GL_NVX_progress_fence = false;
        }
        if (@ptrCast(?glSignalSemaphoreui64NVX, try loader("glSignalSemaphoreui64NVX"))) |ptr| {
            self.SignalSemaphoreui64NVX = ptr;
        } else {
            self.features.GL_NVX_progress_fence = false;
        }
        if (@ptrCast(?glWaitSemaphoreui64NVX, try loader("glWaitSemaphoreui64NVX"))) |ptr| {
            self.WaitSemaphoreui64NVX = ptr;
        } else {
            self.features.GL_NVX_progress_fence = false;
        }
        if (@ptrCast(?glAlphaToCoverageDitherControlNV, try loader("glAlphaToCoverageDitherControlNV"))) |ptr| {
            self.AlphaToCoverageDitherControlNV = ptr;
        } else {
            self.features.GL_NV_alpha_to_coverage_dither_control = false;
        }
        if (@ptrCast(?glMultiDrawArraysIndirectBindlessNV, try loader("glMultiDrawArraysIndirectBindlessNV"))) |ptr| {
            self.MultiDrawArraysIndirectBindlessNV = ptr;
        } else {
            self.features.GL_NV_bindless_multi_draw_indirect = false;
        }
        if (@ptrCast(?glMultiDrawElementsIndirectBindlessNV, try loader("glMultiDrawElementsIndirectBindlessNV"))) |ptr| {
            self.MultiDrawElementsIndirectBindlessNV = ptr;
        } else {
            self.features.GL_NV_bindless_multi_draw_indirect = false;
        }
        if (@ptrCast(?glMultiDrawArraysIndirectBindlessCountNV, try loader("glMultiDrawArraysIndirectBindlessCountNV"))) |ptr| {
            self.MultiDrawArraysIndirectBindlessCountNV = ptr;
        } else {
            self.features.GL_NV_bindless_multi_draw_indirect_count = false;
        }
        if (@ptrCast(?glMultiDrawElementsIndirectBindlessCountNV, try loader("glMultiDrawElementsIndirectBindlessCountNV"))) |ptr| {
            self.MultiDrawElementsIndirectBindlessCountNV = ptr;
        } else {
            self.features.GL_NV_bindless_multi_draw_indirect_count = false;
        }
        if (@ptrCast(?glGetImageHandleNV, try loader("glGetImageHandleNV"))) |ptr| {
            self.GetImageHandleNV = ptr;
        } else {
            self.features.GL_NV_bindless_texture = false;
        }
        if (@ptrCast(?glGetTextureHandleNV, try loader("glGetTextureHandleNV"))) |ptr| {
            self.GetTextureHandleNV = ptr;
        } else {
            self.features.GL_NV_bindless_texture = false;
        }
        if (@ptrCast(?glGetTextureSamplerHandleNV, try loader("glGetTextureSamplerHandleNV"))) |ptr| {
            self.GetTextureSamplerHandleNV = ptr;
        } else {
            self.features.GL_NV_bindless_texture = false;
        }
        if (@ptrCast(?glIsImageHandleResidentNV, try loader("glIsImageHandleResidentNV"))) |ptr| {
            self.IsImageHandleResidentNV = ptr;
        } else {
            self.features.GL_NV_bindless_texture = false;
        }
        if (@ptrCast(?glIsTextureHandleResidentNV, try loader("glIsTextureHandleResidentNV"))) |ptr| {
            self.IsTextureHandleResidentNV = ptr;
        } else {
            self.features.GL_NV_bindless_texture = false;
        }
        if (@ptrCast(?glMakeImageHandleNonResidentNV, try loader("glMakeImageHandleNonResidentNV"))) |ptr| {
            self.MakeImageHandleNonResidentNV = ptr;
        } else {
            self.features.GL_NV_bindless_texture = false;
        }
        if (@ptrCast(?glMakeImageHandleResidentNV, try loader("glMakeImageHandleResidentNV"))) |ptr| {
            self.MakeImageHandleResidentNV = ptr;
        } else {
            self.features.GL_NV_bindless_texture = false;
        }
        if (@ptrCast(?glMakeTextureHandleNonResidentNV, try loader("glMakeTextureHandleNonResidentNV"))) |ptr| {
            self.MakeTextureHandleNonResidentNV = ptr;
        } else {
            self.features.GL_NV_bindless_texture = false;
        }
        if (@ptrCast(?glMakeTextureHandleResidentNV, try loader("glMakeTextureHandleResidentNV"))) |ptr| {
            self.MakeTextureHandleResidentNV = ptr;
        } else {
            self.features.GL_NV_bindless_texture = false;
        }
        if (@ptrCast(?glProgramUniformHandleui64NV, try loader("glProgramUniformHandleui64NV"))) |ptr| {
            self.ProgramUniformHandleui64NV = ptr;
        } else {
            self.features.GL_NV_bindless_texture = false;
        }
        if (@ptrCast(?glProgramUniformHandleui64vNV, try loader("glProgramUniformHandleui64vNV"))) |ptr| {
            self.ProgramUniformHandleui64vNV = ptr;
        } else {
            self.features.GL_NV_bindless_texture = false;
        }
        if (@ptrCast(?glUniformHandleui64NV, try loader("glUniformHandleui64NV"))) |ptr| {
            self.UniformHandleui64NV = ptr;
        } else {
            self.features.GL_NV_bindless_texture = false;
        }
        if (@ptrCast(?glUniformHandleui64vNV, try loader("glUniformHandleui64vNV"))) |ptr| {
            self.UniformHandleui64vNV = ptr;
        } else {
            self.features.GL_NV_bindless_texture = false;
        }
        if (@ptrCast(?glBlendBarrierNV, try loader("glBlendBarrierNV"))) |ptr| {
            self.BlendBarrierNV = ptr;
        } else {
            self.features.GL_NV_blend_equation_advanced = false;
        }
        if (@ptrCast(?glBlendParameteriNV, try loader("glBlendParameteriNV"))) |ptr| {
            self.BlendParameteriNV = ptr;
        } else {
            self.features.GL_NV_blend_equation_advanced = false;
        }
        if (@ptrCast(?glViewportPositionWScaleNV, try loader("glViewportPositionWScaleNV"))) |ptr| {
            self.ViewportPositionWScaleNV = ptr;
        } else {
            self.features.GL_NV_clip_space_w_scaling = false;
        }
        if (@ptrCast(?glCallCommandListNV, try loader("glCallCommandListNV"))) |ptr| {
            self.CallCommandListNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glCommandListSegmentsNV, try loader("glCommandListSegmentsNV"))) |ptr| {
            self.CommandListSegmentsNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glCompileCommandListNV, try loader("glCompileCommandListNV"))) |ptr| {
            self.CompileCommandListNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glCreateCommandListsNV, try loader("glCreateCommandListsNV"))) |ptr| {
            self.CreateCommandListsNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glCreateStatesNV, try loader("glCreateStatesNV"))) |ptr| {
            self.CreateStatesNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glDeleteCommandListsNV, try loader("glDeleteCommandListsNV"))) |ptr| {
            self.DeleteCommandListsNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glDeleteStatesNV, try loader("glDeleteStatesNV"))) |ptr| {
            self.DeleteStatesNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glDrawCommandsAddressNV, try loader("glDrawCommandsAddressNV"))) |ptr| {
            self.DrawCommandsAddressNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glDrawCommandsNV, try loader("glDrawCommandsNV"))) |ptr| {
            self.DrawCommandsNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glDrawCommandsStatesAddressNV, try loader("glDrawCommandsStatesAddressNV"))) |ptr| {
            self.DrawCommandsStatesAddressNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glDrawCommandsStatesNV, try loader("glDrawCommandsStatesNV"))) |ptr| {
            self.DrawCommandsStatesNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glGetCommandHeaderNV, try loader("glGetCommandHeaderNV"))) |ptr| {
            self.GetCommandHeaderNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glGetStageIndexNV, try loader("glGetStageIndexNV"))) |ptr| {
            self.GetStageIndexNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glIsCommandListNV, try loader("glIsCommandListNV"))) |ptr| {
            self.IsCommandListNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glIsStateNV, try loader("glIsStateNV"))) |ptr| {
            self.IsStateNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glListDrawCommandsStatesClientNV, try loader("glListDrawCommandsStatesClientNV"))) |ptr| {
            self.ListDrawCommandsStatesClientNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glStateCaptureNV, try loader("glStateCaptureNV"))) |ptr| {
            self.StateCaptureNV = ptr;
        } else {
            self.features.GL_NV_command_list = false;
        }
        if (@ptrCast(?glBeginConditionalRenderNV, try loader("glBeginConditionalRenderNV"))) |ptr| {
            self.BeginConditionalRenderNV = ptr;
        } else {
            self.features.GL_NV_conditional_render = false;
        }
        if (@ptrCast(?glEndConditionalRenderNV, try loader("glEndConditionalRenderNV"))) |ptr| {
            self.EndConditionalRenderNV = ptr;
        } else {
            self.features.GL_NV_conditional_render = false;
        }
        if (@ptrCast(?glSubpixelPrecisionBiasNV, try loader("glSubpixelPrecisionBiasNV"))) |ptr| {
            self.SubpixelPrecisionBiasNV = ptr;
        } else {
            self.features.GL_NV_conservative_raster = false;
        }
        if (@ptrCast(?glConservativeRasterParameterfNV, try loader("glConservativeRasterParameterfNV"))) |ptr| {
            self.ConservativeRasterParameterfNV = ptr;
        } else {
            self.features.GL_NV_conservative_raster_dilate = false;
        }
        if (@ptrCast(?glConservativeRasterParameteriNV, try loader("glConservativeRasterParameteriNV"))) |ptr| {
            self.ConservativeRasterParameteriNV = ptr;
        } else {
            self.features.GL_NV_conservative_raster_pre_snap_triangles = false;
        }
        if (@ptrCast(?glCopyImageSubDataNV, try loader("glCopyImageSubDataNV"))) |ptr| {
            self.CopyImageSubDataNV = ptr;
        } else {
            self.features.GL_NV_copy_image = false;
        }
        if (@ptrCast(?glClearDepthdNV, try loader("glClearDepthdNV"))) |ptr| {
            self.ClearDepthdNV = ptr;
        } else {
            self.features.GL_NV_depth_buffer_float = false;
        }
        if (@ptrCast(?glDepthBoundsdNV, try loader("glDepthBoundsdNV"))) |ptr| {
            self.DepthBoundsdNV = ptr;
        } else {
            self.features.GL_NV_depth_buffer_float = false;
        }
        if (@ptrCast(?glDepthRangedNV, try loader("glDepthRangedNV"))) |ptr| {
            self.DepthRangedNV = ptr;
        } else {
            self.features.GL_NV_depth_buffer_float = false;
        }
        if (@ptrCast(?glDrawTextureNV, try loader("glDrawTextureNV"))) |ptr| {
            self.DrawTextureNV = ptr;
        } else {
            self.features.GL_NV_draw_texture = false;
        }
        if (@ptrCast(?glDrawVkImageNV, try loader("glDrawVkImageNV"))) |ptr| {
            self.DrawVkImageNV = ptr;
        } else {
            self.features.GL_NV_draw_vulkan_image = false;
        }
        if (@ptrCast(?glGetVkProcAddrNV, try loader("glGetVkProcAddrNV"))) |ptr| {
            self.GetVkProcAddrNV = ptr;
        } else {
            self.features.GL_NV_draw_vulkan_image = false;
        }
        if (@ptrCast(?glSignalVkFenceNV, try loader("glSignalVkFenceNV"))) |ptr| {
            self.SignalVkFenceNV = ptr;
        } else {
            self.features.GL_NV_draw_vulkan_image = false;
        }
        if (@ptrCast(?glSignalVkSemaphoreNV, try loader("glSignalVkSemaphoreNV"))) |ptr| {
            self.SignalVkSemaphoreNV = ptr;
        } else {
            self.features.GL_NV_draw_vulkan_image = false;
        }
        if (@ptrCast(?glWaitVkSemaphoreNV, try loader("glWaitVkSemaphoreNV"))) |ptr| {
            self.WaitVkSemaphoreNV = ptr;
        } else {
            self.features.GL_NV_draw_vulkan_image = false;
        }
        if (@ptrCast(?glEvalMapsNV, try loader("glEvalMapsNV"))) |ptr| {
            self.EvalMapsNV = ptr;
        } else {
            self.features.GL_NV_evaluators = false;
        }
        if (@ptrCast(?glGetMapAttribParameterfvNV, try loader("glGetMapAttribParameterfvNV"))) |ptr| {
            self.GetMapAttribParameterfvNV = ptr;
        } else {
            self.features.GL_NV_evaluators = false;
        }
        if (@ptrCast(?glGetMapAttribParameterivNV, try loader("glGetMapAttribParameterivNV"))) |ptr| {
            self.GetMapAttribParameterivNV = ptr;
        } else {
            self.features.GL_NV_evaluators = false;
        }
        if (@ptrCast(?glGetMapControlPointsNV, try loader("glGetMapControlPointsNV"))) |ptr| {
            self.GetMapControlPointsNV = ptr;
        } else {
            self.features.GL_NV_evaluators = false;
        }
        if (@ptrCast(?glGetMapParameterfvNV, try loader("glGetMapParameterfvNV"))) |ptr| {
            self.GetMapParameterfvNV = ptr;
        } else {
            self.features.GL_NV_evaluators = false;
        }
        if (@ptrCast(?glGetMapParameterivNV, try loader("glGetMapParameterivNV"))) |ptr| {
            self.GetMapParameterivNV = ptr;
        } else {
            self.features.GL_NV_evaluators = false;
        }
        if (@ptrCast(?glMapControlPointsNV, try loader("glMapControlPointsNV"))) |ptr| {
            self.MapControlPointsNV = ptr;
        } else {
            self.features.GL_NV_evaluators = false;
        }
        if (@ptrCast(?glMapParameterfvNV, try loader("glMapParameterfvNV"))) |ptr| {
            self.MapParameterfvNV = ptr;
        } else {
            self.features.GL_NV_evaluators = false;
        }
        if (@ptrCast(?glMapParameterivNV, try loader("glMapParameterivNV"))) |ptr| {
            self.MapParameterivNV = ptr;
        } else {
            self.features.GL_NV_evaluators = false;
        }
        if (@ptrCast(?glGetMultisamplefvNV, try loader("glGetMultisamplefvNV"))) |ptr| {
            self.GetMultisamplefvNV = ptr;
        } else {
            self.features.GL_NV_explicit_multisample = false;
        }
        if (@ptrCast(?glSampleMaskIndexedNV, try loader("glSampleMaskIndexedNV"))) |ptr| {
            self.SampleMaskIndexedNV = ptr;
        } else {
            self.features.GL_NV_explicit_multisample = false;
        }
        if (@ptrCast(?glTexRenderbufferNV, try loader("glTexRenderbufferNV"))) |ptr| {
            self.TexRenderbufferNV = ptr;
        } else {
            self.features.GL_NV_explicit_multisample = false;
        }
        if (@ptrCast(?glDeleteFencesNV, try loader("glDeleteFencesNV"))) |ptr| {
            self.DeleteFencesNV = ptr;
        } else {
            self.features.GL_NV_fence = false;
        }
        if (@ptrCast(?glFinishFenceNV, try loader("glFinishFenceNV"))) |ptr| {
            self.FinishFenceNV = ptr;
        } else {
            self.features.GL_NV_fence = false;
        }
        if (@ptrCast(?glGenFencesNV, try loader("glGenFencesNV"))) |ptr| {
            self.GenFencesNV = ptr;
        } else {
            self.features.GL_NV_fence = false;
        }
        if (@ptrCast(?glGetFenceivNV, try loader("glGetFenceivNV"))) |ptr| {
            self.GetFenceivNV = ptr;
        } else {
            self.features.GL_NV_fence = false;
        }
        if (@ptrCast(?glIsFenceNV, try loader("glIsFenceNV"))) |ptr| {
            self.IsFenceNV = ptr;
        } else {
            self.features.GL_NV_fence = false;
        }
        if (@ptrCast(?glSetFenceNV, try loader("glSetFenceNV"))) |ptr| {
            self.SetFenceNV = ptr;
        } else {
            self.features.GL_NV_fence = false;
        }
        if (@ptrCast(?glTestFenceNV, try loader("glTestFenceNV"))) |ptr| {
            self.TestFenceNV = ptr;
        } else {
            self.features.GL_NV_fence = false;
        }
        if (@ptrCast(?glFragmentCoverageColorNV, try loader("glFragmentCoverageColorNV"))) |ptr| {
            self.FragmentCoverageColorNV = ptr;
        } else {
            self.features.GL_NV_fragment_coverage_to_color = false;
        }
        if (@ptrCast(?glGetProgramNamedParameterdvNV, try loader("glGetProgramNamedParameterdvNV"))) |ptr| {
            self.GetProgramNamedParameterdvNV = ptr;
        } else {
            self.features.GL_NV_fragment_program = false;
        }
        if (@ptrCast(?glGetProgramNamedParameterfvNV, try loader("glGetProgramNamedParameterfvNV"))) |ptr| {
            self.GetProgramNamedParameterfvNV = ptr;
        } else {
            self.features.GL_NV_fragment_program = false;
        }
        if (@ptrCast(?glProgramNamedParameter4dNV, try loader("glProgramNamedParameter4dNV"))) |ptr| {
            self.ProgramNamedParameter4dNV = ptr;
        } else {
            self.features.GL_NV_fragment_program = false;
        }
        if (@ptrCast(?glProgramNamedParameter4dvNV, try loader("glProgramNamedParameter4dvNV"))) |ptr| {
            self.ProgramNamedParameter4dvNV = ptr;
        } else {
            self.features.GL_NV_fragment_program = false;
        }
        if (@ptrCast(?glProgramNamedParameter4fNV, try loader("glProgramNamedParameter4fNV"))) |ptr| {
            self.ProgramNamedParameter4fNV = ptr;
        } else {
            self.features.GL_NV_fragment_program = false;
        }
        if (@ptrCast(?glProgramNamedParameter4fvNV, try loader("glProgramNamedParameter4fvNV"))) |ptr| {
            self.ProgramNamedParameter4fvNV = ptr;
        } else {
            self.features.GL_NV_fragment_program = false;
        }
        if (@ptrCast(?glCoverageModulationNV, try loader("glCoverageModulationNV"))) |ptr| {
            self.CoverageModulationNV = ptr;
        } else {
            self.features.GL_NV_framebuffer_mixed_samples = false;
        }
        if (@ptrCast(?glCoverageModulationTableNV, try loader("glCoverageModulationTableNV"))) |ptr| {
            self.CoverageModulationTableNV = ptr;
        } else {
            self.features.GL_NV_framebuffer_mixed_samples = false;
        }
        if (@ptrCast(?glGetCoverageModulationTableNV, try loader("glGetCoverageModulationTableNV"))) |ptr| {
            self.GetCoverageModulationTableNV = ptr;
        } else {
            self.features.GL_NV_framebuffer_mixed_samples = false;
        }
        if (@ptrCast(?glRasterSamplesEXT, try loader("glRasterSamplesEXT"))) |ptr| {
            self.RasterSamplesEXT = ptr;
        } else {
            self.features.GL_NV_framebuffer_mixed_samples = false;
        }
        if (@ptrCast(?glRenderbufferStorageMultisampleCoverageNV, try loader("glRenderbufferStorageMultisampleCoverageNV"))) |ptr| {
            self.RenderbufferStorageMultisampleCoverageNV = ptr;
        } else {
            self.features.GL_NV_framebuffer_multisample_coverage = false;
        }
        if (@ptrCast(?glFramebufferTextureEXT, try loader("glFramebufferTextureEXT"))) |ptr| {
            self.FramebufferTextureEXT = ptr;
        } else {
            self.features.GL_NV_geometry_program4 = false;
        }
        if (@ptrCast(?glFramebufferTextureFaceEXT, try loader("glFramebufferTextureFaceEXT"))) |ptr| {
            self.FramebufferTextureFaceEXT = ptr;
        } else {
            self.features.GL_NV_geometry_program4 = false;
        }
        if (@ptrCast(?glFramebufferTextureLayerEXT, try loader("glFramebufferTextureLayerEXT"))) |ptr| {
            self.FramebufferTextureLayerEXT = ptr;
        } else {
            self.features.GL_NV_geometry_program4 = false;
        }
        if (@ptrCast(?glProgramVertexLimitNV, try loader("glProgramVertexLimitNV"))) |ptr| {
            self.ProgramVertexLimitNV = ptr;
        } else {
            self.features.GL_NV_geometry_program4 = false;
        }
        if (@ptrCast(?glMulticastBarrierNV, try loader("glMulticastBarrierNV"))) |ptr| {
            self.MulticastBarrierNV = ptr;
        } else {
            self.features.GL_NV_gpu_multicast = false;
        }
        if (@ptrCast(?glMulticastBlitFramebufferNV, try loader("glMulticastBlitFramebufferNV"))) |ptr| {
            self.MulticastBlitFramebufferNV = ptr;
        } else {
            self.features.GL_NV_gpu_multicast = false;
        }
        if (@ptrCast(?glMulticastBufferSubDataNV, try loader("glMulticastBufferSubDataNV"))) |ptr| {
            self.MulticastBufferSubDataNV = ptr;
        } else {
            self.features.GL_NV_gpu_multicast = false;
        }
        if (@ptrCast(?glMulticastCopyBufferSubDataNV, try loader("glMulticastCopyBufferSubDataNV"))) |ptr| {
            self.MulticastCopyBufferSubDataNV = ptr;
        } else {
            self.features.GL_NV_gpu_multicast = false;
        }
        if (@ptrCast(?glMulticastCopyImageSubDataNV, try loader("glMulticastCopyImageSubDataNV"))) |ptr| {
            self.MulticastCopyImageSubDataNV = ptr;
        } else {
            self.features.GL_NV_gpu_multicast = false;
        }
        if (@ptrCast(?glMulticastFramebufferSampleLocationsfvNV, try loader("glMulticastFramebufferSampleLocationsfvNV"))) |ptr| {
            self.MulticastFramebufferSampleLocationsfvNV = ptr;
        } else {
            self.features.GL_NV_gpu_multicast = false;
        }
        if (@ptrCast(?glMulticastGetQueryObjecti64vNV, try loader("glMulticastGetQueryObjecti64vNV"))) |ptr| {
            self.MulticastGetQueryObjecti64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_multicast = false;
        }
        if (@ptrCast(?glMulticastGetQueryObjectivNV, try loader("glMulticastGetQueryObjectivNV"))) |ptr| {
            self.MulticastGetQueryObjectivNV = ptr;
        } else {
            self.features.GL_NV_gpu_multicast = false;
        }
        if (@ptrCast(?glMulticastGetQueryObjectui64vNV, try loader("glMulticastGetQueryObjectui64vNV"))) |ptr| {
            self.MulticastGetQueryObjectui64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_multicast = false;
        }
        if (@ptrCast(?glMulticastGetQueryObjectuivNV, try loader("glMulticastGetQueryObjectuivNV"))) |ptr| {
            self.MulticastGetQueryObjectuivNV = ptr;
        } else {
            self.features.GL_NV_gpu_multicast = false;
        }
        if (@ptrCast(?glMulticastWaitSyncNV, try loader("glMulticastWaitSyncNV"))) |ptr| {
            self.MulticastWaitSyncNV = ptr;
        } else {
            self.features.GL_NV_gpu_multicast = false;
        }
        if (@ptrCast(?glRenderGpuMaskNV, try loader("glRenderGpuMaskNV"))) |ptr| {
            self.RenderGpuMaskNV = ptr;
        } else {
            self.features.GL_NV_gpu_multicast = false;
        }
        if (@ptrCast(?glGetProgramEnvParameterIivNV, try loader("glGetProgramEnvParameterIivNV"))) |ptr| {
            self.GetProgramEnvParameterIivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glGetProgramEnvParameterIuivNV, try loader("glGetProgramEnvParameterIuivNV"))) |ptr| {
            self.GetProgramEnvParameterIuivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glGetProgramLocalParameterIivNV, try loader("glGetProgramLocalParameterIivNV"))) |ptr| {
            self.GetProgramLocalParameterIivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glGetProgramLocalParameterIuivNV, try loader("glGetProgramLocalParameterIuivNV"))) |ptr| {
            self.GetProgramLocalParameterIuivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glProgramEnvParameterI4iNV, try loader("glProgramEnvParameterI4iNV"))) |ptr| {
            self.ProgramEnvParameterI4iNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glProgramEnvParameterI4ivNV, try loader("glProgramEnvParameterI4ivNV"))) |ptr| {
            self.ProgramEnvParameterI4ivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glProgramEnvParameterI4uiNV, try loader("glProgramEnvParameterI4uiNV"))) |ptr| {
            self.ProgramEnvParameterI4uiNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glProgramEnvParameterI4uivNV, try loader("glProgramEnvParameterI4uivNV"))) |ptr| {
            self.ProgramEnvParameterI4uivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glProgramEnvParametersI4ivNV, try loader("glProgramEnvParametersI4ivNV"))) |ptr| {
            self.ProgramEnvParametersI4ivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glProgramEnvParametersI4uivNV, try loader("glProgramEnvParametersI4uivNV"))) |ptr| {
            self.ProgramEnvParametersI4uivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glProgramLocalParameterI4iNV, try loader("glProgramLocalParameterI4iNV"))) |ptr| {
            self.ProgramLocalParameterI4iNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glProgramLocalParameterI4ivNV, try loader("glProgramLocalParameterI4ivNV"))) |ptr| {
            self.ProgramLocalParameterI4ivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glProgramLocalParameterI4uiNV, try loader("glProgramLocalParameterI4uiNV"))) |ptr| {
            self.ProgramLocalParameterI4uiNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glProgramLocalParameterI4uivNV, try loader("glProgramLocalParameterI4uivNV"))) |ptr| {
            self.ProgramLocalParameterI4uivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glProgramLocalParametersI4ivNV, try loader("glProgramLocalParametersI4ivNV"))) |ptr| {
            self.ProgramLocalParametersI4ivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glProgramLocalParametersI4uivNV, try loader("glProgramLocalParametersI4uivNV"))) |ptr| {
            self.ProgramLocalParametersI4uivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program4 = false;
        }
        if (@ptrCast(?glGetProgramSubroutineParameteruivNV, try loader("glGetProgramSubroutineParameteruivNV"))) |ptr| {
            self.GetProgramSubroutineParameteruivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program5 = false;
        }
        if (@ptrCast(?glProgramSubroutineParametersuivNV, try loader("glProgramSubroutineParametersuivNV"))) |ptr| {
            self.ProgramSubroutineParametersuivNV = ptr;
        } else {
            self.features.GL_NV_gpu_program5 = false;
        }
        if (@ptrCast(?glGetUniformi64vNV, try loader("glGetUniformi64vNV"))) |ptr| {
            self.GetUniformi64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform1i64NV, try loader("glProgramUniform1i64NV"))) |ptr| {
            self.ProgramUniform1i64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform1i64vNV, try loader("glProgramUniform1i64vNV"))) |ptr| {
            self.ProgramUniform1i64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform1ui64NV, try loader("glProgramUniform1ui64NV"))) |ptr| {
            self.ProgramUniform1ui64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform1ui64vNV, try loader("glProgramUniform1ui64vNV"))) |ptr| {
            self.ProgramUniform1ui64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform2i64NV, try loader("glProgramUniform2i64NV"))) |ptr| {
            self.ProgramUniform2i64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform2i64vNV, try loader("glProgramUniform2i64vNV"))) |ptr| {
            self.ProgramUniform2i64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform2ui64NV, try loader("glProgramUniform2ui64NV"))) |ptr| {
            self.ProgramUniform2ui64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform2ui64vNV, try loader("glProgramUniform2ui64vNV"))) |ptr| {
            self.ProgramUniform2ui64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform3i64NV, try loader("glProgramUniform3i64NV"))) |ptr| {
            self.ProgramUniform3i64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform3i64vNV, try loader("glProgramUniform3i64vNV"))) |ptr| {
            self.ProgramUniform3i64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform3ui64NV, try loader("glProgramUniform3ui64NV"))) |ptr| {
            self.ProgramUniform3ui64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform3ui64vNV, try loader("glProgramUniform3ui64vNV"))) |ptr| {
            self.ProgramUniform3ui64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform4i64NV, try loader("glProgramUniform4i64NV"))) |ptr| {
            self.ProgramUniform4i64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform4i64vNV, try loader("glProgramUniform4i64vNV"))) |ptr| {
            self.ProgramUniform4i64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform4ui64NV, try loader("glProgramUniform4ui64NV"))) |ptr| {
            self.ProgramUniform4ui64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glProgramUniform4ui64vNV, try loader("glProgramUniform4ui64vNV"))) |ptr| {
            self.ProgramUniform4ui64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform1i64NV, try loader("glUniform1i64NV"))) |ptr| {
            self.Uniform1i64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform1i64vNV, try loader("glUniform1i64vNV"))) |ptr| {
            self.Uniform1i64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform1ui64NV, try loader("glUniform1ui64NV"))) |ptr| {
            self.Uniform1ui64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform1ui64vNV, try loader("glUniform1ui64vNV"))) |ptr| {
            self.Uniform1ui64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform2i64NV, try loader("glUniform2i64NV"))) |ptr| {
            self.Uniform2i64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform2i64vNV, try loader("glUniform2i64vNV"))) |ptr| {
            self.Uniform2i64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform2ui64NV, try loader("glUniform2ui64NV"))) |ptr| {
            self.Uniform2ui64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform2ui64vNV, try loader("glUniform2ui64vNV"))) |ptr| {
            self.Uniform2ui64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform3i64NV, try loader("glUniform3i64NV"))) |ptr| {
            self.Uniform3i64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform3i64vNV, try loader("glUniform3i64vNV"))) |ptr| {
            self.Uniform3i64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform3ui64NV, try loader("glUniform3ui64NV"))) |ptr| {
            self.Uniform3ui64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform3ui64vNV, try loader("glUniform3ui64vNV"))) |ptr| {
            self.Uniform3ui64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform4i64NV, try loader("glUniform4i64NV"))) |ptr| {
            self.Uniform4i64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform4i64vNV, try loader("glUniform4i64vNV"))) |ptr| {
            self.Uniform4i64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform4ui64NV, try loader("glUniform4ui64NV"))) |ptr| {
            self.Uniform4ui64NV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glUniform4ui64vNV, try loader("glUniform4ui64vNV"))) |ptr| {
            self.Uniform4ui64vNV = ptr;
        } else {
            self.features.GL_NV_gpu_shader5 = false;
        }
        if (@ptrCast(?glColor3hNV, try loader("glColor3hNV"))) |ptr| {
            self.Color3hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glColor3hvNV, try loader("glColor3hvNV"))) |ptr| {
            self.Color3hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glColor4hNV, try loader("glColor4hNV"))) |ptr| {
            self.Color4hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glColor4hvNV, try loader("glColor4hvNV"))) |ptr| {
            self.Color4hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glFogCoordhNV, try loader("glFogCoordhNV"))) |ptr| {
            self.FogCoordhNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glFogCoordhvNV, try loader("glFogCoordhvNV"))) |ptr| {
            self.FogCoordhvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glMultiTexCoord1hNV, try loader("glMultiTexCoord1hNV"))) |ptr| {
            self.MultiTexCoord1hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glMultiTexCoord1hvNV, try loader("glMultiTexCoord1hvNV"))) |ptr| {
            self.MultiTexCoord1hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glMultiTexCoord2hNV, try loader("glMultiTexCoord2hNV"))) |ptr| {
            self.MultiTexCoord2hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glMultiTexCoord2hvNV, try loader("glMultiTexCoord2hvNV"))) |ptr| {
            self.MultiTexCoord2hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glMultiTexCoord3hNV, try loader("glMultiTexCoord3hNV"))) |ptr| {
            self.MultiTexCoord3hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glMultiTexCoord3hvNV, try loader("glMultiTexCoord3hvNV"))) |ptr| {
            self.MultiTexCoord3hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glMultiTexCoord4hNV, try loader("glMultiTexCoord4hNV"))) |ptr| {
            self.MultiTexCoord4hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glMultiTexCoord4hvNV, try loader("glMultiTexCoord4hvNV"))) |ptr| {
            self.MultiTexCoord4hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glNormal3hNV, try loader("glNormal3hNV"))) |ptr| {
            self.Normal3hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glNormal3hvNV, try loader("glNormal3hvNV"))) |ptr| {
            self.Normal3hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glSecondaryColor3hNV, try loader("glSecondaryColor3hNV"))) |ptr| {
            self.SecondaryColor3hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glSecondaryColor3hvNV, try loader("glSecondaryColor3hvNV"))) |ptr| {
            self.SecondaryColor3hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glTexCoord1hNV, try loader("glTexCoord1hNV"))) |ptr| {
            self.TexCoord1hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glTexCoord1hvNV, try loader("glTexCoord1hvNV"))) |ptr| {
            self.TexCoord1hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glTexCoord2hNV, try loader("glTexCoord2hNV"))) |ptr| {
            self.TexCoord2hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glTexCoord2hvNV, try loader("glTexCoord2hvNV"))) |ptr| {
            self.TexCoord2hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glTexCoord3hNV, try loader("glTexCoord3hNV"))) |ptr| {
            self.TexCoord3hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glTexCoord3hvNV, try loader("glTexCoord3hvNV"))) |ptr| {
            self.TexCoord3hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glTexCoord4hNV, try loader("glTexCoord4hNV"))) |ptr| {
            self.TexCoord4hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glTexCoord4hvNV, try loader("glTexCoord4hvNV"))) |ptr| {
            self.TexCoord4hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertex2hNV, try loader("glVertex2hNV"))) |ptr| {
            self.Vertex2hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertex2hvNV, try loader("glVertex2hvNV"))) |ptr| {
            self.Vertex2hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertex3hNV, try loader("glVertex3hNV"))) |ptr| {
            self.Vertex3hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertex3hvNV, try loader("glVertex3hvNV"))) |ptr| {
            self.Vertex3hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertex4hNV, try loader("glVertex4hNV"))) |ptr| {
            self.Vertex4hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertex4hvNV, try loader("glVertex4hvNV"))) |ptr| {
            self.Vertex4hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexAttrib1hNV, try loader("glVertexAttrib1hNV"))) |ptr| {
            self.VertexAttrib1hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexAttrib1hvNV, try loader("glVertexAttrib1hvNV"))) |ptr| {
            self.VertexAttrib1hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexAttrib2hNV, try loader("glVertexAttrib2hNV"))) |ptr| {
            self.VertexAttrib2hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexAttrib2hvNV, try loader("glVertexAttrib2hvNV"))) |ptr| {
            self.VertexAttrib2hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexAttrib3hNV, try loader("glVertexAttrib3hNV"))) |ptr| {
            self.VertexAttrib3hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexAttrib3hvNV, try loader("glVertexAttrib3hvNV"))) |ptr| {
            self.VertexAttrib3hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexAttrib4hNV, try loader("glVertexAttrib4hNV"))) |ptr| {
            self.VertexAttrib4hNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexAttrib4hvNV, try loader("glVertexAttrib4hvNV"))) |ptr| {
            self.VertexAttrib4hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexAttribs1hvNV, try loader("glVertexAttribs1hvNV"))) |ptr| {
            self.VertexAttribs1hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexAttribs2hvNV, try loader("glVertexAttribs2hvNV"))) |ptr| {
            self.VertexAttribs2hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexAttribs3hvNV, try loader("glVertexAttribs3hvNV"))) |ptr| {
            self.VertexAttribs3hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexAttribs4hvNV, try loader("glVertexAttribs4hvNV"))) |ptr| {
            self.VertexAttribs4hvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexWeighthNV, try loader("glVertexWeighthNV"))) |ptr| {
            self.VertexWeighthNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glVertexWeighthvNV, try loader("glVertexWeighthvNV"))) |ptr| {
            self.VertexWeighthvNV = ptr;
        } else {
            self.features.GL_NV_half_float = false;
        }
        if (@ptrCast(?glGetInternalformatSampleivNV, try loader("glGetInternalformatSampleivNV"))) |ptr| {
            self.GetInternalformatSampleivNV = ptr;
        } else {
            self.features.GL_NV_internalformat_sample_query = false;
        }
        if (@ptrCast(?glBufferAttachMemoryNV, try loader("glBufferAttachMemoryNV"))) |ptr| {
            self.BufferAttachMemoryNV = ptr;
        } else {
            self.features.GL_NV_memory_attachment = false;
        }
        if (@ptrCast(?glGetMemoryObjectDetachedResourcesuivNV, try loader("glGetMemoryObjectDetachedResourcesuivNV"))) |ptr| {
            self.GetMemoryObjectDetachedResourcesuivNV = ptr;
        } else {
            self.features.GL_NV_memory_attachment = false;
        }
        if (@ptrCast(?glNamedBufferAttachMemoryNV, try loader("glNamedBufferAttachMemoryNV"))) |ptr| {
            self.NamedBufferAttachMemoryNV = ptr;
        } else {
            self.features.GL_NV_memory_attachment = false;
        }
        if (@ptrCast(?glResetMemoryObjectParameterNV, try loader("glResetMemoryObjectParameterNV"))) |ptr| {
            self.ResetMemoryObjectParameterNV = ptr;
        } else {
            self.features.GL_NV_memory_attachment = false;
        }
        if (@ptrCast(?glTexAttachMemoryNV, try loader("glTexAttachMemoryNV"))) |ptr| {
            self.TexAttachMemoryNV = ptr;
        } else {
            self.features.GL_NV_memory_attachment = false;
        }
        if (@ptrCast(?glTextureAttachMemoryNV, try loader("glTextureAttachMemoryNV"))) |ptr| {
            self.TextureAttachMemoryNV = ptr;
        } else {
            self.features.GL_NV_memory_attachment = false;
        }
        if (@ptrCast(?glBufferPageCommitmentMemNV, try loader("glBufferPageCommitmentMemNV"))) |ptr| {
            self.BufferPageCommitmentMemNV = ptr;
        } else {
            self.features.GL_NV_memory_object_sparse = false;
        }
        if (@ptrCast(?glNamedBufferPageCommitmentMemNV, try loader("glNamedBufferPageCommitmentMemNV"))) |ptr| {
            self.NamedBufferPageCommitmentMemNV = ptr;
        } else {
            self.features.GL_NV_memory_object_sparse = false;
        }
        if (@ptrCast(?glTexPageCommitmentMemNV, try loader("glTexPageCommitmentMemNV"))) |ptr| {
            self.TexPageCommitmentMemNV = ptr;
        } else {
            self.features.GL_NV_memory_object_sparse = false;
        }
        if (@ptrCast(?glTexturePageCommitmentMemNV, try loader("glTexturePageCommitmentMemNV"))) |ptr| {
            self.TexturePageCommitmentMemNV = ptr;
        } else {
            self.features.GL_NV_memory_object_sparse = false;
        }
        if (@ptrCast(?glDrawMeshTasksIndirectNV, try loader("glDrawMeshTasksIndirectNV"))) |ptr| {
            self.DrawMeshTasksIndirectNV = ptr;
        } else {
            self.features.GL_NV_mesh_shader = false;
        }
        if (@ptrCast(?glDrawMeshTasksNV, try loader("glDrawMeshTasksNV"))) |ptr| {
            self.DrawMeshTasksNV = ptr;
        } else {
            self.features.GL_NV_mesh_shader = false;
        }
        if (@ptrCast(?glMultiDrawMeshTasksIndirectCountNV, try loader("glMultiDrawMeshTasksIndirectCountNV"))) |ptr| {
            self.MultiDrawMeshTasksIndirectCountNV = ptr;
        } else {
            self.features.GL_NV_mesh_shader = false;
        }
        if (@ptrCast(?glMultiDrawMeshTasksIndirectNV, try loader("glMultiDrawMeshTasksIndirectNV"))) |ptr| {
            self.MultiDrawMeshTasksIndirectNV = ptr;
        } else {
            self.features.GL_NV_mesh_shader = false;
        }
        if (@ptrCast(?glBeginOcclusionQueryNV, try loader("glBeginOcclusionQueryNV"))) |ptr| {
            self.BeginOcclusionQueryNV = ptr;
        } else {
            self.features.GL_NV_occlusion_query = false;
        }
        if (@ptrCast(?glDeleteOcclusionQueriesNV, try loader("glDeleteOcclusionQueriesNV"))) |ptr| {
            self.DeleteOcclusionQueriesNV = ptr;
        } else {
            self.features.GL_NV_occlusion_query = false;
        }
        if (@ptrCast(?glEndOcclusionQueryNV, try loader("glEndOcclusionQueryNV"))) |ptr| {
            self.EndOcclusionQueryNV = ptr;
        } else {
            self.features.GL_NV_occlusion_query = false;
        }
        if (@ptrCast(?glGenOcclusionQueriesNV, try loader("glGenOcclusionQueriesNV"))) |ptr| {
            self.GenOcclusionQueriesNV = ptr;
        } else {
            self.features.GL_NV_occlusion_query = false;
        }
        if (@ptrCast(?glGetOcclusionQueryivNV, try loader("glGetOcclusionQueryivNV"))) |ptr| {
            self.GetOcclusionQueryivNV = ptr;
        } else {
            self.features.GL_NV_occlusion_query = false;
        }
        if (@ptrCast(?glGetOcclusionQueryuivNV, try loader("glGetOcclusionQueryuivNV"))) |ptr| {
            self.GetOcclusionQueryuivNV = ptr;
        } else {
            self.features.GL_NV_occlusion_query = false;
        }
        if (@ptrCast(?glIsOcclusionQueryNV, try loader("glIsOcclusionQueryNV"))) |ptr| {
            self.IsOcclusionQueryNV = ptr;
        } else {
            self.features.GL_NV_occlusion_query = false;
        }
        if (@ptrCast(?glProgramBufferParametersIivNV, try loader("glProgramBufferParametersIivNV"))) |ptr| {
            self.ProgramBufferParametersIivNV = ptr;
        } else {
            self.features.GL_NV_parameter_buffer_object = false;
        }
        if (@ptrCast(?glProgramBufferParametersIuivNV, try loader("glProgramBufferParametersIuivNV"))) |ptr| {
            self.ProgramBufferParametersIuivNV = ptr;
        } else {
            self.features.GL_NV_parameter_buffer_object = false;
        }
        if (@ptrCast(?glProgramBufferParametersfvNV, try loader("glProgramBufferParametersfvNV"))) |ptr| {
            self.ProgramBufferParametersfvNV = ptr;
        } else {
            self.features.GL_NV_parameter_buffer_object = false;
        }
        if (@ptrCast(?glCopyPathNV, try loader("glCopyPathNV"))) |ptr| {
            self.CopyPathNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glCoverFillPathInstancedNV, try loader("glCoverFillPathInstancedNV"))) |ptr| {
            self.CoverFillPathInstancedNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glCoverFillPathNV, try loader("glCoverFillPathNV"))) |ptr| {
            self.CoverFillPathNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glCoverStrokePathInstancedNV, try loader("glCoverStrokePathInstancedNV"))) |ptr| {
            self.CoverStrokePathInstancedNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glCoverStrokePathNV, try loader("glCoverStrokePathNV"))) |ptr| {
            self.CoverStrokePathNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glDeletePathsNV, try loader("glDeletePathsNV"))) |ptr| {
            self.DeletePathsNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glGenPathsNV, try loader("glGenPathsNV"))) |ptr| {
            self.GenPathsNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glGetPathCommandsNV, try loader("glGetPathCommandsNV"))) |ptr| {
            self.GetPathCommandsNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glGetPathCoordsNV, try loader("glGetPathCoordsNV"))) |ptr| {
            self.GetPathCoordsNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glGetPathDashArrayNV, try loader("glGetPathDashArrayNV"))) |ptr| {
            self.GetPathDashArrayNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glGetPathLengthNV, try loader("glGetPathLengthNV"))) |ptr| {
            self.GetPathLengthNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glGetPathMetricRangeNV, try loader("glGetPathMetricRangeNV"))) |ptr| {
            self.GetPathMetricRangeNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glGetPathMetricsNV, try loader("glGetPathMetricsNV"))) |ptr| {
            self.GetPathMetricsNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glGetPathParameterfvNV, try loader("glGetPathParameterfvNV"))) |ptr| {
            self.GetPathParameterfvNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glGetPathParameterivNV, try loader("glGetPathParameterivNV"))) |ptr| {
            self.GetPathParameterivNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glGetPathSpacingNV, try loader("glGetPathSpacingNV"))) |ptr| {
            self.GetPathSpacingNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glGetProgramResourcefvNV, try loader("glGetProgramResourcefvNV"))) |ptr| {
            self.GetProgramResourcefvNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glInterpolatePathsNV, try loader("glInterpolatePathsNV"))) |ptr| {
            self.InterpolatePathsNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glIsPathNV, try loader("glIsPathNV"))) |ptr| {
            self.IsPathNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glIsPointInFillPathNV, try loader("glIsPointInFillPathNV"))) |ptr| {
            self.IsPointInFillPathNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glIsPointInStrokePathNV, try loader("glIsPointInStrokePathNV"))) |ptr| {
            self.IsPointInStrokePathNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixFrustumEXT, try loader("glMatrixFrustumEXT"))) |ptr| {
            self.MatrixFrustumEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixLoad3x2fNV, try loader("glMatrixLoad3x2fNV"))) |ptr| {
            self.MatrixLoad3x2fNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixLoad3x3fNV, try loader("glMatrixLoad3x3fNV"))) |ptr| {
            self.MatrixLoad3x3fNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixLoadIdentityEXT, try loader("glMatrixLoadIdentityEXT"))) |ptr| {
            self.MatrixLoadIdentityEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixLoadTranspose3x3fNV, try loader("glMatrixLoadTranspose3x3fNV"))) |ptr| {
            self.MatrixLoadTranspose3x3fNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixLoadTransposedEXT, try loader("glMatrixLoadTransposedEXT"))) |ptr| {
            self.MatrixLoadTransposedEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixLoadTransposefEXT, try loader("glMatrixLoadTransposefEXT"))) |ptr| {
            self.MatrixLoadTransposefEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixLoaddEXT, try loader("glMatrixLoaddEXT"))) |ptr| {
            self.MatrixLoaddEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixLoadfEXT, try loader("glMatrixLoadfEXT"))) |ptr| {
            self.MatrixLoadfEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixMult3x2fNV, try loader("glMatrixMult3x2fNV"))) |ptr| {
            self.MatrixMult3x2fNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixMult3x3fNV, try loader("glMatrixMult3x3fNV"))) |ptr| {
            self.MatrixMult3x3fNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixMultTranspose3x3fNV, try loader("glMatrixMultTranspose3x3fNV"))) |ptr| {
            self.MatrixMultTranspose3x3fNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixMultTransposedEXT, try loader("glMatrixMultTransposedEXT"))) |ptr| {
            self.MatrixMultTransposedEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixMultTransposefEXT, try loader("glMatrixMultTransposefEXT"))) |ptr| {
            self.MatrixMultTransposefEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixMultdEXT, try loader("glMatrixMultdEXT"))) |ptr| {
            self.MatrixMultdEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixMultfEXT, try loader("glMatrixMultfEXT"))) |ptr| {
            self.MatrixMultfEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixOrthoEXT, try loader("glMatrixOrthoEXT"))) |ptr| {
            self.MatrixOrthoEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixPopEXT, try loader("glMatrixPopEXT"))) |ptr| {
            self.MatrixPopEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixPushEXT, try loader("glMatrixPushEXT"))) |ptr| {
            self.MatrixPushEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixRotatedEXT, try loader("glMatrixRotatedEXT"))) |ptr| {
            self.MatrixRotatedEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixRotatefEXT, try loader("glMatrixRotatefEXT"))) |ptr| {
            self.MatrixRotatefEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixScaledEXT, try loader("glMatrixScaledEXT"))) |ptr| {
            self.MatrixScaledEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixScalefEXT, try loader("glMatrixScalefEXT"))) |ptr| {
            self.MatrixScalefEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixTranslatedEXT, try loader("glMatrixTranslatedEXT"))) |ptr| {
            self.MatrixTranslatedEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glMatrixTranslatefEXT, try loader("glMatrixTranslatefEXT"))) |ptr| {
            self.MatrixTranslatefEXT = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathCommandsNV, try loader("glPathCommandsNV"))) |ptr| {
            self.PathCommandsNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathCoordsNV, try loader("glPathCoordsNV"))) |ptr| {
            self.PathCoordsNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathCoverDepthFuncNV, try loader("glPathCoverDepthFuncNV"))) |ptr| {
            self.PathCoverDepthFuncNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathDashArrayNV, try loader("glPathDashArrayNV"))) |ptr| {
            self.PathDashArrayNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathGlyphIndexArrayNV, try loader("glPathGlyphIndexArrayNV"))) |ptr| {
            self.PathGlyphIndexArrayNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathGlyphIndexRangeNV, try loader("glPathGlyphIndexRangeNV"))) |ptr| {
            self.PathGlyphIndexRangeNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathGlyphRangeNV, try loader("glPathGlyphRangeNV"))) |ptr| {
            self.PathGlyphRangeNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathGlyphsNV, try loader("glPathGlyphsNV"))) |ptr| {
            self.PathGlyphsNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathMemoryGlyphIndexArrayNV, try loader("glPathMemoryGlyphIndexArrayNV"))) |ptr| {
            self.PathMemoryGlyphIndexArrayNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathParameterfNV, try loader("glPathParameterfNV"))) |ptr| {
            self.PathParameterfNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathParameterfvNV, try loader("glPathParameterfvNV"))) |ptr| {
            self.PathParameterfvNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathParameteriNV, try loader("glPathParameteriNV"))) |ptr| {
            self.PathParameteriNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathParameterivNV, try loader("glPathParameterivNV"))) |ptr| {
            self.PathParameterivNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathStencilDepthOffsetNV, try loader("glPathStencilDepthOffsetNV"))) |ptr| {
            self.PathStencilDepthOffsetNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathStencilFuncNV, try loader("glPathStencilFuncNV"))) |ptr| {
            self.PathStencilFuncNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathStringNV, try loader("glPathStringNV"))) |ptr| {
            self.PathStringNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathSubCommandsNV, try loader("glPathSubCommandsNV"))) |ptr| {
            self.PathSubCommandsNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPathSubCoordsNV, try loader("glPathSubCoordsNV"))) |ptr| {
            self.PathSubCoordsNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glPointAlongPathNV, try loader("glPointAlongPathNV"))) |ptr| {
            self.PointAlongPathNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glProgramPathFragmentInputGenNV, try loader("glProgramPathFragmentInputGenNV"))) |ptr| {
            self.ProgramPathFragmentInputGenNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glStencilFillPathInstancedNV, try loader("glStencilFillPathInstancedNV"))) |ptr| {
            self.StencilFillPathInstancedNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glStencilFillPathNV, try loader("glStencilFillPathNV"))) |ptr| {
            self.StencilFillPathNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glStencilStrokePathInstancedNV, try loader("glStencilStrokePathInstancedNV"))) |ptr| {
            self.StencilStrokePathInstancedNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glStencilStrokePathNV, try loader("glStencilStrokePathNV"))) |ptr| {
            self.StencilStrokePathNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glStencilThenCoverFillPathInstancedNV, try loader("glStencilThenCoverFillPathInstancedNV"))) |ptr| {
            self.StencilThenCoverFillPathInstancedNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glStencilThenCoverFillPathNV, try loader("glStencilThenCoverFillPathNV"))) |ptr| {
            self.StencilThenCoverFillPathNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glStencilThenCoverStrokePathInstancedNV, try loader("glStencilThenCoverStrokePathInstancedNV"))) |ptr| {
            self.StencilThenCoverStrokePathInstancedNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glStencilThenCoverStrokePathNV, try loader("glStencilThenCoverStrokePathNV"))) |ptr| {
            self.StencilThenCoverStrokePathNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glTransformPathNV, try loader("glTransformPathNV"))) |ptr| {
            self.TransformPathNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glWeightPathsNV, try loader("glWeightPathsNV"))) |ptr| {
            self.WeightPathsNV = ptr;
        } else {
            self.features.GL_NV_path_rendering = false;
        }
        if (@ptrCast(?glFlushPixelDataRangeNV, try loader("glFlushPixelDataRangeNV"))) |ptr| {
            self.FlushPixelDataRangeNV = ptr;
        } else {
            self.features.GL_NV_pixel_data_range = false;
        }
        if (@ptrCast(?glPixelDataRangeNV, try loader("glPixelDataRangeNV"))) |ptr| {
            self.PixelDataRangeNV = ptr;
        } else {
            self.features.GL_NV_pixel_data_range = false;
        }
        if (@ptrCast(?glPointParameteriNV, try loader("glPointParameteriNV"))) |ptr| {
            self.PointParameteriNV = ptr;
        } else {
            self.features.GL_NV_point_sprite = false;
        }
        if (@ptrCast(?glPointParameterivNV, try loader("glPointParameterivNV"))) |ptr| {
            self.PointParameterivNV = ptr;
        } else {
            self.features.GL_NV_point_sprite = false;
        }
        if (@ptrCast(?glGetVideoi64vNV, try loader("glGetVideoi64vNV"))) |ptr| {
            self.GetVideoi64vNV = ptr;
        } else {
            self.features.GL_NV_present_video = false;
        }
        if (@ptrCast(?glGetVideoivNV, try loader("glGetVideoivNV"))) |ptr| {
            self.GetVideoivNV = ptr;
        } else {
            self.features.GL_NV_present_video = false;
        }
        if (@ptrCast(?glGetVideoui64vNV, try loader("glGetVideoui64vNV"))) |ptr| {
            self.GetVideoui64vNV = ptr;
        } else {
            self.features.GL_NV_present_video = false;
        }
        if (@ptrCast(?glGetVideouivNV, try loader("glGetVideouivNV"))) |ptr| {
            self.GetVideouivNV = ptr;
        } else {
            self.features.GL_NV_present_video = false;
        }
        if (@ptrCast(?glPresentFrameDualFillNV, try loader("glPresentFrameDualFillNV"))) |ptr| {
            self.PresentFrameDualFillNV = ptr;
        } else {
            self.features.GL_NV_present_video = false;
        }
        if (@ptrCast(?glPresentFrameKeyedNV, try loader("glPresentFrameKeyedNV"))) |ptr| {
            self.PresentFrameKeyedNV = ptr;
        } else {
            self.features.GL_NV_present_video = false;
        }
        if (@ptrCast(?glPrimitiveRestartIndexNV, try loader("glPrimitiveRestartIndexNV"))) |ptr| {
            self.PrimitiveRestartIndexNV = ptr;
        } else {
            self.features.GL_NV_primitive_restart = false;
        }
        if (@ptrCast(?glPrimitiveRestartNV, try loader("glPrimitiveRestartNV"))) |ptr| {
            self.PrimitiveRestartNV = ptr;
        } else {
            self.features.GL_NV_primitive_restart = false;
        }
        if (@ptrCast(?glQueryResourceNV, try loader("glQueryResourceNV"))) |ptr| {
            self.QueryResourceNV = ptr;
        } else {
            self.features.GL_NV_query_resource = false;
        }
        if (@ptrCast(?glDeleteQueryResourceTagNV, try loader("glDeleteQueryResourceTagNV"))) |ptr| {
            self.DeleteQueryResourceTagNV = ptr;
        } else {
            self.features.GL_NV_query_resource_tag = false;
        }
        if (@ptrCast(?glGenQueryResourceTagNV, try loader("glGenQueryResourceTagNV"))) |ptr| {
            self.GenQueryResourceTagNV = ptr;
        } else {
            self.features.GL_NV_query_resource_tag = false;
        }
        if (@ptrCast(?glQueryResourceTagNV, try loader("glQueryResourceTagNV"))) |ptr| {
            self.QueryResourceTagNV = ptr;
        } else {
            self.features.GL_NV_query_resource_tag = false;
        }
        if (@ptrCast(?glCombinerInputNV, try loader("glCombinerInputNV"))) |ptr| {
            self.CombinerInputNV = ptr;
        } else {
            self.features.GL_NV_register_combiners = false;
        }
        if (@ptrCast(?glCombinerOutputNV, try loader("glCombinerOutputNV"))) |ptr| {
            self.CombinerOutputNV = ptr;
        } else {
            self.features.GL_NV_register_combiners = false;
        }
        if (@ptrCast(?glCombinerParameterfNV, try loader("glCombinerParameterfNV"))) |ptr| {
            self.CombinerParameterfNV = ptr;
        } else {
            self.features.GL_NV_register_combiners = false;
        }
        if (@ptrCast(?glCombinerParameterfvNV, try loader("glCombinerParameterfvNV"))) |ptr| {
            self.CombinerParameterfvNV = ptr;
        } else {
            self.features.GL_NV_register_combiners = false;
        }
        if (@ptrCast(?glCombinerParameteriNV, try loader("glCombinerParameteriNV"))) |ptr| {
            self.CombinerParameteriNV = ptr;
        } else {
            self.features.GL_NV_register_combiners = false;
        }
        if (@ptrCast(?glCombinerParameterivNV, try loader("glCombinerParameterivNV"))) |ptr| {
            self.CombinerParameterivNV = ptr;
        } else {
            self.features.GL_NV_register_combiners = false;
        }
        if (@ptrCast(?glFinalCombinerInputNV, try loader("glFinalCombinerInputNV"))) |ptr| {
            self.FinalCombinerInputNV = ptr;
        } else {
            self.features.GL_NV_register_combiners = false;
        }
        if (@ptrCast(?glGetCombinerInputParameterfvNV, try loader("glGetCombinerInputParameterfvNV"))) |ptr| {
            self.GetCombinerInputParameterfvNV = ptr;
        } else {
            self.features.GL_NV_register_combiners = false;
        }
        if (@ptrCast(?glGetCombinerInputParameterivNV, try loader("glGetCombinerInputParameterivNV"))) |ptr| {
            self.GetCombinerInputParameterivNV = ptr;
        } else {
            self.features.GL_NV_register_combiners = false;
        }
        if (@ptrCast(?glGetCombinerOutputParameterfvNV, try loader("glGetCombinerOutputParameterfvNV"))) |ptr| {
            self.GetCombinerOutputParameterfvNV = ptr;
        } else {
            self.features.GL_NV_register_combiners = false;
        }
        if (@ptrCast(?glGetCombinerOutputParameterivNV, try loader("glGetCombinerOutputParameterivNV"))) |ptr| {
            self.GetCombinerOutputParameterivNV = ptr;
        } else {
            self.features.GL_NV_register_combiners = false;
        }
        if (@ptrCast(?glGetFinalCombinerInputParameterfvNV, try loader("glGetFinalCombinerInputParameterfvNV"))) |ptr| {
            self.GetFinalCombinerInputParameterfvNV = ptr;
        } else {
            self.features.GL_NV_register_combiners = false;
        }
        if (@ptrCast(?glGetFinalCombinerInputParameterivNV, try loader("glGetFinalCombinerInputParameterivNV"))) |ptr| {
            self.GetFinalCombinerInputParameterivNV = ptr;
        } else {
            self.features.GL_NV_register_combiners = false;
        }
        if (@ptrCast(?glCombinerStageParameterfvNV, try loader("glCombinerStageParameterfvNV"))) |ptr| {
            self.CombinerStageParameterfvNV = ptr;
        } else {
            self.features.GL_NV_register_combiners2 = false;
        }
        if (@ptrCast(?glGetCombinerStageParameterfvNV, try loader("glGetCombinerStageParameterfvNV"))) |ptr| {
            self.GetCombinerStageParameterfvNV = ptr;
        } else {
            self.features.GL_NV_register_combiners2 = false;
        }
        if (@ptrCast(?glFramebufferSampleLocationsfvNV, try loader("glFramebufferSampleLocationsfvNV"))) |ptr| {
            self.FramebufferSampleLocationsfvNV = ptr;
        } else {
            self.features.GL_NV_sample_locations = false;
        }
        if (@ptrCast(?glNamedFramebufferSampleLocationsfvNV, try loader("glNamedFramebufferSampleLocationsfvNV"))) |ptr| {
            self.NamedFramebufferSampleLocationsfvNV = ptr;
        } else {
            self.features.GL_NV_sample_locations = false;
        }
        if (@ptrCast(?glResolveDepthValuesNV, try loader("glResolveDepthValuesNV"))) |ptr| {
            self.ResolveDepthValuesNV = ptr;
        } else {
            self.features.GL_NV_sample_locations = false;
        }
        if (@ptrCast(?glScissorExclusiveArrayvNV, try loader("glScissorExclusiveArrayvNV"))) |ptr| {
            self.ScissorExclusiveArrayvNV = ptr;
        } else {
            self.features.GL_NV_scissor_exclusive = false;
        }
        if (@ptrCast(?glScissorExclusiveNV, try loader("glScissorExclusiveNV"))) |ptr| {
            self.ScissorExclusiveNV = ptr;
        } else {
            self.features.GL_NV_scissor_exclusive = false;
        }
        if (@ptrCast(?glGetBufferParameterui64vNV, try loader("glGetBufferParameterui64vNV"))) |ptr| {
            self.GetBufferParameterui64vNV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glGetIntegerui64vNV, try loader("glGetIntegerui64vNV"))) |ptr| {
            self.GetIntegerui64vNV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glGetNamedBufferParameterui64vNV, try loader("glGetNamedBufferParameterui64vNV"))) |ptr| {
            self.GetNamedBufferParameterui64vNV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glGetUniformui64vNV, try loader("glGetUniformui64vNV"))) |ptr| {
            self.GetUniformui64vNV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glIsBufferResidentNV, try loader("glIsBufferResidentNV"))) |ptr| {
            self.IsBufferResidentNV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glIsNamedBufferResidentNV, try loader("glIsNamedBufferResidentNV"))) |ptr| {
            self.IsNamedBufferResidentNV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glMakeBufferNonResidentNV, try loader("glMakeBufferNonResidentNV"))) |ptr| {
            self.MakeBufferNonResidentNV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glMakeBufferResidentNV, try loader("glMakeBufferResidentNV"))) |ptr| {
            self.MakeBufferResidentNV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glMakeNamedBufferNonResidentNV, try loader("glMakeNamedBufferNonResidentNV"))) |ptr| {
            self.MakeNamedBufferNonResidentNV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glMakeNamedBufferResidentNV, try loader("glMakeNamedBufferResidentNV"))) |ptr| {
            self.MakeNamedBufferResidentNV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glProgramUniformui64NV, try loader("glProgramUniformui64NV"))) |ptr| {
            self.ProgramUniformui64NV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glProgramUniformui64vNV, try loader("glProgramUniformui64vNV"))) |ptr| {
            self.ProgramUniformui64vNV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glUniformui64NV, try loader("glUniformui64NV"))) |ptr| {
            self.Uniformui64NV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glUniformui64vNV, try loader("glUniformui64vNV"))) |ptr| {
            self.Uniformui64vNV = ptr;
        } else {
            self.features.GL_NV_shader_buffer_load = false;
        }
        if (@ptrCast(?glBindShadingRateImageNV, try loader("glBindShadingRateImageNV"))) |ptr| {
            self.BindShadingRateImageNV = ptr;
        } else {
            self.features.GL_NV_shading_rate_image = false;
        }
        if (@ptrCast(?glGetShadingRateImagePaletteNV, try loader("glGetShadingRateImagePaletteNV"))) |ptr| {
            self.GetShadingRateImagePaletteNV = ptr;
        } else {
            self.features.GL_NV_shading_rate_image = false;
        }
        if (@ptrCast(?glGetShadingRateSampleLocationivNV, try loader("glGetShadingRateSampleLocationivNV"))) |ptr| {
            self.GetShadingRateSampleLocationivNV = ptr;
        } else {
            self.features.GL_NV_shading_rate_image = false;
        }
        if (@ptrCast(?glShadingRateImageBarrierNV, try loader("glShadingRateImageBarrierNV"))) |ptr| {
            self.ShadingRateImageBarrierNV = ptr;
        } else {
            self.features.GL_NV_shading_rate_image = false;
        }
        if (@ptrCast(?glShadingRateImagePaletteNV, try loader("glShadingRateImagePaletteNV"))) |ptr| {
            self.ShadingRateImagePaletteNV = ptr;
        } else {
            self.features.GL_NV_shading_rate_image = false;
        }
        if (@ptrCast(?glShadingRateSampleOrderCustomNV, try loader("glShadingRateSampleOrderCustomNV"))) |ptr| {
            self.ShadingRateSampleOrderCustomNV = ptr;
        } else {
            self.features.GL_NV_shading_rate_image = false;
        }
        if (@ptrCast(?glShadingRateSampleOrderNV, try loader("glShadingRateSampleOrderNV"))) |ptr| {
            self.ShadingRateSampleOrderNV = ptr;
        } else {
            self.features.GL_NV_shading_rate_image = false;
        }
        if (@ptrCast(?glTextureBarrierNV, try loader("glTextureBarrierNV"))) |ptr| {
            self.TextureBarrierNV = ptr;
        } else {
            self.features.GL_NV_texture_barrier = false;
        }
        if (@ptrCast(?glTexImage2DMultisampleCoverageNV, try loader("glTexImage2DMultisampleCoverageNV"))) |ptr| {
            self.TexImage2DMultisampleCoverageNV = ptr;
        } else {
            self.features.GL_NV_texture_multisample = false;
        }
        if (@ptrCast(?glTexImage3DMultisampleCoverageNV, try loader("glTexImage3DMultisampleCoverageNV"))) |ptr| {
            self.TexImage3DMultisampleCoverageNV = ptr;
        } else {
            self.features.GL_NV_texture_multisample = false;
        }
        if (@ptrCast(?glTextureImage2DMultisampleCoverageNV, try loader("glTextureImage2DMultisampleCoverageNV"))) |ptr| {
            self.TextureImage2DMultisampleCoverageNV = ptr;
        } else {
            self.features.GL_NV_texture_multisample = false;
        }
        if (@ptrCast(?glTextureImage2DMultisampleNV, try loader("glTextureImage2DMultisampleNV"))) |ptr| {
            self.TextureImage2DMultisampleNV = ptr;
        } else {
            self.features.GL_NV_texture_multisample = false;
        }
        if (@ptrCast(?glTextureImage3DMultisampleCoverageNV, try loader("glTextureImage3DMultisampleCoverageNV"))) |ptr| {
            self.TextureImage3DMultisampleCoverageNV = ptr;
        } else {
            self.features.GL_NV_texture_multisample = false;
        }
        if (@ptrCast(?glTextureImage3DMultisampleNV, try loader("glTextureImage3DMultisampleNV"))) |ptr| {
            self.TextureImage3DMultisampleNV = ptr;
        } else {
            self.features.GL_NV_texture_multisample = false;
        }
        if (@ptrCast(?glCreateSemaphoresNV, try loader("glCreateSemaphoresNV"))) |ptr| {
            self.CreateSemaphoresNV = ptr;
        } else {
            self.features.GL_NV_timeline_semaphore = false;
        }
        if (@ptrCast(?glGetSemaphoreParameterivNV, try loader("glGetSemaphoreParameterivNV"))) |ptr| {
            self.GetSemaphoreParameterivNV = ptr;
        } else {
            self.features.GL_NV_timeline_semaphore = false;
        }
        if (@ptrCast(?glSemaphoreParameterivNV, try loader("glSemaphoreParameterivNV"))) |ptr| {
            self.SemaphoreParameterivNV = ptr;
        } else {
            self.features.GL_NV_timeline_semaphore = false;
        }
        if (@ptrCast(?glActiveVaryingNV, try loader("glActiveVaryingNV"))) |ptr| {
            self.ActiveVaryingNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback = false;
        }
        if (@ptrCast(?glBeginTransformFeedbackNV, try loader("glBeginTransformFeedbackNV"))) |ptr| {
            self.BeginTransformFeedbackNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback = false;
        }
        if (@ptrCast(?glBindBufferBaseNV, try loader("glBindBufferBaseNV"))) |ptr| {
            self.BindBufferBaseNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback = false;
        }
        if (@ptrCast(?glBindBufferOffsetNV, try loader("glBindBufferOffsetNV"))) |ptr| {
            self.BindBufferOffsetNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback = false;
        }
        if (@ptrCast(?glBindBufferRangeNV, try loader("glBindBufferRangeNV"))) |ptr| {
            self.BindBufferRangeNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback = false;
        }
        if (@ptrCast(?glEndTransformFeedbackNV, try loader("glEndTransformFeedbackNV"))) |ptr| {
            self.EndTransformFeedbackNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback = false;
        }
        if (@ptrCast(?glGetActiveVaryingNV, try loader("glGetActiveVaryingNV"))) |ptr| {
            self.GetActiveVaryingNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback = false;
        }
        if (@ptrCast(?glGetTransformFeedbackVaryingNV, try loader("glGetTransformFeedbackVaryingNV"))) |ptr| {
            self.GetTransformFeedbackVaryingNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback = false;
        }
        if (@ptrCast(?glGetVaryingLocationNV, try loader("glGetVaryingLocationNV"))) |ptr| {
            self.GetVaryingLocationNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback = false;
        }
        if (@ptrCast(?glTransformFeedbackAttribsNV, try loader("glTransformFeedbackAttribsNV"))) |ptr| {
            self.TransformFeedbackAttribsNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback = false;
        }
        if (@ptrCast(?glTransformFeedbackStreamAttribsNV, try loader("glTransformFeedbackStreamAttribsNV"))) |ptr| {
            self.TransformFeedbackStreamAttribsNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback = false;
        }
        if (@ptrCast(?glTransformFeedbackVaryingsNV, try loader("glTransformFeedbackVaryingsNV"))) |ptr| {
            self.TransformFeedbackVaryingsNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback = false;
        }
        if (@ptrCast(?glBindTransformFeedbackNV, try loader("glBindTransformFeedbackNV"))) |ptr| {
            self.BindTransformFeedbackNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback2 = false;
        }
        if (@ptrCast(?glDeleteTransformFeedbacksNV, try loader("glDeleteTransformFeedbacksNV"))) |ptr| {
            self.DeleteTransformFeedbacksNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback2 = false;
        }
        if (@ptrCast(?glDrawTransformFeedbackNV, try loader("glDrawTransformFeedbackNV"))) |ptr| {
            self.DrawTransformFeedbackNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback2 = false;
        }
        if (@ptrCast(?glGenTransformFeedbacksNV, try loader("glGenTransformFeedbacksNV"))) |ptr| {
            self.GenTransformFeedbacksNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback2 = false;
        }
        if (@ptrCast(?glIsTransformFeedbackNV, try loader("glIsTransformFeedbackNV"))) |ptr| {
            self.IsTransformFeedbackNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback2 = false;
        }
        if (@ptrCast(?glPauseTransformFeedbackNV, try loader("glPauseTransformFeedbackNV"))) |ptr| {
            self.PauseTransformFeedbackNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback2 = false;
        }
        if (@ptrCast(?glResumeTransformFeedbackNV, try loader("glResumeTransformFeedbackNV"))) |ptr| {
            self.ResumeTransformFeedbackNV = ptr;
        } else {
            self.features.GL_NV_transform_feedback2 = false;
        }
        if (@ptrCast(?glVDPAUFiniNV, try loader("glVDPAUFiniNV"))) |ptr| {
            self.VDPAUFiniNV = ptr;
        } else {
            self.features.GL_NV_vdpau_interop = false;
        }
        if (@ptrCast(?glVDPAUGetSurfaceivNV, try loader("glVDPAUGetSurfaceivNV"))) |ptr| {
            self.VDPAUGetSurfaceivNV = ptr;
        } else {
            self.features.GL_NV_vdpau_interop = false;
        }
        if (@ptrCast(?glVDPAUInitNV, try loader("glVDPAUInitNV"))) |ptr| {
            self.VDPAUInitNV = ptr;
        } else {
            self.features.GL_NV_vdpau_interop = false;
        }
        if (@ptrCast(?glVDPAUIsSurfaceNV, try loader("glVDPAUIsSurfaceNV"))) |ptr| {
            self.VDPAUIsSurfaceNV = ptr;
        } else {
            self.features.GL_NV_vdpau_interop = false;
        }
        if (@ptrCast(?glVDPAUMapSurfacesNV, try loader("glVDPAUMapSurfacesNV"))) |ptr| {
            self.VDPAUMapSurfacesNV = ptr;
        } else {
            self.features.GL_NV_vdpau_interop = false;
        }
        if (@ptrCast(?glVDPAURegisterOutputSurfaceNV, try loader("glVDPAURegisterOutputSurfaceNV"))) |ptr| {
            self.VDPAURegisterOutputSurfaceNV = ptr;
        } else {
            self.features.GL_NV_vdpau_interop = false;
        }
        if (@ptrCast(?glVDPAURegisterVideoSurfaceNV, try loader("glVDPAURegisterVideoSurfaceNV"))) |ptr| {
            self.VDPAURegisterVideoSurfaceNV = ptr;
        } else {
            self.features.GL_NV_vdpau_interop = false;
        }
        if (@ptrCast(?glVDPAUSurfaceAccessNV, try loader("glVDPAUSurfaceAccessNV"))) |ptr| {
            self.VDPAUSurfaceAccessNV = ptr;
        } else {
            self.features.GL_NV_vdpau_interop = false;
        }
        if (@ptrCast(?glVDPAUUnmapSurfacesNV, try loader("glVDPAUUnmapSurfacesNV"))) |ptr| {
            self.VDPAUUnmapSurfacesNV = ptr;
        } else {
            self.features.GL_NV_vdpau_interop = false;
        }
        if (@ptrCast(?glVDPAUUnregisterSurfaceNV, try loader("glVDPAUUnregisterSurfaceNV"))) |ptr| {
            self.VDPAUUnregisterSurfaceNV = ptr;
        } else {
            self.features.GL_NV_vdpau_interop = false;
        }
        if (@ptrCast(?glVDPAURegisterVideoSurfaceWithPictureStructureNV, try loader("glVDPAURegisterVideoSurfaceWithPictureStructureNV"))) |ptr| {
            self.VDPAURegisterVideoSurfaceWithPictureStructureNV = ptr;
        } else {
            self.features.GL_NV_vdpau_interop2 = false;
        }
        if (@ptrCast(?glFlushVertexArrayRangeNV, try loader("glFlushVertexArrayRangeNV"))) |ptr| {
            self.FlushVertexArrayRangeNV = ptr;
        } else {
            self.features.GL_NV_vertex_array_range = false;
        }
        if (@ptrCast(?glVertexArrayRangeNV, try loader("glVertexArrayRangeNV"))) |ptr| {
            self.VertexArrayRangeNV = ptr;
        } else {
            self.features.GL_NV_vertex_array_range = false;
        }
        if (@ptrCast(?glGetVertexAttribLi64vNV, try loader("glGetVertexAttribLi64vNV"))) |ptr| {
            self.GetVertexAttribLi64vNV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glGetVertexAttribLui64vNV, try loader("glGetVertexAttribLui64vNV"))) |ptr| {
            self.GetVertexAttribLui64vNV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL1i64NV, try loader("glVertexAttribL1i64NV"))) |ptr| {
            self.VertexAttribL1i64NV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL1i64vNV, try loader("glVertexAttribL1i64vNV"))) |ptr| {
            self.VertexAttribL1i64vNV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL1ui64NV, try loader("glVertexAttribL1ui64NV"))) |ptr| {
            self.VertexAttribL1ui64NV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL1ui64vNV, try loader("glVertexAttribL1ui64vNV"))) |ptr| {
            self.VertexAttribL1ui64vNV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL2i64NV, try loader("glVertexAttribL2i64NV"))) |ptr| {
            self.VertexAttribL2i64NV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL2i64vNV, try loader("glVertexAttribL2i64vNV"))) |ptr| {
            self.VertexAttribL2i64vNV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL2ui64NV, try loader("glVertexAttribL2ui64NV"))) |ptr| {
            self.VertexAttribL2ui64NV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL2ui64vNV, try loader("glVertexAttribL2ui64vNV"))) |ptr| {
            self.VertexAttribL2ui64vNV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL3i64NV, try loader("glVertexAttribL3i64NV"))) |ptr| {
            self.VertexAttribL3i64NV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL3i64vNV, try loader("glVertexAttribL3i64vNV"))) |ptr| {
            self.VertexAttribL3i64vNV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL3ui64NV, try loader("glVertexAttribL3ui64NV"))) |ptr| {
            self.VertexAttribL3ui64NV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL3ui64vNV, try loader("glVertexAttribL3ui64vNV"))) |ptr| {
            self.VertexAttribL3ui64vNV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL4i64NV, try loader("glVertexAttribL4i64NV"))) |ptr| {
            self.VertexAttribL4i64NV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL4i64vNV, try loader("glVertexAttribL4i64vNV"))) |ptr| {
            self.VertexAttribL4i64vNV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL4ui64NV, try loader("glVertexAttribL4ui64NV"))) |ptr| {
            self.VertexAttribL4ui64NV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribL4ui64vNV, try loader("glVertexAttribL4ui64vNV"))) |ptr| {
            self.VertexAttribL4ui64vNV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glVertexAttribLFormatNV, try loader("glVertexAttribLFormatNV"))) |ptr| {
            self.VertexAttribLFormatNV = ptr;
        } else {
            self.features.GL_NV_vertex_attrib_integer_64bit = false;
        }
        if (@ptrCast(?glBufferAddressRangeNV, try loader("glBufferAddressRangeNV"))) |ptr| {
            self.BufferAddressRangeNV = ptr;
        } else {
            self.features.GL_NV_vertex_buffer_unified_memory = false;
        }
        if (@ptrCast(?glColorFormatNV, try loader("glColorFormatNV"))) |ptr| {
            self.ColorFormatNV = ptr;
        } else {
            self.features.GL_NV_vertex_buffer_unified_memory = false;
        }
        if (@ptrCast(?glEdgeFlagFormatNV, try loader("glEdgeFlagFormatNV"))) |ptr| {
            self.EdgeFlagFormatNV = ptr;
        } else {
            self.features.GL_NV_vertex_buffer_unified_memory = false;
        }
        if (@ptrCast(?glFogCoordFormatNV, try loader("glFogCoordFormatNV"))) |ptr| {
            self.FogCoordFormatNV = ptr;
        } else {
            self.features.GL_NV_vertex_buffer_unified_memory = false;
        }
        if (@ptrCast(?glGetIntegerui64i_vNV, try loader("glGetIntegerui64i_vNV"))) |ptr| {
            self.GetIntegerui64i_vNV = ptr;
        } else {
            self.features.GL_NV_vertex_buffer_unified_memory = false;
        }
        if (@ptrCast(?glIndexFormatNV, try loader("glIndexFormatNV"))) |ptr| {
            self.IndexFormatNV = ptr;
        } else {
            self.features.GL_NV_vertex_buffer_unified_memory = false;
        }
        if (@ptrCast(?glNormalFormatNV, try loader("glNormalFormatNV"))) |ptr| {
            self.NormalFormatNV = ptr;
        } else {
            self.features.GL_NV_vertex_buffer_unified_memory = false;
        }
        if (@ptrCast(?glSecondaryColorFormatNV, try loader("glSecondaryColorFormatNV"))) |ptr| {
            self.SecondaryColorFormatNV = ptr;
        } else {
            self.features.GL_NV_vertex_buffer_unified_memory = false;
        }
        if (@ptrCast(?glTexCoordFormatNV, try loader("glTexCoordFormatNV"))) |ptr| {
            self.TexCoordFormatNV = ptr;
        } else {
            self.features.GL_NV_vertex_buffer_unified_memory = false;
        }
        if (@ptrCast(?glVertexAttribFormatNV, try loader("glVertexAttribFormatNV"))) |ptr| {
            self.VertexAttribFormatNV = ptr;
        } else {
            self.features.GL_NV_vertex_buffer_unified_memory = false;
        }
        if (@ptrCast(?glVertexAttribIFormatNV, try loader("glVertexAttribIFormatNV"))) |ptr| {
            self.VertexAttribIFormatNV = ptr;
        } else {
            self.features.GL_NV_vertex_buffer_unified_memory = false;
        }
        if (@ptrCast(?glVertexFormatNV, try loader("glVertexFormatNV"))) |ptr| {
            self.VertexFormatNV = ptr;
        } else {
            self.features.GL_NV_vertex_buffer_unified_memory = false;
        }
        if (@ptrCast(?glAreProgramsResidentNV, try loader("glAreProgramsResidentNV"))) |ptr| {
            self.AreProgramsResidentNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glBindProgramNV, try loader("glBindProgramNV"))) |ptr| {
            self.BindProgramNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glDeleteProgramsNV, try loader("glDeleteProgramsNV"))) |ptr| {
            self.DeleteProgramsNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glExecuteProgramNV, try loader("glExecuteProgramNV"))) |ptr| {
            self.ExecuteProgramNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glGenProgramsNV, try loader("glGenProgramsNV"))) |ptr| {
            self.GenProgramsNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glGetProgramParameterdvNV, try loader("glGetProgramParameterdvNV"))) |ptr| {
            self.GetProgramParameterdvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glGetProgramParameterfvNV, try loader("glGetProgramParameterfvNV"))) |ptr| {
            self.GetProgramParameterfvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glGetProgramStringNV, try loader("glGetProgramStringNV"))) |ptr| {
            self.GetProgramStringNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glGetProgramivNV, try loader("glGetProgramivNV"))) |ptr| {
            self.GetProgramivNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glGetTrackMatrixivNV, try loader("glGetTrackMatrixivNV"))) |ptr| {
            self.GetTrackMatrixivNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glGetVertexAttribPointervNV, try loader("glGetVertexAttribPointervNV"))) |ptr| {
            self.GetVertexAttribPointervNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glGetVertexAttribdvNV, try loader("glGetVertexAttribdvNV"))) |ptr| {
            self.GetVertexAttribdvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glGetVertexAttribfvNV, try loader("glGetVertexAttribfvNV"))) |ptr| {
            self.GetVertexAttribfvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glGetVertexAttribivNV, try loader("glGetVertexAttribivNV"))) |ptr| {
            self.GetVertexAttribivNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glIsProgramNV, try loader("glIsProgramNV"))) |ptr| {
            self.IsProgramNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glLoadProgramNV, try loader("glLoadProgramNV"))) |ptr| {
            self.LoadProgramNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glProgramParameter4dNV, try loader("glProgramParameter4dNV"))) |ptr| {
            self.ProgramParameter4dNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glProgramParameter4dvNV, try loader("glProgramParameter4dvNV"))) |ptr| {
            self.ProgramParameter4dvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glProgramParameter4fNV, try loader("glProgramParameter4fNV"))) |ptr| {
            self.ProgramParameter4fNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glProgramParameter4fvNV, try loader("glProgramParameter4fvNV"))) |ptr| {
            self.ProgramParameter4fvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glProgramParameters4dvNV, try loader("glProgramParameters4dvNV"))) |ptr| {
            self.ProgramParameters4dvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glProgramParameters4fvNV, try loader("glProgramParameters4fvNV"))) |ptr| {
            self.ProgramParameters4fvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glRequestResidentProgramsNV, try loader("glRequestResidentProgramsNV"))) |ptr| {
            self.RequestResidentProgramsNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glTrackMatrixNV, try loader("glTrackMatrixNV"))) |ptr| {
            self.TrackMatrixNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib1dNV, try loader("glVertexAttrib1dNV"))) |ptr| {
            self.VertexAttrib1dNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib1dvNV, try loader("glVertexAttrib1dvNV"))) |ptr| {
            self.VertexAttrib1dvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib1fNV, try loader("glVertexAttrib1fNV"))) |ptr| {
            self.VertexAttrib1fNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib1fvNV, try loader("glVertexAttrib1fvNV"))) |ptr| {
            self.VertexAttrib1fvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib1sNV, try loader("glVertexAttrib1sNV"))) |ptr| {
            self.VertexAttrib1sNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib1svNV, try loader("glVertexAttrib1svNV"))) |ptr| {
            self.VertexAttrib1svNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib2dNV, try loader("glVertexAttrib2dNV"))) |ptr| {
            self.VertexAttrib2dNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib2dvNV, try loader("glVertexAttrib2dvNV"))) |ptr| {
            self.VertexAttrib2dvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib2fNV, try loader("glVertexAttrib2fNV"))) |ptr| {
            self.VertexAttrib2fNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib2fvNV, try loader("glVertexAttrib2fvNV"))) |ptr| {
            self.VertexAttrib2fvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib2sNV, try loader("glVertexAttrib2sNV"))) |ptr| {
            self.VertexAttrib2sNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib2svNV, try loader("glVertexAttrib2svNV"))) |ptr| {
            self.VertexAttrib2svNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib3dNV, try loader("glVertexAttrib3dNV"))) |ptr| {
            self.VertexAttrib3dNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib3dvNV, try loader("glVertexAttrib3dvNV"))) |ptr| {
            self.VertexAttrib3dvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib3fNV, try loader("glVertexAttrib3fNV"))) |ptr| {
            self.VertexAttrib3fNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib3fvNV, try loader("glVertexAttrib3fvNV"))) |ptr| {
            self.VertexAttrib3fvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib3sNV, try loader("glVertexAttrib3sNV"))) |ptr| {
            self.VertexAttrib3sNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib3svNV, try loader("glVertexAttrib3svNV"))) |ptr| {
            self.VertexAttrib3svNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4dNV, try loader("glVertexAttrib4dNV"))) |ptr| {
            self.VertexAttrib4dNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4dvNV, try loader("glVertexAttrib4dvNV"))) |ptr| {
            self.VertexAttrib4dvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4fNV, try loader("glVertexAttrib4fNV"))) |ptr| {
            self.VertexAttrib4fNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4fvNV, try loader("glVertexAttrib4fvNV"))) |ptr| {
            self.VertexAttrib4fvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4sNV, try loader("glVertexAttrib4sNV"))) |ptr| {
            self.VertexAttrib4sNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4svNV, try loader("glVertexAttrib4svNV"))) |ptr| {
            self.VertexAttrib4svNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4ubNV, try loader("glVertexAttrib4ubNV"))) |ptr| {
            self.VertexAttrib4ubNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttrib4ubvNV, try loader("glVertexAttrib4ubvNV"))) |ptr| {
            self.VertexAttrib4ubvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribPointerNV, try loader("glVertexAttribPointerNV"))) |ptr| {
            self.VertexAttribPointerNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribs1dvNV, try loader("glVertexAttribs1dvNV"))) |ptr| {
            self.VertexAttribs1dvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribs1fvNV, try loader("glVertexAttribs1fvNV"))) |ptr| {
            self.VertexAttribs1fvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribs1svNV, try loader("glVertexAttribs1svNV"))) |ptr| {
            self.VertexAttribs1svNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribs2dvNV, try loader("glVertexAttribs2dvNV"))) |ptr| {
            self.VertexAttribs2dvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribs2fvNV, try loader("glVertexAttribs2fvNV"))) |ptr| {
            self.VertexAttribs2fvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribs2svNV, try loader("glVertexAttribs2svNV"))) |ptr| {
            self.VertexAttribs2svNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribs3dvNV, try loader("glVertexAttribs3dvNV"))) |ptr| {
            self.VertexAttribs3dvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribs3fvNV, try loader("glVertexAttribs3fvNV"))) |ptr| {
            self.VertexAttribs3fvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribs3svNV, try loader("glVertexAttribs3svNV"))) |ptr| {
            self.VertexAttribs3svNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribs4dvNV, try loader("glVertexAttribs4dvNV"))) |ptr| {
            self.VertexAttribs4dvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribs4fvNV, try loader("glVertexAttribs4fvNV"))) |ptr| {
            self.VertexAttribs4fvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribs4svNV, try loader("glVertexAttribs4svNV"))) |ptr| {
            self.VertexAttribs4svNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glVertexAttribs4ubvNV, try loader("glVertexAttribs4ubvNV"))) |ptr| {
            self.VertexAttribs4ubvNV = ptr;
        } else {
            self.features.GL_NV_vertex_program = false;
        }
        if (@ptrCast(?glGetVertexAttribIivEXT, try loader("glGetVertexAttribIivEXT"))) |ptr| {
            self.GetVertexAttribIivEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glGetVertexAttribIuivEXT, try loader("glGetVertexAttribIuivEXT"))) |ptr| {
            self.GetVertexAttribIuivEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI1iEXT, try loader("glVertexAttribI1iEXT"))) |ptr| {
            self.VertexAttribI1iEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI1ivEXT, try loader("glVertexAttribI1ivEXT"))) |ptr| {
            self.VertexAttribI1ivEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI1uiEXT, try loader("glVertexAttribI1uiEXT"))) |ptr| {
            self.VertexAttribI1uiEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI1uivEXT, try loader("glVertexAttribI1uivEXT"))) |ptr| {
            self.VertexAttribI1uivEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI2iEXT, try loader("glVertexAttribI2iEXT"))) |ptr| {
            self.VertexAttribI2iEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI2ivEXT, try loader("glVertexAttribI2ivEXT"))) |ptr| {
            self.VertexAttribI2ivEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI2uiEXT, try loader("glVertexAttribI2uiEXT"))) |ptr| {
            self.VertexAttribI2uiEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI2uivEXT, try loader("glVertexAttribI2uivEXT"))) |ptr| {
            self.VertexAttribI2uivEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI3iEXT, try loader("glVertexAttribI3iEXT"))) |ptr| {
            self.VertexAttribI3iEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI3ivEXT, try loader("glVertexAttribI3ivEXT"))) |ptr| {
            self.VertexAttribI3ivEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI3uiEXT, try loader("glVertexAttribI3uiEXT"))) |ptr| {
            self.VertexAttribI3uiEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI3uivEXT, try loader("glVertexAttribI3uivEXT"))) |ptr| {
            self.VertexAttribI3uivEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI4bvEXT, try loader("glVertexAttribI4bvEXT"))) |ptr| {
            self.VertexAttribI4bvEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI4iEXT, try loader("glVertexAttribI4iEXT"))) |ptr| {
            self.VertexAttribI4iEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI4ivEXT, try loader("glVertexAttribI4ivEXT"))) |ptr| {
            self.VertexAttribI4ivEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI4svEXT, try loader("glVertexAttribI4svEXT"))) |ptr| {
            self.VertexAttribI4svEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI4ubvEXT, try loader("glVertexAttribI4ubvEXT"))) |ptr| {
            self.VertexAttribI4ubvEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI4uiEXT, try loader("glVertexAttribI4uiEXT"))) |ptr| {
            self.VertexAttribI4uiEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI4uivEXT, try loader("glVertexAttribI4uivEXT"))) |ptr| {
            self.VertexAttribI4uivEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribI4usvEXT, try loader("glVertexAttribI4usvEXT"))) |ptr| {
            self.VertexAttribI4usvEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glVertexAttribIPointerEXT, try loader("glVertexAttribIPointerEXT"))) |ptr| {
            self.VertexAttribIPointerEXT = ptr;
        } else {
            self.features.GL_NV_vertex_program4 = false;
        }
        if (@ptrCast(?glBeginVideoCaptureNV, try loader("glBeginVideoCaptureNV"))) |ptr| {
            self.BeginVideoCaptureNV = ptr;
        } else {
            self.features.GL_NV_video_capture = false;
        }
        if (@ptrCast(?glBindVideoCaptureStreamBufferNV, try loader("glBindVideoCaptureStreamBufferNV"))) |ptr| {
            self.BindVideoCaptureStreamBufferNV = ptr;
        } else {
            self.features.GL_NV_video_capture = false;
        }
        if (@ptrCast(?glBindVideoCaptureStreamTextureNV, try loader("glBindVideoCaptureStreamTextureNV"))) |ptr| {
            self.BindVideoCaptureStreamTextureNV = ptr;
        } else {
            self.features.GL_NV_video_capture = false;
        }
        if (@ptrCast(?glEndVideoCaptureNV, try loader("glEndVideoCaptureNV"))) |ptr| {
            self.EndVideoCaptureNV = ptr;
        } else {
            self.features.GL_NV_video_capture = false;
        }
        if (@ptrCast(?glGetVideoCaptureStreamdvNV, try loader("glGetVideoCaptureStreamdvNV"))) |ptr| {
            self.GetVideoCaptureStreamdvNV = ptr;
        } else {
            self.features.GL_NV_video_capture = false;
        }
        if (@ptrCast(?glGetVideoCaptureStreamfvNV, try loader("glGetVideoCaptureStreamfvNV"))) |ptr| {
            self.GetVideoCaptureStreamfvNV = ptr;
        } else {
            self.features.GL_NV_video_capture = false;
        }
        if (@ptrCast(?glGetVideoCaptureStreamivNV, try loader("glGetVideoCaptureStreamivNV"))) |ptr| {
            self.GetVideoCaptureStreamivNV = ptr;
        } else {
            self.features.GL_NV_video_capture = false;
        }
        if (@ptrCast(?glGetVideoCaptureivNV, try loader("glGetVideoCaptureivNV"))) |ptr| {
            self.GetVideoCaptureivNV = ptr;
        } else {
            self.features.GL_NV_video_capture = false;
        }
        if (@ptrCast(?glVideoCaptureNV, try loader("glVideoCaptureNV"))) |ptr| {
            self.VideoCaptureNV = ptr;
        } else {
            self.features.GL_NV_video_capture = false;
        }
        if (@ptrCast(?glVideoCaptureStreamParameterdvNV, try loader("glVideoCaptureStreamParameterdvNV"))) |ptr| {
            self.VideoCaptureStreamParameterdvNV = ptr;
        } else {
            self.features.GL_NV_video_capture = false;
        }
        if (@ptrCast(?glVideoCaptureStreamParameterfvNV, try loader("glVideoCaptureStreamParameterfvNV"))) |ptr| {
            self.VideoCaptureStreamParameterfvNV = ptr;
        } else {
            self.features.GL_NV_video_capture = false;
        }
        if (@ptrCast(?glVideoCaptureStreamParameterivNV, try loader("glVideoCaptureStreamParameterivNV"))) |ptr| {
            self.VideoCaptureStreamParameterivNV = ptr;
        } else {
            self.features.GL_NV_video_capture = false;
        }
        if (@ptrCast(?glViewportSwizzleNV, try loader("glViewportSwizzleNV"))) |ptr| {
            self.ViewportSwizzleNV = ptr;
        } else {
            self.features.GL_NV_viewport_swizzle = false;
        }
        if (@ptrCast(?glMultiTexCoord1bOES, try loader("glMultiTexCoord1bOES"))) |ptr| {
            self.MultiTexCoord1bOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glMultiTexCoord1bvOES, try loader("glMultiTexCoord1bvOES"))) |ptr| {
            self.MultiTexCoord1bvOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glMultiTexCoord2bOES, try loader("glMultiTexCoord2bOES"))) |ptr| {
            self.MultiTexCoord2bOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glMultiTexCoord2bvOES, try loader("glMultiTexCoord2bvOES"))) |ptr| {
            self.MultiTexCoord2bvOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glMultiTexCoord3bOES, try loader("glMultiTexCoord3bOES"))) |ptr| {
            self.MultiTexCoord3bOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glMultiTexCoord3bvOES, try loader("glMultiTexCoord3bvOES"))) |ptr| {
            self.MultiTexCoord3bvOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glMultiTexCoord4bOES, try loader("glMultiTexCoord4bOES"))) |ptr| {
            self.MultiTexCoord4bOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glMultiTexCoord4bvOES, try loader("glMultiTexCoord4bvOES"))) |ptr| {
            self.MultiTexCoord4bvOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glTexCoord1bOES, try loader("glTexCoord1bOES"))) |ptr| {
            self.TexCoord1bOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glTexCoord1bvOES, try loader("glTexCoord1bvOES"))) |ptr| {
            self.TexCoord1bvOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glTexCoord2bOES, try loader("glTexCoord2bOES"))) |ptr| {
            self.TexCoord2bOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glTexCoord2bvOES, try loader("glTexCoord2bvOES"))) |ptr| {
            self.TexCoord2bvOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glTexCoord3bOES, try loader("glTexCoord3bOES"))) |ptr| {
            self.TexCoord3bOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glTexCoord3bvOES, try loader("glTexCoord3bvOES"))) |ptr| {
            self.TexCoord3bvOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glTexCoord4bOES, try loader("glTexCoord4bOES"))) |ptr| {
            self.TexCoord4bOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glTexCoord4bvOES, try loader("glTexCoord4bvOES"))) |ptr| {
            self.TexCoord4bvOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glVertex2bOES, try loader("glVertex2bOES"))) |ptr| {
            self.Vertex2bOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glVertex2bvOES, try loader("glVertex2bvOES"))) |ptr| {
            self.Vertex2bvOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glVertex3bOES, try loader("glVertex3bOES"))) |ptr| {
            self.Vertex3bOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glVertex3bvOES, try loader("glVertex3bvOES"))) |ptr| {
            self.Vertex3bvOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glVertex4bOES, try loader("glVertex4bOES"))) |ptr| {
            self.Vertex4bOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glVertex4bvOES, try loader("glVertex4bvOES"))) |ptr| {
            self.Vertex4bvOES = ptr;
        } else {
            self.features.GL_OES_byte_coordinates = false;
        }
        if (@ptrCast(?glAccumxOES, try loader("glAccumxOES"))) |ptr| {
            self.AccumxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glAlphaFuncxOES, try loader("glAlphaFuncxOES"))) |ptr| {
            self.AlphaFuncxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glBitmapxOES, try loader("glBitmapxOES"))) |ptr| {
            self.BitmapxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glBlendColorxOES, try loader("glBlendColorxOES"))) |ptr| {
            self.BlendColorxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glClearAccumxOES, try loader("glClearAccumxOES"))) |ptr| {
            self.ClearAccumxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glClearColorxOES, try loader("glClearColorxOES"))) |ptr| {
            self.ClearColorxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glClearDepthxOES, try loader("glClearDepthxOES"))) |ptr| {
            self.ClearDepthxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glClipPlanexOES, try loader("glClipPlanexOES"))) |ptr| {
            self.ClipPlanexOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glColor3xOES, try loader("glColor3xOES"))) |ptr| {
            self.Color3xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glColor3xvOES, try loader("glColor3xvOES"))) |ptr| {
            self.Color3xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glColor4xOES, try loader("glColor4xOES"))) |ptr| {
            self.Color4xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glColor4xvOES, try loader("glColor4xvOES"))) |ptr| {
            self.Color4xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glConvolutionParameterxOES, try loader("glConvolutionParameterxOES"))) |ptr| {
            self.ConvolutionParameterxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glConvolutionParameterxvOES, try loader("glConvolutionParameterxvOES"))) |ptr| {
            self.ConvolutionParameterxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glDepthRangexOES, try loader("glDepthRangexOES"))) |ptr| {
            self.DepthRangexOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glEvalCoord1xOES, try loader("glEvalCoord1xOES"))) |ptr| {
            self.EvalCoord1xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glEvalCoord1xvOES, try loader("glEvalCoord1xvOES"))) |ptr| {
            self.EvalCoord1xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glEvalCoord2xOES, try loader("glEvalCoord2xOES"))) |ptr| {
            self.EvalCoord2xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glEvalCoord2xvOES, try loader("glEvalCoord2xvOES"))) |ptr| {
            self.EvalCoord2xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glFeedbackBufferxOES, try loader("glFeedbackBufferxOES"))) |ptr| {
            self.FeedbackBufferxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glFogxOES, try loader("glFogxOES"))) |ptr| {
            self.FogxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glFogxvOES, try loader("glFogxvOES"))) |ptr| {
            self.FogxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glFrustumxOES, try loader("glFrustumxOES"))) |ptr| {
            self.FrustumxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glGetClipPlanexOES, try loader("glGetClipPlanexOES"))) |ptr| {
            self.GetClipPlanexOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glGetConvolutionParameterxvOES, try loader("glGetConvolutionParameterxvOES"))) |ptr| {
            self.GetConvolutionParameterxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glGetFixedvOES, try loader("glGetFixedvOES"))) |ptr| {
            self.GetFixedvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glGetHistogramParameterxvOES, try loader("glGetHistogramParameterxvOES"))) |ptr| {
            self.GetHistogramParameterxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glGetLightxOES, try loader("glGetLightxOES"))) |ptr| {
            self.GetLightxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glGetMapxvOES, try loader("glGetMapxvOES"))) |ptr| {
            self.GetMapxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glGetMaterialxOES, try loader("glGetMaterialxOES"))) |ptr| {
            self.GetMaterialxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glGetPixelMapxv, try loader("glGetPixelMapxv"))) |ptr| {
            self.GetPixelMapxv = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glGetTexEnvxvOES, try loader("glGetTexEnvxvOES"))) |ptr| {
            self.GetTexEnvxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glGetTexGenxvOES, try loader("glGetTexGenxvOES"))) |ptr| {
            self.GetTexGenxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glGetTexLevelParameterxvOES, try loader("glGetTexLevelParameterxvOES"))) |ptr| {
            self.GetTexLevelParameterxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glGetTexParameterxvOES, try loader("glGetTexParameterxvOES"))) |ptr| {
            self.GetTexParameterxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glIndexxOES, try loader("glIndexxOES"))) |ptr| {
            self.IndexxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glIndexxvOES, try loader("glIndexxvOES"))) |ptr| {
            self.IndexxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glLightModelxOES, try loader("glLightModelxOES"))) |ptr| {
            self.LightModelxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glLightModelxvOES, try loader("glLightModelxvOES"))) |ptr| {
            self.LightModelxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glLightxOES, try loader("glLightxOES"))) |ptr| {
            self.LightxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glLightxvOES, try loader("glLightxvOES"))) |ptr| {
            self.LightxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glLineWidthxOES, try loader("glLineWidthxOES"))) |ptr| {
            self.LineWidthxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glLoadMatrixxOES, try loader("glLoadMatrixxOES"))) |ptr| {
            self.LoadMatrixxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glLoadTransposeMatrixxOES, try loader("glLoadTransposeMatrixxOES"))) |ptr| {
            self.LoadTransposeMatrixxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMap1xOES, try loader("glMap1xOES"))) |ptr| {
            self.Map1xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMap2xOES, try loader("glMap2xOES"))) |ptr| {
            self.Map2xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMapGrid1xOES, try loader("glMapGrid1xOES"))) |ptr| {
            self.MapGrid1xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMapGrid2xOES, try loader("glMapGrid2xOES"))) |ptr| {
            self.MapGrid2xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMaterialxOES, try loader("glMaterialxOES"))) |ptr| {
            self.MaterialxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMaterialxvOES, try loader("glMaterialxvOES"))) |ptr| {
            self.MaterialxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMultMatrixxOES, try loader("glMultMatrixxOES"))) |ptr| {
            self.MultMatrixxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMultTransposeMatrixxOES, try loader("glMultTransposeMatrixxOES"))) |ptr| {
            self.MultTransposeMatrixxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMultiTexCoord1xOES, try loader("glMultiTexCoord1xOES"))) |ptr| {
            self.MultiTexCoord1xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMultiTexCoord1xvOES, try loader("glMultiTexCoord1xvOES"))) |ptr| {
            self.MultiTexCoord1xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMultiTexCoord2xOES, try loader("glMultiTexCoord2xOES"))) |ptr| {
            self.MultiTexCoord2xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMultiTexCoord2xvOES, try loader("glMultiTexCoord2xvOES"))) |ptr| {
            self.MultiTexCoord2xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMultiTexCoord3xOES, try loader("glMultiTexCoord3xOES"))) |ptr| {
            self.MultiTexCoord3xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMultiTexCoord3xvOES, try loader("glMultiTexCoord3xvOES"))) |ptr| {
            self.MultiTexCoord3xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMultiTexCoord4xOES, try loader("glMultiTexCoord4xOES"))) |ptr| {
            self.MultiTexCoord4xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glMultiTexCoord4xvOES, try loader("glMultiTexCoord4xvOES"))) |ptr| {
            self.MultiTexCoord4xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glNormal3xOES, try loader("glNormal3xOES"))) |ptr| {
            self.Normal3xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glNormal3xvOES, try loader("glNormal3xvOES"))) |ptr| {
            self.Normal3xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glOrthoxOES, try loader("glOrthoxOES"))) |ptr| {
            self.OrthoxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glPassThroughxOES, try loader("glPassThroughxOES"))) |ptr| {
            self.PassThroughxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glPixelMapx, try loader("glPixelMapx"))) |ptr| {
            self.PixelMapx = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glPixelStorex, try loader("glPixelStorex"))) |ptr| {
            self.PixelStorex = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glPixelTransferxOES, try loader("glPixelTransferxOES"))) |ptr| {
            self.PixelTransferxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glPixelZoomxOES, try loader("glPixelZoomxOES"))) |ptr| {
            self.PixelZoomxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glPointParameterxvOES, try loader("glPointParameterxvOES"))) |ptr| {
            self.PointParameterxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glPointSizexOES, try loader("glPointSizexOES"))) |ptr| {
            self.PointSizexOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glPolygonOffsetxOES, try loader("glPolygonOffsetxOES"))) |ptr| {
            self.PolygonOffsetxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glPrioritizeTexturesxOES, try loader("glPrioritizeTexturesxOES"))) |ptr| {
            self.PrioritizeTexturesxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glRasterPos2xOES, try loader("glRasterPos2xOES"))) |ptr| {
            self.RasterPos2xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glRasterPos2xvOES, try loader("glRasterPos2xvOES"))) |ptr| {
            self.RasterPos2xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glRasterPos3xOES, try loader("glRasterPos3xOES"))) |ptr| {
            self.RasterPos3xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glRasterPos3xvOES, try loader("glRasterPos3xvOES"))) |ptr| {
            self.RasterPos3xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glRasterPos4xOES, try loader("glRasterPos4xOES"))) |ptr| {
            self.RasterPos4xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glRasterPos4xvOES, try loader("glRasterPos4xvOES"))) |ptr| {
            self.RasterPos4xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glRectxOES, try loader("glRectxOES"))) |ptr| {
            self.RectxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glRectxvOES, try loader("glRectxvOES"))) |ptr| {
            self.RectxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glRotatexOES, try loader("glRotatexOES"))) |ptr| {
            self.RotatexOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glScalexOES, try loader("glScalexOES"))) |ptr| {
            self.ScalexOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexCoord1xOES, try loader("glTexCoord1xOES"))) |ptr| {
            self.TexCoord1xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexCoord1xvOES, try loader("glTexCoord1xvOES"))) |ptr| {
            self.TexCoord1xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexCoord2xOES, try loader("glTexCoord2xOES"))) |ptr| {
            self.TexCoord2xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexCoord2xvOES, try loader("glTexCoord2xvOES"))) |ptr| {
            self.TexCoord2xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexCoord3xOES, try loader("glTexCoord3xOES"))) |ptr| {
            self.TexCoord3xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexCoord3xvOES, try loader("glTexCoord3xvOES"))) |ptr| {
            self.TexCoord3xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexCoord4xOES, try loader("glTexCoord4xOES"))) |ptr| {
            self.TexCoord4xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexCoord4xvOES, try loader("glTexCoord4xvOES"))) |ptr| {
            self.TexCoord4xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexEnvxOES, try loader("glTexEnvxOES"))) |ptr| {
            self.TexEnvxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexEnvxvOES, try loader("glTexEnvxvOES"))) |ptr| {
            self.TexEnvxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexGenxOES, try loader("glTexGenxOES"))) |ptr| {
            self.TexGenxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexGenxvOES, try loader("glTexGenxvOES"))) |ptr| {
            self.TexGenxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexParameterxOES, try loader("glTexParameterxOES"))) |ptr| {
            self.TexParameterxOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTexParameterxvOES, try loader("glTexParameterxvOES"))) |ptr| {
            self.TexParameterxvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glTranslatexOES, try loader("glTranslatexOES"))) |ptr| {
            self.TranslatexOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glVertex2xOES, try loader("glVertex2xOES"))) |ptr| {
            self.Vertex2xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glVertex2xvOES, try loader("glVertex2xvOES"))) |ptr| {
            self.Vertex2xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glVertex3xOES, try loader("glVertex3xOES"))) |ptr| {
            self.Vertex3xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glVertex3xvOES, try loader("glVertex3xvOES"))) |ptr| {
            self.Vertex3xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glVertex4xOES, try loader("glVertex4xOES"))) |ptr| {
            self.Vertex4xOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glVertex4xvOES, try loader("glVertex4xvOES"))) |ptr| {
            self.Vertex4xvOES = ptr;
        } else {
            self.features.GL_OES_fixed_point = false;
        }
        if (@ptrCast(?glQueryMatrixxOES, try loader("glQueryMatrixxOES"))) |ptr| {
            self.QueryMatrixxOES = ptr;
        } else {
            self.features.GL_OES_query_matrix = false;
        }
        if (@ptrCast(?glClearDepthfOES, try loader("glClearDepthfOES"))) |ptr| {
            self.ClearDepthfOES = ptr;
        } else {
            self.features.GL_OES_single_precision = false;
        }
        if (@ptrCast(?glClipPlanefOES, try loader("glClipPlanefOES"))) |ptr| {
            self.ClipPlanefOES = ptr;
        } else {
            self.features.GL_OES_single_precision = false;
        }
        if (@ptrCast(?glDepthRangefOES, try loader("glDepthRangefOES"))) |ptr| {
            self.DepthRangefOES = ptr;
        } else {
            self.features.GL_OES_single_precision = false;
        }
        if (@ptrCast(?glFrustumfOES, try loader("glFrustumfOES"))) |ptr| {
            self.FrustumfOES = ptr;
        } else {
            self.features.GL_OES_single_precision = false;
        }
        if (@ptrCast(?glGetClipPlanefOES, try loader("glGetClipPlanefOES"))) |ptr| {
            self.GetClipPlanefOES = ptr;
        } else {
            self.features.GL_OES_single_precision = false;
        }
        if (@ptrCast(?glOrthofOES, try loader("glOrthofOES"))) |ptr| {
            self.OrthofOES = ptr;
        } else {
            self.features.GL_OES_single_precision = false;
        }
        if (@ptrCast(?glFramebufferTextureMultiviewOVR, try loader("glFramebufferTextureMultiviewOVR"))) |ptr| {
            self.FramebufferTextureMultiviewOVR = ptr;
        } else {
            self.features.GL_OVR_multiview = false;
        }
        if (@ptrCast(?glHintPGI, try loader("glHintPGI"))) |ptr| {
            self.HintPGI = ptr;
        } else {
            self.features.GL_PGI_misc_hints = false;
        }
        if (@ptrCast(?glDetailTexFuncSGIS, try loader("glDetailTexFuncSGIS"))) |ptr| {
            self.DetailTexFuncSGIS = ptr;
        } else {
            self.features.GL_SGIS_detail_texture = false;
        }
        if (@ptrCast(?glGetDetailTexFuncSGIS, try loader("glGetDetailTexFuncSGIS"))) |ptr| {
            self.GetDetailTexFuncSGIS = ptr;
        } else {
            self.features.GL_SGIS_detail_texture = false;
        }
        if (@ptrCast(?glFogFuncSGIS, try loader("glFogFuncSGIS"))) |ptr| {
            self.FogFuncSGIS = ptr;
        } else {
            self.features.GL_SGIS_fog_function = false;
        }
        if (@ptrCast(?glGetFogFuncSGIS, try loader("glGetFogFuncSGIS"))) |ptr| {
            self.GetFogFuncSGIS = ptr;
        } else {
            self.features.GL_SGIS_fog_function = false;
        }
        if (@ptrCast(?glSampleMaskSGIS, try loader("glSampleMaskSGIS"))) |ptr| {
            self.SampleMaskSGIS = ptr;
        } else {
            self.features.GL_SGIS_multisample = false;
        }
        if (@ptrCast(?glSamplePatternSGIS, try loader("glSamplePatternSGIS"))) |ptr| {
            self.SamplePatternSGIS = ptr;
        } else {
            self.features.GL_SGIS_multisample = false;
        }
        if (@ptrCast(?glGetPixelTexGenParameterfvSGIS, try loader("glGetPixelTexGenParameterfvSGIS"))) |ptr| {
            self.GetPixelTexGenParameterfvSGIS = ptr;
        } else {
            self.features.GL_SGIS_pixel_texture = false;
        }
        if (@ptrCast(?glGetPixelTexGenParameterivSGIS, try loader("glGetPixelTexGenParameterivSGIS"))) |ptr| {
            self.GetPixelTexGenParameterivSGIS = ptr;
        } else {
            self.features.GL_SGIS_pixel_texture = false;
        }
        if (@ptrCast(?glPixelTexGenParameterfSGIS, try loader("glPixelTexGenParameterfSGIS"))) |ptr| {
            self.PixelTexGenParameterfSGIS = ptr;
        } else {
            self.features.GL_SGIS_pixel_texture = false;
        }
        if (@ptrCast(?glPixelTexGenParameterfvSGIS, try loader("glPixelTexGenParameterfvSGIS"))) |ptr| {
            self.PixelTexGenParameterfvSGIS = ptr;
        } else {
            self.features.GL_SGIS_pixel_texture = false;
        }
        if (@ptrCast(?glPixelTexGenParameteriSGIS, try loader("glPixelTexGenParameteriSGIS"))) |ptr| {
            self.PixelTexGenParameteriSGIS = ptr;
        } else {
            self.features.GL_SGIS_pixel_texture = false;
        }
        if (@ptrCast(?glPixelTexGenParameterivSGIS, try loader("glPixelTexGenParameterivSGIS"))) |ptr| {
            self.PixelTexGenParameterivSGIS = ptr;
        } else {
            self.features.GL_SGIS_pixel_texture = false;
        }
        if (@ptrCast(?glPointParameterfSGIS, try loader("glPointParameterfSGIS"))) |ptr| {
            self.PointParameterfSGIS = ptr;
        } else {
            self.features.GL_SGIS_point_parameters = false;
        }
        if (@ptrCast(?glPointParameterfvSGIS, try loader("glPointParameterfvSGIS"))) |ptr| {
            self.PointParameterfvSGIS = ptr;
        } else {
            self.features.GL_SGIS_point_parameters = false;
        }
        if (@ptrCast(?glGetSharpenTexFuncSGIS, try loader("glGetSharpenTexFuncSGIS"))) |ptr| {
            self.GetSharpenTexFuncSGIS = ptr;
        } else {
            self.features.GL_SGIS_sharpen_texture = false;
        }
        if (@ptrCast(?glSharpenTexFuncSGIS, try loader("glSharpenTexFuncSGIS"))) |ptr| {
            self.SharpenTexFuncSGIS = ptr;
        } else {
            self.features.GL_SGIS_sharpen_texture = false;
        }
        if (@ptrCast(?glTexImage4DSGIS, try loader("glTexImage4DSGIS"))) |ptr| {
            self.TexImage4DSGIS = ptr;
        } else {
            self.features.GL_SGIS_texture4D = false;
        }
        if (@ptrCast(?glTexSubImage4DSGIS, try loader("glTexSubImage4DSGIS"))) |ptr| {
            self.TexSubImage4DSGIS = ptr;
        } else {
            self.features.GL_SGIS_texture4D = false;
        }
        if (@ptrCast(?glTextureColorMaskSGIS, try loader("glTextureColorMaskSGIS"))) |ptr| {
            self.TextureColorMaskSGIS = ptr;
        } else {
            self.features.GL_SGIS_texture_color_mask = false;
        }
        if (@ptrCast(?glGetTexFilterFuncSGIS, try loader("glGetTexFilterFuncSGIS"))) |ptr| {
            self.GetTexFilterFuncSGIS = ptr;
        } else {
            self.features.GL_SGIS_texture_filter4 = false;
        }
        if (@ptrCast(?glTexFilterFuncSGIS, try loader("glTexFilterFuncSGIS"))) |ptr| {
            self.TexFilterFuncSGIS = ptr;
        } else {
            self.features.GL_SGIS_texture_filter4 = false;
        }
        if (@ptrCast(?glAsyncMarkerSGIX, try loader("glAsyncMarkerSGIX"))) |ptr| {
            self.AsyncMarkerSGIX = ptr;
        } else {
            self.features.GL_SGIX_async = false;
        }
        if (@ptrCast(?glDeleteAsyncMarkersSGIX, try loader("glDeleteAsyncMarkersSGIX"))) |ptr| {
            self.DeleteAsyncMarkersSGIX = ptr;
        } else {
            self.features.GL_SGIX_async = false;
        }
        if (@ptrCast(?glFinishAsyncSGIX, try loader("glFinishAsyncSGIX"))) |ptr| {
            self.FinishAsyncSGIX = ptr;
        } else {
            self.features.GL_SGIX_async = false;
        }
        if (@ptrCast(?glGenAsyncMarkersSGIX, try loader("glGenAsyncMarkersSGIX"))) |ptr| {
            self.GenAsyncMarkersSGIX = ptr;
        } else {
            self.features.GL_SGIX_async = false;
        }
        if (@ptrCast(?glIsAsyncMarkerSGIX, try loader("glIsAsyncMarkerSGIX"))) |ptr| {
            self.IsAsyncMarkerSGIX = ptr;
        } else {
            self.features.GL_SGIX_async = false;
        }
        if (@ptrCast(?glPollAsyncSGIX, try loader("glPollAsyncSGIX"))) |ptr| {
            self.PollAsyncSGIX = ptr;
        } else {
            self.features.GL_SGIX_async = false;
        }
        if (@ptrCast(?glFlushRasterSGIX, try loader("glFlushRasterSGIX"))) |ptr| {
            self.FlushRasterSGIX = ptr;
        } else {
            self.features.GL_SGIX_flush_raster = false;
        }
        if (@ptrCast(?glFragmentColorMaterialSGIX, try loader("glFragmentColorMaterialSGIX"))) |ptr| {
            self.FragmentColorMaterialSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glFragmentLightModelfSGIX, try loader("glFragmentLightModelfSGIX"))) |ptr| {
            self.FragmentLightModelfSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glFragmentLightModelfvSGIX, try loader("glFragmentLightModelfvSGIX"))) |ptr| {
            self.FragmentLightModelfvSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glFragmentLightModeliSGIX, try loader("glFragmentLightModeliSGIX"))) |ptr| {
            self.FragmentLightModeliSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glFragmentLightModelivSGIX, try loader("glFragmentLightModelivSGIX"))) |ptr| {
            self.FragmentLightModelivSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glFragmentLightfSGIX, try loader("glFragmentLightfSGIX"))) |ptr| {
            self.FragmentLightfSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glFragmentLightfvSGIX, try loader("glFragmentLightfvSGIX"))) |ptr| {
            self.FragmentLightfvSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glFragmentLightiSGIX, try loader("glFragmentLightiSGIX"))) |ptr| {
            self.FragmentLightiSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glFragmentLightivSGIX, try loader("glFragmentLightivSGIX"))) |ptr| {
            self.FragmentLightivSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glFragmentMaterialfSGIX, try loader("glFragmentMaterialfSGIX"))) |ptr| {
            self.FragmentMaterialfSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glFragmentMaterialfvSGIX, try loader("glFragmentMaterialfvSGIX"))) |ptr| {
            self.FragmentMaterialfvSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glFragmentMaterialiSGIX, try loader("glFragmentMaterialiSGIX"))) |ptr| {
            self.FragmentMaterialiSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glFragmentMaterialivSGIX, try loader("glFragmentMaterialivSGIX"))) |ptr| {
            self.FragmentMaterialivSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glGetFragmentLightfvSGIX, try loader("glGetFragmentLightfvSGIX"))) |ptr| {
            self.GetFragmentLightfvSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glGetFragmentLightivSGIX, try loader("glGetFragmentLightivSGIX"))) |ptr| {
            self.GetFragmentLightivSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glGetFragmentMaterialfvSGIX, try loader("glGetFragmentMaterialfvSGIX"))) |ptr| {
            self.GetFragmentMaterialfvSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glGetFragmentMaterialivSGIX, try loader("glGetFragmentMaterialivSGIX"))) |ptr| {
            self.GetFragmentMaterialivSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glLightEnviSGIX, try loader("glLightEnviSGIX"))) |ptr| {
            self.LightEnviSGIX = ptr;
        } else {
            self.features.GL_SGIX_fragment_lighting = false;
        }
        if (@ptrCast(?glFrameZoomSGIX, try loader("glFrameZoomSGIX"))) |ptr| {
            self.FrameZoomSGIX = ptr;
        } else {
            self.features.GL_SGIX_framezoom = false;
        }
        if (@ptrCast(?glIglooInterfaceSGIX, try loader("glIglooInterfaceSGIX"))) |ptr| {
            self.IglooInterfaceSGIX = ptr;
        } else {
            self.features.GL_SGIX_igloo_interface = false;
        }
        if (@ptrCast(?glGetInstrumentsSGIX, try loader("glGetInstrumentsSGIX"))) |ptr| {
            self.GetInstrumentsSGIX = ptr;
        } else {
            self.features.GL_SGIX_instruments = false;
        }
        if (@ptrCast(?glInstrumentsBufferSGIX, try loader("glInstrumentsBufferSGIX"))) |ptr| {
            self.InstrumentsBufferSGIX = ptr;
        } else {
            self.features.GL_SGIX_instruments = false;
        }
        if (@ptrCast(?glPollInstrumentsSGIX, try loader("glPollInstrumentsSGIX"))) |ptr| {
            self.PollInstrumentsSGIX = ptr;
        } else {
            self.features.GL_SGIX_instruments = false;
        }
        if (@ptrCast(?glReadInstrumentsSGIX, try loader("glReadInstrumentsSGIX"))) |ptr| {
            self.ReadInstrumentsSGIX = ptr;
        } else {
            self.features.GL_SGIX_instruments = false;
        }
        if (@ptrCast(?glStartInstrumentsSGIX, try loader("glStartInstrumentsSGIX"))) |ptr| {
            self.StartInstrumentsSGIX = ptr;
        } else {
            self.features.GL_SGIX_instruments = false;
        }
        if (@ptrCast(?glStopInstrumentsSGIX, try loader("glStopInstrumentsSGIX"))) |ptr| {
            self.StopInstrumentsSGIX = ptr;
        } else {
            self.features.GL_SGIX_instruments = false;
        }
        if (@ptrCast(?glGetListParameterfvSGIX, try loader("glGetListParameterfvSGIX"))) |ptr| {
            self.GetListParameterfvSGIX = ptr;
        } else {
            self.features.GL_SGIX_list_priority = false;
        }
        if (@ptrCast(?glGetListParameterivSGIX, try loader("glGetListParameterivSGIX"))) |ptr| {
            self.GetListParameterivSGIX = ptr;
        } else {
            self.features.GL_SGIX_list_priority = false;
        }
        if (@ptrCast(?glListParameterfSGIX, try loader("glListParameterfSGIX"))) |ptr| {
            self.ListParameterfSGIX = ptr;
        } else {
            self.features.GL_SGIX_list_priority = false;
        }
        if (@ptrCast(?glListParameterfvSGIX, try loader("glListParameterfvSGIX"))) |ptr| {
            self.ListParameterfvSGIX = ptr;
        } else {
            self.features.GL_SGIX_list_priority = false;
        }
        if (@ptrCast(?glListParameteriSGIX, try loader("glListParameteriSGIX"))) |ptr| {
            self.ListParameteriSGIX = ptr;
        } else {
            self.features.GL_SGIX_list_priority = false;
        }
        if (@ptrCast(?glListParameterivSGIX, try loader("glListParameterivSGIX"))) |ptr| {
            self.ListParameterivSGIX = ptr;
        } else {
            self.features.GL_SGIX_list_priority = false;
        }
        if (@ptrCast(?glPixelTexGenSGIX, try loader("glPixelTexGenSGIX"))) |ptr| {
            self.PixelTexGenSGIX = ptr;
        } else {
            self.features.GL_SGIX_pixel_texture = false;
        }
        if (@ptrCast(?glDeformSGIX, try loader("glDeformSGIX"))) |ptr| {
            self.DeformSGIX = ptr;
        } else {
            self.features.GL_SGIX_polynomial_ffd = false;
        }
        if (@ptrCast(?glDeformationMap3dSGIX, try loader("glDeformationMap3dSGIX"))) |ptr| {
            self.DeformationMap3dSGIX = ptr;
        } else {
            self.features.GL_SGIX_polynomial_ffd = false;
        }
        if (@ptrCast(?glDeformationMap3fSGIX, try loader("glDeformationMap3fSGIX"))) |ptr| {
            self.DeformationMap3fSGIX = ptr;
        } else {
            self.features.GL_SGIX_polynomial_ffd = false;
        }
        if (@ptrCast(?glLoadIdentityDeformationMapSGIX, try loader("glLoadIdentityDeformationMapSGIX"))) |ptr| {
            self.LoadIdentityDeformationMapSGIX = ptr;
        } else {
            self.features.GL_SGIX_polynomial_ffd = false;
        }
        if (@ptrCast(?glReferencePlaneSGIX, try loader("glReferencePlaneSGIX"))) |ptr| {
            self.ReferencePlaneSGIX = ptr;
        } else {
            self.features.GL_SGIX_reference_plane = false;
        }
        if (@ptrCast(?glSpriteParameterfSGIX, try loader("glSpriteParameterfSGIX"))) |ptr| {
            self.SpriteParameterfSGIX = ptr;
        } else {
            self.features.GL_SGIX_sprite = false;
        }
        if (@ptrCast(?glSpriteParameterfvSGIX, try loader("glSpriteParameterfvSGIX"))) |ptr| {
            self.SpriteParameterfvSGIX = ptr;
        } else {
            self.features.GL_SGIX_sprite = false;
        }
        if (@ptrCast(?glSpriteParameteriSGIX, try loader("glSpriteParameteriSGIX"))) |ptr| {
            self.SpriteParameteriSGIX = ptr;
        } else {
            self.features.GL_SGIX_sprite = false;
        }
        if (@ptrCast(?glSpriteParameterivSGIX, try loader("glSpriteParameterivSGIX"))) |ptr| {
            self.SpriteParameterivSGIX = ptr;
        } else {
            self.features.GL_SGIX_sprite = false;
        }
        if (@ptrCast(?glTagSampleBufferSGIX, try loader("glTagSampleBufferSGIX"))) |ptr| {
            self.TagSampleBufferSGIX = ptr;
        } else {
            self.features.GL_SGIX_tag_sample_buffer = false;
        }
        if (@ptrCast(?glColorTableParameterfvSGI, try loader("glColorTableParameterfvSGI"))) |ptr| {
            self.ColorTableParameterfvSGI = ptr;
        } else {
            self.features.GL_SGI_color_table = false;
        }
        if (@ptrCast(?glColorTableParameterivSGI, try loader("glColorTableParameterivSGI"))) |ptr| {
            self.ColorTableParameterivSGI = ptr;
        } else {
            self.features.GL_SGI_color_table = false;
        }
        if (@ptrCast(?glColorTableSGI, try loader("glColorTableSGI"))) |ptr| {
            self.ColorTableSGI = ptr;
        } else {
            self.features.GL_SGI_color_table = false;
        }
        if (@ptrCast(?glCopyColorTableSGI, try loader("glCopyColorTableSGI"))) |ptr| {
            self.CopyColorTableSGI = ptr;
        } else {
            self.features.GL_SGI_color_table = false;
        }
        if (@ptrCast(?glGetColorTableParameterfvSGI, try loader("glGetColorTableParameterfvSGI"))) |ptr| {
            self.GetColorTableParameterfvSGI = ptr;
        } else {
            self.features.GL_SGI_color_table = false;
        }
        if (@ptrCast(?glGetColorTableParameterivSGI, try loader("glGetColorTableParameterivSGI"))) |ptr| {
            self.GetColorTableParameterivSGI = ptr;
        } else {
            self.features.GL_SGI_color_table = false;
        }
        if (@ptrCast(?glGetColorTableSGI, try loader("glGetColorTableSGI"))) |ptr| {
            self.GetColorTableSGI = ptr;
        } else {
            self.features.GL_SGI_color_table = false;
        }
        if (@ptrCast(?glFinishTextureSUNX, try loader("glFinishTextureSUNX"))) |ptr| {
            self.FinishTextureSUNX = ptr;
        } else {
            self.features.GL_SUNX_constant_data = false;
        }
        if (@ptrCast(?glGlobalAlphaFactorbSUN, try loader("glGlobalAlphaFactorbSUN"))) |ptr| {
            self.GlobalAlphaFactorbSUN = ptr;
        } else {
            self.features.GL_SUN_global_alpha = false;
        }
        if (@ptrCast(?glGlobalAlphaFactordSUN, try loader("glGlobalAlphaFactordSUN"))) |ptr| {
            self.GlobalAlphaFactordSUN = ptr;
        } else {
            self.features.GL_SUN_global_alpha = false;
        }
        if (@ptrCast(?glGlobalAlphaFactorfSUN, try loader("glGlobalAlphaFactorfSUN"))) |ptr| {
            self.GlobalAlphaFactorfSUN = ptr;
        } else {
            self.features.GL_SUN_global_alpha = false;
        }
        if (@ptrCast(?glGlobalAlphaFactoriSUN, try loader("glGlobalAlphaFactoriSUN"))) |ptr| {
            self.GlobalAlphaFactoriSUN = ptr;
        } else {
            self.features.GL_SUN_global_alpha = false;
        }
        if (@ptrCast(?glGlobalAlphaFactorsSUN, try loader("glGlobalAlphaFactorsSUN"))) |ptr| {
            self.GlobalAlphaFactorsSUN = ptr;
        } else {
            self.features.GL_SUN_global_alpha = false;
        }
        if (@ptrCast(?glGlobalAlphaFactorubSUN, try loader("glGlobalAlphaFactorubSUN"))) |ptr| {
            self.GlobalAlphaFactorubSUN = ptr;
        } else {
            self.features.GL_SUN_global_alpha = false;
        }
        if (@ptrCast(?glGlobalAlphaFactoruiSUN, try loader("glGlobalAlphaFactoruiSUN"))) |ptr| {
            self.GlobalAlphaFactoruiSUN = ptr;
        } else {
            self.features.GL_SUN_global_alpha = false;
        }
        if (@ptrCast(?glGlobalAlphaFactorusSUN, try loader("glGlobalAlphaFactorusSUN"))) |ptr| {
            self.GlobalAlphaFactorusSUN = ptr;
        } else {
            self.features.GL_SUN_global_alpha = false;
        }
        if (@ptrCast(?glDrawMeshArraysSUN, try loader("glDrawMeshArraysSUN"))) |ptr| {
            self.DrawMeshArraysSUN = ptr;
        } else {
            self.features.GL_SUN_mesh_array = false;
        }
        if (@ptrCast(?glReplacementCodePointerSUN, try loader("glReplacementCodePointerSUN"))) |ptr| {
            self.ReplacementCodePointerSUN = ptr;
        } else {
            self.features.GL_SUN_triangle_list = false;
        }
        if (@ptrCast(?glReplacementCodeubSUN, try loader("glReplacementCodeubSUN"))) |ptr| {
            self.ReplacementCodeubSUN = ptr;
        } else {
            self.features.GL_SUN_triangle_list = false;
        }
        if (@ptrCast(?glReplacementCodeubvSUN, try loader("glReplacementCodeubvSUN"))) |ptr| {
            self.ReplacementCodeubvSUN = ptr;
        } else {
            self.features.GL_SUN_triangle_list = false;
        }
        if (@ptrCast(?glReplacementCodeuiSUN, try loader("glReplacementCodeuiSUN"))) |ptr| {
            self.ReplacementCodeuiSUN = ptr;
        } else {
            self.features.GL_SUN_triangle_list = false;
        }
        if (@ptrCast(?glReplacementCodeuivSUN, try loader("glReplacementCodeuivSUN"))) |ptr| {
            self.ReplacementCodeuivSUN = ptr;
        } else {
            self.features.GL_SUN_triangle_list = false;
        }
        if (@ptrCast(?glReplacementCodeusSUN, try loader("glReplacementCodeusSUN"))) |ptr| {
            self.ReplacementCodeusSUN = ptr;
        } else {
            self.features.GL_SUN_triangle_list = false;
        }
        if (@ptrCast(?glReplacementCodeusvSUN, try loader("glReplacementCodeusvSUN"))) |ptr| {
            self.ReplacementCodeusvSUN = ptr;
        } else {
            self.features.GL_SUN_triangle_list = false;
        }
        if (@ptrCast(?glColor3fVertex3fSUN, try loader("glColor3fVertex3fSUN"))) |ptr| {
            self.Color3fVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glColor3fVertex3fvSUN, try loader("glColor3fVertex3fvSUN"))) |ptr| {
            self.Color3fVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glColor4fNormal3fVertex3fSUN, try loader("glColor4fNormal3fVertex3fSUN"))) |ptr| {
            self.Color4fNormal3fVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glColor4fNormal3fVertex3fvSUN, try loader("glColor4fNormal3fVertex3fvSUN"))) |ptr| {
            self.Color4fNormal3fVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glColor4ubVertex2fSUN, try loader("glColor4ubVertex2fSUN"))) |ptr| {
            self.Color4ubVertex2fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glColor4ubVertex2fvSUN, try loader("glColor4ubVertex2fvSUN"))) |ptr| {
            self.Color4ubVertex2fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glColor4ubVertex3fSUN, try loader("glColor4ubVertex3fSUN"))) |ptr| {
            self.Color4ubVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glColor4ubVertex3fvSUN, try loader("glColor4ubVertex3fvSUN"))) |ptr| {
            self.Color4ubVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glNormal3fVertex3fSUN, try loader("glNormal3fVertex3fSUN"))) |ptr| {
            self.Normal3fVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glNormal3fVertex3fvSUN, try loader("glNormal3fVertex3fvSUN"))) |ptr| {
            self.Normal3fVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiColor3fVertex3fSUN, try loader("glReplacementCodeuiColor3fVertex3fSUN"))) |ptr| {
            self.ReplacementCodeuiColor3fVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiColor3fVertex3fvSUN, try loader("glReplacementCodeuiColor3fVertex3fvSUN"))) |ptr| {
            self.ReplacementCodeuiColor3fVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiColor4fNormal3fVertex3fSUN, try loader("glReplacementCodeuiColor4fNormal3fVertex3fSUN"))) |ptr| {
            self.ReplacementCodeuiColor4fNormal3fVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiColor4fNormal3fVertex3fvSUN, try loader("glReplacementCodeuiColor4fNormal3fVertex3fvSUN"))) |ptr| {
            self.ReplacementCodeuiColor4fNormal3fVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiColor4ubVertex3fSUN, try loader("glReplacementCodeuiColor4ubVertex3fSUN"))) |ptr| {
            self.ReplacementCodeuiColor4ubVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiColor4ubVertex3fvSUN, try loader("glReplacementCodeuiColor4ubVertex3fvSUN"))) |ptr| {
            self.ReplacementCodeuiColor4ubVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiNormal3fVertex3fSUN, try loader("glReplacementCodeuiNormal3fVertex3fSUN"))) |ptr| {
            self.ReplacementCodeuiNormal3fVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiNormal3fVertex3fvSUN, try loader("glReplacementCodeuiNormal3fVertex3fvSUN"))) |ptr| {
            self.ReplacementCodeuiNormal3fVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, try loader("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"))) |ptr| {
            self.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, try loader("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"))) |ptr| {
            self.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, try loader("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"))) |ptr| {
            self.ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, try loader("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"))) |ptr| {
            self.ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiTexCoord2fVertex3fSUN, try loader("glReplacementCodeuiTexCoord2fVertex3fSUN"))) |ptr| {
            self.ReplacementCodeuiTexCoord2fVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiTexCoord2fVertex3fvSUN, try loader("glReplacementCodeuiTexCoord2fVertex3fvSUN"))) |ptr| {
            self.ReplacementCodeuiTexCoord2fVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiVertex3fSUN, try loader("glReplacementCodeuiVertex3fSUN"))) |ptr| {
            self.ReplacementCodeuiVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glReplacementCodeuiVertex3fvSUN, try loader("glReplacementCodeuiVertex3fvSUN"))) |ptr| {
            self.ReplacementCodeuiVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord2fColor3fVertex3fSUN, try loader("glTexCoord2fColor3fVertex3fSUN"))) |ptr| {
            self.TexCoord2fColor3fVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord2fColor3fVertex3fvSUN, try loader("glTexCoord2fColor3fVertex3fvSUN"))) |ptr| {
            self.TexCoord2fColor3fVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord2fColor4fNormal3fVertex3fSUN, try loader("glTexCoord2fColor4fNormal3fVertex3fSUN"))) |ptr| {
            self.TexCoord2fColor4fNormal3fVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord2fColor4fNormal3fVertex3fvSUN, try loader("glTexCoord2fColor4fNormal3fVertex3fvSUN"))) |ptr| {
            self.TexCoord2fColor4fNormal3fVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord2fColor4ubVertex3fSUN, try loader("glTexCoord2fColor4ubVertex3fSUN"))) |ptr| {
            self.TexCoord2fColor4ubVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord2fColor4ubVertex3fvSUN, try loader("glTexCoord2fColor4ubVertex3fvSUN"))) |ptr| {
            self.TexCoord2fColor4ubVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord2fNormal3fVertex3fSUN, try loader("glTexCoord2fNormal3fVertex3fSUN"))) |ptr| {
            self.TexCoord2fNormal3fVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord2fNormal3fVertex3fvSUN, try loader("glTexCoord2fNormal3fVertex3fvSUN"))) |ptr| {
            self.TexCoord2fNormal3fVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord2fVertex3fSUN, try loader("glTexCoord2fVertex3fSUN"))) |ptr| {
            self.TexCoord2fVertex3fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord2fVertex3fvSUN, try loader("glTexCoord2fVertex3fvSUN"))) |ptr| {
            self.TexCoord2fVertex3fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord4fColor4fNormal3fVertex4fSUN, try loader("glTexCoord4fColor4fNormal3fVertex4fSUN"))) |ptr| {
            self.TexCoord4fColor4fNormal3fVertex4fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord4fColor4fNormal3fVertex4fvSUN, try loader("glTexCoord4fColor4fNormal3fVertex4fvSUN"))) |ptr| {
            self.TexCoord4fColor4fNormal3fVertex4fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord4fVertex4fSUN, try loader("glTexCoord4fVertex4fSUN"))) |ptr| {
            self.TexCoord4fVertex4fSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
        if (@ptrCast(?glTexCoord4fVertex4fvSUN, try loader("glTexCoord4fVertex4fvSUN"))) |ptr| {
            self.TexCoord4fVertex4fvSUN = ptr;
        } else {
            self.features.GL_SUN_vertex = false;
        }
    }
};

pub var gl_context: gl = .{};
